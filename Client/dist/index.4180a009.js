(function () {
function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
}
var $parcel$global =
typeof globalThis !== 'undefined'
  ? globalThis
  : typeof self !== 'undefined'
  ? self
  : typeof window !== 'undefined'
  ? window
  : typeof global !== 'undefined'
  ? global
  : {};
function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}
var $parcel$modules = {};
var $parcel$inits = {};

var parcelRequire = $parcel$global["parcelRequiree6e2"];
if (parcelRequire == null) {
  parcelRequire = function(id) {
    if (id in $parcel$modules) {
      return $parcel$modules[id].exports;
    }
    if (id in $parcel$inits) {
      var init = $parcel$inits[id];
      delete $parcel$inits[id];
      var module = {id: id, exports: {}};
      $parcel$modules[id] = module;
      init.call(module.exports, module, module.exports);
      return module.exports;
    }
    var err = new Error("Cannot find module '" + id + "'");
    err.code = 'MODULE_NOT_FOUND';
    throw err;
  };

  parcelRequire.register = function register(id, init) {
    $parcel$inits[id] = init;
  };

  $parcel$global["parcelRequiree6e2"] = parcelRequire;
}
parcelRequire.register("9u2OH", function(module, exports) {

$parcel$export(module.exports, "register", function () { return $6e7919c1fec8d9f6$export$6503ec6e8aabbaf; }, function (v) { return $6e7919c1fec8d9f6$export$6503ec6e8aabbaf = v; });
$parcel$export(module.exports, "resolve", function () { return $6e7919c1fec8d9f6$export$f7ad0328861e2f03; }, function (v) { return $6e7919c1fec8d9f6$export$f7ad0328861e2f03 = v; });
var $6e7919c1fec8d9f6$export$6503ec6e8aabbaf;
var $6e7919c1fec8d9f6$export$f7ad0328861e2f03;
"use strict";
var $6e7919c1fec8d9f6$var$mapping = {};
function $6e7919c1fec8d9f6$var$register(pairs) {
    var keys = Object.keys(pairs);
    for(var i = 0; i < keys.length; i++)$6e7919c1fec8d9f6$var$mapping[keys[i]] = pairs[keys[i]];
}
function $6e7919c1fec8d9f6$var$resolve(id) {
    var resolved = $6e7919c1fec8d9f6$var$mapping[id];
    if (resolved == null) throw new Error("Could not resolve bundle with id " + id);
    return resolved;
}
$6e7919c1fec8d9f6$export$6503ec6e8aabbaf = $6e7919c1fec8d9f6$var$register;
$6e7919c1fec8d9f6$export$f7ad0328861e2f03 = $6e7919c1fec8d9f6$var$resolve;

});

parcelRequire.register("2xZ2z", function(module, exports) {
(function() {
    /** Used as a safe reference for `undefined` in pre-ES5 environments. */ var undefined;
    /** Used as the semantic version number. */ var VERSION = "4.17.21";
    /** Used as the size to enable large array optimizations. */ var LARGE_ARRAY_SIZE = 200;
    /** Error message constants. */ var CORE_ERROR_TEXT = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", FUNC_ERROR_TEXT = "Expected a function", INVALID_TEMPL_VAR_ERROR_TEXT = "Invalid `variable` option passed into `_.template`";
    /** Used to stand-in for `undefined` hash values. */ var HASH_UNDEFINED = "__lodash_hash_undefined__";
    /** Used as the maximum memoize cache size. */ var MAX_MEMOIZE_SIZE = 500;
    /** Used as the internal argument placeholder. */ var PLACEHOLDER = "__lodash_placeholder__";
    /** Used to compose bitmasks for cloning. */ var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
    /** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
    /** Used to compose bitmasks for function metadata. */ var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
    /** Used as default options for `_.truncate`. */ var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = "...";
    /** Used to detect hot functions by number of calls within a span of milliseconds. */ var HOT_COUNT = 800, HOT_SPAN = 16;
    /** Used to indicate the type of lazy iteratees. */ var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
    /** Used as references for various `Number` constants. */ var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 1.7976931348623157e+308, NAN = 0 / 0;
    /** Used as references for the maximum length and index of an array. */ var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
    /** Used to associate wrap methods with their bit flags. */ var wrapFlags = [
        [
            "ary",
            WRAP_ARY_FLAG
        ],
        [
            "bind",
            WRAP_BIND_FLAG
        ],
        [
            "bindKey",
            WRAP_BIND_KEY_FLAG
        ],
        [
            "curry",
            WRAP_CURRY_FLAG
        ],
        [
            "curryRight",
            WRAP_CURRY_RIGHT_FLAG
        ],
        [
            "flip",
            WRAP_FLIP_FLAG
        ],
        [
            "partial",
            WRAP_PARTIAL_FLAG
        ],
        [
            "partialRight",
            WRAP_PARTIAL_RIGHT_FLAG
        ],
        [
            "rearg",
            WRAP_REARG_FLAG
        ]
    ];
    /** `Object#toString` result references. */ var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", domExcTag = "[object DOMException]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag = "[object Null]", objectTag = "[object Object]", promiseTag = "[object Promise]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]", weakSetTag = "[object WeakSet]";
    var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
    /** Used to match empty string literals in compiled template source. */ var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
    /** Used to match HTML entities and HTML characters. */ var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
    /** Used to match template delimiters. */ var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
    /** Used to match property names within property paths. */ var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */ var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
    /** Used to match leading whitespace. */ var reTrimStart = /^\s+/;
    /** Used to match a single whitespace character. */ var reWhitespace = /\s/;
    /** Used to match wrap detail comments. */ var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
    /** Used to match words composed of alphanumeric characters. */ var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
    /**
   * Used to validate the `validate` option in `_.template` variable.
   *
   * Forbids characters which could potentially change the meaning of the function argument definition:
   * - "()," (modification of function parameters)
   * - "=" (default value)
   * - "[]{}" (destructuring of function parameters)
   * - "/" (beginning of a comment)
   * - whitespace
   */ var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
    /** Used to match backslashes in property paths. */ var reEscapeChar = /\\(\\)?/g;
    /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */ var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
    /** Used to match `RegExp` flags from their coerced string values. */ var reFlags = /\w*$/;
    /** Used to detect bad signed hexadecimal string values. */ var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    /** Used to detect binary string values. */ var reIsBinary = /^0b[01]+$/i;
    /** Used to detect host constructors (Safari). */ var reIsHostCtor = /^\[object .+?Constructor\]$/;
    /** Used to detect octal string values. */ var reIsOctal = /^0o[0-7]+$/i;
    /** Used to detect unsigned integer values. */ var reIsUint = /^(?:0|[1-9]\d*)$/;
    /** Used to match Latin Unicode letters (excluding mathematical operators). */ var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
    /** Used to ensure capturing order of template delimiters. */ var reNoMatch = /($^)/;
    /** Used to match unescaped characters in compiled string literals. */ var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
    /** Used to compose unicode character classes. */ var rsAstralRange = "\ud800-\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
    /** Used to compose unicode capture groups. */ var rsApos = "['’]", rsAstral = "[" + rsAstralRange + "]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboRange + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz = "\ud83c[\udffb-\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\ud83c[\udde6-\uddff]){2}", rsSurrPair = "[\ud800-\udbff][\udc00-\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ = "\\u200d";
    /** Used to compose unicode regexes. */ var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?", reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [
        rsNonAstral,
        rsRegional,
        rsSurrPair
    ].join("|") + ")" + rsOptVar + reOptMod + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = "(?:" + [
        rsDingbat,
        rsRegional,
        rsSurrPair
    ].join("|") + ")" + rsSeq, rsSymbol = "(?:" + [
        rsNonAstral + rsCombo + "?",
        rsCombo,
        rsRegional,
        rsSurrPair,
        rsAstral
    ].join("|") + ")";
    /** Used to match apostrophes. */ var reApos = RegExp(rsApos, "g");
    /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */ var reComboMark = RegExp(rsCombo, "g");
    /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */ var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
    /** Used to match complex or compound words. */ var reUnicodeWord = RegExp([
        rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [
            rsBreak,
            rsUpper,
            "$"
        ].join("|") + ")",
        rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [
            rsBreak,
            rsUpper + rsMiscLower,
            "$"
        ].join("|") + ")",
        rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
        rsUpper + "+" + rsOptContrUpper,
        rsOrdUpper,
        rsOrdLower,
        rsDigits,
        rsEmoji
    ].join("|"), "g");
    /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */ var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
    /** Used to detect strings that need a more robust regexp to match words. */ var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
    /** Used to assign default `context` object properties. */ var contextProps = [
        "Array",
        "Buffer",
        "DataView",
        "Date",
        "Error",
        "Float32Array",
        "Float64Array",
        "Function",
        "Int8Array",
        "Int16Array",
        "Int32Array",
        "Map",
        "Math",
        "Object",
        "Promise",
        "RegExp",
        "Set",
        "String",
        "Symbol",
        "TypeError",
        "Uint8Array",
        "Uint8ClampedArray",
        "Uint16Array",
        "Uint32Array",
        "WeakMap",
        "_",
        "clearTimeout",
        "isFinite",
        "parseInt",
        "setTimeout"
    ];
    /** Used to make template sourceURLs easier to identify. */ var templateCounter = -1;
    /** Used to identify `toStringTag` values of typed arrays. */ var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    /** Used to identify `toStringTag` values supported by `_.clone`. */ var cloneableTags = {};
    cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
    /** Used to map Latin Unicode letters to basic Latin letters. */ var deburredLetters = {
        // Latin-1 Supplement block.
        "\xc0": "A",
        "\xc1": "A",
        "\xc2": "A",
        "\xc3": "A",
        "\xc4": "A",
        "\xc5": "A",
        "\xe0": "a",
        "\xe1": "a",
        "\xe2": "a",
        "\xe3": "a",
        "\xe4": "a",
        "\xe5": "a",
        "\xc7": "C",
        "\xe7": "c",
        "\xd0": "D",
        "\xf0": "d",
        "\xc8": "E",
        "\xc9": "E",
        "\xca": "E",
        "\xcb": "E",
        "\xe8": "e",
        "\xe9": "e",
        "\xea": "e",
        "\xeb": "e",
        "\xcc": "I",
        "\xcd": "I",
        "\xce": "I",
        "\xcf": "I",
        "\xec": "i",
        "\xed": "i",
        "\xee": "i",
        "\xef": "i",
        "\xd1": "N",
        "\xf1": "n",
        "\xd2": "O",
        "\xd3": "O",
        "\xd4": "O",
        "\xd5": "O",
        "\xd6": "O",
        "\xd8": "O",
        "\xf2": "o",
        "\xf3": "o",
        "\xf4": "o",
        "\xf5": "o",
        "\xf6": "o",
        "\xf8": "o",
        "\xd9": "U",
        "\xda": "U",
        "\xdb": "U",
        "\xdc": "U",
        "\xf9": "u",
        "\xfa": "u",
        "\xfb": "u",
        "\xfc": "u",
        "\xdd": "Y",
        "\xfd": "y",
        "\xff": "y",
        "\xc6": "Ae",
        "\xe6": "ae",
        "\xde": "Th",
        "\xfe": "th",
        "\xdf": "ss",
        // Latin Extended-A block.
        "Ā": "A",
        "Ă": "A",
        "Ą": "A",
        "ā": "a",
        "ă": "a",
        "ą": "a",
        "Ć": "C",
        "Ĉ": "C",
        "Ċ": "C",
        "Č": "C",
        "ć": "c",
        "ĉ": "c",
        "ċ": "c",
        "č": "c",
        "Ď": "D",
        "Đ": "D",
        "ď": "d",
        "đ": "d",
        "Ē": "E",
        "Ĕ": "E",
        "Ė": "E",
        "Ę": "E",
        "Ě": "E",
        "ē": "e",
        "ĕ": "e",
        "ė": "e",
        "ę": "e",
        "ě": "e",
        "Ĝ": "G",
        "Ğ": "G",
        "Ġ": "G",
        "Ģ": "G",
        "ĝ": "g",
        "ğ": "g",
        "ġ": "g",
        "ģ": "g",
        "Ĥ": "H",
        "Ħ": "H",
        "ĥ": "h",
        "ħ": "h",
        "Ĩ": "I",
        "Ī": "I",
        "Ĭ": "I",
        "Į": "I",
        "İ": "I",
        "ĩ": "i",
        "ī": "i",
        "ĭ": "i",
        "į": "i",
        "ı": "i",
        "Ĵ": "J",
        "ĵ": "j",
        "Ķ": "K",
        "ķ": "k",
        "ĸ": "k",
        "Ĺ": "L",
        "Ļ": "L",
        "Ľ": "L",
        "Ŀ": "L",
        "Ł": "L",
        "ĺ": "l",
        "ļ": "l",
        "ľ": "l",
        "ŀ": "l",
        "ł": "l",
        "Ń": "N",
        "Ņ": "N",
        "Ň": "N",
        "Ŋ": "N",
        "ń": "n",
        "ņ": "n",
        "ň": "n",
        "ŋ": "n",
        "Ō": "O",
        "Ŏ": "O",
        "Ő": "O",
        "ō": "o",
        "ŏ": "o",
        "ő": "o",
        "Ŕ": "R",
        "Ŗ": "R",
        "Ř": "R",
        "ŕ": "r",
        "ŗ": "r",
        "ř": "r",
        "Ś": "S",
        "Ŝ": "S",
        "Ş": "S",
        "Š": "S",
        "ś": "s",
        "ŝ": "s",
        "ş": "s",
        "š": "s",
        "Ţ": "T",
        "Ť": "T",
        "Ŧ": "T",
        "ţ": "t",
        "ť": "t",
        "ŧ": "t",
        "Ũ": "U",
        "Ū": "U",
        "Ŭ": "U",
        "Ů": "U",
        "Ű": "U",
        "Ų": "U",
        "ũ": "u",
        "ū": "u",
        "ŭ": "u",
        "ů": "u",
        "ű": "u",
        "ų": "u",
        "Ŵ": "W",
        "ŵ": "w",
        "Ŷ": "Y",
        "ŷ": "y",
        "Ÿ": "Y",
        "Ź": "Z",
        "Ż": "Z",
        "Ž": "Z",
        "ź": "z",
        "ż": "z",
        "ž": "z",
        "Ĳ": "IJ",
        "ĳ": "ij",
        "Œ": "Oe",
        "œ": "oe",
        "ŉ": "'n",
        "ſ": "s"
    };
    /** Used to map characters to HTML entities. */ var htmlEscapes = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#39;"
    };
    /** Used to map HTML entities to characters. */ var htmlUnescapes = {
        "&amp;": "&",
        "&lt;": "<",
        "&gt;": ">",
        "&quot;": '"',
        "&#39;": "'"
    };
    /** Used to escape characters for inclusion in compiled string literals. */ var stringEscapes = {
        "\\": "\\",
        "'": "'",
        "\n": "n",
        "\r": "r",
        "\u2028": "u2028",
        "\u2029": "u2029"
    };
    /** Built-in method references without a dependency on `root`. */ var freeParseFloat = parseFloat, freeParseInt = parseInt;
    /** Detect free variable `global` from Node.js. */ var freeGlobal = typeof $parcel$global == "object" && $parcel$global && $parcel$global.Object === Object && $parcel$global;
    /** Detect free variable `self`. */ var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    /** Used as a reference to the global object. */ var root = freeGlobal || freeSelf || Function("return this")();
    /** Detect free variable `exports`. */ var freeExports = exports && !exports.nodeType && exports;
    /** Detect free variable `module`. */ var freeModule = freeExports && true && module && !module.nodeType && module;
    /** Detect the popular CommonJS extension `module.exports`. */ var moduleExports = freeModule && freeModule.exports === freeExports;
    /** Detect free variable `process` from Node.js. */ var freeProcess = moduleExports && freeGlobal.process;
    /** Used to access faster Node.js helpers. */ var nodeUtil = function() {
        try {
            // Use `util.types` for Node.js 10+.
            var types = freeModule && freeModule.require && freeModule.require("util").types;
            if (types) return types;
            // Legacy `process.binding('util')` for Node.js < 10.
            return freeProcess && freeProcess.binding && freeProcess.binding("util");
        } catch (e) {}
    }();
    /* Node.js helper references. */ var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    /*--------------------------------------------------------------------------*/ /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */ function apply(func, thisArg, args) {
        switch(args.length){
            case 0:
                return func.call(thisArg);
            case 1:
                return func.call(thisArg, args[0]);
            case 2:
                return func.call(thisArg, args[0], args[1]);
            case 3:
                return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
    }
    /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */ function arrayAggregator(array, setter, iteratee, accumulator) {
        var index = -1, length = array == null ? 0 : array.length;
        while(++index < length){
            var value = array[index];
            setter(accumulator, value, iteratee(value), array);
        }
        return accumulator;
    }
    /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */ function arrayEach(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length;
        while(++index < length){
            if (iteratee(array[index], index, array) === false) break;
        }
        return array;
    }
    /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */ function arrayEachRight(array, iteratee) {
        var length = array == null ? 0 : array.length;
        while(length--){
            if (iteratee(array[length], length, array) === false) break;
        }
        return array;
    }
    /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */ function arrayEvery(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length;
        while(++index < length){
            if (!predicate(array[index], index, array)) return false;
        }
        return true;
    }
    /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */ function arrayFilter(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
        while(++index < length){
            var value = array[index];
            if (predicate(value, index, array)) result[resIndex++] = value;
        }
        return result;
    }
    /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */ function arrayIncludes(array, value) {
        var length = array == null ? 0 : array.length;
        return !!length && baseIndexOf(array, value, 0) > -1;
    }
    /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */ function arrayIncludesWith(array, value, comparator) {
        var index = -1, length = array == null ? 0 : array.length;
        while(++index < length){
            if (comparator(value, array[index])) return true;
        }
        return false;
    }
    /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */ function arrayMap(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length, result = Array(length);
        while(++index < length)result[index] = iteratee(array[index], index, array);
        return result;
    }
    /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */ function arrayPush(array, values) {
        var index = -1, length = values.length, offset = array.length;
        while(++index < length)array[offset + index] = values[index];
        return array;
    }
    /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */ function arrayReduce(array, iteratee, accumulator, initAccum) {
        var index = -1, length = array == null ? 0 : array.length;
        if (initAccum && length) accumulator = array[++index];
        while(++index < length)accumulator = iteratee(accumulator, array[index], index, array);
        return accumulator;
    }
    /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */ function arrayReduceRight(array, iteratee, accumulator, initAccum) {
        var length = array == null ? 0 : array.length;
        if (initAccum && length) accumulator = array[--length];
        while(length--)accumulator = iteratee(accumulator, array[length], length, array);
        return accumulator;
    }
    /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */ function arraySome(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length;
        while(++index < length){
            if (predicate(array[index], index, array)) return true;
        }
        return false;
    }
    /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */ var asciiSize = baseProperty("length");
    /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */ function asciiToArray(string) {
        return string.split("");
    }
    /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */ function asciiWords(string) {
        return string.match(reAsciiWord) || [];
    }
    /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */ function baseFindKey(collection, predicate, eachFunc) {
        var result;
        eachFunc(collection, function(value, key, collection) {
            if (predicate(value, key, collection)) {
                result = key;
                return false;
            }
        });
        return result;
    }
    /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */ function baseFindIndex(array, predicate, fromIndex, fromRight) {
        var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
        while(fromRight ? index-- : ++index < length){
            if (predicate(array[index], index, array)) return index;
        }
        return -1;
    }
    /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */ function baseIndexOf(array, value, fromIndex) {
        return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
    }
    /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */ function baseIndexOfWith(array, value, fromIndex, comparator) {
        var index = fromIndex - 1, length = array.length;
        while(++index < length){
            if (comparator(array[index], value)) return index;
        }
        return -1;
    }
    /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */ function baseIsNaN(value) {
        return value !== value;
    }
    /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */ function baseMean(array, iteratee) {
        var length = array == null ? 0 : array.length;
        return length ? baseSum(array, iteratee) / length : NAN;
    }
    /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */ function baseProperty(key) {
        return function(object) {
            return object == null ? undefined : object[key];
        };
    }
    /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */ function basePropertyOf(object) {
        return function(key) {
            return object == null ? undefined : object[key];
        };
    }
    /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */ function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
        eachFunc(collection, function(value, index, collection) {
            accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection);
        });
        return accumulator;
    }
    /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */ function baseSortBy(array, comparer) {
        var length = array.length;
        array.sort(comparer);
        while(length--)array[length] = array[length].value;
        return array;
    }
    /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */ function baseSum(array, iteratee) {
        var result, index = -1, length = array.length;
        while(++index < length){
            var current = iteratee(array[index]);
            if (current !== undefined) result = result === undefined ? current : result + current;
        }
        return result;
    }
    /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */ function baseTimes(n, iteratee) {
        var index = -1, result = Array(n);
        while(++index < n)result[index] = iteratee(index);
        return result;
    }
    /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */ function baseToPairs(object, props) {
        return arrayMap(props, function(key) {
            return [
                key,
                object[key]
            ];
        });
    }
    /**
   * The base implementation of `_.trim`.
   *
   * @private
   * @param {string} string The string to trim.
   * @returns {string} Returns the trimmed string.
   */ function baseTrim(string) {
        return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
    }
    /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */ function baseUnary(func) {
        return function(value) {
            return func(value);
        };
    }
    /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */ function baseValues(object, props) {
        return arrayMap(props, function(key) {
            return object[key];
        });
    }
    /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */ function cacheHas(cache, key) {
        return cache.has(key);
    }
    /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */ function charsStartIndex(strSymbols, chrSymbols) {
        var index = -1, length = strSymbols.length;
        while(++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1);
        return index;
    }
    /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */ function charsEndIndex(strSymbols, chrSymbols) {
        var index = strSymbols.length;
        while((index--) && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1);
        return index;
    }
    /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */ function countHolders(array, placeholder) {
        var length = array.length, result = 0;
        while(length--)if (array[length] === placeholder) ++result;
        return result;
    }
    /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */ var deburrLetter = basePropertyOf(deburredLetters);
    /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */ var escapeHtmlChar = basePropertyOf(htmlEscapes);
    /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */ function escapeStringChar(chr) {
        return "\\" + stringEscapes[chr];
    }
    /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */ function getValue(object, key) {
        return object == null ? undefined : object[key];
    }
    /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */ function hasUnicode(string) {
        return reHasUnicode.test(string);
    }
    /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */ function hasUnicodeWord(string) {
        return reHasUnicodeWord.test(string);
    }
    /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */ function iteratorToArray(iterator) {
        var data, result = [];
        while(!(data = iterator.next()).done)result.push(data.value);
        return result;
    }
    /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */ function mapToArray(map) {
        var index = -1, result = Array(map.size);
        map.forEach(function(value, key) {
            result[++index] = [
                key,
                value
            ];
        });
        return result;
    }
    /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */ function overArg(func, transform) {
        return function(arg) {
            return func(transform(arg));
        };
    }
    /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */ function replaceHolders(array, placeholder) {
        var index = -1, length = array.length, resIndex = 0, result = [];
        while(++index < length){
            var value = array[index];
            if (value === placeholder || value === PLACEHOLDER) {
                array[index] = PLACEHOLDER;
                result[resIndex++] = index;
            }
        }
        return result;
    }
    /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */ function setToArray(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function(value) {
            result[++index] = value;
        });
        return result;
    }
    /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */ function setToPairs(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function(value) {
            result[++index] = [
                value,
                value
            ];
        });
        return result;
    }
    /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */ function strictIndexOf(array, value, fromIndex) {
        var index = fromIndex - 1, length = array.length;
        while(++index < length){
            if (array[index] === value) return index;
        }
        return -1;
    }
    /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */ function strictLastIndexOf(array, value, fromIndex) {
        var index = fromIndex + 1;
        while(index--){
            if (array[index] === value) return index;
        }
        return index;
    }
    /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */ function stringSize(string) {
        return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
    }
    /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */ function stringToArray(string) {
        return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
    }
    /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */ function trimmedEndIndex(string) {
        var index = string.length;
        while(index-- && reWhitespace.test(string.charAt(index)));
        return index;
    }
    /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */ var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
    /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */ function unicodeSize(string) {
        var result = reUnicode.lastIndex = 0;
        while(reUnicode.test(string))++result;
        return result;
    }
    /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */ function unicodeToArray(string) {
        return string.match(reUnicode) || [];
    }
    /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */ function unicodeWords(string) {
        return string.match(reUnicodeWord) || [];
    }
    /*--------------------------------------------------------------------------*/ /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */ var runInContext = function runInContext(context) {
        context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));
        /** Built-in constructor references. */ var Array1 = context.Array, Date = context.Date, Error = context.Error, Function1 = context.Function, Math = context.Math, Object1 = context.Object, RegExp1 = context.RegExp, String = context.String, TypeError = context.TypeError;
        /** Used for built-in method references. */ var arrayProto = Array1.prototype, funcProto = Function1.prototype, objectProto = Object1.prototype;
        /** Used to detect overreaching core-js shims. */ var coreJsData = context["__core-js_shared__"];
        /** Used to resolve the decompiled source of functions. */ var funcToString = funcProto.toString;
        /** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
        /** Used to generate unique IDs. */ var idCounter = 0;
        /** Used to detect methods masquerading as native. */ var maskSrcKey = function() {
            var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
            return uid ? "Symbol(src)_1." + uid : "";
        }();
        /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */ var nativeObjectToString = objectProto.toString;
        /** Used to infer the `Object` constructor. */ var objectCtorString = funcToString.call(Object1);
        /** Used to restore the original `_` reference in `_.noConflict`. */ var oldDash = root._;
        /** Used to detect if a method is native. */ var reIsNative = RegExp1("^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
        /** Built-in value references. */ var Buffer = moduleExports ? context.Buffer : undefined, Symbol = context.Symbol, Uint8Array = context.Uint8Array, allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined, getPrototype = overArg(Object1.getPrototypeOf, Object1), objectCreate = Object1.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined, symIterator = Symbol ? Symbol.iterator : undefined, symToStringTag = Symbol ? Symbol.toStringTag : undefined;
        var defineProperty = function() {
            try {
                var func = getNative(Object1, "defineProperty");
                func({}, "", {});
                return func;
            } catch (e) {}
        }();
        /** Mocked built-ins. */ var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout, ctxNow = Date && Date.now !== root.Date.now && Date.now, ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
        /* Built-in method references for those with the same name as other `lodash` methods. */ var nativeCeil = Math.ceil, nativeFloor = Math.floor, nativeGetSymbols = Object1.getOwnPropertySymbols, nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined, nativeIsFinite = context.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object1.keys, Object1), nativeMax = Math.max, nativeMin = Math.min, nativeNow = Date.now, nativeParseInt = context.parseInt, nativeRandom = Math.random, nativeReverse = arrayProto.reverse;
        /* Built-in method references that are verified to be native. */ var DataView = getNative(context, "DataView"), Map = getNative(context, "Map"), Promise = getNative(context, "Promise"), Set = getNative(context, "Set"), WeakMap = getNative(context, "WeakMap"), nativeCreate = getNative(Object1, "create");
        /** Used to store function metadata. */ var metaMap = WeakMap && new WeakMap;
        /** Used to lookup unminified function names. */ var realNames = {};
        /** Used to detect maps, sets, and weakmaps. */ var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map), promiseCtorString = toSource(Promise), setCtorString = toSource(Set), weakMapCtorString = toSource(WeakMap);
        /** Used to convert symbols to primitives and strings. */ var symbolProto = Symbol ? Symbol.prototype : undefined, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined, symbolToString = symbolProto ? symbolProto.toString : undefined;
        /*------------------------------------------------------------------------*/ /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */ function lodash(value) {
            if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
                if (value instanceof LodashWrapper) return value;
                if (hasOwnProperty.call(value, "__wrapped__")) return wrapperClone(value);
            }
            return new LodashWrapper(value);
        }
        /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */ var baseCreate = function() {
            function object() {}
            return function(proto) {
                if (!isObject(proto)) return {};
                if (objectCreate) return objectCreate(proto);
                object.prototype = proto;
                var result = new object;
                object.prototype = undefined;
                return result;
            };
        }();
        /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */ function baseLodash() {
        // No operation performed.
        }
        /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */ function LodashWrapper(value, chainAll) {
            this.__wrapped__ = value;
            this.__actions__ = [];
            this.__chain__ = !!chainAll;
            this.__index__ = 0;
            this.__values__ = undefined;
        }
        /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */ lodash.templateSettings = {
            /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */ "escape": reEscape,
            /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */ "evaluate": reEvaluate,
            /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */ "interpolate": reInterpolate,
            /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */ "variable": "",
            /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */ "imports": {
                /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */ "_": lodash
            }
        };
        // Ensure wrappers are instances of `baseLodash`.
        lodash.prototype = baseLodash.prototype;
        lodash.prototype.constructor = lodash;
        LodashWrapper.prototype = baseCreate(baseLodash.prototype);
        LodashWrapper.prototype.constructor = LodashWrapper;
        /*------------------------------------------------------------------------*/ /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */ function LazyWrapper(value) {
            this.__wrapped__ = value;
            this.__actions__ = [];
            this.__dir__ = 1;
            this.__filtered__ = false;
            this.__iteratees__ = [];
            this.__takeCount__ = MAX_ARRAY_LENGTH;
            this.__views__ = [];
        }
        /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */ function lazyClone() {
            var result = new LazyWrapper(this.__wrapped__);
            result.__actions__ = copyArray(this.__actions__);
            result.__dir__ = this.__dir__;
            result.__filtered__ = this.__filtered__;
            result.__iteratees__ = copyArray(this.__iteratees__);
            result.__takeCount__ = this.__takeCount__;
            result.__views__ = copyArray(this.__views__);
            return result;
        }
        /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */ function lazyReverse() {
            if (this.__filtered__) {
                var result = new LazyWrapper(this);
                result.__dir__ = -1;
                result.__filtered__ = true;
            } else {
                result = this.clone();
                result.__dir__ *= -1;
            }
            return result;
        }
        /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */ function lazyValue() {
            var array = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray(array), isRight = dir < 0, arrLength = isArr ? array.length : 0, view = getView(0, arrLength, this.__views__), start = view.start, end = view.end, length = end - start, index = isRight ? end : start - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);
            if (!isArr || !isRight && arrLength == length && takeCount == length) return baseWrapperValue(array, this.__actions__);
            var result = [];
            outer: while((length--) && resIndex < takeCount){
                index += dir;
                var iterIndex = -1, value = array[index];
                while(++iterIndex < iterLength){
                    var data = iteratees[iterIndex], iteratee = data.iteratee, type = data.type, computed = iteratee(value);
                    if (type == LAZY_MAP_FLAG) value = computed;
                    else if (!computed) {
                        if (type == LAZY_FILTER_FLAG) continue outer;
                        else break outer;
                    }
                }
                result[resIndex++] = value;
            }
            return result;
        }
        // Ensure `LazyWrapper` is an instance of `baseLodash`.
        LazyWrapper.prototype = baseCreate(baseLodash.prototype);
        LazyWrapper.prototype.constructor = LazyWrapper;
        /*------------------------------------------------------------------------*/ /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */ function Hash(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while(++index < length){
                var entry = entries[index];
                this.set(entry[0], entry[1]);
            }
        }
        /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */ function hashClear() {
            this.__data__ = nativeCreate ? nativeCreate(null) : {};
            this.size = 0;
        }
        /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */ function hashDelete(key) {
            var result = this.has(key) && delete this.__data__[key];
            this.size -= result ? 1 : 0;
            return result;
        }
        /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */ function hashGet(key) {
            var data = this.__data__;
            if (nativeCreate) {
                var result = data[key];
                return result === HASH_UNDEFINED ? undefined : result;
            }
            return hasOwnProperty.call(data, key) ? data[key] : undefined;
        }
        /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */ function hashHas(key) {
            var data = this.__data__;
            return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
        }
        /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */ function hashSet(key, value) {
            var data = this.__data__;
            this.size += this.has(key) ? 0 : 1;
            data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
            return this;
        }
        // Add methods to `Hash`.
        Hash.prototype.clear = hashClear;
        Hash.prototype["delete"] = hashDelete;
        Hash.prototype.get = hashGet;
        Hash.prototype.has = hashHas;
        Hash.prototype.set = hashSet;
        /*------------------------------------------------------------------------*/ /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */ function ListCache(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while(++index < length){
                var entry = entries[index];
                this.set(entry[0], entry[1]);
            }
        }
        /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */ function listCacheClear() {
            this.__data__ = [];
            this.size = 0;
        }
        /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */ function listCacheDelete(key) {
            var data = this.__data__, index = assocIndexOf(data, key);
            if (index < 0) return false;
            var lastIndex = data.length - 1;
            if (index == lastIndex) data.pop();
            else splice.call(data, index, 1);
            --this.size;
            return true;
        }
        /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */ function listCacheGet(key) {
            var data = this.__data__, index = assocIndexOf(data, key);
            return index < 0 ? undefined : data[index][1];
        }
        /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */ function listCacheHas(key) {
            return assocIndexOf(this.__data__, key) > -1;
        }
        /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */ function listCacheSet(key, value) {
            var data = this.__data__, index = assocIndexOf(data, key);
            if (index < 0) {
                ++this.size;
                data.push([
                    key,
                    value
                ]);
            } else data[index][1] = value;
            return this;
        }
        // Add methods to `ListCache`.
        ListCache.prototype.clear = listCacheClear;
        ListCache.prototype["delete"] = listCacheDelete;
        ListCache.prototype.get = listCacheGet;
        ListCache.prototype.has = listCacheHas;
        ListCache.prototype.set = listCacheSet;
        /*------------------------------------------------------------------------*/ /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */ function MapCache(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while(++index < length){
                var entry = entries[index];
                this.set(entry[0], entry[1]);
            }
        }
        /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */ function mapCacheClear() {
            this.size = 0;
            this.__data__ = {
                "hash": new Hash,
                "map": new (Map || ListCache),
                "string": new Hash
            };
        }
        /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */ function mapCacheDelete(key) {
            var result = getMapData(this, key)["delete"](key);
            this.size -= result ? 1 : 0;
            return result;
        }
        /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */ function mapCacheGet(key) {
            return getMapData(this, key).get(key);
        }
        /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */ function mapCacheHas(key) {
            return getMapData(this, key).has(key);
        }
        /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */ function mapCacheSet(key, value) {
            var data = getMapData(this, key), size = data.size;
            data.set(key, value);
            this.size += data.size == size ? 0 : 1;
            return this;
        }
        // Add methods to `MapCache`.
        MapCache.prototype.clear = mapCacheClear;
        MapCache.prototype["delete"] = mapCacheDelete;
        MapCache.prototype.get = mapCacheGet;
        MapCache.prototype.has = mapCacheHas;
        MapCache.prototype.set = mapCacheSet;
        /*------------------------------------------------------------------------*/ /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */ function SetCache(values) {
            var index = -1, length = values == null ? 0 : values.length;
            this.__data__ = new MapCache;
            while(++index < length)this.add(values[index]);
        }
        /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */ function setCacheAdd(value) {
            this.__data__.set(value, HASH_UNDEFINED);
            return this;
        }
        /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */ function setCacheHas(value) {
            return this.__data__.has(value);
        }
        // Add methods to `SetCache`.
        SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
        SetCache.prototype.has = setCacheHas;
        /*------------------------------------------------------------------------*/ /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */ function Stack(entries) {
            var data = this.__data__ = new ListCache(entries);
            this.size = data.size;
        }
        /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */ function stackClear() {
            this.__data__ = new ListCache;
            this.size = 0;
        }
        /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */ function stackDelete(key) {
            var data = this.__data__, result = data["delete"](key);
            this.size = data.size;
            return result;
        }
        /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */ function stackGet(key) {
            return this.__data__.get(key);
        }
        /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */ function stackHas(key) {
            return this.__data__.has(key);
        }
        /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */ function stackSet(key, value) {
            var data = this.__data__;
            if (data instanceof ListCache) {
                var pairs = data.__data__;
                if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
                    pairs.push([
                        key,
                        value
                    ]);
                    this.size = ++data.size;
                    return this;
                }
                data = this.__data__ = new MapCache(pairs);
            }
            data.set(key, value);
            this.size = data.size;
            return this;
        }
        // Add methods to `Stack`.
        Stack.prototype.clear = stackClear;
        Stack.prototype["delete"] = stackDelete;
        Stack.prototype.get = stackGet;
        Stack.prototype.has = stackHas;
        Stack.prototype.set = stackSet;
        /*------------------------------------------------------------------------*/ /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */ function arrayLikeKeys(value, inherited) {
            var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
            for(var key in value)if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
            (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
            isIndex(key, length)))) result.push(key);
            return result;
        }
        /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */ function arraySample(array) {
            var length = array.length;
            return length ? array[baseRandom(0, length - 1)] : undefined;
        }
        /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */ function arraySampleSize(array, n) {
            return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
        }
        /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */ function arrayShuffle(array) {
            return shuffleSelf(copyArray(array));
        }
        /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */ function assignMergeValue(object, key, value) {
            if (value !== undefined && !eq(object[key], value) || value === undefined && !(key in object)) baseAssignValue(object, key, value);
        }
        /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */ function assignValue(object, key, value) {
            var objValue = object[key];
            if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) baseAssignValue(object, key, value);
        }
        /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */ function assocIndexOf(array, key) {
            var length = array.length;
            while(length--){
                if (eq(array[length][0], key)) return length;
            }
            return -1;
        }
        /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */ function baseAggregator(collection, setter, iteratee, accumulator) {
            baseEach(collection, function(value, key, collection) {
                setter(accumulator, value, iteratee(value), collection);
            });
            return accumulator;
        }
        /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */ function baseAssign(object, source) {
            return object && copyObject(source, keys(source), object);
        }
        /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */ function baseAssignIn(object, source) {
            return object && copyObject(source, keysIn(source), object);
        }
        /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */ function baseAssignValue(object, key, value) {
            if (key == "__proto__" && defineProperty) defineProperty(object, key, {
                "configurable": true,
                "enumerable": true,
                "value": value,
                "writable": true
            });
            else object[key] = value;
        }
        /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */ function baseAt(object, paths) {
            var index = -1, length = paths.length, result = Array1(length), skip = object == null;
            while(++index < length)result[index] = skip ? undefined : get(object, paths[index]);
            return result;
        }
        /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */ function baseClamp(number, lower, upper) {
            if (number === number) {
                if (upper !== undefined) number = number <= upper ? number : upper;
                if (lower !== undefined) number = number >= lower ? number : lower;
            }
            return number;
        }
        /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */ function baseClone(value, bitmask, customizer, key, object, stack) {
            var result, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
            if (customizer) result = object ? customizer(value, key, object, stack) : customizer(value);
            if (result !== undefined) return result;
            if (!isObject(value)) return value;
            var isArr = isArray(value);
            if (isArr) {
                result = initCloneArray(value);
                if (!isDeep) return copyArray(value, result);
            } else {
                var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
                if (isBuffer(value)) return cloneBuffer(value, isDeep);
                if (tag == objectTag || tag == argsTag || isFunc && !object) {
                    result = isFlat || isFunc ? {} : initCloneObject(value);
                    if (!isDeep) return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
                } else {
                    if (!cloneableTags[tag]) return object ? value : {};
                    result = initCloneByTag(value, tag, isDeep);
                }
            }
            // Check for circular references and return its corresponding clone.
            stack || (stack = new Stack);
            var stacked = stack.get(value);
            if (stacked) return stacked;
            stack.set(value, result);
            if (isSet(value)) value.forEach(function(subValue) {
                result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
            });
            else if (isMap(value)) value.forEach(function(subValue, key) {
                result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
            });
            var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
            var props = isArr ? undefined : keysFunc(value);
            arrayEach(props || value, function(subValue, key) {
                if (props) {
                    key = subValue;
                    subValue = value[key];
                }
                // Recursively populate clone (susceptible to call stack limits).
                assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
            });
            return result;
        }
        /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */ function baseConforms(source) {
            var props = keys(source);
            return function(object) {
                return baseConformsTo(object, source, props);
            };
        }
        /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */ function baseConformsTo(object, source, props) {
            var length = props.length;
            if (object == null) return !length;
            object = Object1(object);
            while(length--){
                var key = props[length], predicate = source[key], value = object[key];
                if (value === undefined && !(key in object) || !predicate(value)) return false;
            }
            return true;
        }
        /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */ function baseDelay(func, wait, args) {
            if (typeof func != "function") throw new TypeError(FUNC_ERROR_TEXT);
            return setTimeout(function() {
                func.apply(undefined, args);
            }, wait);
        }
        /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */ function baseDifference(array, values, iteratee, comparator) {
            var index = -1, includes = arrayIncludes, isCommon = true, length = array.length, result = [], valuesLength = values.length;
            if (!length) return result;
            if (iteratee) values = arrayMap(values, baseUnary(iteratee));
            if (comparator) {
                includes = arrayIncludesWith;
                isCommon = false;
            } else if (values.length >= LARGE_ARRAY_SIZE) {
                includes = cacheHas;
                isCommon = false;
                values = new SetCache(values);
            }
            outer: while(++index < length){
                var value = array[index], computed = iteratee == null ? value : iteratee(value);
                value = comparator || value !== 0 ? value : 0;
                if (isCommon && computed === computed) {
                    var valuesIndex = valuesLength;
                    while(valuesIndex--){
                        if (values[valuesIndex] === computed) continue outer;
                    }
                    result.push(value);
                } else if (!includes(values, computed, comparator)) result.push(value);
            }
            return result;
        }
        /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */ var baseEach = createBaseEach(baseForOwn);
        /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */ var baseEachRight = createBaseEach(baseForOwnRight, true);
        /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */ function baseEvery(collection, predicate) {
            var result = true;
            baseEach(collection, function(value, index, collection) {
                result = !!predicate(value, index, collection);
                return result;
            });
            return result;
        }
        /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */ function baseExtremum(array, iteratee, comparator) {
            var index = -1, length = array.length;
            while(++index < length){
                var value = array[index], current = iteratee(value);
                if (current != null && (computed === undefined ? current === current && !isSymbol(current) : comparator(current, computed))) var computed = current, result = value;
            }
            return result;
        }
        /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */ function baseFill(array, value, start, end) {
            var length = array.length;
            start = toInteger(start);
            if (start < 0) start = -start > length ? 0 : length + start;
            end = end === undefined || end > length ? length : toInteger(end);
            if (end < 0) end += length;
            end = start > end ? 0 : toLength(end);
            while(start < end)array[start++] = value;
            return array;
        }
        /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */ function baseFilter(collection, predicate) {
            var result = [];
            baseEach(collection, function(value, index, collection) {
                if (predicate(value, index, collection)) result.push(value);
            });
            return result;
        }
        /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */ function baseFlatten(array, depth, predicate, isStrict, result) {
            var index = -1, length = array.length;
            predicate || (predicate = isFlattenable);
            result || (result = []);
            while(++index < length){
                var value = array[index];
                if (depth > 0 && predicate(value)) {
                    if (depth > 1) // Recursively flatten arrays (susceptible to call stack limits).
                    baseFlatten(value, depth - 1, predicate, isStrict, result);
                    else arrayPush(result, value);
                } else if (!isStrict) result[result.length] = value;
            }
            return result;
        }
        /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */ var baseFor = createBaseFor();
        /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */ var baseForRight = createBaseFor(true);
        /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */ function baseForOwn(object, iteratee) {
            return object && baseFor(object, iteratee, keys);
        }
        /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */ function baseForOwnRight(object, iteratee) {
            return object && baseForRight(object, iteratee, keys);
        }
        /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */ function baseFunctions(object, props) {
            return arrayFilter(props, function(key) {
                return isFunction(object[key]);
            });
        }
        /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */ function baseGet(object, path) {
            path = castPath(path, object);
            var index = 0, length = path.length;
            while(object != null && index < length)object = object[toKey(path[index++])];
            return index && index == length ? object : undefined;
        }
        /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */ function baseGetAllKeys(object, keysFunc, symbolsFunc) {
            var result = keysFunc(object);
            return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
        }
        /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */ function baseGetTag(value) {
            if (value == null) return value === undefined ? undefinedTag : nullTag;
            return symToStringTag && symToStringTag in Object1(value) ? getRawTag(value) : objectToString(value);
        }
        /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */ function baseGt(value, other) {
            return value > other;
        }
        /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */ function baseHas(object, key) {
            return object != null && hasOwnProperty.call(object, key);
        }
        /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */ function baseHasIn(object, key) {
            return object != null && key in Object1(object);
        }
        /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */ function baseInRange(number, start, end) {
            return number >= nativeMin(start, end) && number < nativeMax(start, end);
        }
        /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */ function baseIntersection(arrays, iteratee, comparator) {
            var includes = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array1(othLength), maxLength = Infinity, result = [];
            while(othIndex--){
                var array = arrays[othIndex];
                if (othIndex && iteratee) array = arrayMap(array, baseUnary(iteratee));
                maxLength = nativeMin(array.length, maxLength);
                caches[othIndex] = !comparator && (iteratee || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined;
            }
            array = arrays[0];
            var index = -1, seen = caches[0];
            outer: while(++index < length && result.length < maxLength){
                var value = array[index], computed = iteratee ? iteratee(value) : value;
                value = comparator || value !== 0 ? value : 0;
                if (!(seen ? cacheHas(seen, computed) : includes(result, computed, comparator))) {
                    othIndex = othLength;
                    while(--othIndex){
                        var cache = caches[othIndex];
                        if (!(cache ? cacheHas(cache, computed) : includes(arrays[othIndex], computed, comparator))) continue outer;
                    }
                    if (seen) seen.push(computed);
                    result.push(value);
                }
            }
            return result;
        }
        /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */ function baseInverter(object, setter, iteratee, accumulator) {
            baseForOwn(object, function(value, key, object) {
                setter(accumulator, iteratee(value), key, object);
            });
            return accumulator;
        }
        /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */ function baseInvoke(object, path, args) {
            path = castPath(path, object);
            object = parent(object, path);
            var func = object == null ? object : object[toKey(last(path))];
            return func == null ? undefined : apply(func, object, args);
        }
        /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */ function baseIsArguments(value) {
            return isObjectLike(value) && baseGetTag(value) == argsTag;
        }
        /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */ function baseIsArrayBuffer(value) {
            return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
        }
        /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */ function baseIsDate(value) {
            return isObjectLike(value) && baseGetTag(value) == dateTag;
        }
        /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */ function baseIsEqual(value, other, bitmask, customizer, stack) {
            if (value === other) return true;
            if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) return value !== value && other !== other;
            return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
        }
        /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */ function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
            var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
            objTag = objTag == argsTag ? objectTag : objTag;
            othTag = othTag == argsTag ? objectTag : othTag;
            var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
            if (isSameTag && isBuffer(object)) {
                if (!isBuffer(other)) return false;
                objIsArr = true;
                objIsObj = false;
            }
            if (isSameTag && !objIsObj) {
                stack || (stack = new Stack);
                return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
            }
            if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
                var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
                if (objIsWrapped || othIsWrapped) {
                    var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
                    stack || (stack = new Stack);
                    return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
                }
            }
            if (!isSameTag) return false;
            stack || (stack = new Stack);
            return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
        }
        /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */ function baseIsMap(value) {
            return isObjectLike(value) && getTag(value) == mapTag;
        }
        /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */ function baseIsMatch(object, source, matchData, customizer) {
            var index = matchData.length, length = index, noCustomizer = !customizer;
            if (object == null) return !length;
            object = Object1(object);
            while(index--){
                var data = matchData[index];
                if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) return false;
            }
            while(++index < length){
                data = matchData[index];
                var key = data[0], objValue = object[key], srcValue = data[1];
                if (noCustomizer && data[2]) {
                    if (objValue === undefined && !(key in object)) return false;
                } else {
                    var stack = new Stack;
                    if (customizer) var result = customizer(objValue, srcValue, key, object, source, stack);
                    if (!(result === undefined ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) return false;
                }
            }
            return true;
        }
        /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */ function baseIsNative(value) {
            if (!isObject(value) || isMasked(value)) return false;
            var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
            return pattern.test(toSource(value));
        }
        /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */ function baseIsRegExp(value) {
            return isObjectLike(value) && baseGetTag(value) == regexpTag;
        }
        /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */ function baseIsSet(value) {
            return isObjectLike(value) && getTag(value) == setTag;
        }
        /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */ function baseIsTypedArray(value) {
            return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
        }
        /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */ function baseIteratee(value) {
            // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
            // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
            if (typeof value == "function") return value;
            if (value == null) return identity;
            if (typeof value == "object") return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
            return property(value);
        }
        /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */ function baseKeys(object) {
            if (!isPrototype(object)) return nativeKeys(object);
            var result = [];
            for(var key in Object1(object))if (hasOwnProperty.call(object, key) && key != "constructor") result.push(key);
            return result;
        }
        /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */ function baseKeysIn(object) {
            if (!isObject(object)) return nativeKeysIn(object);
            var isProto = isPrototype(object), result = [];
            for(var key in object)if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) result.push(key);
            return result;
        }
        /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */ function baseLt(value, other) {
            return value < other;
        }
        /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */ function baseMap(collection, iteratee) {
            var index = -1, result = isArrayLike(collection) ? Array1(collection.length) : [];
            baseEach(collection, function(value, key, collection) {
                result[++index] = iteratee(value, key, collection);
            });
            return result;
        }
        /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */ function baseMatches(source) {
            var matchData = getMatchData(source);
            if (matchData.length == 1 && matchData[0][2]) return matchesStrictComparable(matchData[0][0], matchData[0][1]);
            return function(object) {
                return object === source || baseIsMatch(object, source, matchData);
            };
        }
        /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */ function baseMatchesProperty(path, srcValue) {
            if (isKey(path) && isStrictComparable(srcValue)) return matchesStrictComparable(toKey(path), srcValue);
            return function(object) {
                var objValue = get(object, path);
                return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
            };
        }
        /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */ function baseMerge(object, source, srcIndex, customizer, stack) {
            if (object === source) return;
            baseFor(source, function(srcValue, key) {
                stack || (stack = new Stack);
                if (isObject(srcValue)) baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
                else {
                    var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : undefined;
                    if (newValue === undefined) newValue = srcValue;
                    assignMergeValue(object, key, newValue);
                }
            }, keysIn);
        }
        /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */ function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
            var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
            if (stacked) {
                assignMergeValue(object, key, stacked);
                return;
            }
            var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : undefined;
            var isCommon = newValue === undefined;
            if (isCommon) {
                var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
                newValue = srcValue;
                if (isArr || isBuff || isTyped) {
                    if (isArray(objValue)) newValue = objValue;
                    else if (isArrayLikeObject(objValue)) newValue = copyArray(objValue);
                    else if (isBuff) {
                        isCommon = false;
                        newValue = cloneBuffer(srcValue, true);
                    } else if (isTyped) {
                        isCommon = false;
                        newValue = cloneTypedArray(srcValue, true);
                    } else newValue = [];
                } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
                    newValue = objValue;
                    if (isArguments(objValue)) newValue = toPlainObject(objValue);
                    else if (!isObject(objValue) || isFunction(objValue)) newValue = initCloneObject(srcValue);
                } else isCommon = false;
            }
            if (isCommon) {
                // Recursively merge objects and arrays (susceptible to call stack limits).
                stack.set(srcValue, newValue);
                mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
                stack["delete"](srcValue);
            }
            assignMergeValue(object, key, newValue);
        }
        /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */ function baseNth(array, n) {
            var length = array.length;
            if (!length) return;
            n += n < 0 ? length : 0;
            return isIndex(n, length) ? array[n] : undefined;
        }
        /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */ function baseOrderBy(collection, iteratees, orders) {
            if (iteratees.length) iteratees = arrayMap(iteratees, function(iteratee) {
                if (isArray(iteratee)) return function(value) {
                    return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
                };
                return iteratee;
            });
            else iteratees = [
                identity
            ];
            var index = -1;
            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
            var result = baseMap(collection, function(value, key, collection) {
                var criteria = arrayMap(iteratees, function(iteratee) {
                    return iteratee(value);
                });
                return {
                    "criteria": criteria,
                    "index": ++index,
                    "value": value
                };
            });
            return baseSortBy(result, function(object, other) {
                return compareMultiple(object, other, orders);
            });
        }
        /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */ function basePick(object, paths) {
            return basePickBy(object, paths, function(value, path) {
                return hasIn(object, path);
            });
        }
        /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */ function basePickBy(object, paths, predicate) {
            var index = -1, length = paths.length, result = {};
            while(++index < length){
                var path = paths[index], value = baseGet(object, path);
                if (predicate(value, path)) baseSet(result, castPath(path, object), value);
            }
            return result;
        }
        /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */ function basePropertyDeep(path) {
            return function(object) {
                return baseGet(object, path);
            };
        }
        /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */ function basePullAll(array, values, iteratee, comparator) {
            var indexOf = comparator ? baseIndexOfWith : baseIndexOf, index = -1, length = values.length, seen = array;
            if (array === values) values = copyArray(values);
            if (iteratee) seen = arrayMap(array, baseUnary(iteratee));
            while(++index < length){
                var fromIndex = 0, value = values[index], computed = iteratee ? iteratee(value) : value;
                while((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1){
                    if (seen !== array) splice.call(seen, fromIndex, 1);
                    splice.call(array, fromIndex, 1);
                }
            }
            return array;
        }
        /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */ function basePullAt(array, indexes) {
            var length = array ? indexes.length : 0, lastIndex = length - 1;
            while(length--){
                var index = indexes[length];
                if (length == lastIndex || index !== previous) {
                    var previous = index;
                    if (isIndex(index)) splice.call(array, index, 1);
                    else baseUnset(array, index);
                }
            }
            return array;
        }
        /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */ function baseRandom(lower, upper) {
            return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
        }
        /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */ function baseRange(start, end, step, fromRight) {
            var index = -1, length = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result = Array1(length);
            while(length--){
                result[fromRight ? length : ++index] = start;
                start += step;
            }
            return result;
        }
        /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */ function baseRepeat(string, n) {
            var result = "";
            if (!string || n < 1 || n > MAX_SAFE_INTEGER) return result;
            // Leverage the exponentiation by squaring algorithm for a faster repeat.
            // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
            do {
                if (n % 2) result += string;
                n = nativeFloor(n / 2);
                if (n) string += string;
            }while (n);
            return result;
        }
        /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */ function baseRest(func, start) {
            return setToString(overRest(func, start, identity), func + "");
        }
        /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */ function baseSample(collection) {
            return arraySample(values(collection));
        }
        /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */ function baseSampleSize(collection, n) {
            var array = values(collection);
            return shuffleSelf(array, baseClamp(n, 0, array.length));
        }
        /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */ function baseSet(object, path, value, customizer) {
            if (!isObject(object)) return object;
            path = castPath(path, object);
            var index = -1, length = path.length, lastIndex = length - 1, nested = object;
            while(nested != null && ++index < length){
                var key = toKey(path[index]), newValue = value;
                if (key === "__proto__" || key === "constructor" || key === "prototype") return object;
                if (index != lastIndex) {
                    var objValue = nested[key];
                    newValue = customizer ? customizer(objValue, key, nested) : undefined;
                    if (newValue === undefined) newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
                }
                assignValue(nested, key, newValue);
                nested = nested[key];
            }
            return object;
        }
        /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */ var baseSetData = !metaMap ? identity : function(func, data) {
            metaMap.set(func, data);
            return func;
        };
        /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */ var baseSetToString = !defineProperty ? identity : function(func, string) {
            return defineProperty(func, "toString", {
                "configurable": true,
                "enumerable": false,
                "value": constant(string),
                "writable": true
            });
        };
        /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */ function baseShuffle(collection) {
            return shuffleSelf(values(collection));
        }
        /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */ function baseSlice(array, start, end) {
            var index = -1, length = array.length;
            if (start < 0) start = -start > length ? 0 : length + start;
            end = end > length ? length : end;
            if (end < 0) end += length;
            length = start > end ? 0 : end - start >>> 0;
            start >>>= 0;
            var result = Array1(length);
            while(++index < length)result[index] = array[index + start];
            return result;
        }
        /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */ function baseSome(collection, predicate) {
            var result;
            baseEach(collection, function(value, index, collection) {
                result = predicate(value, index, collection);
                return !result;
            });
            return !!result;
        }
        /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */ function baseSortedIndex(array, value, retHighest) {
            var low = 0, high = array == null ? low : array.length;
            if (typeof value == "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
                while(low < high){
                    var mid = low + high >>> 1, computed = array[mid];
                    if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) low = mid + 1;
                    else high = mid;
                }
                return high;
            }
            return baseSortedIndexBy(array, value, identity, retHighest);
        }
        /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */ function baseSortedIndexBy(array, value, iteratee, retHighest) {
            var low = 0, high = array == null ? 0 : array.length;
            if (high === 0) return 0;
            value = iteratee(value);
            var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol(value), valIsUndefined = value === undefined;
            while(low < high){
                var mid = nativeFloor((low + high) / 2), computed = iteratee(array[mid]), othIsDefined = computed !== undefined, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol(computed);
                if (valIsNaN) var setLow = retHighest || othIsReflexive;
                else if (valIsUndefined) setLow = othIsReflexive && (retHighest || othIsDefined);
                else if (valIsNull) setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
                else if (valIsSymbol) setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
                else if (othIsNull || othIsSymbol) setLow = false;
                else setLow = retHighest ? computed <= value : computed < value;
                if (setLow) low = mid + 1;
                else high = mid;
            }
            return nativeMin(high, MAX_ARRAY_INDEX);
        }
        /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */ function baseSortedUniq(array, iteratee) {
            var index = -1, length = array.length, resIndex = 0, result = [];
            while(++index < length){
                var value = array[index], computed = iteratee ? iteratee(value) : value;
                if (!index || !eq(computed, seen)) {
                    var seen = computed;
                    result[resIndex++] = value === 0 ? 0 : value;
                }
            }
            return result;
        }
        /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */ function baseToNumber(value) {
            if (typeof value == "number") return value;
            if (isSymbol(value)) return NAN;
            return +value;
        }
        /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */ function baseToString(value) {
            // Exit early for strings to avoid a performance hit in some environments.
            if (typeof value == "string") return value;
            if (isArray(value)) // Recursively convert values (susceptible to call stack limits).
            return arrayMap(value, baseToString) + "";
            if (isSymbol(value)) return symbolToString ? symbolToString.call(value) : "";
            var result = value + "";
            return result == "0" && 1 / value == -INFINITY ? "-0" : result;
        }
        /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */ function baseUniq(array, iteratee, comparator) {
            var index = -1, includes = arrayIncludes, length = array.length, isCommon = true, result = [], seen = result;
            if (comparator) {
                isCommon = false;
                includes = arrayIncludesWith;
            } else if (length >= LARGE_ARRAY_SIZE) {
                var set = iteratee ? null : createSet(array);
                if (set) return setToArray(set);
                isCommon = false;
                includes = cacheHas;
                seen = new SetCache;
            } else seen = iteratee ? [] : result;
            outer: while(++index < length){
                var value = array[index], computed = iteratee ? iteratee(value) : value;
                value = comparator || value !== 0 ? value : 0;
                if (isCommon && computed === computed) {
                    var seenIndex = seen.length;
                    while(seenIndex--){
                        if (seen[seenIndex] === computed) continue outer;
                    }
                    if (iteratee) seen.push(computed);
                    result.push(value);
                } else if (!includes(seen, computed, comparator)) {
                    if (seen !== result) seen.push(computed);
                    result.push(value);
                }
            }
            return result;
        }
        /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */ function baseUnset(object, path) {
            path = castPath(path, object);
            object = parent(object, path);
            return object == null || delete object[toKey(last(path))];
        }
        /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */ function baseUpdate(object, path, updater, customizer) {
            return baseSet(object, path, updater(baseGet(object, path)), customizer);
        }
        /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */ function baseWhile(array, predicate, isDrop, fromRight) {
            var length = array.length, index = fromRight ? length : -1;
            while((fromRight ? index-- : ++index < length) && predicate(array[index], index, array));
            return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
        }
        /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */ function baseWrapperValue(value, actions) {
            var result = value;
            if (result instanceof LazyWrapper) result = result.value();
            return arrayReduce(actions, function(result, action) {
                return action.func.apply(action.thisArg, arrayPush([
                    result
                ], action.args));
            }, result);
        }
        /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */ function baseXor(arrays, iteratee, comparator) {
            var length = arrays.length;
            if (length < 2) return length ? baseUniq(arrays[0]) : [];
            var index = -1, result = Array1(length);
            while(++index < length){
                var array = arrays[index], othIndex = -1;
                while(++othIndex < length)if (othIndex != index) result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
            }
            return baseUniq(baseFlatten(result, 1), iteratee, comparator);
        }
        /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */ function baseZipObject(props, values, assignFunc) {
            var index = -1, length = props.length, valsLength = values.length, result = {};
            while(++index < length){
                var value = index < valsLength ? values[index] : undefined;
                assignFunc(result, props[index], value);
            }
            return result;
        }
        /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */ function castArrayLikeObject(value) {
            return isArrayLikeObject(value) ? value : [];
        }
        /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */ function castFunction(value) {
            return typeof value == "function" ? value : identity;
        }
        /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */ function castPath(value, object) {
            if (isArray(value)) return value;
            return isKey(value, object) ? [
                value
            ] : stringToPath(toString(value));
        }
        /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */ var castRest = baseRest;
        /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */ function castSlice(array, start, end) {
            var length = array.length;
            end = end === undefined ? length : end;
            return !start && end >= length ? array : baseSlice(array, start, end);
        }
        /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */ var clearTimeout = ctxClearTimeout || function(id) {
            return root.clearTimeout(id);
        };
        /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */ function cloneBuffer(buffer, isDeep) {
            if (isDeep) return buffer.slice();
            var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
            buffer.copy(result);
            return result;
        }
        /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */ function cloneArrayBuffer(arrayBuffer) {
            var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
            new Uint8Array(result).set(new Uint8Array(arrayBuffer));
            return result;
        }
        /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */ function cloneDataView(dataView, isDeep) {
            var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
            return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
        }
        /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */ function cloneRegExp(regexp) {
            var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
            result.lastIndex = regexp.lastIndex;
            return result;
        }
        /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */ function cloneSymbol(symbol) {
            return symbolValueOf ? Object1(symbolValueOf.call(symbol)) : {};
        }
        /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */ function cloneTypedArray(typedArray, isDeep) {
            var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
            return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
        }
        /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */ function compareAscending(value, other) {
            if (value !== other) {
                var valIsDefined = value !== undefined, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
                var othIsDefined = other !== undefined, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
                if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) return 1;
                if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) return -1;
            }
            return 0;
        }
        /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */ function compareMultiple(object, other, orders) {
            var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
            while(++index < length){
                var result = compareAscending(objCriteria[index], othCriteria[index]);
                if (result) {
                    if (index >= ordersLength) return result;
                    var order = orders[index];
                    return result * (order == "desc" ? -1 : 1);
                }
            }
            // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
            // that causes it, under certain circumstances, to provide the same value for
            // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
            // for more details.
            //
            // This also ensures a stable sort in V8 and other engines.
            // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
            return object.index - other.index;
        }
        /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */ function composeArgs(args, partials, holders, isCurried) {
            var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result = Array1(leftLength + rangeLength), isUncurried = !isCurried;
            while(++leftIndex < leftLength)result[leftIndex] = partials[leftIndex];
            while(++argsIndex < holdersLength)if (isUncurried || argsIndex < argsLength) result[holders[argsIndex]] = args[argsIndex];
            while(rangeLength--)result[leftIndex++] = args[argsIndex++];
            return result;
        }
        /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */ function composeArgsRight(args, partials, holders, isCurried) {
            var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result = Array1(rangeLength + rightLength), isUncurried = !isCurried;
            while(++argsIndex < rangeLength)result[argsIndex] = args[argsIndex];
            var offset = argsIndex;
            while(++rightIndex < rightLength)result[offset + rightIndex] = partials[rightIndex];
            while(++holdersIndex < holdersLength)if (isUncurried || argsIndex < argsLength) result[offset + holders[holdersIndex]] = args[argsIndex++];
            return result;
        }
        /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */ function copyArray(source, array) {
            var index = -1, length = source.length;
            array || (array = Array1(length));
            while(++index < length)array[index] = source[index];
            return array;
        }
        /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */ function copyObject(source, props, object, customizer) {
            var isNew = !object;
            object || (object = {});
            var index = -1, length = props.length;
            while(++index < length){
                var key = props[index];
                var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;
                if (newValue === undefined) newValue = source[key];
                if (isNew) baseAssignValue(object, key, newValue);
                else assignValue(object, key, newValue);
            }
            return object;
        }
        /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */ function copySymbols(source, object) {
            return copyObject(source, getSymbols(source), object);
        }
        /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */ function copySymbolsIn(source, object) {
            return copyObject(source, getSymbolsIn(source), object);
        }
        /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */ function createAggregator(setter, initializer) {
            return function(collection, iteratee) {
                var func = isArray(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
                return func(collection, setter, getIteratee(iteratee, 2), accumulator);
            };
        }
        /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */ function createAssigner(assigner) {
            return baseRest(function(object, sources) {
                var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined, guard = length > 2 ? sources[2] : undefined;
                customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : undefined;
                if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                    customizer = length < 3 ? undefined : customizer;
                    length = 1;
                }
                object = Object1(object);
                while(++index < length){
                    var source = sources[index];
                    if (source) assigner(object, source, index, customizer);
                }
                return object;
            });
        }
        /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */ function createBaseEach(eachFunc, fromRight) {
            return function(collection, iteratee) {
                if (collection == null) return collection;
                if (!isArrayLike(collection)) return eachFunc(collection, iteratee);
                var length = collection.length, index = fromRight ? length : -1, iterable = Object1(collection);
                while(fromRight ? index-- : ++index < length){
                    if (iteratee(iterable[index], index, iterable) === false) break;
                }
                return collection;
            };
        }
        /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */ function createBaseFor(fromRight) {
            return function(object, iteratee, keysFunc) {
                var index = -1, iterable = Object1(object), props = keysFunc(object), length = props.length;
                while(length--){
                    var key = props[fromRight ? length : ++index];
                    if (iteratee(iterable[key], key, iterable) === false) break;
                }
                return object;
            };
        }
        /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */ function createBind(func, bitmask, thisArg) {
            var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
            function wrapper() {
                var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
                return fn.apply(isBind ? thisArg : this, arguments);
            }
            return wrapper;
        }
        /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */ function createCaseFirst(methodName) {
            return function(string) {
                string = toString(string);
                var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined;
                var chr = strSymbols ? strSymbols[0] : string.charAt(0);
                var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
                return chr[methodName]() + trailing;
            };
        }
        /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */ function createCompounder(callback) {
            return function(string) {
                return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
            };
        }
        /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */ function createCtor(Ctor) {
            return function() {
                // Use a `switch` statement to work with class constructors. See
                // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
                // for more details.
                var args = arguments;
                switch(args.length){
                    case 0:
                        return new Ctor;
                    case 1:
                        return new Ctor(args[0]);
                    case 2:
                        return new Ctor(args[0], args[1]);
                    case 3:
                        return new Ctor(args[0], args[1], args[2]);
                    case 4:
                        return new Ctor(args[0], args[1], args[2], args[3]);
                    case 5:
                        return new Ctor(args[0], args[1], args[2], args[3], args[4]);
                    case 6:
                        return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
                    case 7:
                        return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
                }
                var thisBinding = baseCreate(Ctor.prototype), result = Ctor.apply(thisBinding, args);
                // Mimic the constructor's `return` behavior.
                // See https://es5.github.io/#x13.2.2 for more details.
                return isObject(result) ? result : thisBinding;
            };
        }
        /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */ function createCurry(func, bitmask, arity) {
            var Ctor = createCtor(func);
            function wrapper() {
                var length = arguments.length, args = Array1(length), index = length, placeholder = getHolder(wrapper);
                while(index--)args[index] = arguments[index];
                var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
                length -= holders.length;
                if (length < arity) return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined, args, holders, undefined, undefined, arity - length);
                var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
                return apply(fn, this, args);
            }
            return wrapper;
        }
        /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */ function createFind(findIndexFunc) {
            return function(collection, predicate, fromIndex) {
                var iterable = Object1(collection);
                if (!isArrayLike(collection)) {
                    var iteratee = getIteratee(predicate, 3);
                    collection = keys(collection);
                    predicate = function(key) {
                        return iteratee(iterable[key], key, iterable);
                    };
                }
                var index = findIndexFunc(collection, predicate, fromIndex);
                return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
            };
        }
        /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */ function createFlow(fromRight) {
            return flatRest(function(funcs) {
                var length = funcs.length, index = length, prereq = LodashWrapper.prototype.thru;
                if (fromRight) funcs.reverse();
                while(index--){
                    var func = funcs[index];
                    if (typeof func != "function") throw new TypeError(FUNC_ERROR_TEXT);
                    if (prereq && !wrapper && getFuncName(func) == "wrapper") var wrapper = new LodashWrapper([], true);
                }
                index = wrapper ? index : length;
                while(++index < length){
                    func = funcs[index];
                    var funcName = getFuncName(func), data = funcName == "wrapper" ? getData(func) : undefined;
                    if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
                    else wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
                }
                return function() {
                    var args = arguments, value = args[0];
                    if (wrapper && args.length == 1 && isArray(value)) return wrapper.plant(value).value();
                    var index = 0, result = length ? funcs[index].apply(this, args) : value;
                    while(++index < length)result = funcs[index].call(this, result);
                    return result;
                };
            });
        }
        /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */ function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
            var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined : createCtor(func);
            function wrapper() {
                var length = arguments.length, args = Array1(length), index = length;
                while(index--)args[index] = arguments[index];
                if (isCurried) var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
                if (partials) args = composeArgs(args, partials, holders, isCurried);
                if (partialsRight) args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
                length -= holdersCount;
                if (isCurried && length < arity) {
                    var newHolders = replaceHolders(args, placeholder);
                    return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary, arity - length);
                }
                var thisBinding = isBind ? thisArg : this, fn = isBindKey ? thisBinding[func] : func;
                length = args.length;
                if (argPos) args = reorder(args, argPos);
                else if (isFlip && length > 1) args.reverse();
                if (isAry && ary < length) args.length = ary;
                if (this && this !== root && this instanceof wrapper) fn = Ctor || createCtor(fn);
                return fn.apply(thisBinding, args);
            }
            return wrapper;
        }
        /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */ function createInverter(setter, toIteratee) {
            return function(object, iteratee) {
                return baseInverter(object, setter, toIteratee(iteratee), {});
            };
        }
        /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */ function createMathOperation(operator, defaultValue) {
            return function(value, other) {
                var result;
                if (value === undefined && other === undefined) return defaultValue;
                if (value !== undefined) result = value;
                if (other !== undefined) {
                    if (result === undefined) return other;
                    if (typeof value == "string" || typeof other == "string") {
                        value = baseToString(value);
                        other = baseToString(other);
                    } else {
                        value = baseToNumber(value);
                        other = baseToNumber(other);
                    }
                    result = operator(value, other);
                }
                return result;
            };
        }
        /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */ function createOver(arrayFunc) {
            return flatRest(function(iteratees) {
                iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
                return baseRest(function(args) {
                    var thisArg = this;
                    return arrayFunc(iteratees, function(iteratee) {
                        return apply(iteratee, thisArg, args);
                    });
                });
            });
        }
        /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */ function createPadding(length, chars) {
            chars = chars === undefined ? " " : baseToString(chars);
            var charsLength = chars.length;
            if (charsLength < 2) return charsLength ? baseRepeat(chars, length) : chars;
            var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
            return hasUnicode(chars) ? castSlice(stringToArray(result), 0, length).join("") : result.slice(0, length);
        }
        /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */ function createPartial(func, bitmask, thisArg, partials) {
            var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
            function wrapper() {
                var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array1(leftLength + argsLength), fn = this && this !== root && this instanceof wrapper ? Ctor : func;
                while(++leftIndex < leftLength)args[leftIndex] = partials[leftIndex];
                while(argsLength--)args[leftIndex++] = arguments[++argsIndex];
                return apply(fn, isBind ? thisArg : this, args);
            }
            return wrapper;
        }
        /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */ function createRange(fromRight) {
            return function(start, end, step) {
                if (step && typeof step != "number" && isIterateeCall(start, end, step)) end = step = undefined;
                // Ensure the sign of `-0` is preserved.
                start = toFinite(start);
                if (end === undefined) {
                    end = start;
                    start = 0;
                } else end = toFinite(end);
                step = step === undefined ? start < end ? 1 : -1 : toFinite(step);
                return baseRange(start, end, step, fromRight);
            };
        }
        /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */ function createRelationalOperation(operator) {
            return function(value, other) {
                if (!(typeof value == "string" && typeof other == "string")) {
                    value = toNumber(value);
                    other = toNumber(other);
                }
                return operator(value, other);
            };
        }
        /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */ function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
            var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined, newHoldersRight = isCurry ? undefined : holders, newPartials = isCurry ? partials : undefined, newPartialsRight = isCurry ? undefined : partials;
            bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
            bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
            if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
            var newData = [
                func,
                bitmask,
                thisArg,
                newPartials,
                newHolders,
                newPartialsRight,
                newHoldersRight,
                argPos,
                ary,
                arity
            ];
            var result = wrapFunc.apply(undefined, newData);
            if (isLaziable(func)) setData(result, newData);
            result.placeholder = placeholder;
            return setWrapToString(result, func, bitmask);
        }
        /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */ function createRound(methodName) {
            var func = Math[methodName];
            return function(number, precision) {
                number = toNumber(number);
                precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
                if (precision && nativeIsFinite(number)) {
                    // Shift with exponential notation to avoid floating-point issues.
                    // See [MDN](https://mdn.io/round#Examples) for more details.
                    var pair = (toString(number) + "e").split("e"), value = func(pair[0] + "e" + (+pair[1] + precision));
                    pair = (toString(value) + "e").split("e");
                    return +(pair[0] + "e" + (+pair[1] - precision));
                }
                return func(number);
            };
        }
        /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */ var createSet = !(Set && 1 / setToArray(new Set([
            ,
            -0
        ]))[1] == INFINITY) ? noop : function(values) {
            return new Set(values);
        };
        /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */ function createToPairs(keysFunc) {
            return function(object) {
                var tag = getTag(object);
                if (tag == mapTag) return mapToArray(object);
                if (tag == setTag) return setToPairs(object);
                return baseToPairs(object, keysFunc(object));
            };
        }
        /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */ function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
            var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
            if (!isBindKey && typeof func != "function") throw new TypeError(FUNC_ERROR_TEXT);
            var length = partials ? partials.length : 0;
            if (!length) {
                bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
                partials = holders = undefined;
            }
            ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
            arity = arity === undefined ? arity : toInteger(arity);
            length -= holders ? holders.length : 0;
            if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
                var partialsRight = partials, holdersRight = holders;
                partials = holders = undefined;
            }
            var data = isBindKey ? undefined : getData(func);
            var newData = [
                func,
                bitmask,
                thisArg,
                partials,
                holders,
                partialsRight,
                holdersRight,
                argPos,
                ary,
                arity
            ];
            if (data) mergeData(newData, data);
            func = newData[0];
            bitmask = newData[1];
            thisArg = newData[2];
            partials = newData[3];
            holders = newData[4];
            arity = newData[9] = newData[9] === undefined ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);
            if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
            if (!bitmask || bitmask == WRAP_BIND_FLAG) var result = createBind(func, bitmask, thisArg);
            else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) result = createCurry(func, bitmask, arity);
            else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) result = createPartial(func, bitmask, thisArg, partials);
            else result = createHybrid.apply(undefined, newData);
            var setter = data ? baseSetData : setData;
            return setWrapToString(setter(result, newData), func, bitmask);
        }
        /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */ function customDefaultsAssignIn(objValue, srcValue, key, object) {
            if (objValue === undefined || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) return srcValue;
            return objValue;
        }
        /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */ function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
            if (isObject(objValue) && isObject(srcValue)) {
                // Recursively merge objects and arrays (susceptible to call stack limits).
                stack.set(srcValue, objValue);
                baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
                stack["delete"](srcValue);
            }
            return objValue;
        }
        /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */ function customOmitClone(value) {
            return isPlainObject(value) ? undefined : value;
        }
        /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */ function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
            if (arrLength != othLength && !(isPartial && othLength > arrLength)) return false;
            // Check that cyclic values are equal.
            var arrStacked = stack.get(array);
            var othStacked = stack.get(other);
            if (arrStacked && othStacked) return arrStacked == other && othStacked == array;
            var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache : undefined;
            stack.set(array, other);
            stack.set(other, array);
            // Ignore non-index properties.
            while(++index < arrLength){
                var arrValue = array[index], othValue = other[index];
                if (customizer) var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
                if (compared !== undefined) {
                    if (compared) continue;
                    result = false;
                    break;
                }
                // Recursively compare arrays (susceptible to call stack limits).
                if (seen) {
                    if (!arraySome(other, function(othValue, othIndex) {
                        if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) return seen.push(othIndex);
                    })) {
                        result = false;
                        break;
                    }
                } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                    result = false;
                    break;
                }
            }
            stack["delete"](array);
            stack["delete"](other);
            return result;
        }
        /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */ function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
            switch(tag){
                case dataViewTag:
                    if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) return false;
                    object = object.buffer;
                    other = other.buffer;
                case arrayBufferTag:
                    if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) return false;
                    return true;
                case boolTag:
                case dateTag:
                case numberTag:
                    // Coerce booleans to `1` or `0` and dates to milliseconds.
                    // Invalid dates are coerced to `NaN`.
                    return eq(+object, +other);
                case errorTag:
                    return object.name == other.name && object.message == other.message;
                case regexpTag:
                case stringTag:
                    // Coerce regexes to strings and treat strings, primitives and objects,
                    // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
                    // for more details.
                    return object == other + "";
                case mapTag:
                    var convert = mapToArray;
                case setTag:
                    var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
                    convert || (convert = setToArray);
                    if (object.size != other.size && !isPartial) return false;
                    // Assume cyclic values are equal.
                    var stacked = stack.get(object);
                    if (stacked) return stacked == other;
                    bitmask |= COMPARE_UNORDERED_FLAG;
                    // Recursively compare objects (susceptible to call stack limits).
                    stack.set(object, other);
                    var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
                    stack["delete"](object);
                    return result;
                case symbolTag:
                    if (symbolValueOf) return symbolValueOf.call(object) == symbolValueOf.call(other);
            }
            return false;
        }
        /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */ function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
            if (objLength != othLength && !isPartial) return false;
            var index = objLength;
            while(index--){
                var key = objProps[index];
                if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) return false;
            }
            // Check that cyclic values are equal.
            var objStacked = stack.get(object);
            var othStacked = stack.get(other);
            if (objStacked && othStacked) return objStacked == other && othStacked == object;
            var result = true;
            stack.set(object, other);
            stack.set(other, object);
            var skipCtor = isPartial;
            while(++index < objLength){
                key = objProps[index];
                var objValue = object[key], othValue = other[key];
                if (customizer) var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
                // Recursively compare objects (susceptible to call stack limits).
                if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
                    result = false;
                    break;
                }
                skipCtor || (skipCtor = key == "constructor");
            }
            if (result && !skipCtor) {
                var objCtor = object.constructor, othCtor = other.constructor;
                // Non `Object` object instances with different constructors are not equal.
                if (objCtor != othCtor && "constructor" in object && "constructor" in other && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) result = false;
            }
            stack["delete"](object);
            stack["delete"](other);
            return result;
        }
        /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */ function flatRest(func) {
            return setToString(overRest(func, undefined, flatten), func + "");
        }
        /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */ function getAllKeys(object) {
            return baseGetAllKeys(object, keys, getSymbols);
        }
        /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */ function getAllKeysIn(object) {
            return baseGetAllKeys(object, keysIn, getSymbolsIn);
        }
        /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */ var getData = !metaMap ? noop : function(func) {
            return metaMap.get(func);
        };
        /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */ function getFuncName(func) {
            var result = func.name + "", array = realNames[result], length = hasOwnProperty.call(realNames, result) ? array.length : 0;
            while(length--){
                var data = array[length], otherFunc = data.func;
                if (otherFunc == null || otherFunc == func) return data.name;
            }
            return result;
        }
        /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */ function getHolder(func) {
            var object = hasOwnProperty.call(lodash, "placeholder") ? lodash : func;
            return object.placeholder;
        }
        /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */ function getIteratee() {
            var result = lodash.iteratee || iteratee;
            result = result === iteratee ? baseIteratee : result;
            return arguments.length ? result(arguments[0], arguments[1]) : result;
        }
        /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */ function getMapData(map, key) {
            var data = map.__data__;
            return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
        }
        /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */ function getMatchData(object) {
            var result = keys(object), length = result.length;
            while(length--){
                var key = result[length], value = object[key];
                result[length] = [
                    key,
                    value,
                    isStrictComparable(value)
                ];
            }
            return result;
        }
        /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */ function getNative(object, key) {
            var value = getValue(object, key);
            return baseIsNative(value) ? value : undefined;
        }
        /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */ function getRawTag(value) {
            var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
            try {
                value[symToStringTag] = undefined;
                var unmasked = true;
            } catch (e) {}
            var result = nativeObjectToString.call(value);
            if (unmasked) {
                if (isOwn) value[symToStringTag] = tag;
                else delete value[symToStringTag];
            }
            return result;
        }
        /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */ var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
            if (object == null) return [];
            object = Object1(object);
            return arrayFilter(nativeGetSymbols(object), function(symbol) {
                return propertyIsEnumerable.call(object, symbol);
            });
        };
        /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */ var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
            var result = [];
            while(object){
                arrayPush(result, getSymbols(object));
                object = getPrototype(object);
            }
            return result;
        };
        /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */ var getTag = baseGetTag;
        // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
        if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set) != setTag || WeakMap && getTag(new WeakMap) != weakMapTag) getTag = function(value) {
            var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : undefined, ctorString = Ctor ? toSource(Ctor) : "";
            if (ctorString) switch(ctorString){
                case dataViewCtorString:
                    return dataViewTag;
                case mapCtorString:
                    return mapTag;
                case promiseCtorString:
                    return promiseTag;
                case setCtorString:
                    return setTag;
                case weakMapCtorString:
                    return weakMapTag;
            }
            return result;
        };
        /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */ function getView(start, end, transforms) {
            var index = -1, length = transforms.length;
            while(++index < length){
                var data = transforms[index], size = data.size;
                switch(data.type){
                    case "drop":
                        start += size;
                        break;
                    case "dropRight":
                        end -= size;
                        break;
                    case "take":
                        end = nativeMin(end, start + size);
                        break;
                    case "takeRight":
                        start = nativeMax(start, end - size);
                        break;
                }
            }
            return {
                "start": start,
                "end": end
            };
        }
        /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */ function getWrapDetails(source) {
            var match = source.match(reWrapDetails);
            return match ? match[1].split(reSplitDetails) : [];
        }
        /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */ function hasPath(object, path, hasFunc) {
            path = castPath(path, object);
            var index = -1, length = path.length, result = false;
            while(++index < length){
                var key = toKey(path[index]);
                if (!(result = object != null && hasFunc(object, key))) break;
                object = object[key];
            }
            if (result || ++index != length) return result;
            length = object == null ? 0 : object.length;
            return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
        }
        /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */ function initCloneArray(array) {
            var length = array.length, result = new array.constructor(length);
            // Add properties assigned by `RegExp#exec`.
            if (length && typeof array[0] == "string" && hasOwnProperty.call(array, "index")) {
                result.index = array.index;
                result.input = array.input;
            }
            return result;
        }
        /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */ function initCloneObject(object) {
            return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
        }
        /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */ function initCloneByTag(object, tag, isDeep) {
            var Ctor = object.constructor;
            switch(tag){
                case arrayBufferTag:
                    return cloneArrayBuffer(object);
                case boolTag:
                case dateTag:
                    return new Ctor(+object);
                case dataViewTag:
                    return cloneDataView(object, isDeep);
                case float32Tag:
                case float64Tag:
                case int8Tag:
                case int16Tag:
                case int32Tag:
                case uint8Tag:
                case uint8ClampedTag:
                case uint16Tag:
                case uint32Tag:
                    return cloneTypedArray(object, isDeep);
                case mapTag:
                    return new Ctor;
                case numberTag:
                case stringTag:
                    return new Ctor(object);
                case regexpTag:
                    return cloneRegExp(object);
                case setTag:
                    return new Ctor;
                case symbolTag:
                    return cloneSymbol(object);
            }
        }
        /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */ function insertWrapDetails(source, details) {
            var length = details.length;
            if (!length) return source;
            var lastIndex = length - 1;
            details[lastIndex] = (length > 1 ? "& " : "") + details[lastIndex];
            details = details.join(length > 2 ? ", " : " ");
            return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
        }
        /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */ function isFlattenable(value) {
            return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
        }
        /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */ function isIndex(value, length) {
            var type = typeof value;
            length = length == null ? MAX_SAFE_INTEGER : length;
            return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
        }
        /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */ function isIterateeCall(value, index, object) {
            if (!isObject(object)) return false;
            var type = typeof index;
            if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) return eq(object[index], value);
            return false;
        }
        /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */ function isKey(value, object) {
            if (isArray(value)) return false;
            var type = typeof value;
            if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) return true;
            return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object1(object);
        }
        /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */ function isKeyable(value) {
            var type = typeof value;
            return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
        }
        /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */ function isLaziable(func) {
            var funcName = getFuncName(func), other = lodash[funcName];
            if (typeof other != "function" || !(funcName in LazyWrapper.prototype)) return false;
            if (func === other) return true;
            var data = getData(other);
            return !!data && func === data[0];
        }
        /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */ function isMasked(func) {
            return !!maskSrcKey && maskSrcKey in func;
        }
        /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */ var isMaskable = coreJsData ? isFunction : stubFalse;
        /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */ function isPrototype(value) {
            var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
            return value === proto;
        }
        /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */ function isStrictComparable(value) {
            return value === value && !isObject(value);
        }
        /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */ function matchesStrictComparable(key, srcValue) {
            return function(object) {
                if (object == null) return false;
                return object[key] === srcValue && (srcValue !== undefined || key in Object1(object));
            };
        }
        /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */ function memoizeCapped(func) {
            var result = memoize(func, function(key) {
                if (cache.size === MAX_MEMOIZE_SIZE) cache.clear();
                return key;
            });
            var cache = result.cache;
            return result;
        }
        /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */ function mergeData(data, source) {
            var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
            var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
            // Exit early if metadata can't be merged.
            if (!(isCommon || isCombo)) return data;
            // Use source `thisArg` if available.
            if (srcBitmask & WRAP_BIND_FLAG) {
                data[2] = source[2];
                // Set when currying a bound function.
                newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
            }
            // Compose partial arguments.
            var value = source[3];
            if (value) {
                var partials = data[3];
                data[3] = partials ? composeArgs(partials, value, source[4]) : value;
                data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
            }
            // Compose partial right arguments.
            value = source[5];
            if (value) {
                partials = data[5];
                data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
                data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
            }
            // Use source `argPos` if available.
            value = source[7];
            if (value) data[7] = value;
            // Use source `ary` if it's smaller.
            if (srcBitmask & WRAP_ARY_FLAG) data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
            // Use source `arity` if one is not provided.
            if (data[9] == null) data[9] = source[9];
            // Use source `func` and merge bitmasks.
            data[0] = source[0];
            data[1] = newBitmask;
            return data;
        }
        /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */ function nativeKeysIn(object) {
            var result = [];
            if (object != null) for(var key in Object1(object))result.push(key);
            return result;
        }
        /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */ function objectToString(value) {
            return nativeObjectToString.call(value);
        }
        /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */ function overRest(func, start, transform) {
            start = nativeMax(start === undefined ? func.length - 1 : start, 0);
            return function() {
                var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array1(length);
                while(++index < length)array[index] = args[start + index];
                index = -1;
                var otherArgs = Array1(start + 1);
                while(++index < start)otherArgs[index] = args[index];
                otherArgs[start] = transform(array);
                return apply(func, this, otherArgs);
            };
        }
        /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */ function parent(object, path) {
            return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
        }
        /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */ function reorder(array, indexes) {
            var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array);
            while(length--){
                var index = indexes[length];
                array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
            }
            return array;
        }
        /**
     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */ function safeGet(object, key) {
            if (key === "constructor" && typeof object[key] === "function") return;
            if (key == "__proto__") return;
            return object[key];
        }
        /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */ var setData = shortOut(baseSetData);
        /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */ var setTimeout = ctxSetTimeout || function(func, wait) {
            return root.setTimeout(func, wait);
        };
        /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */ var setToString = shortOut(baseSetToString);
        /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */ function setWrapToString(wrapper, reference, bitmask) {
            var source = reference + "";
            return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
        }
        /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */ function shortOut(func) {
            var count = 0, lastCalled = 0;
            return function() {
                var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
                lastCalled = stamp;
                if (remaining > 0) {
                    if (++count >= HOT_COUNT) return arguments[0];
                } else count = 0;
                return func.apply(undefined, arguments);
            };
        }
        /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */ function shuffleSelf(array, size) {
            var index = -1, length = array.length, lastIndex = length - 1;
            size = size === undefined ? length : size;
            while(++index < size){
                var rand = baseRandom(index, lastIndex), value = array[rand];
                array[rand] = array[index];
                array[index] = value;
            }
            array.length = size;
            return array;
        }
        /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */ var stringToPath = memoizeCapped(function(string) {
            var result = [];
            if (string.charCodeAt(0) === 46 /* . */ ) result.push("");
            string.replace(rePropName, function(match, number, quote, subString) {
                result.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
            });
            return result;
        });
        /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */ function toKey(value) {
            if (typeof value == "string" || isSymbol(value)) return value;
            var result = value + "";
            return result == "0" && 1 / value == -INFINITY ? "-0" : result;
        }
        /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */ function toSource(func) {
            if (func != null) {
                try {
                    return funcToString.call(func);
                } catch (e) {}
                try {
                    return func + "";
                } catch (e1) {}
            }
            return "";
        }
        /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */ function updateWrapDetails(details, bitmask) {
            arrayEach(wrapFlags, function(pair) {
                var value = "_." + pair[0];
                if (bitmask & pair[1] && !arrayIncludes(details, value)) details.push(value);
            });
            return details.sort();
        }
        /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */ function wrapperClone(wrapper) {
            if (wrapper instanceof LazyWrapper) return wrapper.clone();
            var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
            result.__actions__ = copyArray(wrapper.__actions__);
            result.__index__ = wrapper.__index__;
            result.__values__ = wrapper.__values__;
            return result;
        }
        /*------------------------------------------------------------------------*/ /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */ function chunk(array, size, guard) {
            if (guard ? isIterateeCall(array, size, guard) : size === undefined) size = 1;
            else size = nativeMax(toInteger(size), 0);
            var length = array == null ? 0 : array.length;
            if (!length || size < 1) return [];
            var index = 0, resIndex = 0, result = Array1(nativeCeil(length / size));
            while(index < length)result[resIndex++] = baseSlice(array, index, index += size);
            return result;
        }
        /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */ function compact(array) {
            var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
            while(++index < length){
                var value = array[index];
                if (value) result[resIndex++] = value;
            }
            return result;
        }
        /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */ function concat() {
            var length = arguments.length;
            if (!length) return [];
            var args = Array1(length - 1), array = arguments[0], index = length;
            while(index--)args[index - 1] = arguments[index];
            return arrayPush(isArray(array) ? copyArray(array) : [
                array
            ], baseFlatten(args, 1));
        }
        /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */ var difference = baseRest(function(array, values) {
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true)) : [];
        });
        /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */ var differenceBy = baseRest(function(array, values) {
            var iteratee = last(values);
            if (isArrayLikeObject(iteratee)) iteratee = undefined;
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2)) : [];
        });
        /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */ var differenceWith = baseRest(function(array, values) {
            var comparator = last(values);
            if (isArrayLikeObject(comparator)) comparator = undefined;
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator) : [];
        });
        /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */ function drop(array, n, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) return [];
            n = guard || n === undefined ? 1 : toInteger(n);
            return baseSlice(array, n < 0 ? 0 : n, length);
        }
        /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */ function dropRight(array, n, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) return [];
            n = guard || n === undefined ? 1 : toInteger(n);
            n = length - n;
            return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */ function dropRightWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
        }
        /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */ function dropWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
        }
        /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */ function fill(array, value, start, end) {
            var length = array == null ? 0 : array.length;
            if (!length) return [];
            if (start && typeof start != "number" && isIterateeCall(array, value, start)) {
                start = 0;
                end = length;
            }
            return baseFill(array, value, start, end);
        }
        /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */ function findIndex(array, predicate, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) return -1;
            var index = fromIndex == null ? 0 : toInteger(fromIndex);
            if (index < 0) index = nativeMax(length + index, 0);
            return baseFindIndex(array, getIteratee(predicate, 3), index);
        }
        /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */ function findLastIndex(array, predicate, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) return -1;
            var index = length - 1;
            if (fromIndex !== undefined) {
                index = toInteger(fromIndex);
                index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
            }
            return baseFindIndex(array, getIteratee(predicate, 3), index, true);
        }
        /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */ function flatten(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseFlatten(array, 1) : [];
        }
        /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */ function flattenDeep(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseFlatten(array, INFINITY) : [];
        }
        /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */ function flattenDepth(array, depth) {
            var length = array == null ? 0 : array.length;
            if (!length) return [];
            depth = depth === undefined ? 1 : toInteger(depth);
            return baseFlatten(array, depth);
        }
        /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */ function fromPairs(pairs) {
            var index = -1, length = pairs == null ? 0 : pairs.length, result = {};
            while(++index < length){
                var pair = pairs[index];
                result[pair[0]] = pair[1];
            }
            return result;
        }
        /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */ function head(array) {
            return array && array.length ? array[0] : undefined;
        }
        /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */ function indexOf(array, value, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) return -1;
            var index = fromIndex == null ? 0 : toInteger(fromIndex);
            if (index < 0) index = nativeMax(length + index, 0);
            return baseIndexOf(array, value, index);
        }
        /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */ function initial(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseSlice(array, 0, -1) : [];
        }
        /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */ var intersection = baseRest(function(arrays) {
            var mapped = arrayMap(arrays, castArrayLikeObject);
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
        });
        /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */ var intersectionBy = baseRest(function(arrays) {
            var iteratee = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
            if (iteratee === last(mapped)) iteratee = undefined;
            else mapped.pop();
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee, 2)) : [];
        });
        /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */ var intersectionWith = baseRest(function(arrays) {
            var comparator = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
            comparator = typeof comparator == "function" ? comparator : undefined;
            if (comparator) mapped.pop();
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined, comparator) : [];
        });
        /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */ function join(array, separator) {
            return array == null ? "" : nativeJoin.call(array, separator);
        }
        /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */ function last(array) {
            var length = array == null ? 0 : array.length;
            return length ? array[length - 1] : undefined;
        }
        /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */ function lastIndexOf(array, value, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) return -1;
            var index = length;
            if (fromIndex !== undefined) {
                index = toInteger(fromIndex);
                index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
            }
            return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex(array, baseIsNaN, index, true);
        }
        /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */ function nth(array, n) {
            return array && array.length ? baseNth(array, toInteger(n)) : undefined;
        }
        /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */ var pull = baseRest(pullAll);
        /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */ function pullAll(array, values) {
            return array && array.length && values && values.length ? basePullAll(array, values) : array;
        }
        /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */ function pullAllBy(array, values, iteratee) {
            return array && array.length && values && values.length ? basePullAll(array, values, getIteratee(iteratee, 2)) : array;
        }
        /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */ function pullAllWith(array, values, comparator) {
            return array && array.length && values && values.length ? basePullAll(array, values, undefined, comparator) : array;
        }
        /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */ var pullAt = flatRest(function(array, indexes) {
            var length = array == null ? 0 : array.length, result = baseAt(array, indexes);
            basePullAt(array, arrayMap(indexes, function(index) {
                return isIndex(index, length) ? +index : index;
            }).sort(compareAscending));
            return result;
        });
        /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */ function remove(array, predicate) {
            var result = [];
            if (!(array && array.length)) return result;
            var index = -1, indexes = [], length = array.length;
            predicate = getIteratee(predicate, 3);
            while(++index < length){
                var value = array[index];
                if (predicate(value, index, array)) {
                    result.push(value);
                    indexes.push(index);
                }
            }
            basePullAt(array, indexes);
            return result;
        }
        /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */ function reverse(array) {
            return array == null ? array : nativeReverse.call(array);
        }
        /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */ function slice(array, start, end) {
            var length = array == null ? 0 : array.length;
            if (!length) return [];
            if (end && typeof end != "number" && isIterateeCall(array, start, end)) {
                start = 0;
                end = length;
            } else {
                start = start == null ? 0 : toInteger(start);
                end = end === undefined ? length : toInteger(end);
            }
            return baseSlice(array, start, end);
        }
        /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */ function sortedIndex(array, value) {
            return baseSortedIndex(array, value);
        }
        /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */ function sortedIndexBy(array, value, iteratee) {
            return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
        }
        /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */ function sortedIndexOf(array, value) {
            var length = array == null ? 0 : array.length;
            if (length) {
                var index = baseSortedIndex(array, value);
                if (index < length && eq(array[index], value)) return index;
            }
            return -1;
        }
        /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */ function sortedLastIndex(array, value) {
            return baseSortedIndex(array, value, true);
        }
        /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */ function sortedLastIndexBy(array, value, iteratee) {
            return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
        }
        /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */ function sortedLastIndexOf(array, value) {
            var length = array == null ? 0 : array.length;
            if (length) {
                var index = baseSortedIndex(array, value, true) - 1;
                if (eq(array[index], value)) return index;
            }
            return -1;
        }
        /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */ function sortedUniq(array) {
            return array && array.length ? baseSortedUniq(array) : [];
        }
        /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */ function sortedUniqBy(array, iteratee) {
            return array && array.length ? baseSortedUniq(array, getIteratee(iteratee, 2)) : [];
        }
        /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */ function tail(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseSlice(array, 1, length) : [];
        }
        /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */ function take(array, n, guard) {
            if (!(array && array.length)) return [];
            n = guard || n === undefined ? 1 : toInteger(n);
            return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */ function takeRight(array, n, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) return [];
            n = guard || n === undefined ? 1 : toInteger(n);
            n = length - n;
            return baseSlice(array, n < 0 ? 0 : n, length);
        }
        /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */ function takeRightWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
        }
        /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */ function takeWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
        }
        /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */ var union = baseRest(function(arrays) {
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
        });
        /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */ var unionBy = baseRest(function(arrays) {
            var iteratee = last(arrays);
            if (isArrayLikeObject(iteratee)) iteratee = undefined;
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
        });
        /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */ var unionWith = baseRest(function(arrays) {
            var comparator = last(arrays);
            comparator = typeof comparator == "function" ? comparator : undefined;
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
        });
        /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */ function uniq(array) {
            return array && array.length ? baseUniq(array) : [];
        }
        /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */ function uniqBy(array, iteratee) {
            return array && array.length ? baseUniq(array, getIteratee(iteratee, 2)) : [];
        }
        /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */ function uniqWith(array, comparator) {
            comparator = typeof comparator == "function" ? comparator : undefined;
            return array && array.length ? baseUniq(array, undefined, comparator) : [];
        }
        /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */ function unzip(array) {
            if (!(array && array.length)) return [];
            var length = 0;
            array = arrayFilter(array, function(group) {
                if (isArrayLikeObject(group)) {
                    length = nativeMax(group.length, length);
                    return true;
                }
            });
            return baseTimes(length, function(index) {
                return arrayMap(array, baseProperty(index));
            });
        }
        /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */ function unzipWith(array, iteratee) {
            if (!(array && array.length)) return [];
            var result = unzip(array);
            if (iteratee == null) return result;
            return arrayMap(result, function(group) {
                return apply(iteratee, undefined, group);
            });
        }
        /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */ var without = baseRest(function(array, values) {
            return isArrayLikeObject(array) ? baseDifference(array, values) : [];
        });
        /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */ var xor = baseRest(function(arrays) {
            return baseXor(arrayFilter(arrays, isArrayLikeObject));
        });
        /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */ var xorBy = baseRest(function(arrays) {
            var iteratee = last(arrays);
            if (isArrayLikeObject(iteratee)) iteratee = undefined;
            return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
        });
        /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */ var xorWith = baseRest(function(arrays) {
            var comparator = last(arrays);
            comparator = typeof comparator == "function" ? comparator : undefined;
            return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
        });
        /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */ var zip = baseRest(unzip);
        /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */ function zipObject(props, values) {
            return baseZipObject(props || [], values || [], assignValue);
        }
        /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */ function zipObjectDeep(props, values) {
            return baseZipObject(props || [], values || [], baseSet);
        }
        /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */ var zipWith = baseRest(function(arrays) {
            var length = arrays.length, iteratee = length > 1 ? arrays[length - 1] : undefined;
            iteratee = typeof iteratee == "function" ? (arrays.pop(), iteratee) : undefined;
            return unzipWith(arrays, iteratee);
        });
        /*------------------------------------------------------------------------*/ /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */ function chain(value) {
            var result = lodash(value);
            result.__chain__ = true;
            return result;
        }
        /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */ function tap(value, interceptor) {
            interceptor(value);
            return value;
        }
        /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */ function thru(value, interceptor) {
            return interceptor(value);
        }
        /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */ var wrapperAt = flatRest(function(paths) {
            var length = paths.length, start = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function(object) {
                return baseAt(object, paths);
            };
            if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) return this.thru(interceptor);
            value = value.slice(start, +start + (length ? 1 : 0));
            value.__actions__.push({
                "func": thru,
                "args": [
                    interceptor
                ],
                "thisArg": undefined
            });
            return new LodashWrapper(value, this.__chain__).thru(function(array) {
                if (length && !array.length) array.push(undefined);
                return array;
            });
        });
        /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */ function wrapperChain() {
            return chain(this);
        }
        /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */ function wrapperCommit() {
            return new LodashWrapper(this.value(), this.__chain__);
        }
        /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */ function wrapperNext() {
            if (this.__values__ === undefined) this.__values__ = toArray(this.value());
            var done = this.__index__ >= this.__values__.length, value = done ? undefined : this.__values__[this.__index__++];
            return {
                "done": done,
                "value": value
            };
        }
        /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */ function wrapperToIterator() {
            return this;
        }
        /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */ function wrapperPlant(value) {
            var result, parent = this;
            while(parent instanceof baseLodash){
                var clone = wrapperClone(parent);
                clone.__index__ = 0;
                clone.__values__ = undefined;
                if (result) previous.__wrapped__ = clone;
                else result = clone;
                var previous = clone;
                parent = parent.__wrapped__;
            }
            previous.__wrapped__ = value;
            return result;
        }
        /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */ function wrapperReverse() {
            var value = this.__wrapped__;
            if (value instanceof LazyWrapper) {
                var wrapped = value;
                if (this.__actions__.length) wrapped = new LazyWrapper(this);
                wrapped = wrapped.reverse();
                wrapped.__actions__.push({
                    "func": thru,
                    "args": [
                        reverse
                    ],
                    "thisArg": undefined
                });
                return new LodashWrapper(wrapped, this.__chain__);
            }
            return this.thru(reverse);
        }
        /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */ function wrapperValue() {
            return baseWrapperValue(this.__wrapped__, this.__actions__);
        }
        /*------------------------------------------------------------------------*/ /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */ var countBy = createAggregator(function(result, value, key) {
            if (hasOwnProperty.call(result, key)) ++result[key];
            else baseAssignValue(result, key, 1);
        });
        /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */ function every(collection, predicate, guard) {
            var func = isArray(collection) ? arrayEvery : baseEvery;
            if (guard && isIterateeCall(collection, predicate, guard)) predicate = undefined;
            return func(collection, getIteratee(predicate, 3));
        }
        /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     *
     * // Combining several predicates using `_.overEvery` or `_.overSome`.
     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
     * // => objects for ['fred', 'barney']
     */ function filter(collection, predicate) {
            var func = isArray(collection) ? arrayFilter : baseFilter;
            return func(collection, getIteratee(predicate, 3));
        }
        /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */ var find = createFind(findIndex);
        /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */ var findLast = createFind(findLastIndex);
        /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */ function flatMap(collection, iteratee) {
            return baseFlatten(map(collection, iteratee), 1);
        }
        /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */ function flatMapDeep(collection, iteratee) {
            return baseFlatten(map(collection, iteratee), INFINITY);
        }
        /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */ function flatMapDepth(collection, iteratee, depth) {
            depth = depth === undefined ? 1 : toInteger(depth);
            return baseFlatten(map(collection, iteratee), depth);
        }
        /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */ function forEach(collection, iteratee) {
            var func = isArray(collection) ? arrayEach : baseEach;
            return func(collection, getIteratee(iteratee, 3));
        }
        /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */ function forEachRight(collection, iteratee) {
            var func = isArray(collection) ? arrayEachRight : baseEachRight;
            return func(collection, getIteratee(iteratee, 3));
        }
        /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */ var groupBy = createAggregator(function(result, value, key) {
            if (hasOwnProperty.call(result, key)) result[key].push(value);
            else baseAssignValue(result, key, [
                value
            ]);
        });
        /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */ function includes(collection, value, fromIndex, guard) {
            collection = isArrayLike(collection) ? collection : values(collection);
            fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
            var length = collection.length;
            if (fromIndex < 0) fromIndex = nativeMax(length + fromIndex, 0);
            return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
        }
        /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */ var invokeMap = baseRest(function(collection, path, args) {
            var index = -1, isFunc = typeof path == "function", result = isArrayLike(collection) ? Array1(collection.length) : [];
            baseEach(collection, function(value) {
                result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
            });
            return result;
        });
        /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */ var keyBy = createAggregator(function(result, value, key) {
            baseAssignValue(result, key, value);
        });
        /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */ function map(collection, iteratee) {
            var func = isArray(collection) ? arrayMap : baseMap;
            return func(collection, getIteratee(iteratee, 3));
        }
        /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */ function orderBy(collection, iteratees, orders, guard) {
            if (collection == null) return [];
            if (!isArray(iteratees)) iteratees = iteratees == null ? [] : [
                iteratees
            ];
            orders = guard ? undefined : orders;
            if (!isArray(orders)) orders = orders == null ? [] : [
                orders
            ];
            return baseOrderBy(collection, iteratees, orders);
        }
        /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */ var partition = createAggregator(function(result, value, key) {
            result[key ? 0 : 1].push(value);
        }, function() {
            return [
                [],
                []
            ];
        });
        /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */ function reduce(collection, iteratee, accumulator) {
            var func = isArray(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
            return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
        }
        /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */ function reduceRight(collection, iteratee, accumulator) {
            var func = isArray(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
            return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
        }
        /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */ function reject(collection, predicate) {
            var func = isArray(collection) ? arrayFilter : baseFilter;
            return func(collection, negate(getIteratee(predicate, 3)));
        }
        /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */ function sample(collection) {
            var func = isArray(collection) ? arraySample : baseSample;
            return func(collection);
        }
        /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */ function sampleSize(collection, n, guard) {
            if (guard ? isIterateeCall(collection, n, guard) : n === undefined) n = 1;
            else n = toInteger(n);
            var func = isArray(collection) ? arraySampleSize : baseSampleSize;
            return func(collection, n);
        }
        /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */ function shuffle(collection) {
            var func = isArray(collection) ? arrayShuffle : baseShuffle;
            return func(collection);
        }
        /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */ function size(collection) {
            if (collection == null) return 0;
            if (isArrayLike(collection)) return isString(collection) ? stringSize(collection) : collection.length;
            var tag = getTag(collection);
            if (tag == mapTag || tag == setTag) return collection.size;
            return baseKeys(collection).length;
        }
        /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */ function some(collection, predicate, guard) {
            var func = isArray(collection) ? arraySome : baseSome;
            if (guard && isIterateeCall(collection, predicate, guard)) predicate = undefined;
            return func(collection, getIteratee(predicate, 3));
        }
        /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 30 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
     */ var sortBy = baseRest(function(collection, iteratees) {
            if (collection == null) return [];
            var length = iteratees.length;
            if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) iteratees = [];
            else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) iteratees = [
                iteratees[0]
            ];
            return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
        });
        /*------------------------------------------------------------------------*/ /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */ var now = ctxNow || function() {
            return root.Date.now();
        };
        /*------------------------------------------------------------------------*/ /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */ function after(n, func) {
            if (typeof func != "function") throw new TypeError(FUNC_ERROR_TEXT);
            n = toInteger(n);
            return function() {
                if (--n < 1) return func.apply(this, arguments);
            };
        }
        /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */ function ary(func, n, guard) {
            n = guard ? undefined : n;
            n = func && n == null ? func.length : n;
            return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
        }
        /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */ function before(n, func) {
            var result;
            if (typeof func != "function") throw new TypeError(FUNC_ERROR_TEXT);
            n = toInteger(n);
            return function() {
                if (--n > 0) result = func.apply(this, arguments);
                if (n <= 1) func = undefined;
                return result;
            };
        }
        /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */ var bind = baseRest(function(func, thisArg, partials) {
            var bitmask = WRAP_BIND_FLAG;
            if (partials.length) {
                var holders = replaceHolders(partials, getHolder(bind));
                bitmask |= WRAP_PARTIAL_FLAG;
            }
            return createWrap(func, bitmask, thisArg, partials, holders);
        });
        /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */ var bindKey = baseRest(function(object, key, partials) {
            var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
            if (partials.length) {
                var holders = replaceHolders(partials, getHolder(bindKey));
                bitmask |= WRAP_PARTIAL_FLAG;
            }
            return createWrap(key, bitmask, object, partials, holders);
        });
        /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */ function curry(func, arity, guard) {
            arity = guard ? undefined : arity;
            var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
            result.placeholder = curry.placeholder;
            return result;
        }
        /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */ function curryRight(func, arity, guard) {
            arity = guard ? undefined : arity;
            var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
            result.placeholder = curryRight.placeholder;
            return result;
        }
        /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */ function debounce(func, wait, options) {
            var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
            if (typeof func != "function") throw new TypeError(FUNC_ERROR_TEXT);
            wait = toNumber(wait) || 0;
            if (isObject(options)) {
                leading = !!options.leading;
                maxing = "maxWait" in options;
                maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
                trailing = "trailing" in options ? !!options.trailing : trailing;
            }
            function invokeFunc(time) {
                var args = lastArgs, thisArg = lastThis;
                lastArgs = lastThis = undefined;
                lastInvokeTime = time;
                result = func.apply(thisArg, args);
                return result;
            }
            function leadingEdge(time) {
                // Reset any `maxWait` timer.
                lastInvokeTime = time;
                // Start the timer for the trailing edge.
                timerId = setTimeout(timerExpired, wait);
                // Invoke the leading edge.
                return leading ? invokeFunc(time) : result;
            }
            function remainingWait(time) {
                var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
                return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
            }
            function shouldInvoke(time) {
                var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
                // Either this is the first call, activity has stopped and we're at the
                // trailing edge, the system time has gone backwards and we're treating
                // it as the trailing edge, or we've hit the `maxWait` limit.
                return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
            }
            function timerExpired() {
                var time = now();
                if (shouldInvoke(time)) return trailingEdge(time);
                // Restart the timer.
                timerId = setTimeout(timerExpired, remainingWait(time));
            }
            function trailingEdge(time) {
                timerId = undefined;
                // Only invoke if we have `lastArgs` which means `func` has been
                // debounced at least once.
                if (trailing && lastArgs) return invokeFunc(time);
                lastArgs = lastThis = undefined;
                return result;
            }
            function cancel() {
                if (timerId !== undefined) clearTimeout(timerId);
                lastInvokeTime = 0;
                lastArgs = lastCallTime = lastThis = timerId = undefined;
            }
            function flush() {
                return timerId === undefined ? result : trailingEdge(now());
            }
            function debounced() {
                var time = now(), isInvoking = shouldInvoke(time);
                lastArgs = arguments;
                lastThis = this;
                lastCallTime = time;
                if (isInvoking) {
                    if (timerId === undefined) return leadingEdge(lastCallTime);
                    if (maxing) {
                        // Handle invocations in a tight loop.
                        clearTimeout(timerId);
                        timerId = setTimeout(timerExpired, wait);
                        return invokeFunc(lastCallTime);
                    }
                }
                if (timerId === undefined) timerId = setTimeout(timerExpired, wait);
                return result;
            }
            debounced.cancel = cancel;
            debounced.flush = flush;
            return debounced;
        }
        /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */ var defer = baseRest(function(func, args) {
            return baseDelay(func, 1, args);
        });
        /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */ var delay = baseRest(function(func, wait, args) {
            return baseDelay(func, toNumber(wait) || 0, args);
        });
        /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */ function flip(func) {
            return createWrap(func, WRAP_FLIP_FLAG);
        }
        /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */ function memoize(func, resolver) {
            if (typeof func != "function" || resolver != null && typeof resolver != "function") throw new TypeError(FUNC_ERROR_TEXT);
            var memoized = function() {
                var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
                if (cache.has(key)) return cache.get(key);
                var result = func.apply(this, args);
                memoized.cache = cache.set(key, result) || cache;
                return result;
            };
            memoized.cache = new (memoize.Cache || MapCache);
            return memoized;
        }
        // Expose `MapCache`.
        memoize.Cache = MapCache;
        /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */ function negate(predicate) {
            if (typeof predicate != "function") throw new TypeError(FUNC_ERROR_TEXT);
            return function() {
                var args = arguments;
                switch(args.length){
                    case 0:
                        return !predicate.call(this);
                    case 1:
                        return !predicate.call(this, args[0]);
                    case 2:
                        return !predicate.call(this, args[0], args[1]);
                    case 3:
                        return !predicate.call(this, args[0], args[1], args[2]);
                }
                return !predicate.apply(this, args);
            };
        }
        /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */ function once(func) {
            return before(2, func);
        }
        /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */ var overArgs = castRest(function(func, transforms) {
            transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
            var funcsLength = transforms.length;
            return baseRest(function(args) {
                var index = -1, length = nativeMin(args.length, funcsLength);
                while(++index < length)args[index] = transforms[index].call(this, args[index]);
                return apply(func, this, args);
            });
        });
        /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */ var partial = baseRest(function(func, partials) {
            var holders = replaceHolders(partials, getHolder(partial));
            return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
        });
        /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */ var partialRight = baseRest(function(func, partials) {
            var holders = replaceHolders(partials, getHolder(partialRight));
            return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
        });
        /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */ var rearg = flatRest(function(func, indexes) {
            return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
        });
        /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */ function rest(func, start) {
            if (typeof func != "function") throw new TypeError(FUNC_ERROR_TEXT);
            start = start === undefined ? start : toInteger(start);
            return baseRest(func, start);
        }
        /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */ function spread(func, start) {
            if (typeof func != "function") throw new TypeError(FUNC_ERROR_TEXT);
            start = start == null ? 0 : nativeMax(toInteger(start), 0);
            return baseRest(function(args) {
                var array = args[start], otherArgs = castSlice(args, 0, start);
                if (array) arrayPush(otherArgs, array);
                return apply(func, this, otherArgs);
            });
        }
        /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */ function throttle(func, wait, options) {
            var leading = true, trailing = true;
            if (typeof func != "function") throw new TypeError(FUNC_ERROR_TEXT);
            if (isObject(options)) {
                leading = "leading" in options ? !!options.leading : leading;
                trailing = "trailing" in options ? !!options.trailing : trailing;
            }
            return debounce(func, wait, {
                "leading": leading,
                "maxWait": wait,
                "trailing": trailing
            });
        }
        /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */ function unary(func) {
            return ary(func, 1);
        }
        /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */ function wrap(value, wrapper) {
            return partial(castFunction(wrapper), value);
        }
        /*------------------------------------------------------------------------*/ /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */ function castArray() {
            if (!arguments.length) return [];
            var value = arguments[0];
            return isArray(value) ? value : [
                value
            ];
        }
        /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */ function clone(value) {
            return baseClone(value, CLONE_SYMBOLS_FLAG);
        }
        /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */ function cloneWith(value, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined;
            return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
        }
        /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */ function cloneDeep(value) {
            return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
        }
        /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */ function cloneDeepWith(value, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined;
            return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
        }
        /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */ function conformsTo(object, source) {
            return source == null || baseConformsTo(object, source, keys(source));
        }
        /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */ function eq(value, other) {
            return value === other || value !== value && other !== other;
        }
        /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */ var gt = createRelationalOperation(baseGt);
        /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */ var gte = createRelationalOperation(function(value, other) {
            return value >= other;
        });
        /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */ var isArguments = baseIsArguments(function() {
            return arguments;
        }()) ? baseIsArguments : function(value) {
            return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
        };
        /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */ var isArray = Array1.isArray;
        /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */ var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
        /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */ function isArrayLike(value) {
            return value != null && isLength(value.length) && !isFunction(value);
        }
        /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */ function isArrayLikeObject(value) {
            return isObjectLike(value) && isArrayLike(value);
        }
        /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */ function isBoolean(value) {
            return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
        }
        /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */ var isBuffer = nativeIsBuffer || stubFalse;
        /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */ var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
        /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */ function isElement(value) {
            return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
        }
        /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */ function isEmpty(value) {
            if (value == null) return true;
            if (isArrayLike(value) && (isArray(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer(value) || isTypedArray(value) || isArguments(value))) return !value.length;
            var tag = getTag(value);
            if (tag == mapTag || tag == setTag) return !value.size;
            if (isPrototype(value)) return !baseKeys(value).length;
            for(var key in value){
                if (hasOwnProperty.call(value, key)) return false;
            }
            return true;
        }
        /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */ function isEqual(value, other) {
            return baseIsEqual(value, other);
        }
        /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */ function isEqualWith(value, other, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined;
            var result = customizer ? customizer(value, other) : undefined;
            return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
        }
        /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */ function isError(value) {
            if (!isObjectLike(value)) return false;
            var tag = baseGetTag(value);
            return tag == errorTag || tag == domExcTag || typeof value.message == "string" && typeof value.name == "string" && !isPlainObject(value);
        }
        /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */ function isFinite(value) {
            return typeof value == "number" && nativeIsFinite(value);
        }
        /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */ function isFunction(value) {
            if (!isObject(value)) return false;
            // The use of `Object#toString` avoids issues with the `typeof` operator
            // in Safari 9 which returns 'object' for typed arrays and other constructors.
            var tag = baseGetTag(value);
            return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
        }
        /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */ function isInteger(value) {
            return typeof value == "number" && value == toInteger(value);
        }
        /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */ function isLength(value) {
            return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }
        /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */ function isObject(value) {
            var type = typeof value;
            return value != null && (type == "object" || type == "function");
        }
        /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */ function isObjectLike(value) {
            return value != null && typeof value == "object";
        }
        /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */ var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
        /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */ function isMatch(object, source) {
            return object === source || baseIsMatch(object, source, getMatchData(source));
        }
        /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */ function isMatchWith(object, source, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined;
            return baseIsMatch(object, source, getMatchData(source), customizer);
        }
        /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */ function isNaN(value) {
            // An `NaN` primitive is the only value that is not equal to itself.
            // Perform the `toStringTag` check first to avoid errors with some
            // ActiveX objects in IE.
            return isNumber(value) && value != +value;
        }
        /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */ function isNative(value) {
            if (isMaskable(value)) throw new Error(CORE_ERROR_TEXT);
            return baseIsNative(value);
        }
        /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */ function isNull(value) {
            return value === null;
        }
        /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */ function isNil(value) {
            return value == null;
        }
        /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */ function isNumber(value) {
            return typeof value == "number" || isObjectLike(value) && baseGetTag(value) == numberTag;
        }
        /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */ function isPlainObject(value) {
            if (!isObjectLike(value) || baseGetTag(value) != objectTag) return false;
            var proto = getPrototype(value);
            if (proto === null) return true;
            var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
            return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
        }
        /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */ var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
        /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */ function isSafeInteger(value) {
            return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
        }
        /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */ var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
        /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */ function isString(value) {
            return typeof value == "string" || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
        }
        /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */ function isSymbol(value) {
            return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
        }
        /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */ var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
        /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */ function isUndefined(value) {
            return value === undefined;
        }
        /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */ function isWeakMap(value) {
            return isObjectLike(value) && getTag(value) == weakMapTag;
        }
        /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */ function isWeakSet(value) {
            return isObjectLike(value) && baseGetTag(value) == weakSetTag;
        }
        /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */ var lt = createRelationalOperation(baseLt);
        /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */ var lte = createRelationalOperation(function(value, other) {
            return value <= other;
        });
        /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */ function toArray(value) {
            if (!value) return [];
            if (isArrayLike(value)) return isString(value) ? stringToArray(value) : copyArray(value);
            if (symIterator && value[symIterator]) return iteratorToArray(value[symIterator]());
            var tag = getTag(value), func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
            return func(value);
        }
        /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */ function toFinite(value) {
            if (!value) return value === 0 ? value : 0;
            value = toNumber(value);
            if (value === INFINITY || value === -INFINITY) {
                var sign = value < 0 ? -1 : 1;
                return sign * MAX_INTEGER;
            }
            return value === value ? value : 0;
        }
        /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */ function toInteger(value) {
            var result = toFinite(value), remainder = result % 1;
            return result === result ? remainder ? result - remainder : result : 0;
        }
        /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */ function toLength(value) {
            return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
        }
        /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */ function toNumber(value) {
            if (typeof value == "number") return value;
            if (isSymbol(value)) return NAN;
            if (isObject(value)) {
                var other = typeof value.valueOf == "function" ? value.valueOf() : value;
                value = isObject(other) ? other + "" : other;
            }
            if (typeof value != "string") return value === 0 ? value : +value;
            value = baseTrim(value);
            var isBinary = reIsBinary.test(value);
            return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
        }
        /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */ function toPlainObject(value) {
            return copyObject(value, keysIn(value));
        }
        /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */ function toSafeInteger(value) {
            return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
        }
        /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */ function toString(value) {
            return value == null ? "" : baseToString(value);
        }
        /*------------------------------------------------------------------------*/ /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */ var assign = createAssigner(function(object, source) {
            if (isPrototype(source) || isArrayLike(source)) {
                copyObject(source, keys(source), object);
                return;
            }
            for(var key in source)if (hasOwnProperty.call(source, key)) assignValue(object, key, source[key]);
        });
        /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */ var assignIn = createAssigner(function(object, source) {
            copyObject(source, keysIn(source), object);
        });
        /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */ var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
            copyObject(source, keysIn(source), object, customizer);
        });
        /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */ var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
            copyObject(source, keys(source), object, customizer);
        });
        /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */ var at = flatRest(baseAt);
        /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */ function create(prototype, properties) {
            var result = baseCreate(prototype);
            return properties == null ? result : baseAssign(result, properties);
        }
        /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */ var defaults = baseRest(function(object, sources) {
            object = Object1(object);
            var index = -1;
            var length = sources.length;
            var guard = length > 2 ? sources[2] : undefined;
            if (guard && isIterateeCall(sources[0], sources[1], guard)) length = 1;
            while(++index < length){
                var source = sources[index];
                var props = keysIn(source);
                var propsIndex = -1;
                var propsLength = props.length;
                while(++propsIndex < propsLength){
                    var key = props[propsIndex];
                    var value = object[key];
                    if (value === undefined || eq(value, objectProto[key]) && !hasOwnProperty.call(object, key)) object[key] = source[key];
                }
            }
            return object;
        });
        /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */ var defaultsDeep = baseRest(function(args) {
            args.push(undefined, customDefaultsMerge);
            return apply(mergeWith, undefined, args);
        });
        /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */ function findKey(object, predicate) {
            return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
        }
        /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */ function findLastKey(object, predicate) {
            return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
        }
        /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */ function forIn(object, iteratee) {
            return object == null ? object : baseFor(object, getIteratee(iteratee, 3), keysIn);
        }
        /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */ function forInRight(object, iteratee) {
            return object == null ? object : baseForRight(object, getIteratee(iteratee, 3), keysIn);
        }
        /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */ function forOwn(object, iteratee) {
            return object && baseForOwn(object, getIteratee(iteratee, 3));
        }
        /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */ function forOwnRight(object, iteratee) {
            return object && baseForOwnRight(object, getIteratee(iteratee, 3));
        }
        /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */ function functions(object) {
            return object == null ? [] : baseFunctions(object, keys(object));
        }
        /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */ function functionsIn(object) {
            return object == null ? [] : baseFunctions(object, keysIn(object));
        }
        /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */ function get(object, path, defaultValue) {
            var result = object == null ? undefined : baseGet(object, path);
            return result === undefined ? defaultValue : result;
        }
        /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */ function has(object, path) {
            return object != null && hasPath(object, path, baseHas);
        }
        /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */ function hasIn(object, path) {
            return object != null && hasPath(object, path, baseHasIn);
        }
        /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */ var invert = createInverter(function(result, value, key) {
            if (value != null && typeof value.toString != "function") value = nativeObjectToString.call(value);
            result[value] = key;
        }, constant(identity));
        /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */ var invertBy = createInverter(function(result, value, key) {
            if (value != null && typeof value.toString != "function") value = nativeObjectToString.call(value);
            if (hasOwnProperty.call(result, value)) result[value].push(key);
            else result[value] = [
                key
            ];
        }, getIteratee);
        /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */ var invoke = baseRest(baseInvoke);
        /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */ function keys(object) {
            return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
        }
        /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */ function keysIn(object) {
            return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
        }
        /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */ function mapKeys(object, iteratee) {
            var result = {};
            iteratee = getIteratee(iteratee, 3);
            baseForOwn(object, function(value, key, object) {
                baseAssignValue(result, iteratee(value, key, object), value);
            });
            return result;
        }
        /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */ function mapValues(object, iteratee) {
            var result = {};
            iteratee = getIteratee(iteratee, 3);
            baseForOwn(object, function(value, key, object) {
                baseAssignValue(result, key, iteratee(value, key, object));
            });
            return result;
        }
        /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */ var merge = createAssigner(function(object, source, srcIndex) {
            baseMerge(object, source, srcIndex);
        });
        /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */ var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
            baseMerge(object, source, srcIndex, customizer);
        });
        /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */ var omit = flatRest(function(object, paths) {
            var result = {};
            if (object == null) return result;
            var isDeep = false;
            paths = arrayMap(paths, function(path) {
                path = castPath(path, object);
                isDeep || (isDeep = path.length > 1);
                return path;
            });
            copyObject(object, getAllKeysIn(object), result);
            if (isDeep) result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
            var length = paths.length;
            while(length--)baseUnset(result, paths[length]);
            return result;
        });
        /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */ function omitBy(object, predicate) {
            return pickBy(object, negate(getIteratee(predicate)));
        }
        /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */ var pick = flatRest(function(object, paths) {
            return object == null ? {} : basePick(object, paths);
        });
        /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */ function pickBy(object, predicate) {
            if (object == null) return {};
            var props = arrayMap(getAllKeysIn(object), function(prop) {
                return [
                    prop
                ];
            });
            predicate = getIteratee(predicate);
            return basePickBy(object, props, function(value, path) {
                return predicate(value, path[0]);
            });
        }
        /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */ function result(object, path, defaultValue) {
            path = castPath(path, object);
            var index = -1, length = path.length;
            // Ensure the loop is entered when path is empty.
            if (!length) {
                length = 1;
                object = undefined;
            }
            while(++index < length){
                var value = object == null ? undefined : object[toKey(path[index])];
                if (value === undefined) {
                    index = length;
                    value = defaultValue;
                }
                object = isFunction(value) ? value.call(object) : value;
            }
            return object;
        }
        /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */ function set(object, path, value) {
            return object == null ? object : baseSet(object, path, value);
        }
        /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */ function setWith(object, path, value, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined;
            return object == null ? object : baseSet(object, path, value, customizer);
        }
        /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */ var toPairs = createToPairs(keys);
        /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */ var toPairsIn = createToPairs(keysIn);
        /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */ function transform(object, iteratee, accumulator) {
            var isArr = isArray(object), isArrLike = isArr || isBuffer(object) || isTypedArray(object);
            iteratee = getIteratee(iteratee, 4);
            if (accumulator == null) {
                var Ctor = object && object.constructor;
                if (isArrLike) accumulator = isArr ? new Ctor : [];
                else if (isObject(object)) accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
                else accumulator = {};
            }
            (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
                return iteratee(accumulator, value, index, object);
            });
            return accumulator;
        }
        /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */ function unset(object, path) {
            return object == null ? true : baseUnset(object, path);
        }
        /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */ function update(object, path, updater) {
            return object == null ? object : baseUpdate(object, path, castFunction(updater));
        }
        /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */ function updateWith(object, path, updater, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined;
            return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
        }
        /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */ function values(object) {
            return object == null ? [] : baseValues(object, keys(object));
        }
        /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */ function valuesIn(object) {
            return object == null ? [] : baseValues(object, keysIn(object));
        }
        /*------------------------------------------------------------------------*/ /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */ function clamp(number, lower, upper) {
            if (upper === undefined) {
                upper = lower;
                lower = undefined;
            }
            if (upper !== undefined) {
                upper = toNumber(upper);
                upper = upper === upper ? upper : 0;
            }
            if (lower !== undefined) {
                lower = toNumber(lower);
                lower = lower === lower ? lower : 0;
            }
            return baseClamp(toNumber(number), lower, upper);
        }
        /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */ function inRange(number, start, end) {
            start = toFinite(start);
            if (end === undefined) {
                end = start;
                start = 0;
            } else end = toFinite(end);
            number = toNumber(number);
            return baseInRange(number, start, end);
        }
        /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */ function random(lower, upper, floating) {
            if (floating && typeof floating != "boolean" && isIterateeCall(lower, upper, floating)) upper = floating = undefined;
            if (floating === undefined) {
                if (typeof upper == "boolean") {
                    floating = upper;
                    upper = undefined;
                } else if (typeof lower == "boolean") {
                    floating = lower;
                    lower = undefined;
                }
            }
            if (lower === undefined && upper === undefined) {
                lower = 0;
                upper = 1;
            } else {
                lower = toFinite(lower);
                if (upper === undefined) {
                    upper = lower;
                    lower = 0;
                } else upper = toFinite(upper);
            }
            if (lower > upper) {
                var temp = lower;
                lower = upper;
                upper = temp;
            }
            if (floating || lower % 1 || upper % 1) {
                var rand = nativeRandom();
                return nativeMin(lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))), upper);
            }
            return baseRandom(lower, upper);
        }
        /*------------------------------------------------------------------------*/ /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */ var camelCase = createCompounder(function(result, word, index) {
            word = word.toLowerCase();
            return result + (index ? capitalize(word) : word);
        });
        /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */ function capitalize(string) {
            return upperFirst(toString(string).toLowerCase());
        }
        /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */ function deburr(string) {
            string = toString(string);
            return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
        }
        /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */ function endsWith(string, target, position) {
            string = toString(string);
            target = baseToString(target);
            var length = string.length;
            position = position === undefined ? length : baseClamp(toInteger(position), 0, length);
            var end = position;
            position -= target.length;
            return position >= 0 && string.slice(position, end) == target;
        }
        /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */ function escape(string) {
            string = toString(string);
            return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
        }
        /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */ function escapeRegExp(string) {
            string = toString(string);
            return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, "\\$&") : string;
        }
        /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */ var kebabCase = createCompounder(function(result, word, index) {
            return result + (index ? "-" : "") + word.toLowerCase();
        });
        /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */ var lowerCase = createCompounder(function(result, word, index) {
            return result + (index ? " " : "") + word.toLowerCase();
        });
        /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */ var lowerFirst = createCaseFirst("toLowerCase");
        /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */ function pad(string, length, chars) {
            string = toString(string);
            length = toInteger(length);
            var strLength = length ? stringSize(string) : 0;
            if (!length || strLength >= length) return string;
            var mid = (length - strLength) / 2;
            return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
        }
        /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */ function padEnd(string, length, chars) {
            string = toString(string);
            length = toInteger(length);
            var strLength = length ? stringSize(string) : 0;
            return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
        }
        /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */ function padStart(string, length, chars) {
            string = toString(string);
            length = toInteger(length);
            var strLength = length ? stringSize(string) : 0;
            return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
        }
        /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */ function parseInt1(string, radix, guard) {
            if (guard || radix == null) radix = 0;
            else if (radix) radix = +radix;
            return nativeParseInt(toString(string).replace(reTrimStart, ""), radix || 0);
        }
        /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */ function repeat(string, n, guard) {
            if (guard ? isIterateeCall(string, n, guard) : n === undefined) n = 1;
            else n = toInteger(n);
            return baseRepeat(toString(string), n);
        }
        /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */ function replace() {
            var args = arguments, string = toString(args[0]);
            return args.length < 3 ? string : string.replace(args[1], args[2]);
        }
        /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */ var snakeCase = createCompounder(function(result, word, index) {
            return result + (index ? "_" : "") + word.toLowerCase();
        });
        /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */ function split(string, separator, limit) {
            if (limit && typeof limit != "number" && isIterateeCall(string, separator, limit)) separator = limit = undefined;
            limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
            if (!limit) return [];
            string = toString(string);
            if (string && (typeof separator == "string" || separator != null && !isRegExp(separator))) {
                separator = baseToString(separator);
                if (!separator && hasUnicode(string)) return castSlice(stringToArray(string), 0, limit);
            }
            return string.split(separator, limit);
        }
        /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */ var startCase = createCompounder(function(result, word, index) {
            return result + (index ? " " : "") + upperFirst(word);
        });
        /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */ function startsWith(string, target, position) {
            string = toString(string);
            position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);
            target = baseToString(target);
            return string.slice(position, position + target.length) == target;
        }
        /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */ function template(string, options, guard) {
            // Based on John Resig's `tmpl` implementation
            // (http://ejohn.org/blog/javascript-micro-templating/)
            // and Laura Doktorova's doT.js (https://github.com/olado/doT).
            var settings = lodash.templateSettings;
            if (guard && isIterateeCall(string, options, guard)) options = undefined;
            string = toString(string);
            options = assignInWith({}, options, settings, customDefaultsAssignIn);
            var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys(imports), importsValues = baseValues(imports, importsKeys);
            var isEscaping, isEvaluating, index = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
            // Compile the regexp to match each delimiter.
            var reDelimiters = RegExp1((options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$", "g");
            // Use a sourceURL for easier debugging.
            // The sourceURL gets injected into the source that's eval-ed, so be careful
            // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
            // and escape the comment, thus injecting code that gets evaled.
            var sourceURL = "//# sourceURL=" + (hasOwnProperty.call(options, "sourceURL") ? (options.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
            string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
                interpolateValue || (interpolateValue = esTemplateValue);
                // Escape characters that can't be included in string literals.
                source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);
                // Replace delimiters with snippets.
                if (escapeValue) {
                    isEscaping = true;
                    source += "' +\n__e(" + escapeValue + ") +\n'";
                }
                if (evaluateValue) {
                    isEvaluating = true;
                    source += "';\n" + evaluateValue + ";\n__p += '";
                }
                if (interpolateValue) source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
                index = offset + match.length;
                // The JS engine embedded in Adobe products needs `match` returned in
                // order to produce the correct `offset` value.
                return match;
            });
            source += "';\n";
            // If `variable` is not specified wrap a with-statement around the generated
            // code to add the data object to the top of the scope chain.
            var variable = hasOwnProperty.call(options, "variable") && options.variable;
            if (!variable) source = "with (obj) {\n" + source + "\n}\n";
            else if (reForbiddenIdentifierChars.test(variable)) throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
            // Cleanup code by stripping empty strings.
            source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
            // Frame code as the function body.
            source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
            var result = attempt(function() {
                return Function1(importsKeys, sourceURL + "return " + source).apply(undefined, importsValues);
            });
            // Provide the compiled function's source by its `toString` method or
            // the `source` property as a convenience for inlining compiled templates.
            result.source = source;
            if (isError(result)) throw result;
            return result;
        }
        /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */ function toLower(value) {
            return toString(value).toLowerCase();
        }
        /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */ function toUpper(value) {
            return toString(value).toUpperCase();
        }
        /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */ function trim(string, chars, guard) {
            string = toString(string);
            if (string && (guard || chars === undefined)) return baseTrim(string);
            if (!string || !(chars = baseToString(chars))) return string;
            var strSymbols = stringToArray(string), chrSymbols = stringToArray(chars), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
            return castSlice(strSymbols, start, end).join("");
        }
        /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */ function trimEnd(string, chars, guard) {
            string = toString(string);
            if (string && (guard || chars === undefined)) return string.slice(0, trimmedEndIndex(string) + 1);
            if (!string || !(chars = baseToString(chars))) return string;
            var strSymbols = stringToArray(string), end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
            return castSlice(strSymbols, 0, end).join("");
        }
        /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */ function trimStart(string, chars, guard) {
            string = toString(string);
            if (string && (guard || chars === undefined)) return string.replace(reTrimStart, "");
            if (!string || !(chars = baseToString(chars))) return string;
            var strSymbols = stringToArray(string), start = charsStartIndex(strSymbols, stringToArray(chars));
            return castSlice(strSymbols, start).join("");
        }
        /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */ function truncate(string, options) {
            var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
            if (isObject(options)) {
                var separator = "separator" in options ? options.separator : separator;
                length = "length" in options ? toInteger(options.length) : length;
                omission = "omission" in options ? baseToString(options.omission) : omission;
            }
            string = toString(string);
            var strLength = string.length;
            if (hasUnicode(string)) {
                var strSymbols = stringToArray(string);
                strLength = strSymbols.length;
            }
            if (length >= strLength) return string;
            var end = length - stringSize(omission);
            if (end < 1) return omission;
            var result = strSymbols ? castSlice(strSymbols, 0, end).join("") : string.slice(0, end);
            if (separator === undefined) return result + omission;
            if (strSymbols) end += result.length - end;
            if (isRegExp(separator)) {
                if (string.slice(end).search(separator)) {
                    var match, substring = result;
                    if (!separator.global) separator = RegExp1(separator.source, toString(reFlags.exec(separator)) + "g");
                    separator.lastIndex = 0;
                    while(match = separator.exec(substring))var newEnd = match.index;
                    result = result.slice(0, newEnd === undefined ? end : newEnd);
                }
            } else if (string.indexOf(baseToString(separator), end) != end) {
                var index = result.lastIndexOf(separator);
                if (index > -1) result = result.slice(0, index);
            }
            return result + omission;
        }
        /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */ function unescape(string) {
            string = toString(string);
            return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
        }
        /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */ var upperCase = createCompounder(function(result, word, index) {
            return result + (index ? " " : "") + word.toUpperCase();
        });
        /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */ var upperFirst = createCaseFirst("toUpperCase");
        /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */ function words(string, pattern, guard) {
            string = toString(string);
            pattern = guard ? undefined : pattern;
            if (pattern === undefined) return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
            return string.match(pattern) || [];
        }
        /*------------------------------------------------------------------------*/ /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */ var attempt = baseRest(function(func, args) {
            try {
                return apply(func, undefined, args);
            } catch (e) {
                return isError(e) ? e : new Error(e);
            }
        });
        /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */ var bindAll = flatRest(function(object, methodNames) {
            arrayEach(methodNames, function(key) {
                key = toKey(key);
                baseAssignValue(object, key, bind(object[key], object));
            });
            return object;
        });
        /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */ function cond(pairs) {
            var length = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
            pairs = !length ? [] : arrayMap(pairs, function(pair) {
                if (typeof pair[1] != "function") throw new TypeError(FUNC_ERROR_TEXT);
                return [
                    toIteratee(pair[0]),
                    pair[1]
                ];
            });
            return baseRest(function(args) {
                var index = -1;
                while(++index < length){
                    var pair = pairs[index];
                    if (apply(pair[0], this, args)) return apply(pair[1], this, args);
                }
            });
        }
        /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */ function conforms(source) {
            return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
        }
        /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */ function constant(value) {
            return function() {
                return value;
            };
        }
        /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */ function defaultTo(value, defaultValue) {
            return value == null || value !== value ? defaultValue : value;
        }
        /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */ var flow = createFlow();
        /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */ var flowRight = createFlow(true);
        /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */ function identity(value) {
            return value;
        }
        /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */ function iteratee(func) {
            return baseIteratee(typeof func == "function" ? func : baseClone(func, CLONE_DEEP_FLAG));
        }
        /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */ function matches(source) {
            return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
        }
        /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */ function matchesProperty(path, srcValue) {
            return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
        }
        /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */ var method = baseRest(function(path, args) {
            return function(object) {
                return baseInvoke(object, path, args);
            };
        });
        /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */ var methodOf = baseRest(function(object, args) {
            return function(path) {
                return baseInvoke(object, path, args);
            };
        });
        /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */ function mixin(object, source, options) {
            var props = keys(source), methodNames = baseFunctions(source, props);
            if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
                options = source;
                source = object;
                object = this;
                methodNames = baseFunctions(source, keys(source));
            }
            var chain = !(isObject(options) && "chain" in options) || !!options.chain, isFunc = isFunction(object);
            arrayEach(methodNames, function(methodName) {
                var func = source[methodName];
                object[methodName] = func;
                if (isFunc) object.prototype[methodName] = function() {
                    var chainAll = this.__chain__;
                    if (chain || chainAll) {
                        var result = object(this.__wrapped__), actions = result.__actions__ = copyArray(this.__actions__);
                        actions.push({
                            "func": func,
                            "args": arguments,
                            "thisArg": object
                        });
                        result.__chain__ = chainAll;
                        return result;
                    }
                    return func.apply(object, arrayPush([
                        this.value()
                    ], arguments));
                };
            });
            return object;
        }
        /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */ function noConflict() {
            if (root._ === this) root._ = oldDash;
            return this;
        }
        /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */ function noop() {
        // No operation performed.
        }
        /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */ function nthArg(n) {
            n = toInteger(n);
            return baseRest(function(args) {
                return baseNth(args, n);
            });
        }
        /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */ var over = createOver(arrayMap);
        /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */ var overEvery = createOver(arrayEvery);
        /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     *
     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
     */ var overSome = createOver(arraySome);
        /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */ function property(path) {
            return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
        }
        /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */ function propertyOf(object) {
            return function(path) {
                return object == null ? undefined : baseGet(object, path);
            };
        }
        /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */ var range = createRange();
        /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */ var rangeRight = createRange(true);
        /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */ function stubArray() {
            return [];
        }
        /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */ function stubFalse() {
            return false;
        }
        /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */ function stubObject() {
            return {};
        }
        /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */ function stubString() {
            return "";
        }
        /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */ function stubTrue() {
            return true;
        }
        /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */ function times(n, iteratee) {
            n = toInteger(n);
            if (n < 1 || n > MAX_SAFE_INTEGER) return [];
            var index = MAX_ARRAY_LENGTH, length = nativeMin(n, MAX_ARRAY_LENGTH);
            iteratee = getIteratee(iteratee);
            n -= MAX_ARRAY_LENGTH;
            var result = baseTimes(length, iteratee);
            while(++index < n)iteratee(index);
            return result;
        }
        /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */ function toPath(value) {
            if (isArray(value)) return arrayMap(value, toKey);
            return isSymbol(value) ? [
                value
            ] : copyArray(stringToPath(toString(value)));
        }
        /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */ function uniqueId(prefix) {
            var id = ++idCounter;
            return toString(prefix) + id;
        }
        /*------------------------------------------------------------------------*/ /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */ var add = createMathOperation(function(augend, addend) {
            return augend + addend;
        }, 0);
        /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */ var ceil = createRound("ceil");
        /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */ var divide = createMathOperation(function(dividend, divisor) {
            return dividend / divisor;
        }, 1);
        /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */ var floor = createRound("floor");
        /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */ function max(array) {
            return array && array.length ? baseExtremum(array, identity, baseGt) : undefined;
        }
        /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */ function maxBy(array, iteratee) {
            return array && array.length ? baseExtremum(array, getIteratee(iteratee, 2), baseGt) : undefined;
        }
        /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */ function mean(array) {
            return baseMean(array, identity);
        }
        /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */ function meanBy(array, iteratee) {
            return baseMean(array, getIteratee(iteratee, 2));
        }
        /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */ function min(array) {
            return array && array.length ? baseExtremum(array, identity, baseLt) : undefined;
        }
        /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */ function minBy(array, iteratee) {
            return array && array.length ? baseExtremum(array, getIteratee(iteratee, 2), baseLt) : undefined;
        }
        /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */ var multiply = createMathOperation(function(multiplier, multiplicand) {
            return multiplier * multiplicand;
        }, 1);
        /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */ var round = createRound("round");
        /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */ var subtract = createMathOperation(function(minuend, subtrahend) {
            return minuend - subtrahend;
        }, 0);
        /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */ function sum(array) {
            return array && array.length ? baseSum(array, identity) : 0;
        }
        /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */ function sumBy(array, iteratee) {
            return array && array.length ? baseSum(array, getIteratee(iteratee, 2)) : 0;
        }
        /*------------------------------------------------------------------------*/ // Add methods that return wrapped values in chain sequences.
        lodash.after = after;
        lodash.ary = ary;
        lodash.assign = assign;
        lodash.assignIn = assignIn;
        lodash.assignInWith = assignInWith;
        lodash.assignWith = assignWith;
        lodash.at = at;
        lodash.before = before;
        lodash.bind = bind;
        lodash.bindAll = bindAll;
        lodash.bindKey = bindKey;
        lodash.castArray = castArray;
        lodash.chain = chain;
        lodash.chunk = chunk;
        lodash.compact = compact;
        lodash.concat = concat;
        lodash.cond = cond;
        lodash.conforms = conforms;
        lodash.constant = constant;
        lodash.countBy = countBy;
        lodash.create = create;
        lodash.curry = curry;
        lodash.curryRight = curryRight;
        lodash.debounce = debounce;
        lodash.defaults = defaults;
        lodash.defaultsDeep = defaultsDeep;
        lodash.defer = defer;
        lodash.delay = delay;
        lodash.difference = difference;
        lodash.differenceBy = differenceBy;
        lodash.differenceWith = differenceWith;
        lodash.drop = drop;
        lodash.dropRight = dropRight;
        lodash.dropRightWhile = dropRightWhile;
        lodash.dropWhile = dropWhile;
        lodash.fill = fill;
        lodash.filter = filter;
        lodash.flatMap = flatMap;
        lodash.flatMapDeep = flatMapDeep;
        lodash.flatMapDepth = flatMapDepth;
        lodash.flatten = flatten;
        lodash.flattenDeep = flattenDeep;
        lodash.flattenDepth = flattenDepth;
        lodash.flip = flip;
        lodash.flow = flow;
        lodash.flowRight = flowRight;
        lodash.fromPairs = fromPairs;
        lodash.functions = functions;
        lodash.functionsIn = functionsIn;
        lodash.groupBy = groupBy;
        lodash.initial = initial;
        lodash.intersection = intersection;
        lodash.intersectionBy = intersectionBy;
        lodash.intersectionWith = intersectionWith;
        lodash.invert = invert;
        lodash.invertBy = invertBy;
        lodash.invokeMap = invokeMap;
        lodash.iteratee = iteratee;
        lodash.keyBy = keyBy;
        lodash.keys = keys;
        lodash.keysIn = keysIn;
        lodash.map = map;
        lodash.mapKeys = mapKeys;
        lodash.mapValues = mapValues;
        lodash.matches = matches;
        lodash.matchesProperty = matchesProperty;
        lodash.memoize = memoize;
        lodash.merge = merge;
        lodash.mergeWith = mergeWith;
        lodash.method = method;
        lodash.methodOf = methodOf;
        lodash.mixin = mixin;
        lodash.negate = negate;
        lodash.nthArg = nthArg;
        lodash.omit = omit;
        lodash.omitBy = omitBy;
        lodash.once = once;
        lodash.orderBy = orderBy;
        lodash.over = over;
        lodash.overArgs = overArgs;
        lodash.overEvery = overEvery;
        lodash.overSome = overSome;
        lodash.partial = partial;
        lodash.partialRight = partialRight;
        lodash.partition = partition;
        lodash.pick = pick;
        lodash.pickBy = pickBy;
        lodash.property = property;
        lodash.propertyOf = propertyOf;
        lodash.pull = pull;
        lodash.pullAll = pullAll;
        lodash.pullAllBy = pullAllBy;
        lodash.pullAllWith = pullAllWith;
        lodash.pullAt = pullAt;
        lodash.range = range;
        lodash.rangeRight = rangeRight;
        lodash.rearg = rearg;
        lodash.reject = reject;
        lodash.remove = remove;
        lodash.rest = rest;
        lodash.reverse = reverse;
        lodash.sampleSize = sampleSize;
        lodash.set = set;
        lodash.setWith = setWith;
        lodash.shuffle = shuffle;
        lodash.slice = slice;
        lodash.sortBy = sortBy;
        lodash.sortedUniq = sortedUniq;
        lodash.sortedUniqBy = sortedUniqBy;
        lodash.split = split;
        lodash.spread = spread;
        lodash.tail = tail;
        lodash.take = take;
        lodash.takeRight = takeRight;
        lodash.takeRightWhile = takeRightWhile;
        lodash.takeWhile = takeWhile;
        lodash.tap = tap;
        lodash.throttle = throttle;
        lodash.thru = thru;
        lodash.toArray = toArray;
        lodash.toPairs = toPairs;
        lodash.toPairsIn = toPairsIn;
        lodash.toPath = toPath;
        lodash.toPlainObject = toPlainObject;
        lodash.transform = transform;
        lodash.unary = unary;
        lodash.union = union;
        lodash.unionBy = unionBy;
        lodash.unionWith = unionWith;
        lodash.uniq = uniq;
        lodash.uniqBy = uniqBy;
        lodash.uniqWith = uniqWith;
        lodash.unset = unset;
        lodash.unzip = unzip;
        lodash.unzipWith = unzipWith;
        lodash.update = update;
        lodash.updateWith = updateWith;
        lodash.values = values;
        lodash.valuesIn = valuesIn;
        lodash.without = without;
        lodash.words = words;
        lodash.wrap = wrap;
        lodash.xor = xor;
        lodash.xorBy = xorBy;
        lodash.xorWith = xorWith;
        lodash.zip = zip;
        lodash.zipObject = zipObject;
        lodash.zipObjectDeep = zipObjectDeep;
        lodash.zipWith = zipWith;
        // Add aliases.
        lodash.entries = toPairs;
        lodash.entriesIn = toPairsIn;
        lodash.extend = assignIn;
        lodash.extendWith = assignInWith;
        // Add methods to `lodash.prototype`.
        mixin(lodash, lodash);
        /*------------------------------------------------------------------------*/ // Add methods that return unwrapped values in chain sequences.
        lodash.add = add;
        lodash.attempt = attempt;
        lodash.camelCase = camelCase;
        lodash.capitalize = capitalize;
        lodash.ceil = ceil;
        lodash.clamp = clamp;
        lodash.clone = clone;
        lodash.cloneDeep = cloneDeep;
        lodash.cloneDeepWith = cloneDeepWith;
        lodash.cloneWith = cloneWith;
        lodash.conformsTo = conformsTo;
        lodash.deburr = deburr;
        lodash.defaultTo = defaultTo;
        lodash.divide = divide;
        lodash.endsWith = endsWith;
        lodash.eq = eq;
        lodash.escape = escape;
        lodash.escapeRegExp = escapeRegExp;
        lodash.every = every;
        lodash.find = find;
        lodash.findIndex = findIndex;
        lodash.findKey = findKey;
        lodash.findLast = findLast;
        lodash.findLastIndex = findLastIndex;
        lodash.findLastKey = findLastKey;
        lodash.floor = floor;
        lodash.forEach = forEach;
        lodash.forEachRight = forEachRight;
        lodash.forIn = forIn;
        lodash.forInRight = forInRight;
        lodash.forOwn = forOwn;
        lodash.forOwnRight = forOwnRight;
        lodash.get = get;
        lodash.gt = gt;
        lodash.gte = gte;
        lodash.has = has;
        lodash.hasIn = hasIn;
        lodash.head = head;
        lodash.identity = identity;
        lodash.includes = includes;
        lodash.indexOf = indexOf;
        lodash.inRange = inRange;
        lodash.invoke = invoke;
        lodash.isArguments = isArguments;
        lodash.isArray = isArray;
        lodash.isArrayBuffer = isArrayBuffer;
        lodash.isArrayLike = isArrayLike;
        lodash.isArrayLikeObject = isArrayLikeObject;
        lodash.isBoolean = isBoolean;
        lodash.isBuffer = isBuffer;
        lodash.isDate = isDate;
        lodash.isElement = isElement;
        lodash.isEmpty = isEmpty;
        lodash.isEqual = isEqual;
        lodash.isEqualWith = isEqualWith;
        lodash.isError = isError;
        lodash.isFinite = isFinite;
        lodash.isFunction = isFunction;
        lodash.isInteger = isInteger;
        lodash.isLength = isLength;
        lodash.isMap = isMap;
        lodash.isMatch = isMatch;
        lodash.isMatchWith = isMatchWith;
        lodash.isNaN = isNaN;
        lodash.isNative = isNative;
        lodash.isNil = isNil;
        lodash.isNull = isNull;
        lodash.isNumber = isNumber;
        lodash.isObject = isObject;
        lodash.isObjectLike = isObjectLike;
        lodash.isPlainObject = isPlainObject;
        lodash.isRegExp = isRegExp;
        lodash.isSafeInteger = isSafeInteger;
        lodash.isSet = isSet;
        lodash.isString = isString;
        lodash.isSymbol = isSymbol;
        lodash.isTypedArray = isTypedArray;
        lodash.isUndefined = isUndefined;
        lodash.isWeakMap = isWeakMap;
        lodash.isWeakSet = isWeakSet;
        lodash.join = join;
        lodash.kebabCase = kebabCase;
        lodash.last = last;
        lodash.lastIndexOf = lastIndexOf;
        lodash.lowerCase = lowerCase;
        lodash.lowerFirst = lowerFirst;
        lodash.lt = lt;
        lodash.lte = lte;
        lodash.max = max;
        lodash.maxBy = maxBy;
        lodash.mean = mean;
        lodash.meanBy = meanBy;
        lodash.min = min;
        lodash.minBy = minBy;
        lodash.stubArray = stubArray;
        lodash.stubFalse = stubFalse;
        lodash.stubObject = stubObject;
        lodash.stubString = stubString;
        lodash.stubTrue = stubTrue;
        lodash.multiply = multiply;
        lodash.nth = nth;
        lodash.noConflict = noConflict;
        lodash.noop = noop;
        lodash.now = now;
        lodash.pad = pad;
        lodash.padEnd = padEnd;
        lodash.padStart = padStart;
        lodash.parseInt = parseInt1;
        lodash.random = random;
        lodash.reduce = reduce;
        lodash.reduceRight = reduceRight;
        lodash.repeat = repeat;
        lodash.replace = replace;
        lodash.result = result;
        lodash.round = round;
        lodash.runInContext = runInContext;
        lodash.sample = sample;
        lodash.size = size;
        lodash.snakeCase = snakeCase;
        lodash.some = some;
        lodash.sortedIndex = sortedIndex;
        lodash.sortedIndexBy = sortedIndexBy;
        lodash.sortedIndexOf = sortedIndexOf;
        lodash.sortedLastIndex = sortedLastIndex;
        lodash.sortedLastIndexBy = sortedLastIndexBy;
        lodash.sortedLastIndexOf = sortedLastIndexOf;
        lodash.startCase = startCase;
        lodash.startsWith = startsWith;
        lodash.subtract = subtract;
        lodash.sum = sum;
        lodash.sumBy = sumBy;
        lodash.template = template;
        lodash.times = times;
        lodash.toFinite = toFinite;
        lodash.toInteger = toInteger;
        lodash.toLength = toLength;
        lodash.toLower = toLower;
        lodash.toNumber = toNumber;
        lodash.toSafeInteger = toSafeInteger;
        lodash.toString = toString;
        lodash.toUpper = toUpper;
        lodash.trim = trim;
        lodash.trimEnd = trimEnd;
        lodash.trimStart = trimStart;
        lodash.truncate = truncate;
        lodash.unescape = unescape;
        lodash.uniqueId = uniqueId;
        lodash.upperCase = upperCase;
        lodash.upperFirst = upperFirst;
        // Add aliases.
        lodash.each = forEach;
        lodash.eachRight = forEachRight;
        lodash.first = head;
        mixin(lodash, function() {
            var source = {};
            baseForOwn(lodash, function(func, methodName) {
                if (!hasOwnProperty.call(lodash.prototype, methodName)) source[methodName] = func;
            });
            return source;
        }(), {
            "chain": false
        });
        /*------------------------------------------------------------------------*/ /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */ lodash.VERSION = VERSION;
        // Assign default placeholders.
        arrayEach([
            "bind",
            "bindKey",
            "curry",
            "curryRight",
            "partial",
            "partialRight"
        ], function(methodName) {
            lodash[methodName].placeholder = lodash;
        });
        // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
        arrayEach([
            "drop",
            "take"
        ], function(methodName, index) {
            LazyWrapper.prototype[methodName] = function(n) {
                n = n === undefined ? 1 : nativeMax(toInteger(n), 0);
                var result = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();
                if (result.__filtered__) result.__takeCount__ = nativeMin(n, result.__takeCount__);
                else result.__views__.push({
                    "size": nativeMin(n, MAX_ARRAY_LENGTH),
                    "type": methodName + (result.__dir__ < 0 ? "Right" : "")
                });
                return result;
            };
            LazyWrapper.prototype[methodName + "Right"] = function(n) {
                return this.reverse()[methodName](n).reverse();
            };
        });
        // Add `LazyWrapper` methods that accept an `iteratee` value.
        arrayEach([
            "filter",
            "map",
            "takeWhile"
        ], function(methodName, index) {
            var type = index + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
            LazyWrapper.prototype[methodName] = function(iteratee) {
                var result = this.clone();
                result.__iteratees__.push({
                    "iteratee": getIteratee(iteratee, 3),
                    "type": type
                });
                result.__filtered__ = result.__filtered__ || isFilter;
                return result;
            };
        });
        // Add `LazyWrapper` methods for `_.head` and `_.last`.
        arrayEach([
            "head",
            "last"
        ], function(methodName, index) {
            var takeName = "take" + (index ? "Right" : "");
            LazyWrapper.prototype[methodName] = function() {
                return this[takeName](1).value()[0];
            };
        });
        // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
        arrayEach([
            "initial",
            "tail"
        ], function(methodName, index) {
            var dropName = "drop" + (index ? "" : "Right");
            LazyWrapper.prototype[methodName] = function() {
                return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
            };
        });
        LazyWrapper.prototype.compact = function() {
            return this.filter(identity);
        };
        LazyWrapper.prototype.find = function(predicate) {
            return this.filter(predicate).head();
        };
        LazyWrapper.prototype.findLast = function(predicate) {
            return this.reverse().find(predicate);
        };
        LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
            if (typeof path == "function") return new LazyWrapper(this);
            return this.map(function(value) {
                return baseInvoke(value, path, args);
            });
        });
        LazyWrapper.prototype.reject = function(predicate) {
            return this.filter(negate(getIteratee(predicate)));
        };
        LazyWrapper.prototype.slice = function(start, end) {
            start = toInteger(start);
            var result = this;
            if (result.__filtered__ && (start > 0 || end < 0)) return new LazyWrapper(result);
            if (start < 0) result = result.takeRight(-start);
            else if (start) result = result.drop(start);
            if (end !== undefined) {
                end = toInteger(end);
                result = end < 0 ? result.dropRight(-end) : result.take(end - start);
            }
            return result;
        };
        LazyWrapper.prototype.takeRightWhile = function(predicate) {
            return this.reverse().takeWhile(predicate).reverse();
        };
        LazyWrapper.prototype.toArray = function() {
            return this.take(MAX_ARRAY_LENGTH);
        };
        // Add `LazyWrapper` methods to `lodash.prototype`.
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
            var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash[isTaker ? "take" + (methodName == "last" ? "Right" : "") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
            if (!lodashFunc) return;
            lodash.prototype[methodName] = function() {
                var value = this.__wrapped__, args = isTaker ? [
                    1
                ] : arguments, isLazy = value instanceof LazyWrapper, iteratee = args[0], useLazy = isLazy || isArray(value);
                var interceptor = function(value) {
                    var result = lodashFunc.apply(lodash, arrayPush([
                        value
                    ], args));
                    return isTaker && chainAll ? result[0] : result;
                };
                if (useLazy && checkIteratee && typeof iteratee == "function" && iteratee.length != 1) // Avoid lazy use if the iteratee has a "length" value other than `1`.
                isLazy = useLazy = false;
                var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
                if (!retUnwrapped && useLazy) {
                    value = onlyLazy ? value : new LazyWrapper(this);
                    var result = func.apply(value, args);
                    result.__actions__.push({
                        "func": thru,
                        "args": [
                            interceptor
                        ],
                        "thisArg": undefined
                    });
                    return new LodashWrapper(result, chainAll);
                }
                if (isUnwrapped && onlyLazy) return func.apply(this, args);
                result = this.thru(interceptor);
                return isUnwrapped ? isTaker ? result.value()[0] : result.value() : result;
            };
        });
        // Add `Array` methods to `lodash.prototype`.
        arrayEach([
            "pop",
            "push",
            "shift",
            "sort",
            "splice",
            "unshift"
        ], function(methodName) {
            var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:pop|shift)$/.test(methodName);
            lodash.prototype[methodName] = function() {
                var args = arguments;
                if (retUnwrapped && !this.__chain__) {
                    var value = this.value();
                    return func.apply(isArray(value) ? value : [], args);
                }
                return this[chainName](function(value) {
                    return func.apply(isArray(value) ? value : [], args);
                });
            };
        });
        // Map minified method names to their real names.
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
            var lodashFunc = lodash[methodName];
            if (lodashFunc) {
                var key = lodashFunc.name + "";
                if (!hasOwnProperty.call(realNames, key)) realNames[key] = [];
                realNames[key].push({
                    "name": methodName,
                    "func": lodashFunc
                });
            }
        });
        realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [
            {
                "name": "wrapper",
                "func": undefined
            }
        ];
        // Add methods to `LazyWrapper`.
        LazyWrapper.prototype.clone = lazyClone;
        LazyWrapper.prototype.reverse = lazyReverse;
        LazyWrapper.prototype.value = lazyValue;
        // Add chain sequence methods to the `lodash` wrapper.
        lodash.prototype.at = wrapperAt;
        lodash.prototype.chain = wrapperChain;
        lodash.prototype.commit = wrapperCommit;
        lodash.prototype.next = wrapperNext;
        lodash.prototype.plant = wrapperPlant;
        lodash.prototype.reverse = wrapperReverse;
        lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
        // Add lazy aliases.
        lodash.prototype.first = lodash.prototype.head;
        if (symIterator) lodash.prototype[symIterator] = wrapperToIterator;
        return lodash;
    };
    /*--------------------------------------------------------------------------*/ // Export lodash.
    var _ = runInContext();
    // Some AMD build optimizers, like r.js, check for condition patterns like:
    if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
        // Expose Lodash on the global object to prevent errors when Lodash is
        // loaded by a script tag in the presence of an AMD loader.
        // See http://requirejs.org/docs/errors.html#mismatch for more details.
        // Use `_.noConflict` to remove Lodash from the global object.
        root._ = _;
        // Define as an anonymous module so, through path mapping, it can be
        // referenced as the "underscore" module.
        define(function() {
            return _;
        });
    } else if (freeModule) {
        // Export for Node.js.
        (freeModule.exports = _)._ = _;
        // Export for CommonJS support.
        freeExports._ = _;
    } else // Export to the global object.
    root._ = _;
}).call(this);

});

parcelRequire.register("iPADQ", function(module, exports) {

$parcel$export(module.exports, "getBundleURL", function () { return $db5969aee64f21bb$export$bdfd709ae4826697; }, function (v) { return $db5969aee64f21bb$export$bdfd709ae4826697 = v; });
var $db5969aee64f21bb$export$bdfd709ae4826697;
var $db5969aee64f21bb$export$c9e73fbda7da57b6;
var $db5969aee64f21bb$export$5a759dc7a1cfb72a;
"use strict";
var $db5969aee64f21bb$var$bundleURL = {};
function $db5969aee64f21bb$var$getBundleURLCached(id) {
    var value = $db5969aee64f21bb$var$bundleURL[id];
    if (!value) {
        value = $db5969aee64f21bb$var$getBundleURL();
        $db5969aee64f21bb$var$bundleURL[id] = value;
    }
    return value;
}
function $db5969aee64f21bb$var$getBundleURL() {
    try {
        throw new Error();
    } catch (err) {
        var matches = ("" + err.stack).match(/(https?|file|ftp|(chrome|moz|safari-web)-extension):\/\/[^)\n]+/g);
        if (matches) // The first two stack frames will be this function and getBundleURLCached.
        // Use the 3rd one, which will be a runtime in the original bundle.
        return $db5969aee64f21bb$var$getBaseURL(matches[2]);
    }
    return "/";
}
function $db5969aee64f21bb$var$getBaseURL(url) {
    return ("" + url).replace(/^((?:https?|file|ftp|(chrome|moz|safari-web)-extension):\/\/.+)\/[^/]+$/, "$1") + "/";
} // TODO: Replace uses with `new URL(url).origin` when ie11 is no longer supported.
function $db5969aee64f21bb$var$getOrigin(url) {
    var matches = ("" + url).match(/(https?|file|ftp|(chrome|moz|safari-web)-extension):\/\/[^/]+/);
    if (!matches) throw new Error("Origin not found");
    return matches[0];
}
$db5969aee64f21bb$export$bdfd709ae4826697 = $db5969aee64f21bb$var$getBundleURLCached;
$db5969aee64f21bb$export$c9e73fbda7da57b6 = $db5969aee64f21bb$var$getBaseURL;
$db5969aee64f21bb$export$5a759dc7a1cfb72a = $db5969aee64f21bb$var$getOrigin;

});

parcelRequire.register("8WqEx", function(module, exports) {









module.exports = Promise.all([
    (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("9AtEp")),
    (parcelRequire("6r1H7"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("kmpAp")),
    (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("bZY8b"))
]).then(()=>parcelRequire("9S8w7"));

});
parcelRequire.register("bJDzq", function(module, exports) {
"use strict";

var $3Q81N = parcelRequire("3Q81N");
module.exports = $3Q81N(function(bundle) {
    return new Promise(function(resolve, reject) {
        // Don't insert the same script twice (e.g. if it was already in the HTML)
        var existingScripts = document.getElementsByTagName("script");
        if ([].concat(existingScripts).some(function isCurrentBundle(script) {
            return script.src === bundle;
        })) {
            resolve();
            return;
        }
        var preloadLink = document.createElement("link");
        preloadLink.href = bundle;
        preloadLink.rel = "preload";
        preloadLink.as = "script";
        document.head.appendChild(preloadLink);
        var script = document.createElement("script");
        script.async = true;
        script.type = "text/javascript";
        script.src = bundle;
        script.onerror = function(e) {
            var error = new TypeError("Failed to fetch dynamically imported module: ".concat(bundle, ". Error: ").concat(e.message));
            script.onerror = script.onload = null;
            script.remove();
            reject(error);
        };
        script.onload = function() {
            script.onerror = script.onload = null;
            resolve();
        };
        document.getElementsByTagName("head")[0].appendChild(script);
    });
});

});
parcelRequire.register("3Q81N", function(module, exports) {
"use strict";
var $2cbc749dd54b9d10$var$cachedBundles = {};
var $2cbc749dd54b9d10$var$cachedPreloads = {};
var $2cbc749dd54b9d10$var$cachedPrefetches = {};
function $2cbc749dd54b9d10$var$getCache(type) {
    switch(type){
        case "preload":
            return $2cbc749dd54b9d10$var$cachedPreloads;
        case "prefetch":
            return $2cbc749dd54b9d10$var$cachedPrefetches;
        default:
            return $2cbc749dd54b9d10$var$cachedBundles;
    }
}
module.exports = function(loader, type) {
    return function(bundle) {
        var cache = $2cbc749dd54b9d10$var$getCache(type);
        if (cache[bundle]) return cache[bundle];
        return cache[bundle] = loader.apply(null, arguments).catch(function(e) {
            delete cache[bundle];
            throw e;
        });
    };
};

});


parcelRequire.register("6r1H7", function(module, exports) {
"use strict";

var $3Q81N = parcelRequire("3Q81N");
module.exports = $3Q81N(function(bundle) {
    return new Promise(function(resolve, reject) {
        // Don't insert the same link element twice (e.g. if it was already in the HTML)
        var existingLinks = document.getElementsByTagName("link");
        if ([].concat(existingLinks).some(function isCurrentBundle(link) {
            return link.href === bundle && link.rel.indexOf("stylesheet") > -1;
        })) {
            resolve();
            return;
        }
        var link = document.createElement("link");
        link.rel = "stylesheet";
        link.href = bundle;
        link.onerror = function(e) {
            link.onerror = link.onload = null;
            link.remove();
            reject(e);
        };
        link.onload = function() {
            link.onerror = link.onload = null;
            resolve();
        };
        document.getElementsByTagName("head")[0].appendChild(link);
    });
});

});


parcelRequire.register("9cFMc", function(module, exports) {






module.exports = Promise.all([
    (parcelRequire("6r1H7"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("kmpAp")),
    (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("imHv1"))
]).then(()=>parcelRequire("aWdDD"));

});

parcelRequire.register("lWmos", function(module, exports) {






module.exports = Promise.all([
    (parcelRequire("6r1H7"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("kmpAp")),
    (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("1whT1"))
]).then(()=>parcelRequire("gl7Jt"));

});

parcelRequire.register("g9PvW", function(module, exports) {






module.exports = Promise.all([
    (parcelRequire("6r1H7"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("kmpAp")),
    (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("9Yhvm"))
]).then(()=>parcelRequire("kjoYl"));

});

parcelRequire.register("3Fiv9", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("7kx8T")).then(()=>parcelRequire("k89DY"));

});

parcelRequire.register("iWsaK", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("9fhfm")).then(()=>parcelRequire("7OdWl"));

});

parcelRequire.register("c78Bg", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("2tABb")).then(()=>parcelRequire("2Aucj"));

});

parcelRequire.register("hEbjX", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("cwM56")).then(()=>parcelRequire("1A56H"));

});

parcelRequire.register("e4cz2", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("203Sp")).then(()=>parcelRequire("50D5k"));

});

parcelRequire.register("3pAAN", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("jH3vz")).then(()=>parcelRequire("54XEA"));

});

parcelRequire.register("d9FYL", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("iBip2")).then(()=>parcelRequire("aTIml"));

});

parcelRequire.register("3ELDV", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("7HDB5")).then(()=>parcelRequire("hMZqI"));

});

parcelRequire.register("lIX0w", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("8IyGM")).then(()=>parcelRequire("6Rl1r"));

});

parcelRequire.register("4x96I", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("9SV1g")).then(()=>parcelRequire("DheY5"));

});

parcelRequire.register("blF3v", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("f7IfN")).then(()=>parcelRequire("78Zni"));

});

parcelRequire.register("eQG0y", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("kMfyv")).then(()=>parcelRequire("04jMN"));

});

parcelRequire.register("ipQyc", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("gbLli")).then(()=>parcelRequire("aC68y"));

});

parcelRequire.register("3WP4q", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("fB8lZ")).then(()=>parcelRequire("jDzbl"));

});

parcelRequire.register("2NrXI", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("3EvB7")).then(()=>parcelRequire("7cOja"));

});

parcelRequire.register("3PUWA", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("iUnRz")).then(()=>parcelRequire("6lqIs"));

});

parcelRequire.register("agUpl", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("5nE5Z")).then(()=>parcelRequire("by5iq"));

});

parcelRequire.register("lVKmL", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("77joM")).then(()=>parcelRequire("4FV5C"));

});

parcelRequire.register("eZ77a", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("iqSlp")).then(()=>parcelRequire("8TOuH"));

});

parcelRequire.register("31OMY", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("lp0mX")).then(()=>parcelRequire("6JbNC"));

});

parcelRequire.register("28e7f", function(module, exports) {






module.exports = Promise.all([
    (parcelRequire("6r1H7"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("kmpAp")),
    (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("4gZPo"))
]).then(()=>parcelRequire("lT6Zp"));

});

parcelRequire.register("fZf9d", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("fDILT")).then(()=>parcelRequire("iEazo"));

});

parcelRequire.register("6SzV0", function(module, exports) {






module.exports = Promise.all([
    (parcelRequire("6r1H7"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("kmpAp")),
    (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("fyJdL"))
]).then(()=>parcelRequire("cKDa7"));

});

parcelRequire.register("7gdzH", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("dKplA")).then(()=>parcelRequire("jtNEa"));

});

parcelRequire.register("eWezL", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("3D3AX")).then(()=>parcelRequire("eRBoI"));

});

parcelRequire.register("gBDLB", function(module, exports) {









module.exports = Promise.all([
    (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("1HlHh")),
    (parcelRequire("6r1H7"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("kmpAp")),
    (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("etcBr"))
]).then(()=>parcelRequire("49Gc1"));

});

parcelRequire.register("32qQO", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("j5ooc")).then(()=>parcelRequire("hI5ud"));

});

parcelRequire.register("buU9H", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("9uptJ")).then(()=>parcelRequire("jBtY3"));

});

parcelRequire.register("2Ai8D", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("2VLFJ")).then(()=>parcelRequire("8pr0m"));

});

parcelRequire.register("cMxKG", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("5if9y")).then(()=>parcelRequire("2SS44"));

});

parcelRequire.register("4kaim", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("lsawR")).then(()=>parcelRequire("gnzgw"));

});

parcelRequire.register("hci9w", function(module, exports) {






module.exports = Promise.all([
    (parcelRequire("6r1H7"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("kmpAp")),
    (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("4cq9B"))
]).then(()=>parcelRequire("k7rjW"));

});

parcelRequire.register("cax9q", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("9hQ1n")).then(()=>parcelRequire("dOym1"));

});

parcelRequire.register("sQQ7y", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("1IEtc")).then(()=>parcelRequire("kEWV4"));

});

parcelRequire.register("e2rZ9", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("isob3")).then(()=>parcelRequire("N7rpc"));

});

parcelRequire.register("dVqmB", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("94XBo")).then(()=>parcelRequire("fu357"));

});

parcelRequire.register("1u93I", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("irnYC")).then(()=>parcelRequire("3tpFO"));

});

parcelRequire.register("8lIJz", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("7kwNh")).then(()=>parcelRequire("lSKg5"));

});

parcelRequire.register("8CRbG", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("bCf5l")).then(()=>parcelRequire("2Dvg9"));

});

parcelRequire.register("fsJHN", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("gmhig")).then(()=>parcelRequire("f6EPY"));

});

parcelRequire.register("ezxag", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("f76f8")).then(()=>parcelRequire("kZFqs"));

});

parcelRequire.register("aYL0P", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("5Rtql")).then(()=>parcelRequire("hiePr"));

});

parcelRequire.register("15GJq", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("cRzRM")).then(()=>parcelRequire("kPamY"));

});

parcelRequire.register("1gFxr", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("1nAhj")).then(()=>parcelRequire("5CIN3"));

});

parcelRequire.register("ckcch", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("dEqti")).then(()=>parcelRequire("45Nfj"));

});

parcelRequire.register("jDdLY", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("iMTk9")).then(()=>parcelRequire("1LhPO"));

});

parcelRequire.register("i1eIo", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("22oo2")).then(()=>parcelRequire("kmRKn"));

});

parcelRequire.register("40DMi", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("7Lkep")).then(()=>parcelRequire("3jYf3"));

});

parcelRequire.register("7xWu3", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("2AYsY")).then(()=>parcelRequire("6zv8E"));

});

parcelRequire.register("bPg4f", function(module, exports) {






module.exports = Promise.all([
    (parcelRequire("6r1H7"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("kmpAp")),
    (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("93Imk"))
]).then(()=>parcelRequire("aG7rq"));

});

parcelRequire.register("2PKfH", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("bWl7K")).then(()=>parcelRequire("izLFH"));

});

parcelRequire.register("8qTj7", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("3hqaz")).then(()=>parcelRequire("hOklm"));

});

parcelRequire.register("8LX8I", function(module, exports) {






module.exports = Promise.all([
    (parcelRequire("6r1H7"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("kmpAp")),
    (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("c7SzX"))
]).then(()=>parcelRequire("ce0MF"));

});

parcelRequire.register("blPbG", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("4iUE3")).then(()=>parcelRequire("lVg89"));

});

parcelRequire.register("7YzDM", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("bwxIx")).then(()=>parcelRequire("eASnD"));

});

parcelRequire.register("b9vak", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("iCtyh")).then(()=>parcelRequire("9Hpaf"));

});

parcelRequire.register("bJwhx", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("9XoZU")).then(()=>parcelRequire("bD2Q5"));

});

parcelRequire.register("10ESp", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("iWQXV")).then(()=>parcelRequire("87ajS"));

});

parcelRequire.register("ggtHD", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("5TIbF")).then(()=>parcelRequire("7ulCo"));

});

parcelRequire.register("fAaap", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("1hSQF")).then(()=>parcelRequire("bB0dg"));

});

parcelRequire.register("2uYPF", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("4gM26")).then(()=>parcelRequire("lfrpF"));

});

parcelRequire.register("aNGOr", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("hpM9V")).then(()=>parcelRequire("6O1Gk"));

});

parcelRequire.register("ci3wB", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("iPbVO")).then(()=>parcelRequire("aPVPZ"));

});

parcelRequire.register("icWAp", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("iphR0")).then(()=>parcelRequire("bZ6Sh"));

});

parcelRequire.register("kk5Tl", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("l7UCC")).then(()=>parcelRequire("b4gZh"));

});

parcelRequire.register("5p3py", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("5rC9h")).then(()=>parcelRequire("5CDDr"));

});

parcelRequire.register("3gAZB", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("a83R5")).then(()=>parcelRequire("br2un"));

});

parcelRequire.register("iI4mX", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("5ZkMm")).then(()=>parcelRequire("4AvSy"));

});

parcelRequire.register("cntPk", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("9uQo2")).then(()=>parcelRequire("kbQ4f"));

});

parcelRequire.register("kTeMD", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("gvt2J")).then(()=>parcelRequire("6eAKO"));

});

parcelRequire.register("9jBaI", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("84OvB")).then(()=>parcelRequire("gHNbD"));

});

parcelRequire.register("7Rdkv", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("eKB2z")).then(()=>parcelRequire("8wTow"));

});

parcelRequire.register("MFXWQ", function(module, exports) {






module.exports = Promise.all([
    (parcelRequire("6r1H7"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("kmpAp")),
    (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("1HlHh"))
]).then(()=>parcelRequire("6e9HY"));

});

parcelRequire.register("jvxFR", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("ktdZ6")).then(()=>parcelRequire("9tTVv"));

});

parcelRequire.register("4UHr9", function(module, exports) {






module.exports = Promise.all([
    (parcelRequire("6r1H7"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("kmpAp")),
    (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("2aWfD"))
]).then(()=>parcelRequire("2FP7I"));

});

parcelRequire.register("iQ8I4", function(module, exports) {



module.exports = (parcelRequire("bJDzq"))((parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("3Tmsf")).then(()=>parcelRequire("jtXmj"));

});

var $fa9f721a7d8da5a1$exports = {};

(parcelRequire("9u2OH")).register(JSON.parse('{"3djw2":"index.4180a009.js","2Rswh":"lua.94394260.svg","3AeHO":"rust.81237fca.svg","k8Spi":"folder-base.b1d1a813.svg","hNknW":"javascript.20ea20c2.svg","4xX4V":"typescript.bf4d4f15.svg","7YGu6":"folder-stack.920499eb.svg","7MNy1":"html.69fa271a.svg","5LNRu":"lolcode.a86d892d.svg","h4JPi":"react.5c1ca375.svg","2pfTM":"react_ts.6e1c38c4.svg","bo0np":"css.19bcc610.svg","hFvjS":"json.3dabfb34.svg","37Jsu":"play.202024d9.png","bZY8b":"tsMode.9c58220c.js","kmpAp":"index.6de89eb5.css","9AtEp":"index.99aa7d68.js","imHv1":"cssMode.0321c8f9.js","1whT1":"jsonMode.af32fd7a.js","9Yhvm":"htmlMode.4228b74e.js","7kx8T":"abap.02fea9f4.js","9fhfm":"apex.b9104020.js","2tABb":"azcli.113fd635.js","cwM56":"bat.98b31ad3.js","203Sp":"bicep.fd764a7e.js","jH3vz":"cameligo.d470ef9b.js","iBip2":"clojure.c55275ec.js","7HDB5":"coffee.8202871c.js","8IyGM":"cpp.4703083c.js","9SV1g":"csharp.a11f3f9d.js","f7IfN":"csp.0ab982c7.js","kMfyv":"css.51940054.js","gbLli":"dart.ad75a761.js","fB8lZ":"dockerfile.c070196e.js","3EvB7":"ecl.eed32a35.js","iUnRz":"elixir.fa341702.js","5nE5Z":"flow9.9c24d07d.js","77joM":"fsharp.f0317875.js","iqSlp":"go.c454dbb4.js","lp0mX":"graphql.0ecbef1e.js","4gZPo":"handlebars.836f3139.js","fDILT":"hcl.394af960.js","fyJdL":"html.353a5925.js","dKplA":"ini.e90cb296.js","3D3AX":"java.8d76ce73.js","etcBr":"javascript.66ea0412.js","1HlHh":"typescript.1c96d9ae.js","j5ooc":"julia.b56b4be3.js","9uptJ":"kotlin.5393edd7.js","2VLFJ":"less.f5d6f640.js","5if9y":"lexon.6990d7f8.js","lsawR":"lua.1c31d4fd.js","4cq9B":"liquid.d92a870c.js","9hQ1n":"m3.6c289a68.js","1IEtc":"markdown.9a31bc64.js","isob3":"mips.1d605d8d.js","94XBo":"msdax.9ab70521.js","irnYC":"mysql.1749165a.js","7kwNh":"objective-c.86b1f819.js","bCf5l":"pascal.6acf0ee7.js","gmhig":"pascaligo.8f2743f0.js","f76f8":"perl.beb6e689.js","5Rtql":"pgsql.b2f6413c.js","cRzRM":"php.c296891b.js","1nAhj":"pla.aaf5d4e6.js","dEqti":"postiats.6f64b3f9.js","iMTk9":"powerquery.6ed12472.js","22oo2":"powershell.b5673cdd.js","7Lkep":"protobuf.899b3c57.js","2AYsY":"pug.5141a62e.js","93Imk":"python.5497244a.js","bWl7K":"qsharp.af169ddb.js","3hqaz":"r.c4d422e6.js","c7SzX":"razor.f22571c4.js","4iUE3":"redis.3ff32583.js","bwxIx":"redshift.75e8458c.js","iCtyh":"restructuredtext.4b00b689.js","9XoZU":"ruby.2429e02c.js","iWQXV":"rust.8a7cd195.js","5TIbF":"sb.c574a2cc.js","1hSQF":"scala.c29123c8.js","4gM26":"scheme.1b888391.js","hpM9V":"scss.b74a508f.js","iPbVO":"shell.b279afa3.js","iphR0":"solidity.588e84e9.js","l7UCC":"sophia.7f3b77d8.js","5rC9h":"sparql.72b3c8b4.js","a83R5":"sql.15da6d6d.js","5ZkMm":"st.3169039e.js","9uQo2":"swift.c8f7d1dc.js","gvt2J":"systemverilog.5b7b1a50.js","84OvB":"tcl.9c988a78.js","eKB2z":"twig.6a884701.js","ktdZ6":"vb.12047969.js","2aWfD":"xml.1ae47cea.js","3Tmsf":"yaml.d5c4325f.js","5EdfK":"logo.c8b51d46.png"}'));


var $2xZ2z = parcelRequire("2xZ2z");
var $c715b33cf42cee5d$exports = {};


$c715b33cf42cee5d$exports = (parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("2Rswh");


var $03c6c085203f8115$exports = {};


$03c6c085203f8115$exports = (parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("3AeHO");


var $36285d2cc7d472ed$exports = {};


$36285d2cc7d472ed$exports = (parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("k8Spi");


var $3070ab686933ed0f$exports = {};


$3070ab686933ed0f$exports = (parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("hNknW");


var $0a9f6becee96abbd$exports = {};


$0a9f6becee96abbd$exports = (parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("4xX4V");


var $6115bc3dce005fdd$exports = {};


$6115bc3dce005fdd$exports = (parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("7YGu6");


var $800881b83f617195$exports = {};


$800881b83f617195$exports = (parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("7MNy1");


var $703c6518c54a5459$exports = {};


$703c6518c54a5459$exports = (parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("5LNRu");


var $e6bab1eedac7519c$exports = {};


$e6bab1eedac7519c$exports = (parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("h4JPi");


var $a8958b5829f11857$exports = {};


$a8958b5829f11857$exports = (parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("2pfTM");


var $1c0f50af0ead9f87$exports = {};


$1c0f50af0ead9f87$exports = (parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("bo0np");


var $30f62683d9674b05$exports = {};


$30f62683d9674b05$exports = (parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("hFvjS");


const $a7d159bee37a0208$var$_iconsSet = {
    lua: (/*@__PURE__*/$parcel$interopDefault($c715b33cf42cee5d$exports)),
    toml: (/*@__PURE__*/$parcel$interopDefault($03c6c085203f8115$exports)),
    dir: (/*@__PURE__*/$parcel$interopDefault($36285d2cc7d472ed$exports)),
    js: (/*@__PURE__*/$parcel$interopDefault($3070ab686933ed0f$exports)),
    ts: (/*@__PURE__*/$parcel$interopDefault($0a9f6becee96abbd$exports)),
    pkg: (/*@__PURE__*/$parcel$interopDefault($6115bc3dce005fdd$exports)),
    html: (/*@__PURE__*/$parcel$interopDefault($800881b83f617195$exports)),
    jsx: (/*@__PURE__*/$parcel$interopDefault($e6bab1eedac7519c$exports)),
    tsx: (/*@__PURE__*/$parcel$interopDefault($a8958b5829f11857$exports)),
    css: (/*@__PURE__*/$parcel$interopDefault($1c0f50af0ead9f87$exports)),
    json: (/*@__PURE__*/$parcel$interopDefault($30f62683d9674b05$exports)),
    htm: (0, (/*@__PURE__*/$parcel$interopDefault($800881b83f617195$exports))),
    undefined: (0, (/*@__PURE__*/$parcel$interopDefault($703c6518c54a5459$exports)))
};
var $a7d159bee37a0208$var$_ext;
const $a7d159bee37a0208$export$86f2459e6d86dc7f = (ext)=>($a7d159bee37a0208$var$_ext = $a7d159bee37a0208$var$_iconsSet[ext]) !== null && $a7d159bee37a0208$var$_ext !== void 0 ? $a7d159bee37a0208$var$_ext : $a7d159bee37a0208$var$_iconsSet["undefined"];


var $d8d0618c8bb63edb$exports = {};


$d8d0618c8bb63edb$exports = (parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("37Jsu");


window.___allPackages = [];
// Indexing is path:openState
let $e13a880d897dd76d$var$openDirectoryState = {};
const $e13a880d897dd76d$var$onClickFile = (mouseEvent)=>{
    const dataContainingElement = mouseEvent.target.closest(".file-or-folder");
    // console.log("Received mouse event on click", dataContainingElement);
    const packageName = dataContainingElement.getAttribute("data-pkg");
    const filePath = dataContainingElement.getAttribute("data-filepath");
    const type = dataContainingElement.getAttribute("data-type");
    const ext = dataContainingElement.getAttribute("data-ext");
    if (type === "FILE") Events.Call("NIDE:CLIENT_ASK_FILE_CONTENTS", JSON.stringify({
        packageName: packageName,
        filePath: filePath,
        ext: ext
    }));
    if (type === "DIRECTORY") {
        const searchKey = packageName + "/" + filePath;
        console.log("Search key : ", {
            searchKey: searchKey,
            s: $e13a880d897dd76d$var$openDirectoryState[searchKey]
        });
        $e13a880d897dd76d$var$openDirectoryState[searchKey] = !$e13a880d897dd76d$var$openDirectoryState[searchKey];
        $e13a880d897dd76d$var$fileTreeMain();
    }
};
const $e13a880d897dd76d$var$buildDirectoryTree = (filePaths, pkgName, prefix = "")=>{
    const grouppedByFirstDirectory = (0, (/*@__PURE__*/$parcel$interopDefault($2xZ2z))).groupBy(filePaths, "0");
    return Object.values(grouppedByFirstDirectory).map((filePathsArray)=>{
        var ref, ref1, ref2, ref3;
        return Math.max(...filePathsArray.map((e)=>e.length)) > 1 ? function() {
            const fullPath = prefix + filePathsArray[0][0];
            if ($e13a880d897dd76d$var$openDirectoryState[pkgName + "/" + fullPath] === undefined) $e13a880d897dd76d$var$openDirectoryState[pkgName + "/" + fullPath] = false;
            return {
                type: "DIRECTORY",
                name: filePathsArray[0][0],
                packageName: pkgName,
                content: $e13a880d897dd76d$var$buildDirectoryTree(filePathsArray.map((e)=>e.slice(1)), pkgName, prefix + filePathsArray[0][0] + "/"),
                path: fullPath,
                ext: "dir"
            };
        }() : {
            type: "FILE",
            name: filePathsArray[0][0],
            ext: (ref2 = (ref1 = (ref = filePathsArray[0][0]) === null || ref === void 0 ? void 0 : ref.split(".")) === null || ref1 === void 0 ? void 0 : ref1.slice(-1)) === null || ref2 === void 0 ? void 0 : (ref3 = ref2[0]) === null || ref3 === void 0 ? void 0 : ref3.toLowerCase(),
            packageName: pkgName,
            path: prefix + filePathsArray[0][0]
        };
    });
};
const $e13a880d897dd76d$var$renderDirectoryTree = (node, identLevel = 0)=>{
    if (!node) return "";
    if (!node.type) // TODO: Handle arrays of nodes
    return (0, (/*@__PURE__*/$parcel$interopDefault($2xZ2z))).orderBy(node, (n)=>n.type === "DIRECTORY" ? -1 : 1).map((e)=>$e13a880d897dd76d$var$renderDirectoryTree(e, identLevel + 1)).join("");
    return `
        <span 
            class="package-folder file-or-folder" 
            style="${"padding-left: " + identLevel * 4 + "px;"}" 
            data-type="${node.type}"
            data-pkg="${node.packageName}" 
            data-filepath="${node.path}"
            data-ext="${node.ext}"
        >
            <span class="icon">
                <img src="${(0, $a7d159bee37a0208$export$86f2459e6d86dc7f)(node.ext)}" alt="${node.ext}" height="16" width="16"/>
            </span>
            <span class="name">${node.name}</span>
            ${node.type === "PACKAGE" ? '<span class="action-buttons"><img src="' + (0, (/*@__PURE__*/$parcel$interopDefault($d8d0618c8bb63edb$exports))) + '" alt="reload package" height="16" width="16"/></span>' : ""}
        </span>
    ${$e13a880d897dd76d$var$openDirectoryState[node.packageName + "/" + node.path] || node.type !== "DIRECTORY" ? $e13a880d897dd76d$var$renderDirectoryTree(node.content, identLevel + 1) : ""}`;
};
const $e13a880d897dd76d$var$renderError = ()=>`
    <div class="error">
        No packages were found ! <br />
        Have you forgot to setup the editor ?<br />
        Add this code to the packages you want to edit: <br />
        <pre>
        local editor = Package.Require("nanos-ide/hook.lua")\n
        editor.setup()
        </pre>
    </div>
`;
function $e13a880d897dd76d$var$fileTreeMain() {
    console.log("Generated open directorys", $e13a880d897dd76d$var$openDirectoryState);
    // console.log("All files : ", ___allPackages);
    if (!___allPackages) return;
    const allFiles = Object.values(___allPackages).flatMap((pkgfl)=>pkgfl.files);
    const allPackages = Object.keys(___allPackages);
    // console.log("All packages : ", allPackages);
    const allTrees = allPackages.map((pkgName)=>{
        const allPackagesFiles = ___allPackages[pkgName].files;
        return {
            type: "PACKAGE",
            name: pkgName,
            packageName: pkgName,
            content: $e13a880d897dd76d$var$buildDirectoryTree(allPackagesFiles.map((filePath)=>filePath.split("/")), pkgName),
            ext: "pkg"
        };
    });
    // console.log("All files : ", allFiles);
    // const splittedFilePaths = ___allPackages['test'].files.map((filePath) => filePath.split('/'));
    // console.log(buildDirectoryTree(splittedFilePaths));
    // console.log("Generated all trees ", allTrees);
    const renderString = allTrees.length === 0 ? $e13a880d897dd76d$var$renderError() : $e13a880d897dd76d$var$renderDirectoryTree(allTrees);
    // console.log("Rendered string : ", renderString);
    const fte = document.getElementById("file-tree");
    fte.innerHTML = renderString;
    fte.removeEventListener("click", $e13a880d897dd76d$var$onClickFile);
    fte.addEventListener("click", $e13a880d897dd76d$var$onClickFile);
}
setInterval($e13a880d897dd76d$var$fileTreeMain, 10000, ___allPackages);
Events.Subscribe("NIDE:JS_SEND_PKG_INFOS", (pkgData)=>{
    // console.log("received pkg data : ", pkgData);
    window.___allPackages = JSON.parse(pkgData);
    $e13a880d897dd76d$var$fileTreeMain();
});



var $jBoEN = parcelRequire("jBoEN");

var $jBoEN = parcelRequire("jBoEN");
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.0(252e010eb73ddc2fa1a37c1dade7bf35d87106cd)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ var $fed7914632f62ebd$var$__defProp = Object.defineProperty;
var $fed7914632f62ebd$var$__getOwnPropDesc = Object.getOwnPropertyDescriptor;
var $fed7914632f62ebd$var$__getOwnPropNames = Object.getOwnPropertyNames;
var $fed7914632f62ebd$var$__hasOwnProp = Object.prototype.hasOwnProperty;
var $fed7914632f62ebd$var$__markAsModule = (target)=>$fed7914632f62ebd$var$__defProp(target, "__esModule", {
        value: true
    });
var $fed7914632f62ebd$var$__reExport = (target, module, desc)=>{
    if (module && typeof module === "object" || typeof module === "function") {
        for (let key of $fed7914632f62ebd$var$__getOwnPropNames(module))if (!$fed7914632f62ebd$var$__hasOwnProp.call(target, key) && key !== "default") $fed7914632f62ebd$var$__defProp(target, key, {
            get: ()=>module[key],
            enumerable: !(desc = $fed7914632f62ebd$var$__getOwnPropDesc(module, key)) || desc.enumerable
        });
    }
    return target;
};
// src/typescript/lib/typescriptServicesMetadata.ts
var $fed7914632f62ebd$var$typescriptVersion = "4.4.4";
// src/fillers/monaco-editor-core.ts
var $fed7914632f62ebd$var$monaco_editor_core_exports = {};
$fed7914632f62ebd$var$__markAsModule($fed7914632f62ebd$var$monaco_editor_core_exports);
$fed7914632f62ebd$var$__reExport($fed7914632f62ebd$var$monaco_editor_core_exports, $jBoEN);
// src/typescript/monaco.contribution.ts
var $fed7914632f62ebd$export$2932e787d4bab445;
(function(ModuleKind2) {
    ModuleKind2[ModuleKind2["None"] = 0] = "None";
    ModuleKind2[ModuleKind2["CommonJS"] = 1] = "CommonJS";
    ModuleKind2[ModuleKind2["AMD"] = 2] = "AMD";
    ModuleKind2[ModuleKind2["UMD"] = 3] = "UMD";
    ModuleKind2[ModuleKind2["System"] = 4] = "System";
    ModuleKind2[ModuleKind2["ES2015"] = 5] = "ES2015";
    ModuleKind2[ModuleKind2["ESNext"] = 99] = "ESNext";
})($fed7914632f62ebd$export$2932e787d4bab445 || ($fed7914632f62ebd$export$2932e787d4bab445 = {}));
var $fed7914632f62ebd$export$23b47a46c244d065;
(function(JsxEmit2) {
    JsxEmit2[JsxEmit2["None"] = 0] = "None";
    JsxEmit2[JsxEmit2["Preserve"] = 1] = "Preserve";
    JsxEmit2[JsxEmit2["React"] = 2] = "React";
    JsxEmit2[JsxEmit2["ReactNative"] = 3] = "ReactNative";
    JsxEmit2[JsxEmit2["ReactJSX"] = 4] = "ReactJSX";
    JsxEmit2[JsxEmit2["ReactJSXDev"] = 5] = "ReactJSXDev";
})($fed7914632f62ebd$export$23b47a46c244d065 || ($fed7914632f62ebd$export$23b47a46c244d065 = {}));
var $fed7914632f62ebd$export$c28f76d17c23333a;
(function(NewLineKind2) {
    NewLineKind2[NewLineKind2["CarriageReturnLineFeed"] = 0] = "CarriageReturnLineFeed";
    NewLineKind2[NewLineKind2["LineFeed"] = 1] = "LineFeed";
})($fed7914632f62ebd$export$c28f76d17c23333a || ($fed7914632f62ebd$export$c28f76d17c23333a = {}));
var $fed7914632f62ebd$export$36609ff6f261a579;
(function(ScriptTarget2) {
    ScriptTarget2[ScriptTarget2["ES3"] = 0] = "ES3";
    ScriptTarget2[ScriptTarget2["ES5"] = 1] = "ES5";
    ScriptTarget2[ScriptTarget2["ES2015"] = 2] = "ES2015";
    ScriptTarget2[ScriptTarget2["ES2016"] = 3] = "ES2016";
    ScriptTarget2[ScriptTarget2["ES2017"] = 4] = "ES2017";
    ScriptTarget2[ScriptTarget2["ES2018"] = 5] = "ES2018";
    ScriptTarget2[ScriptTarget2["ES2019"] = 6] = "ES2019";
    ScriptTarget2[ScriptTarget2["ES2020"] = 7] = "ES2020";
    ScriptTarget2[ScriptTarget2["ESNext"] = 99] = "ESNext";
    ScriptTarget2[ScriptTarget2["JSON"] = 100] = "JSON";
    ScriptTarget2[ScriptTarget2["Latest"] = 99] = "Latest";
})($fed7914632f62ebd$export$36609ff6f261a579 || ($fed7914632f62ebd$export$36609ff6f261a579 = {}));
var $fed7914632f62ebd$export$2e45c31d6e8ee3d0;
(function(ModuleResolutionKind2) {
    ModuleResolutionKind2[ModuleResolutionKind2["Classic"] = 1] = "Classic";
    ModuleResolutionKind2[ModuleResolutionKind2["NodeJs"] = 2] = "NodeJs";
})($fed7914632f62ebd$export$2e45c31d6e8ee3d0 || ($fed7914632f62ebd$export$2e45c31d6e8ee3d0 = {}));
var $fed7914632f62ebd$var$LanguageServiceDefaultsImpl = class {
    get onDidChange() {
        return this._onDidChange.event;
    }
    get onDidExtraLibsChange() {
        return this._onDidExtraLibsChange.event;
    }
    get workerOptions() {
        return this._workerOptions;
    }
    get inlayHintsOptions() {
        return this._inlayHintsOptions;
    }
    getExtraLibs() {
        return this._extraLibs;
    }
    addExtraLib(content, _filePath) {
        let filePath;
        if (typeof _filePath === "undefined") filePath = `ts:extralib-${Math.random().toString(36).substring(2, 15)}`;
        else filePath = _filePath;
        if (this._extraLibs[filePath] && this._extraLibs[filePath].content === content) return {
            dispose: ()=>{}
        };
        let myVersion = 1;
        if (this._removedExtraLibs[filePath]) myVersion = this._removedExtraLibs[filePath] + 1;
        if (this._extraLibs[filePath]) myVersion = this._extraLibs[filePath].version + 1;
        this._extraLibs[filePath] = {
            content: content,
            version: myVersion
        };
        this._fireOnDidExtraLibsChangeSoon();
        return {
            dispose: ()=>{
                let extraLib = this._extraLibs[filePath];
                if (!extraLib) return;
                if (extraLib.version !== myVersion) return;
                delete this._extraLibs[filePath];
                this._removedExtraLibs[filePath] = myVersion;
                this._fireOnDidExtraLibsChangeSoon();
            }
        };
    }
    setExtraLibs(libs) {
        for(const filePath in this._extraLibs)this._removedExtraLibs[filePath] = this._extraLibs[filePath].version;
        this._extraLibs = Object.create(null);
        if (libs && libs.length > 0) for (const lib of libs){
            const filePath1 = lib.filePath || `ts:extralib-${Math.random().toString(36).substring(2, 15)}`;
            const content = lib.content;
            let myVersion = 1;
            if (this._removedExtraLibs[filePath1]) myVersion = this._removedExtraLibs[filePath1] + 1;
            this._extraLibs[filePath1] = {
                content: content,
                version: myVersion
            };
        }
        this._fireOnDidExtraLibsChangeSoon();
    }
    _fireOnDidExtraLibsChangeSoon() {
        if (this._onDidExtraLibsChangeTimeout !== -1) return;
        this._onDidExtraLibsChangeTimeout = window.setTimeout(()=>{
            this._onDidExtraLibsChangeTimeout = -1;
            this._onDidExtraLibsChange.fire(void 0);
        }, 0);
    }
    getCompilerOptions() {
        return this._compilerOptions;
    }
    setCompilerOptions(options) {
        this._compilerOptions = options || Object.create(null);
        this._onDidChange.fire(void 0);
    }
    getDiagnosticsOptions() {
        return this._diagnosticsOptions;
    }
    setDiagnosticsOptions(options) {
        this._diagnosticsOptions = options || Object.create(null);
        this._onDidChange.fire(void 0);
    }
    setWorkerOptions(options) {
        this._workerOptions = options || Object.create(null);
        this._onDidChange.fire(void 0);
    }
    setInlayHintsOptions(options) {
        this._inlayHintsOptions = options || Object.create(null);
        this._onDidChange.fire(void 0);
    }
    setMaximumWorkerIdleTime(value) {}
    setEagerModelSync(value) {
        this._eagerModelSync = value;
    }
    getEagerModelSync() {
        return this._eagerModelSync;
    }
    constructor(compilerOptions, diagnosticsOptions, workerOptions, inlayHintsOptions){
        this._onDidChange = new $fed7914632f62ebd$var$monaco_editor_core_exports.Emitter();
        this._onDidExtraLibsChange = new $fed7914632f62ebd$var$monaco_editor_core_exports.Emitter();
        this._extraLibs = Object.create(null);
        this._removedExtraLibs = Object.create(null);
        this._eagerModelSync = false;
        this.setCompilerOptions(compilerOptions);
        this.setDiagnosticsOptions(diagnosticsOptions);
        this.setWorkerOptions(workerOptions);
        this.setInlayHintsOptions(inlayHintsOptions);
        this._onDidExtraLibsChangeTimeout = -1;
    }
};
var $fed7914632f62ebd$export$30d76bc34f51c345 = $fed7914632f62ebd$var$typescriptVersion;
var $fed7914632f62ebd$export$5b7e032c201ff89d = new $fed7914632f62ebd$var$LanguageServiceDefaultsImpl({
    allowNonTsExtensions: true,
    target: 99
}, {
    noSemanticValidation: false,
    noSyntaxValidation: false,
    onlyVisible: false
}, {}, {});
var $fed7914632f62ebd$export$15c6eb181a3131d2 = new $fed7914632f62ebd$var$LanguageServiceDefaultsImpl({
    allowNonTsExtensions: true,
    allowJs: true,
    target: 99
}, {
    noSemanticValidation: true,
    noSyntaxValidation: false,
    onlyVisible: false
}, {}, {});
var $fed7914632f62ebd$export$f4433c6b950b070e = ()=>{
    return $fed7914632f62ebd$var$getMode().then((mode)=>mode.getTypeScriptWorker());
};
var $fed7914632f62ebd$export$42142bcd5970f8e8 = ()=>{
    return $fed7914632f62ebd$var$getMode().then((mode)=>mode.getJavaScriptWorker());
};
$fed7914632f62ebd$var$monaco_editor_core_exports.languages.typescript = {
    ModuleKind: $fed7914632f62ebd$export$2932e787d4bab445,
    JsxEmit: $fed7914632f62ebd$export$23b47a46c244d065,
    NewLineKind: $fed7914632f62ebd$export$c28f76d17c23333a,
    ScriptTarget: $fed7914632f62ebd$export$36609ff6f261a579,
    ModuleResolutionKind: $fed7914632f62ebd$export$2e45c31d6e8ee3d0,
    typescriptVersion: $fed7914632f62ebd$export$30d76bc34f51c345,
    typescriptDefaults: $fed7914632f62ebd$export$5b7e032c201ff89d,
    javascriptDefaults: $fed7914632f62ebd$export$15c6eb181a3131d2,
    getTypeScriptWorker: $fed7914632f62ebd$export$f4433c6b950b070e,
    getJavaScriptWorker: $fed7914632f62ebd$export$42142bcd5970f8e8
};

function $fed7914632f62ebd$var$getMode() {
    var resolve, reject;
    return (parcelRequire("8WqEx"));
}
$fed7914632f62ebd$var$monaco_editor_core_exports.languages.onLanguage("typescript", ()=>{
    return $fed7914632f62ebd$var$getMode().then((mode)=>mode.setupTypeScript($fed7914632f62ebd$export$5b7e032c201ff89d));
});
$fed7914632f62ebd$var$monaco_editor_core_exports.languages.onLanguage("javascript", ()=>{
    return $fed7914632f62ebd$var$getMode().then((mode)=>mode.setupJavaScript($fed7914632f62ebd$export$15c6eb181a3131d2));
});



var $jBoEN = parcelRequire("jBoEN");

var $jBoEN = parcelRequire("jBoEN");
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.0(252e010eb73ddc2fa1a37c1dade7bf35d87106cd)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ var $d29afdf0de4a7e4b$var$__defProp = Object.defineProperty;
var $d29afdf0de4a7e4b$var$__getOwnPropDesc = Object.getOwnPropertyDescriptor;
var $d29afdf0de4a7e4b$var$__getOwnPropNames = Object.getOwnPropertyNames;
var $d29afdf0de4a7e4b$var$__hasOwnProp = Object.prototype.hasOwnProperty;
var $d29afdf0de4a7e4b$var$__markAsModule = (target)=>$d29afdf0de4a7e4b$var$__defProp(target, "__esModule", {
        value: true
    });
var $d29afdf0de4a7e4b$var$__reExport = (target, module, desc)=>{
    if (module && typeof module === "object" || typeof module === "function") {
        for (let key of $d29afdf0de4a7e4b$var$__getOwnPropNames(module))if (!$d29afdf0de4a7e4b$var$__hasOwnProp.call(target, key) && key !== "default") $d29afdf0de4a7e4b$var$__defProp(target, key, {
            get: ()=>module[key],
            enumerable: !(desc = $d29afdf0de4a7e4b$var$__getOwnPropDesc(module, key)) || desc.enumerable
        });
    }
    return target;
};
// src/fillers/monaco-editor-core.ts
var $d29afdf0de4a7e4b$var$monaco_editor_core_exports = {};
$d29afdf0de4a7e4b$var$__markAsModule($d29afdf0de4a7e4b$var$monaco_editor_core_exports);
$d29afdf0de4a7e4b$var$__reExport($d29afdf0de4a7e4b$var$monaco_editor_core_exports, $jBoEN);
// src/css/monaco.contribution.ts
var $d29afdf0de4a7e4b$var$LanguageServiceDefaultsImpl = class {
    get onDidChange() {
        return this._onDidChange.event;
    }
    get languageId() {
        return this._languageId;
    }
    get modeConfiguration() {
        return this._modeConfiguration;
    }
    get diagnosticsOptions() {
        return this.options;
    }
    get options() {
        return this._options;
    }
    setOptions(options) {
        this._options = options || Object.create(null);
        this._onDidChange.fire(this);
    }
    setDiagnosticsOptions(options) {
        this.setOptions(options);
    }
    setModeConfiguration(modeConfiguration) {
        this._modeConfiguration = modeConfiguration || Object.create(null);
        this._onDidChange.fire(this);
    }
    constructor(languageId, options, modeConfiguration){
        this._onDidChange = new $d29afdf0de4a7e4b$var$monaco_editor_core_exports.Emitter();
        this._languageId = languageId;
        this.setOptions(options);
        this.setModeConfiguration(modeConfiguration);
    }
};
var $d29afdf0de4a7e4b$var$optionsDefault = {
    validate: true,
    lint: {
        compatibleVendorPrefixes: "ignore",
        vendorPrefix: "warning",
        duplicateProperties: "warning",
        emptyRules: "warning",
        importStatement: "ignore",
        boxModel: "ignore",
        universalSelector: "ignore",
        zeroUnits: "ignore",
        fontFaceProperties: "warning",
        hexColorLength: "error",
        argumentsInColorFunction: "error",
        unknownProperties: "warning",
        ieHack: "ignore",
        unknownVendorSpecificProperties: "ignore",
        propertyIgnoredDueToDisplay: "warning",
        important: "ignore",
        float: "ignore",
        idSelector: "ignore"
    },
    data: {
        useDefaultDataProvider: true
    }
};
var $d29afdf0de4a7e4b$var$modeConfigurationDefault = {
    completionItems: true,
    hovers: true,
    documentSymbols: true,
    definitions: true,
    references: true,
    documentHighlights: true,
    rename: true,
    colors: true,
    foldingRanges: true,
    diagnostics: true,
    selectionRanges: true
};
var $d29afdf0de4a7e4b$export$c2a404aa831e27bd = new $d29afdf0de4a7e4b$var$LanguageServiceDefaultsImpl("css", $d29afdf0de4a7e4b$var$optionsDefault, $d29afdf0de4a7e4b$var$modeConfigurationDefault);
var $d29afdf0de4a7e4b$export$54af320ade247add = new $d29afdf0de4a7e4b$var$LanguageServiceDefaultsImpl("scss", $d29afdf0de4a7e4b$var$optionsDefault, $d29afdf0de4a7e4b$var$modeConfigurationDefault);
var $d29afdf0de4a7e4b$export$c8aa2efd916a3011 = new $d29afdf0de4a7e4b$var$LanguageServiceDefaultsImpl("less", $d29afdf0de4a7e4b$var$optionsDefault, $d29afdf0de4a7e4b$var$modeConfigurationDefault);
$d29afdf0de4a7e4b$var$monaco_editor_core_exports.languages.css = {
    cssDefaults: $d29afdf0de4a7e4b$export$c2a404aa831e27bd,
    lessDefaults: $d29afdf0de4a7e4b$export$c8aa2efd916a3011,
    scssDefaults: $d29afdf0de4a7e4b$export$54af320ade247add
};

function $d29afdf0de4a7e4b$var$getMode() {
    var resolve, reject;
    return (parcelRequire("9cFMc"));
}
$d29afdf0de4a7e4b$var$monaco_editor_core_exports.languages.onLanguage("less", ()=>{
    $d29afdf0de4a7e4b$var$getMode().then((mode)=>mode.setupMode($d29afdf0de4a7e4b$export$c8aa2efd916a3011));
});
$d29afdf0de4a7e4b$var$monaco_editor_core_exports.languages.onLanguage("scss", ()=>{
    $d29afdf0de4a7e4b$var$getMode().then((mode)=>mode.setupMode($d29afdf0de4a7e4b$export$54af320ade247add));
});
$d29afdf0de4a7e4b$var$monaco_editor_core_exports.languages.onLanguage("css", ()=>{
    $d29afdf0de4a7e4b$var$getMode().then((mode)=>mode.setupMode($d29afdf0de4a7e4b$export$c2a404aa831e27bd));
});



var $jBoEN = parcelRequire("jBoEN");

var $jBoEN = parcelRequire("jBoEN");
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.0(252e010eb73ddc2fa1a37c1dade7bf35d87106cd)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ var $eb0fdbe192de8109$var$__defProp = Object.defineProperty;
var $eb0fdbe192de8109$var$__getOwnPropDesc = Object.getOwnPropertyDescriptor;
var $eb0fdbe192de8109$var$__getOwnPropNames = Object.getOwnPropertyNames;
var $eb0fdbe192de8109$var$__hasOwnProp = Object.prototype.hasOwnProperty;
var $eb0fdbe192de8109$var$__markAsModule = (target)=>$eb0fdbe192de8109$var$__defProp(target, "__esModule", {
        value: true
    });
var $eb0fdbe192de8109$var$__reExport = (target, module, desc)=>{
    if (module && typeof module === "object" || typeof module === "function") {
        for (let key of $eb0fdbe192de8109$var$__getOwnPropNames(module))if (!$eb0fdbe192de8109$var$__hasOwnProp.call(target, key) && key !== "default") $eb0fdbe192de8109$var$__defProp(target, key, {
            get: ()=>module[key],
            enumerable: !(desc = $eb0fdbe192de8109$var$__getOwnPropDesc(module, key)) || desc.enumerable
        });
    }
    return target;
};
// src/fillers/monaco-editor-core.ts
var $eb0fdbe192de8109$var$monaco_editor_core_exports = {};
$eb0fdbe192de8109$var$__markAsModule($eb0fdbe192de8109$var$monaco_editor_core_exports);
$eb0fdbe192de8109$var$__reExport($eb0fdbe192de8109$var$monaco_editor_core_exports, $jBoEN);
// src/json/monaco.contribution.ts
var $eb0fdbe192de8109$var$LanguageServiceDefaultsImpl = class {
    get onDidChange() {
        return this._onDidChange.event;
    }
    get languageId() {
        return this._languageId;
    }
    get modeConfiguration() {
        return this._modeConfiguration;
    }
    get diagnosticsOptions() {
        return this._diagnosticsOptions;
    }
    setDiagnosticsOptions(options) {
        this._diagnosticsOptions = options || Object.create(null);
        this._onDidChange.fire(this);
    }
    setModeConfiguration(modeConfiguration) {
        this._modeConfiguration = modeConfiguration || Object.create(null);
        this._onDidChange.fire(this);
    }
    constructor(languageId, diagnosticsOptions, modeConfiguration){
        this._onDidChange = new $eb0fdbe192de8109$var$monaco_editor_core_exports.Emitter();
        this._languageId = languageId;
        this.setDiagnosticsOptions(diagnosticsOptions);
        this.setModeConfiguration(modeConfiguration);
    }
};
var $eb0fdbe192de8109$var$diagnosticDefault = {
    validate: true,
    allowComments: true,
    schemas: [],
    enableSchemaRequest: false,
    schemaRequest: "warning",
    schemaValidation: "warning",
    comments: "error",
    trailingCommas: "error"
};
var $eb0fdbe192de8109$var$modeConfigurationDefault = {
    documentFormattingEdits: true,
    documentRangeFormattingEdits: true,
    completionItems: true,
    hovers: true,
    documentSymbols: true,
    tokens: true,
    colors: true,
    foldingRanges: true,
    diagnostics: true,
    selectionRanges: true
};
var $eb0fdbe192de8109$export$f9a800bb9a97e438 = new $eb0fdbe192de8109$var$LanguageServiceDefaultsImpl("json", $eb0fdbe192de8109$var$diagnosticDefault, $eb0fdbe192de8109$var$modeConfigurationDefault);
$eb0fdbe192de8109$var$monaco_editor_core_exports.languages.json = {
    jsonDefaults: $eb0fdbe192de8109$export$f9a800bb9a97e438
};

function $eb0fdbe192de8109$var$getMode() {
    var resolve, reject;
    return (parcelRequire("lWmos"));
}
$eb0fdbe192de8109$var$monaco_editor_core_exports.languages.register({
    id: "json",
    extensions: [
        ".json",
        ".bowerrc",
        ".jshintrc",
        ".jscsrc",
        ".eslintrc",
        ".babelrc",
        ".har"
    ],
    aliases: [
        "JSON",
        "json"
    ],
    mimetypes: [
        "application/json"
    ]
});
$eb0fdbe192de8109$var$monaco_editor_core_exports.languages.onLanguage("json", ()=>{
    $eb0fdbe192de8109$var$getMode().then((mode)=>mode.setupMode($eb0fdbe192de8109$export$f9a800bb9a97e438));
});



var $jBoEN = parcelRequire("jBoEN");

var $jBoEN = parcelRequire("jBoEN");
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.0(252e010eb73ddc2fa1a37c1dade7bf35d87106cd)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ var $24382ad8fd92c167$var$__defProp = Object.defineProperty;
var $24382ad8fd92c167$var$__getOwnPropDesc = Object.getOwnPropertyDescriptor;
var $24382ad8fd92c167$var$__getOwnPropNames = Object.getOwnPropertyNames;
var $24382ad8fd92c167$var$__hasOwnProp = Object.prototype.hasOwnProperty;
var $24382ad8fd92c167$var$__markAsModule = (target)=>$24382ad8fd92c167$var$__defProp(target, "__esModule", {
        value: true
    });
var $24382ad8fd92c167$var$__reExport = (target, module, desc)=>{
    if (module && typeof module === "object" || typeof module === "function") {
        for (let key of $24382ad8fd92c167$var$__getOwnPropNames(module))if (!$24382ad8fd92c167$var$__hasOwnProp.call(target, key) && key !== "default") $24382ad8fd92c167$var$__defProp(target, key, {
            get: ()=>module[key],
            enumerable: !(desc = $24382ad8fd92c167$var$__getOwnPropDesc(module, key)) || desc.enumerable
        });
    }
    return target;
};
// src/fillers/monaco-editor-core.ts
var $24382ad8fd92c167$var$monaco_editor_core_exports = {};
$24382ad8fd92c167$var$__markAsModule($24382ad8fd92c167$var$monaco_editor_core_exports);
$24382ad8fd92c167$var$__reExport($24382ad8fd92c167$var$monaco_editor_core_exports, $jBoEN);
// src/html/monaco.contribution.ts
var $24382ad8fd92c167$var$LanguageServiceDefaultsImpl = class {
    get onDidChange() {
        return this._onDidChange.event;
    }
    get languageId() {
        return this._languageId;
    }
    get options() {
        return this._options;
    }
    get modeConfiguration() {
        return this._modeConfiguration;
    }
    setOptions(options) {
        this._options = options || Object.create(null);
        this._onDidChange.fire(this);
    }
    setModeConfiguration(modeConfiguration) {
        this._modeConfiguration = modeConfiguration || Object.create(null);
        this._onDidChange.fire(this);
    }
    constructor(languageId, options, modeConfiguration){
        this._onDidChange = new $24382ad8fd92c167$var$monaco_editor_core_exports.Emitter();
        this._languageId = languageId;
        this.setOptions(options);
        this.setModeConfiguration(modeConfiguration);
    }
};
var $24382ad8fd92c167$var$formatDefaults = {
    tabSize: 4,
    insertSpaces: false,
    wrapLineLength: 120,
    unformatted: 'default": "a, abbr, acronym, b, bdo, big, br, button, cite, code, dfn, em, i, img, input, kbd, label, map, object, q, samp, select, small, span, strong, sub, sup, textarea, tt, var',
    contentUnformatted: "pre",
    indentInnerHtml: false,
    preserveNewLines: true,
    maxPreserveNewLines: void 0,
    indentHandlebars: false,
    endWithNewline: false,
    extraLiners: "head, body, /html",
    wrapAttributes: "auto"
};
var $24382ad8fd92c167$var$optionsDefault = {
    format: $24382ad8fd92c167$var$formatDefaults,
    suggest: {},
    data: {
        useDefaultDataProvider: true
    }
};
function $24382ad8fd92c167$var$getConfigurationDefault(languageId) {
    return {
        completionItems: true,
        hovers: true,
        documentSymbols: true,
        links: true,
        documentHighlights: true,
        rename: true,
        colors: true,
        foldingRanges: true,
        selectionRanges: true,
        diagnostics: languageId === $24382ad8fd92c167$var$htmlLanguageId,
        documentFormattingEdits: languageId === $24382ad8fd92c167$var$htmlLanguageId,
        documentRangeFormattingEdits: languageId === $24382ad8fd92c167$var$htmlLanguageId
    };
}
var $24382ad8fd92c167$var$htmlLanguageId = "html";
var $24382ad8fd92c167$var$handlebarsLanguageId = "handlebars";
var $24382ad8fd92c167$var$razorLanguageId = "razor";
var $24382ad8fd92c167$export$5fef39c1049dc16a = $24382ad8fd92c167$export$282c563ccf44ceb9($24382ad8fd92c167$var$htmlLanguageId, $24382ad8fd92c167$var$optionsDefault, $24382ad8fd92c167$var$getConfigurationDefault($24382ad8fd92c167$var$htmlLanguageId));
var $24382ad8fd92c167$export$57db705433ed60e4 = $24382ad8fd92c167$export$5fef39c1049dc16a.defaults;
var $24382ad8fd92c167$export$7128923f244739ae = $24382ad8fd92c167$export$282c563ccf44ceb9($24382ad8fd92c167$var$handlebarsLanguageId, $24382ad8fd92c167$var$optionsDefault, $24382ad8fd92c167$var$getConfigurationDefault($24382ad8fd92c167$var$handlebarsLanguageId));
var $24382ad8fd92c167$export$d6789e1e299dadea = $24382ad8fd92c167$export$7128923f244739ae.defaults;
var $24382ad8fd92c167$export$c0c348172212aa68 = $24382ad8fd92c167$export$282c563ccf44ceb9($24382ad8fd92c167$var$razorLanguageId, $24382ad8fd92c167$var$optionsDefault, $24382ad8fd92c167$var$getConfigurationDefault($24382ad8fd92c167$var$razorLanguageId));
var $24382ad8fd92c167$export$ca427800aa66cf63 = $24382ad8fd92c167$export$c0c348172212aa68.defaults;
$24382ad8fd92c167$var$monaco_editor_core_exports.languages.html = {
    htmlDefaults: $24382ad8fd92c167$export$57db705433ed60e4,
    razorDefaults: $24382ad8fd92c167$export$ca427800aa66cf63,
    handlebarDefaults: $24382ad8fd92c167$export$d6789e1e299dadea,
    htmlLanguageService: $24382ad8fd92c167$export$5fef39c1049dc16a,
    handlebarLanguageService: $24382ad8fd92c167$export$7128923f244739ae,
    razorLanguageService: $24382ad8fd92c167$export$c0c348172212aa68,
    registerHTMLLanguageService: $24382ad8fd92c167$export$282c563ccf44ceb9
};

function $24382ad8fd92c167$var$getMode() {
    var resolve, reject;
    return (parcelRequire("g9PvW"));
}
function $24382ad8fd92c167$export$282c563ccf44ceb9(languageId, options = $24382ad8fd92c167$var$optionsDefault, modeConfiguration = $24382ad8fd92c167$var$getConfigurationDefault(languageId)) {
    const defaults = new $24382ad8fd92c167$var$LanguageServiceDefaultsImpl(languageId, options, modeConfiguration);
    let mode;
    const onLanguageListener = $24382ad8fd92c167$var$monaco_editor_core_exports.languages.onLanguage(languageId, async ()=>{
        mode = (await $24382ad8fd92c167$var$getMode()).setupMode(defaults);
    });
    return {
        defaults: defaults,
        dispose () {
            onLanguageListener.dispose();
            mode === null || mode === void 0 ? void 0 : mode.dispose();
            mode = void 0;
        }
    };
}


parcelRequire("jBoEN");

var $jBoEN = parcelRequire("jBoEN");
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.0(252e010eb73ddc2fa1a37c1dade7bf35d87106cd)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ var $cd7cb9c1239434cc$var$__defProp = Object.defineProperty;
var $cd7cb9c1239434cc$var$__getOwnPropDesc = Object.getOwnPropertyDescriptor;
var $cd7cb9c1239434cc$var$__getOwnPropNames = Object.getOwnPropertyNames;
var $cd7cb9c1239434cc$var$__hasOwnProp = Object.prototype.hasOwnProperty;
var $cd7cb9c1239434cc$var$__markAsModule = (target)=>$cd7cb9c1239434cc$var$__defProp(target, "__esModule", {
        value: true
    });
var $cd7cb9c1239434cc$var$__reExport = (target, module, desc)=>{
    if (module && typeof module === "object" || typeof module === "function") {
        for (let key of $cd7cb9c1239434cc$var$__getOwnPropNames(module))if (!$cd7cb9c1239434cc$var$__hasOwnProp.call(target, key) && key !== "default") $cd7cb9c1239434cc$var$__defProp(target, key, {
            get: ()=>module[key],
            enumerable: !(desc = $cd7cb9c1239434cc$var$__getOwnPropDesc(module, key)) || desc.enumerable
        });
    }
    return target;
};
// src/fillers/monaco-editor-core.ts
var $cd7cb9c1239434cc$var$monaco_editor_core_exports = {};
$cd7cb9c1239434cc$var$__markAsModule($cd7cb9c1239434cc$var$monaco_editor_core_exports);
$cd7cb9c1239434cc$var$__reExport($cd7cb9c1239434cc$var$monaco_editor_core_exports, $jBoEN);
// src/basic-languages/_.contribution.ts
var $cd7cb9c1239434cc$var$languageDefinitions = {};
var $cd7cb9c1239434cc$var$lazyLanguageLoaders = {};
var $cd7cb9c1239434cc$var$LazyLanguageLoader = class {
    static getOrCreate(languageId) {
        if (!$cd7cb9c1239434cc$var$lazyLanguageLoaders[languageId]) $cd7cb9c1239434cc$var$lazyLanguageLoaders[languageId] = new $cd7cb9c1239434cc$var$LazyLanguageLoader(languageId);
        return $cd7cb9c1239434cc$var$lazyLanguageLoaders[languageId];
    }
    whenLoaded() {
        return this._lazyLoadPromise;
    }
    load() {
        if (!this._loadingTriggered) {
            this._loadingTriggered = true;
            $cd7cb9c1239434cc$var$languageDefinitions[this._languageId].loader().then((mod)=>this._lazyLoadPromiseResolve(mod), (err)=>this._lazyLoadPromiseReject(err));
        }
        return this._lazyLoadPromise;
    }
    constructor(languageId){
        this._languageId = languageId;
        this._loadingTriggered = false;
        this._lazyLoadPromise = new Promise((resolve, reject)=>{
            this._lazyLoadPromiseResolve = resolve;
            this._lazyLoadPromiseReject = reject;
        });
    }
};
function $cd7cb9c1239434cc$export$f02cbd868e2f57cf(languageId) {
    return $cd7cb9c1239434cc$var$LazyLanguageLoader.getOrCreate(languageId).load();
}
function $cd7cb9c1239434cc$export$b5daeabefb05ee6b(def) {
    const languageId = def.id;
    $cd7cb9c1239434cc$var$languageDefinitions[languageId] = def;
    $cd7cb9c1239434cc$var$monaco_editor_core_exports.languages.register(def);
    const lazyLanguageLoader = $cd7cb9c1239434cc$var$LazyLanguageLoader.getOrCreate(languageId);
    $cd7cb9c1239434cc$var$monaco_editor_core_exports.languages.setMonarchTokensProvider(languageId, lazyLanguageLoader.whenLoaded().then((mod)=>mod.language));
    $cd7cb9c1239434cc$var$monaco_editor_core_exports.languages.onLanguage(languageId, ()=>{
        lazyLanguageLoader.load().then((mod)=>{
            $cd7cb9c1239434cc$var$monaco_editor_core_exports.languages.setLanguageConfiguration(languageId, mod.conf);
        });
    });
}



(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "abap",
    extensions: [
        ".abap"
    ],
    aliases: [
        "abap",
        "ABAP"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("3Fiv9"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "apex",
    extensions: [
        ".cls"
    ],
    aliases: [
        "Apex",
        "apex"
    ],
    mimetypes: [
        "text/x-apex-source",
        "text/x-apex"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("iWsaK"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "azcli",
    extensions: [
        ".azcli"
    ],
    aliases: [
        "Azure CLI",
        "azcli"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("c78Bg"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "bat",
    extensions: [
        ".bat",
        ".cmd"
    ],
    aliases: [
        "Batch",
        "bat"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("hEbjX"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "bicep",
    extensions: [
        ".bicep"
    ],
    aliases: [
        "Bicep"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("e4cz2"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "cameligo",
    extensions: [
        ".mligo"
    ],
    aliases: [
        "Cameligo"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("3pAAN"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "clojure",
    extensions: [
        ".clj",
        ".cljs",
        ".cljc",
        ".edn"
    ],
    aliases: [
        "clojure",
        "Clojure"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("d9FYL"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "coffeescript",
    extensions: [
        ".coffee"
    ],
    aliases: [
        "CoffeeScript",
        "coffeescript",
        "coffee"
    ],
    mimetypes: [
        "text/x-coffeescript",
        "text/coffeescript"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("3ELDV"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "c",
    extensions: [
        ".c",
        ".h"
    ],
    aliases: [
        "C",
        "c"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("lIX0w"));
    }
});

(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "cpp",
    extensions: [
        ".cpp",
        ".cc",
        ".cxx",
        ".hpp",
        ".hh",
        ".hxx"
    ],
    aliases: [
        "C++",
        "Cpp",
        "cpp"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("lIX0w"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "csharp",
    extensions: [
        ".cs",
        ".csx",
        ".cake"
    ],
    aliases: [
        "C#",
        "csharp"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("4x96I"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "csp",
    extensions: [],
    aliases: [
        "CSP",
        "csp"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("blF3v"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "css",
    extensions: [
        ".css"
    ],
    aliases: [
        "CSS",
        "css"
    ],
    mimetypes: [
        "text/css"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("eQG0y"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "dart",
    extensions: [
        ".dart"
    ],
    aliases: [
        "Dart",
        "dart"
    ],
    mimetypes: [
        "text/x-dart-source",
        "text/x-dart"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("ipQyc"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "dockerfile",
    extensions: [
        ".dockerfile"
    ],
    filenames: [
        "Dockerfile"
    ],
    aliases: [
        "Dockerfile"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("3WP4q"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "ecl",
    extensions: [
        ".ecl"
    ],
    aliases: [
        "ECL",
        "Ecl",
        "ecl"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("2NrXI"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "elixir",
    extensions: [
        ".ex",
        ".exs"
    ],
    aliases: [
        "Elixir",
        "elixir",
        "ex"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("3PUWA"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "flow9",
    extensions: [
        ".flow"
    ],
    aliases: [
        "Flow9",
        "Flow",
        "flow9",
        "flow"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("agUpl"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "fsharp",
    extensions: [
        ".fs",
        ".fsi",
        ".ml",
        ".mli",
        ".fsx",
        ".fsscript"
    ],
    aliases: [
        "F#",
        "FSharp",
        "fsharp"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("lVKmL"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "go",
    extensions: [
        ".go"
    ],
    aliases: [
        "Go"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("eZ77a"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "graphql",
    extensions: [
        ".graphql",
        ".gql"
    ],
    aliases: [
        "GraphQL",
        "graphql",
        "gql"
    ],
    mimetypes: [
        "application/graphql"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("31OMY"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "handlebars",
    extensions: [
        ".handlebars",
        ".hbs"
    ],
    aliases: [
        "Handlebars",
        "handlebars",
        "hbs"
    ],
    mimetypes: [
        "text/x-handlebars-template"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("28e7f"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "hcl",
    extensions: [
        ".tf",
        ".tfvars",
        ".hcl"
    ],
    aliases: [
        "Terraform",
        "tf",
        "HCL",
        "hcl"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("fZf9d"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "html",
    extensions: [
        ".html",
        ".htm",
        ".shtml",
        ".xhtml",
        ".mdoc",
        ".jsp",
        ".asp",
        ".aspx",
        ".jshtm"
    ],
    aliases: [
        "HTML",
        "htm",
        "html",
        "xhtml"
    ],
    mimetypes: [
        "text/html",
        "text/x-jshtm",
        "text/template",
        "text/ng-template"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("6SzV0"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "ini",
    extensions: [
        ".ini",
        ".properties",
        ".gitconfig"
    ],
    filenames: [
        "config",
        ".gitattributes",
        ".gitconfig",
        ".editorconfig"
    ],
    aliases: [
        "Ini",
        "ini"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("7gdzH"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "java",
    extensions: [
        ".java",
        ".jav"
    ],
    aliases: [
        "Java",
        "java"
    ],
    mimetypes: [
        "text/x-java-source",
        "text/x-java"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("eWezL"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "javascript",
    extensions: [
        ".js",
        ".es6",
        ".jsx",
        ".mjs"
    ],
    firstLine: "^#!.*\\bnode",
    filenames: [
        "jakefile"
    ],
    aliases: [
        "JavaScript",
        "javascript",
        "js"
    ],
    mimetypes: [
        "text/javascript"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("gBDLB"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "julia",
    extensions: [
        ".jl"
    ],
    aliases: [
        "julia",
        "Julia"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("32qQO"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "kotlin",
    extensions: [
        ".kt"
    ],
    aliases: [
        "Kotlin",
        "kotlin"
    ],
    mimetypes: [
        "text/x-kotlin-source",
        "text/x-kotlin"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("buU9H"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "less",
    extensions: [
        ".less"
    ],
    aliases: [
        "Less",
        "less"
    ],
    mimetypes: [
        "text/x-less",
        "text/less"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("2Ai8D"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "lexon",
    extensions: [
        ".lex"
    ],
    aliases: [
        "Lexon"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("cMxKG"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "lua",
    extensions: [
        ".lua"
    ],
    aliases: [
        "Lua",
        "lua"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("4kaim"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "liquid",
    extensions: [
        ".liquid",
        ".html.liquid"
    ],
    aliases: [
        "Liquid",
        "liquid"
    ],
    mimetypes: [
        "application/liquid"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("hci9w"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "m3",
    extensions: [
        ".m3",
        ".i3",
        ".mg",
        ".ig"
    ],
    aliases: [
        "Modula-3",
        "Modula3",
        "modula3",
        "m3"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("cax9q"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "markdown",
    extensions: [
        ".md",
        ".markdown",
        ".mdown",
        ".mkdn",
        ".mkd",
        ".mdwn",
        ".mdtxt",
        ".mdtext"
    ],
    aliases: [
        "Markdown",
        "markdown"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("sQQ7y"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "mips",
    extensions: [
        ".s"
    ],
    aliases: [
        "MIPS",
        "MIPS-V"
    ],
    mimetypes: [
        "text/x-mips",
        "text/mips",
        "text/plaintext"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("e2rZ9"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "msdax",
    extensions: [
        ".dax",
        ".msdax"
    ],
    aliases: [
        "DAX",
        "MSDAX"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("dVqmB"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "mysql",
    extensions: [],
    aliases: [
        "MySQL",
        "mysql"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("1u93I"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "objective-c",
    extensions: [
        ".m"
    ],
    aliases: [
        "Objective-C"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("8lIJz"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "pascal",
    extensions: [
        ".pas",
        ".p",
        ".pp"
    ],
    aliases: [
        "Pascal",
        "pas"
    ],
    mimetypes: [
        "text/x-pascal-source",
        "text/x-pascal"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("8CRbG"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "pascaligo",
    extensions: [
        ".ligo"
    ],
    aliases: [
        "Pascaligo",
        "ligo"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("fsJHN"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "perl",
    extensions: [
        ".pl"
    ],
    aliases: [
        "Perl",
        "pl"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("ezxag"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "pgsql",
    extensions: [],
    aliases: [
        "PostgreSQL",
        "postgres",
        "pg",
        "postgre"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("aYL0P"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "php",
    extensions: [
        ".php",
        ".php4",
        ".php5",
        ".phtml",
        ".ctp"
    ],
    aliases: [
        "PHP",
        "php"
    ],
    mimetypes: [
        "application/x-php"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("15GJq"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "pla",
    extensions: [
        ".pla"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("1gFxr"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "postiats",
    extensions: [
        ".dats",
        ".sats",
        ".hats"
    ],
    aliases: [
        "ATS",
        "ATS/Postiats"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("ckcch"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "powerquery",
    extensions: [
        ".pq",
        ".pqm"
    ],
    aliases: [
        "PQ",
        "M",
        "Power Query",
        "Power Query M"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("jDdLY"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "powershell",
    extensions: [
        ".ps1",
        ".psm1",
        ".psd1"
    ],
    aliases: [
        "PowerShell",
        "powershell",
        "ps",
        "ps1"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("i1eIo"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "proto",
    extensions: [
        ".proto"
    ],
    aliases: [
        "protobuf",
        "Protocol Buffers"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("40DMi"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "pug",
    extensions: [
        ".jade",
        ".pug"
    ],
    aliases: [
        "Pug",
        "Jade",
        "jade"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("7xWu3"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "python",
    extensions: [
        ".py",
        ".rpy",
        ".pyw",
        ".cpy",
        ".gyp",
        ".gypi"
    ],
    aliases: [
        "Python",
        "py"
    ],
    firstLine: "^#!/.*\\bpython[0-9.-]*\\b",
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("bPg4f"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "qsharp",
    extensions: [
        ".qs"
    ],
    aliases: [
        "Q#",
        "qsharp"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("2PKfH"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "r",
    extensions: [
        ".r",
        ".rhistory",
        ".rmd",
        ".rprofile",
        ".rt"
    ],
    aliases: [
        "R",
        "r"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("8qTj7"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "razor",
    extensions: [
        ".cshtml"
    ],
    aliases: [
        "Razor",
        "razor"
    ],
    mimetypes: [
        "text/x-cshtml"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("8LX8I"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "redis",
    extensions: [
        ".redis"
    ],
    aliases: [
        "redis"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("blPbG"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "redshift",
    extensions: [],
    aliases: [
        "Redshift",
        "redshift"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("7YzDM"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "restructuredtext",
    extensions: [
        ".rst"
    ],
    aliases: [
        "reStructuredText",
        "restructuredtext"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("b9vak"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "ruby",
    extensions: [
        ".rb",
        ".rbx",
        ".rjs",
        ".gemspec",
        ".pp"
    ],
    filenames: [
        "rakefile",
        "Gemfile"
    ],
    aliases: [
        "Ruby",
        "rb"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("bJwhx"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "rust",
    extensions: [
        ".rs",
        ".rlib"
    ],
    aliases: [
        "Rust",
        "rust"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("10ESp"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "sb",
    extensions: [
        ".sb"
    ],
    aliases: [
        "Small Basic",
        "sb"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("ggtHD"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "scala",
    extensions: [
        ".scala",
        ".sc",
        ".sbt"
    ],
    aliases: [
        "Scala",
        "scala",
        "SBT",
        "Sbt",
        "sbt",
        "Dotty",
        "dotty"
    ],
    mimetypes: [
        "text/x-scala-source",
        "text/x-scala",
        "text/x-sbt",
        "text/x-dotty"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("fAaap"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "scheme",
    extensions: [
        ".scm",
        ".ss",
        ".sch",
        ".rkt"
    ],
    aliases: [
        "scheme",
        "Scheme"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("2uYPF"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "scss",
    extensions: [
        ".scss"
    ],
    aliases: [
        "Sass",
        "sass",
        "scss"
    ],
    mimetypes: [
        "text/x-scss",
        "text/scss"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("aNGOr"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "shell",
    extensions: [
        ".sh",
        ".bash"
    ],
    aliases: [
        "Shell",
        "sh"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("ci3wB"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "sol",
    extensions: [
        ".sol"
    ],
    aliases: [
        "sol",
        "solidity",
        "Solidity"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("icWAp"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "aes",
    extensions: [
        ".aes"
    ],
    aliases: [
        "aes",
        "sophia",
        "Sophia"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("kk5Tl"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "sparql",
    extensions: [
        ".rq"
    ],
    aliases: [
        "sparql",
        "SPARQL"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("5p3py"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "sql",
    extensions: [
        ".sql"
    ],
    aliases: [
        "SQL"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("3gAZB"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "st",
    extensions: [
        ".st",
        ".iecst",
        ".iecplc",
        ".lc3lib"
    ],
    aliases: [
        "StructuredText",
        "scl",
        "stl"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("iI4mX"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "swift",
    aliases: [
        "Swift",
        "swift"
    ],
    extensions: [
        ".swift"
    ],
    mimetypes: [
        "text/swift"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("cntPk"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "systemverilog",
    extensions: [
        ".sv",
        ".svh"
    ],
    aliases: [
        "SV",
        "sv",
        "SystemVerilog",
        "systemverilog"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("kTeMD"));
    }
});

(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "verilog",
    extensions: [
        ".v",
        ".vh"
    ],
    aliases: [
        "V",
        "v",
        "Verilog",
        "verilog"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("kTeMD"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "tcl",
    extensions: [
        ".tcl"
    ],
    aliases: [
        "tcl",
        "Tcl",
        "tcltk",
        "TclTk",
        "tcl/tk",
        "Tcl/Tk"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("9jBaI"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "twig",
    extensions: [
        ".twig"
    ],
    aliases: [
        "Twig",
        "twig"
    ],
    mimetypes: [
        "text/x-twig"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("7Rdkv"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "typescript",
    extensions: [
        ".ts",
        ".tsx"
    ],
    aliases: [
        "TypeScript",
        "ts",
        "typescript"
    ],
    mimetypes: [
        "text/typescript"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("MFXWQ"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "vb",
    extensions: [
        ".vb"
    ],
    aliases: [
        "Visual Basic",
        "vb"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("jvxFR"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "xml",
    extensions: [
        ".xml",
        ".dtd",
        ".ascx",
        ".csproj",
        ".config",
        ".wxi",
        ".wxl",
        ".wxs",
        ".xaml",
        ".svg",
        ".svgz",
        ".opf",
        ".xsl"
    ],
    firstLine: "(\\<\\?xml.*)|(\\<svg)|(\\<\\!doctype\\s+svg)",
    aliases: [
        "XML",
        "xml"
    ],
    mimetypes: [
        "text/xml",
        "application/xml",
        "application/xaml+xml",
        "application/xml-dtd"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("4UHr9"));
    }
});




(0, $cd7cb9c1239434cc$export$b5daeabefb05ee6b)({
    id: "yaml",
    extensions: [
        ".yaml",
        ".yml"
    ],
    aliases: [
        "YAML",
        "yaml",
        "YML",
        "yml"
    ],
    mimetypes: [
        "application/x-yaml",
        "text/x-yaml"
    ],
    loader: ()=>{
        var resolve, reject;
        return (parcelRequire("iQ8I4"));
    }
});




parcelRequire("5vVxj");
parcelRequire("leKKm");
parcelRequire("7fahf");
parcelRequire("clljR");
var $62dd4b6f95e9be7a$exports = {};

var $cVmYb = parcelRequire("cVmYb");

var $chTln = parcelRequire("chTln");

var $fQtIR = parcelRequire("fQtIR");


var $gGOeQ = parcelRequire("gGOeQ");

var $cz0c7 = parcelRequire("cz0c7");

var $bdLce = parcelRequire("bdLce");

var $58WHl = parcelRequire("58WHl");

var $bRtox = parcelRequire("bRtox");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $62dd4b6f95e9be7a$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $62dd4b6f95e9be7a$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var $62dd4b6f95e9be7a$var$__awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const $62dd4b6f95e9be7a$export$3d83c0749714b612 = new (0, $bRtox.RawContextKey)("selectionAnchorSet", false);
let $62dd4b6f95e9be7a$var$SelectionAnchorController = class SelectionAnchorController {
    static get(editor) {
        return editor.getContribution(SelectionAnchorController.ID);
    }
    setSelectionAnchor() {
        if (this.editor.hasModel()) {
            const position = this.editor.getPosition();
            const previousDecorations = this.decorationId ? [
                this.decorationId
            ] : [];
            const newDecorationId = this.editor.deltaDecorations(previousDecorations, [
                {
                    range: (0, $cz0c7.Selection).fromPositions(position, position),
                    options: {
                        description: "selection-anchor",
                        stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ ,
                        hoverMessage: new (0, $chTln.MarkdownString)().appendText((0, $58WHl.localize)("selectionAnchor", "Selection Anchor")),
                        className: "selection-anchor"
                    }
                }
            ]);
            this.decorationId = newDecorationId[0];
            this.selectionAnchorSetContextKey.set(!!this.decorationId);
            (0, $cVmYb.alert)((0, $58WHl.localize)("anchorSet", "Anchor set at {0}:{1}", position.lineNumber, position.column));
        }
    }
    goToSelectionAnchor() {
        if (this.editor.hasModel() && this.decorationId) {
            const anchorPosition = this.editor.getModel().getDecorationRange(this.decorationId);
            if (anchorPosition) this.editor.setPosition(anchorPosition.getStartPosition());
        }
    }
    selectFromAnchorToCursor() {
        if (this.editor.hasModel() && this.decorationId) {
            const start = this.editor.getModel().getDecorationRange(this.decorationId);
            if (start) {
                const end = this.editor.getPosition();
                this.editor.setSelection((0, $cz0c7.Selection).fromPositions(start.getStartPosition(), end));
                this.cancelSelectionAnchor();
            }
        }
    }
    cancelSelectionAnchor() {
        if (this.decorationId) {
            this.editor.deltaDecorations([
                this.decorationId
            ], []);
            this.decorationId = undefined;
            this.selectionAnchorSetContextKey.set(false);
        }
    }
    dispose() {
        this.cancelSelectionAnchor();
        this.modelChangeListener.dispose();
    }
    constructor(editor, contextKeyService){
        this.editor = editor;
        this.selectionAnchorSetContextKey = $62dd4b6f95e9be7a$export$3d83c0749714b612.bindTo(contextKeyService);
        this.modelChangeListener = editor.onDidChangeModel(()=>this.selectionAnchorSetContextKey.reset());
    }
};
$62dd4b6f95e9be7a$var$SelectionAnchorController.ID = "editor.contrib.selectionAnchorController";
$62dd4b6f95e9be7a$var$SelectionAnchorController = $62dd4b6f95e9be7a$var$__decorate([
    $62dd4b6f95e9be7a$var$__param(1, (0, $bRtox.IContextKeyService))
], $62dd4b6f95e9be7a$var$SelectionAnchorController);
class $62dd4b6f95e9be7a$var$SetSelectionAnchor extends (0, $gGOeQ.EditorAction) {
    run(_accessor, editor) {
        return $62dd4b6f95e9be7a$var$__awaiter(this, void 0, void 0, function*() {
            const controller = $62dd4b6f95e9be7a$var$SelectionAnchorController.get(editor);
            controller.setSelectionAnchor();
        });
    }
    constructor(){
        super({
            id: "editor.action.setSelectionAnchor",
            label: (0, $58WHl.localize)("setSelectionAnchor", "Set Selection Anchor"),
            alias: "Set Selection Anchor",
            precondition: undefined,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: (0, $fQtIR.KeyChord)(2089 /* KeyK */ , 2080 /* KeyB */ ),
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
class $62dd4b6f95e9be7a$var$GoToSelectionAnchor extends (0, $gGOeQ.EditorAction) {
    run(_accessor, editor) {
        return $62dd4b6f95e9be7a$var$__awaiter(this, void 0, void 0, function*() {
            const controller = $62dd4b6f95e9be7a$var$SelectionAnchorController.get(editor);
            controller.goToSelectionAnchor();
        });
    }
    constructor(){
        super({
            id: "editor.action.goToSelectionAnchor",
            label: (0, $58WHl.localize)("goToSelectionAnchor", "Go to Selection Anchor"),
            alias: "Go to Selection Anchor",
            precondition: $62dd4b6f95e9be7a$export$3d83c0749714b612
        });
    }
}
class $62dd4b6f95e9be7a$var$SelectFromAnchorToCursor extends (0, $gGOeQ.EditorAction) {
    run(_accessor, editor) {
        return $62dd4b6f95e9be7a$var$__awaiter(this, void 0, void 0, function*() {
            const controller = $62dd4b6f95e9be7a$var$SelectionAnchorController.get(editor);
            controller.selectFromAnchorToCursor();
        });
    }
    constructor(){
        super({
            id: "editor.action.selectFromAnchorToCursor",
            label: (0, $58WHl.localize)("selectFromAnchorToCursor", "Select from Anchor to Cursor"),
            alias: "Select from Anchor to Cursor",
            precondition: $62dd4b6f95e9be7a$export$3d83c0749714b612,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: (0, $fQtIR.KeyChord)(2089 /* KeyK */ , 2089 /* KeyK */ ),
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
class $62dd4b6f95e9be7a$var$CancelSelectionAnchor extends (0, $gGOeQ.EditorAction) {
    run(_accessor, editor) {
        return $62dd4b6f95e9be7a$var$__awaiter(this, void 0, void 0, function*() {
            const controller = $62dd4b6f95e9be7a$var$SelectionAnchorController.get(editor);
            controller.cancelSelectionAnchor();
        });
    }
    constructor(){
        super({
            id: "editor.action.cancelSelectionAnchor",
            label: (0, $58WHl.localize)("cancelSelectionAnchor", "Cancel Selection Anchor"),
            alias: "Cancel Selection Anchor",
            precondition: $62dd4b6f95e9be7a$export$3d83c0749714b612,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: 9 /* Escape */ ,
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
(0, $gGOeQ.registerEditorContribution)($62dd4b6f95e9be7a$var$SelectionAnchorController.ID, $62dd4b6f95e9be7a$var$SelectionAnchorController);
(0, $gGOeQ.registerEditorAction)($62dd4b6f95e9be7a$var$SetSelectionAnchor);
(0, $gGOeQ.registerEditorAction)($62dd4b6f95e9be7a$var$GoToSelectionAnchor);
(0, $gGOeQ.registerEditorAction)($62dd4b6f95e9be7a$var$SelectFromAnchorToCursor);
(0, $gGOeQ.registerEditorAction)($62dd4b6f95e9be7a$var$CancelSelectionAnchor);



var $eFOsn = parcelRequire("eFOsn");

var $atiRx = parcelRequire("atiRx");


var $gGOeQ = parcelRequire("gGOeQ");

var $8qXsZ = parcelRequire("8qXsZ");

var $3HpR4 = parcelRequire("3HpR4");

var $cz0c7 = parcelRequire("cz0c7");

var $bdLce = parcelRequire("bdLce");

var $bbATZ = parcelRequire("bbATZ");

var $g88WD = parcelRequire("g88WD");

var $dW2jK = parcelRequire("dW2jK");

var $58WHl = parcelRequire("58WHl");

var $2IxgH = parcelRequire("2IxgH");

var $3XYy8 = parcelRequire("3XYy8");

var $fUTzO = parcelRequire("fUTzO");
const $81a9df21b8cc8612$var$overviewRulerBracketMatchForeground = (0, $3XYy8.registerColor)("editorOverviewRuler.bracketMatchForeground", {
    dark: "#A0A0A0",
    light: "#A0A0A0",
    hc: "#A0A0A0"
}, $58WHl.localize("overviewRulerBracketMatchForeground", "Overview ruler marker color for matching brackets."));
class $81a9df21b8cc8612$var$JumpToBracketAction extends (0, $gGOeQ.EditorAction) {
    run(accessor, editor) {
        let controller = $81a9df21b8cc8612$export$b2b226e5cffb93ca.get(editor);
        if (!controller) return;
        controller.jumpToBracket();
    }
    constructor(){
        super({
            id: "editor.action.jumpToBracket",
            label: $58WHl.localize("smartSelect.jumpBracket", "Go to Bracket"),
            alias: "Go to Bracket",
            precondition: undefined,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: 3160 /* Backslash */ ,
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
class $81a9df21b8cc8612$var$SelectToBracketAction extends (0, $gGOeQ.EditorAction) {
    run(accessor, editor, args) {
        const controller = $81a9df21b8cc8612$export$b2b226e5cffb93ca.get(editor);
        if (!controller) return;
        let selectBrackets = true;
        if (args && args.selectBrackets === false) selectBrackets = false;
        controller.selectToBracket(selectBrackets);
    }
    constructor(){
        super({
            id: "editor.action.selectToBracket",
            label: $58WHl.localize("smartSelect.selectToBracket", "Select to Bracket"),
            alias: "Select to Bracket",
            precondition: undefined,
            description: {
                description: `Select to Bracket`,
                args: [
                    {
                        name: "args",
                        schema: {
                            type: "object",
                            properties: {
                                "selectBrackets": {
                                    type: "boolean",
                                    default: true
                                }
                            }
                        }
                    }
                ]
            }
        });
    }
}
class $81a9df21b8cc8612$var$BracketsData {
    constructor(position, brackets, options){
        this.position = position;
        this.brackets = brackets;
        this.options = options;
    }
}
class $81a9df21b8cc8612$export$b2b226e5cffb93ca extends (0, $atiRx.Disposable) {
    static get(editor) {
        return editor.getContribution($81a9df21b8cc8612$export$b2b226e5cffb93ca.ID);
    }
    jumpToBracket() {
        if (!this._editor.hasModel()) return;
        const model = this._editor.getModel();
        const newSelections = this._editor.getSelections().map((selection)=>{
            const position = selection.getStartPosition();
            // find matching brackets if position is on a bracket
            const brackets = model.bracketPairs.matchBracket(position);
            let newCursorPosition = null;
            if (brackets) {
                if (brackets[0].containsPosition(position)) newCursorPosition = brackets[1].getStartPosition();
                else if (brackets[1].containsPosition(position)) newCursorPosition = brackets[0].getStartPosition();
            } else {
                // find the enclosing brackets if the position isn't on a matching bracket
                const enclosingBrackets = model.bracketPairs.findEnclosingBrackets(position);
                if (enclosingBrackets) newCursorPosition = enclosingBrackets[0].getStartPosition();
                else {
                    // no enclosing brackets, try the very first next bracket
                    const nextBracket = model.bracketPairs.findNextBracket(position);
                    if (nextBracket && nextBracket.range) newCursorPosition = nextBracket.range.getStartPosition();
                }
            }
            if (newCursorPosition) return new (0, $cz0c7.Selection)(newCursorPosition.lineNumber, newCursorPosition.column, newCursorPosition.lineNumber, newCursorPosition.column);
            return new (0, $cz0c7.Selection)(position.lineNumber, position.column, position.lineNumber, position.column);
        });
        this._editor.setSelections(newSelections);
        this._editor.revealRange(newSelections[0]);
    }
    selectToBracket(selectBrackets) {
        if (!this._editor.hasModel()) return;
        const model = this._editor.getModel();
        const newSelections = [];
        this._editor.getSelections().forEach((selection)=>{
            const position = selection.getStartPosition();
            let brackets = model.bracketPairs.matchBracket(position);
            if (!brackets) {
                brackets = model.bracketPairs.findEnclosingBrackets(position);
                if (!brackets) {
                    const nextBracket = model.bracketPairs.findNextBracket(position);
                    if (nextBracket && nextBracket.range) brackets = model.bracketPairs.matchBracket(nextBracket.range.getStartPosition());
                }
            }
            let selectFrom = null;
            let selectTo = null;
            if (brackets) {
                brackets.sort((0, $3HpR4.Range).compareRangesUsingStarts);
                const [open, close] = brackets;
                selectFrom = selectBrackets ? open.getStartPosition() : open.getEndPosition();
                selectTo = selectBrackets ? close.getEndPosition() : close.getStartPosition();
                if (close.containsPosition(position)) {
                    // select backwards if the cursor was on the closing bracket
                    const tmp = selectFrom;
                    selectFrom = selectTo;
                    selectTo = tmp;
                }
            }
            if (selectFrom && selectTo) newSelections.push(new (0, $cz0c7.Selection)(selectFrom.lineNumber, selectFrom.column, selectTo.lineNumber, selectTo.column));
        });
        if (newSelections.length > 0) {
            this._editor.setSelections(newSelections);
            this._editor.revealRange(newSelections[0]);
        }
    }
    _updateBrackets() {
        if (this._matchBrackets === "never") return;
        this._recomputeBrackets();
        let newDecorations = [], newDecorationsLen = 0;
        for (const bracketData of this._lastBracketsData){
            let brackets = bracketData.brackets;
            if (brackets) {
                newDecorations[newDecorationsLen++] = {
                    range: brackets[0],
                    options: bracketData.options
                };
                newDecorations[newDecorationsLen++] = {
                    range: brackets[1],
                    options: bracketData.options
                };
            }
        }
        this._decorations = this._editor.deltaDecorations(this._decorations, newDecorations);
    }
    _recomputeBrackets() {
        if (!this._editor.hasModel() || !this._editor.hasWidgetFocus()) {
            // no model or no focus => no brackets!
            this._lastBracketsData = [];
            this._lastVersionId = 0;
            return;
        }
        const selections = this._editor.getSelections();
        if (selections.length > 100) {
            // no bracket matching for high numbers of selections
            this._lastBracketsData = [];
            this._lastVersionId = 0;
            return;
        }
        const model = this._editor.getModel();
        const versionId = model.getVersionId();
        let previousData = [];
        if (this._lastVersionId === versionId) // use the previous data only if the model is at the same version id
        previousData = this._lastBracketsData;
        let positions = [], positionsLen = 0;
        for(let i = 0, len = selections.length; i < len; i++){
            let selection = selections[i];
            if (selection.isEmpty()) // will bracket match a cursor only if the selection is collapsed
            positions[positionsLen++] = selection.getStartPosition();
        }
        // sort positions for `previousData` cache hits
        if (positions.length > 1) positions.sort((0, $8qXsZ.Position).compare);
        let newData = [], newDataLen = 0;
        let previousIndex = 0, previousLen = previousData.length;
        for(let i1 = 0, len1 = positions.length; i1 < len1; i1++){
            let position = positions[i1];
            while(previousIndex < previousLen && previousData[previousIndex].position.isBefore(position))previousIndex++;
            if (previousIndex < previousLen && previousData[previousIndex].position.equals(position)) newData[newDataLen++] = previousData[previousIndex];
            else {
                let brackets = model.bracketPairs.matchBracket(position);
                let options = $81a9df21b8cc8612$export$b2b226e5cffb93ca._DECORATION_OPTIONS_WITH_OVERVIEW_RULER;
                if (!brackets && this._matchBrackets === "always") {
                    brackets = model.bracketPairs.findEnclosingBrackets(position, 20 /* give at most 20ms to compute */ );
                    options = $81a9df21b8cc8612$export$b2b226e5cffb93ca._DECORATION_OPTIONS_WITHOUT_OVERVIEW_RULER;
                }
                newData[newDataLen++] = new $81a9df21b8cc8612$var$BracketsData(position, brackets, options);
            }
        }
        this._lastBracketsData = newData;
        this._lastVersionId = versionId;
    }
    constructor(editor){
        super();
        this._editor = editor;
        this._lastBracketsData = [];
        this._lastVersionId = 0;
        this._decorations = [];
        this._updateBracketsSoon = this._register(new (0, $eFOsn.RunOnceScheduler)(()=>this._updateBrackets(), 50));
        this._matchBrackets = this._editor.getOption(63 /* matchBrackets */ );
        this._updateBracketsSoon.schedule();
        this._register(editor.onDidChangeCursorPosition((e)=>{
            if (this._matchBrackets === "never") // Early exit if nothing needs to be done!
            // Leave some form of early exit check here if you wish to continue being a cursor position change listener ;)
            return;
            this._updateBracketsSoon.schedule();
        }));
        this._register(editor.onDidChangeModelContent((e)=>{
            this._updateBracketsSoon.schedule();
        }));
        this._register(editor.onDidChangeModel((e)=>{
            this._lastBracketsData = [];
            this._decorations = [];
            this._updateBracketsSoon.schedule();
        }));
        this._register(editor.onDidChangeModelLanguageConfiguration((e)=>{
            this._lastBracketsData = [];
            this._updateBracketsSoon.schedule();
        }));
        this._register(editor.onDidChangeConfiguration((e)=>{
            if (e.hasChanged(63 /* matchBrackets */ )) {
                this._matchBrackets = this._editor.getOption(63 /* matchBrackets */ );
                this._decorations = this._editor.deltaDecorations(this._decorations, []);
                this._lastBracketsData = [];
                this._lastVersionId = 0;
                this._updateBracketsSoon.schedule();
            }
        }));
        this._register(editor.onDidBlurEditorWidget(()=>{
            this._updateBracketsSoon.schedule();
        }));
        this._register(editor.onDidFocusEditorWidget(()=>{
            this._updateBracketsSoon.schedule();
        }));
    }
}
$81a9df21b8cc8612$export$b2b226e5cffb93ca.ID = "editor.contrib.bracketMatchingController";
$81a9df21b8cc8612$export$b2b226e5cffb93ca._DECORATION_OPTIONS_WITH_OVERVIEW_RULER = (0, $g88WD.ModelDecorationOptions).register({
    description: "bracket-match-overview",
    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ ,
    className: "bracket-match",
    overviewRuler: {
        color: (0, $fUTzO.themeColorFromId)($81a9df21b8cc8612$var$overviewRulerBracketMatchForeground),
        position: (0, $bbATZ.OverviewRulerLane).Center
    }
});
$81a9df21b8cc8612$export$b2b226e5cffb93ca._DECORATION_OPTIONS_WITHOUT_OVERVIEW_RULER = (0, $g88WD.ModelDecorationOptions).register({
    description: "bracket-match-no-overview",
    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ ,
    className: "bracket-match"
});
(0, $gGOeQ.registerEditorContribution)($81a9df21b8cc8612$export$b2b226e5cffb93ca.ID, $81a9df21b8cc8612$export$b2b226e5cffb93ca);
(0, $gGOeQ.registerEditorAction)($81a9df21b8cc8612$var$SelectToBracketAction);
(0, $gGOeQ.registerEditorAction)($81a9df21b8cc8612$var$JumpToBracketAction);
(0, $fUTzO.registerThemingParticipant)((theme, collector)=>{
    const bracketMatchBackground = theme.getColor((0, $dW2jK.editorBracketMatchBackground));
    if (bracketMatchBackground) collector.addRule(`.monaco-editor .bracket-match { background-color: ${bracketMatchBackground}; }`);
    const bracketMatchBorder = theme.getColor((0, $dW2jK.editorBracketMatchBorder));
    if (bracketMatchBorder) collector.addRule(`.monaco-editor .bracket-match { border: 1px solid ${bracketMatchBorder}; }`);
});
// Go to menu
(0, $2IxgH.MenuRegistry).appendMenuItem((0, $2IxgH.MenuId).MenubarGoMenu, {
    group: "5_infile_nav",
    command: {
        id: "editor.action.jumpToBracket",
        title: $58WHl.localize({
            key: "miGoToBracket",
            comment: [
                "&& denotes a mnemonic"
            ]
        }, "Go to &&Bracket")
    },
    order: 2
});



var $gGOeQ = parcelRequire("gGOeQ");

var $bdLce = parcelRequire("bdLce");

var $3HpR4 = parcelRequire("3HpR4");

var $cz0c7 = parcelRequire("cz0c7");
class $bbaa508f424e86d6$export$2acdcd460d66aef1 {
    getEditOperations(model, builder) {
        if (this._selection.startLineNumber !== this._selection.endLineNumber || this._selection.isEmpty()) return;
        const lineNumber = this._selection.startLineNumber;
        const startColumn = this._selection.startColumn;
        const endColumn = this._selection.endColumn;
        if (this._isMovingLeft && startColumn === 1) return;
        if (!this._isMovingLeft && endColumn === model.getLineMaxColumn(lineNumber)) return;
        if (this._isMovingLeft) {
            const rangeBefore = new (0, $3HpR4.Range)(lineNumber, startColumn - 1, lineNumber, startColumn);
            const charBefore = model.getValueInRange(rangeBefore);
            builder.addEditOperation(rangeBefore, null);
            builder.addEditOperation(new (0, $3HpR4.Range)(lineNumber, endColumn, lineNumber, endColumn), charBefore);
        } else {
            const rangeAfter = new (0, $3HpR4.Range)(lineNumber, endColumn, lineNumber, endColumn + 1);
            const charAfter = model.getValueInRange(rangeAfter);
            builder.addEditOperation(rangeAfter, null);
            builder.addEditOperation(new (0, $3HpR4.Range)(lineNumber, startColumn, lineNumber, startColumn), charAfter);
        }
    }
    computeCursorState(model, helper) {
        if (this._isMovingLeft) return new (0, $cz0c7.Selection)(this._selection.startLineNumber, this._selection.startColumn - 1, this._selection.endLineNumber, this._selection.endColumn - 1);
        else return new (0, $cz0c7.Selection)(this._selection.startLineNumber, this._selection.startColumn + 1, this._selection.endLineNumber, this._selection.endColumn + 1);
    }
    constructor(selection, isMovingLeft){
        this._selection = selection;
        this._isMovingLeft = isMovingLeft;
    }
}



var $58WHl = parcelRequire("58WHl");
class $7fba4a74dd3c516a$var$MoveCaretAction extends (0, $gGOeQ.EditorAction) {
    run(accessor, editor) {
        if (!editor.hasModel()) return;
        let commands = [];
        let selections = editor.getSelections();
        for (const selection of selections)commands.push(new (0, $bbaa508f424e86d6$export$2acdcd460d66aef1)(selection, this.left));
        editor.pushUndoStop();
        editor.executeCommands(this.id, commands);
        editor.pushUndoStop();
    }
    constructor(left, opts){
        super(opts);
        this.left = left;
    }
}
class $7fba4a74dd3c516a$var$MoveCaretLeftAction extends $7fba4a74dd3c516a$var$MoveCaretAction {
    constructor(){
        super(true, {
            id: "editor.action.moveCarretLeftAction",
            label: $58WHl.localize("caret.moveLeft", "Move Selected Text Left"),
            alias: "Move Selected Text Left",
            precondition: (0, $bdLce.EditorContextKeys).writable
        });
    }
}
class $7fba4a74dd3c516a$var$MoveCaretRightAction extends $7fba4a74dd3c516a$var$MoveCaretAction {
    constructor(){
        super(false, {
            id: "editor.action.moveCarretRightAction",
            label: $58WHl.localize("caret.moveRight", "Move Selected Text Right"),
            alias: "Move Selected Text Right",
            precondition: (0, $bdLce.EditorContextKeys).writable
        });
    }
}
(0, $gGOeQ.registerEditorAction)($7fba4a74dd3c516a$var$MoveCaretLeftAction);
(0, $gGOeQ.registerEditorAction)($7fba4a74dd3c516a$var$MoveCaretRightAction);



var $gGOeQ = parcelRequire("gGOeQ");

var $8iWNC = parcelRequire("8iWNC");

var $5gdI4 = parcelRequire("5gdI4");

var $3HpR4 = parcelRequire("3HpR4");

var $bdLce = parcelRequire("bdLce");

var $58WHl = parcelRequire("58WHl");
class $696801333d212ef9$var$TransposeLettersAction extends (0, $gGOeQ.EditorAction) {
    run(accessor, editor) {
        if (!editor.hasModel()) return;
        let model = editor.getModel();
        let commands = [];
        let selections = editor.getSelections();
        for (let selection of selections){
            if (!selection.isEmpty()) continue;
            let lineNumber = selection.startLineNumber;
            let column = selection.startColumn;
            let lastColumn = model.getLineMaxColumn(lineNumber);
            if (lineNumber === 1 && (column === 1 || column === 2 && lastColumn === 2)) continue;
            // handle special case: when at end of line, transpose left two chars
            // otherwise, transpose left and right chars
            let endPosition = column === lastColumn ? selection.getPosition() : (0, $5gdI4.MoveOperations).rightPosition(model, selection.getPosition().lineNumber, selection.getPosition().column);
            let middlePosition = (0, $5gdI4.MoveOperations).leftPosition(model, endPosition);
            let beginPosition = (0, $5gdI4.MoveOperations).leftPosition(model, middlePosition);
            let leftChar = model.getValueInRange((0, $3HpR4.Range).fromPositions(beginPosition, middlePosition));
            let rightChar = model.getValueInRange((0, $3HpR4.Range).fromPositions(middlePosition, endPosition));
            let replaceRange = (0, $3HpR4.Range).fromPositions(beginPosition, endPosition);
            commands.push(new (0, $8iWNC.ReplaceCommand)(replaceRange, rightChar + leftChar));
        }
        if (commands.length > 0) {
            editor.pushUndoStop();
            editor.executeCommands(this.id, commands);
            editor.pushUndoStop();
        }
    }
    constructor(){
        super({
            id: "editor.action.transposeLetters",
            label: $58WHl.localize("transposeLetters.label", "Transpose Letters"),
            alias: "Transpose Letters",
            precondition: (0, $bdLce.EditorContextKeys).writable,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).textInputFocus,
                primary: 0,
                mac: {
                    primary: 306 /* KeyT */ 
                },
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
(0, $gGOeQ.registerEditorAction)($696801333d212ef9$var$TransposeLettersAction);


var $d1511080c061b3f0$exports = {};

var $abQPx = parcelRequire("abQPx");

var $1d81R = parcelRequire("1d81R");

var $1QmYG = parcelRequire("1QmYG");

var $gGOeQ = parcelRequire("gGOeQ");

var $aXAVz = parcelRequire("aXAVz");

var $bdLce = parcelRequire("bdLce");

var $58WHl = parcelRequire("58WHl");

var $2IxgH = parcelRequire("2IxgH");

var $lkKTA = parcelRequire("lkKTA");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $d1511080c061b3f0$var$__awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const $d1511080c061b3f0$var$CLIPBOARD_CONTEXT_MENU_GROUP = "9_cutcopypaste";
const $d1511080c061b3f0$var$supportsCut = $1d81R.isNative || document.queryCommandSupported("cut");
const $d1511080c061b3f0$var$supportsCopy = $1d81R.isNative || document.queryCommandSupported("copy");
// Firefox only supports navigator.clipboard.readText() in browser extensions.
// See https://developer.mozilla.org/en-US/docs/Web/API/Clipboard/readText#Browser_compatibility
// When loading over http, navigator.clipboard can be undefined. See https://github.com/microsoft/monaco-editor/issues/2313
const $d1511080c061b3f0$var$supportsPaste = typeof navigator.clipboard === "undefined" || $abQPx.isFirefox ? document.queryCommandSupported("paste") : true;
function $d1511080c061b3f0$var$registerCommand(command) {
    command.register();
    return command;
}
const $d1511080c061b3f0$export$c126fcd83420b17 = $d1511080c061b3f0$var$supportsCut ? $d1511080c061b3f0$var$registerCommand(new (0, $gGOeQ.MultiCommand)({
    id: "editor.action.clipboardCutAction",
    precondition: undefined,
    kbOpts: // Do not bind cut keybindings in the browser,
    // since browsers do that for us and it avoids security prompts
    $1d81R.isNative ? {
        primary: 2102 /* KeyX */ ,
        win: {
            primary: 2102 /* KeyX */ ,
            secondary: [
                1044 /* Delete */ 
            ]
        },
        weight: 100 /* EditorContrib */ 
    } : undefined,
    menuOpts: [
        {
            menuId: (0, $2IxgH.MenuId).MenubarEditMenu,
            group: "2_ccp",
            title: $58WHl.localize({
                key: "miCut",
                comment: [
                    "&& denotes a mnemonic"
                ]
            }, "Cu&&t"),
            order: 1
        },
        {
            menuId: (0, $2IxgH.MenuId).EditorContext,
            group: $d1511080c061b3f0$var$CLIPBOARD_CONTEXT_MENU_GROUP,
            title: $58WHl.localize("actions.clipboard.cutLabel", "Cut"),
            when: (0, $bdLce.EditorContextKeys).writable,
            order: 1
        },
        {
            menuId: (0, $2IxgH.MenuId).CommandPalette,
            group: "",
            title: $58WHl.localize("actions.clipboard.cutLabel", "Cut"),
            order: 1
        },
        {
            menuId: (0, $2IxgH.MenuId).SimpleEditorContext,
            group: $d1511080c061b3f0$var$CLIPBOARD_CONTEXT_MENU_GROUP,
            title: $58WHl.localize("actions.clipboard.cutLabel", "Cut"),
            when: (0, $bdLce.EditorContextKeys).writable,
            order: 1
        }
    ]
})) : undefined;
const $d1511080c061b3f0$export$958df07cbf9735fc = $d1511080c061b3f0$var$supportsCopy ? $d1511080c061b3f0$var$registerCommand(new (0, $gGOeQ.MultiCommand)({
    id: "editor.action.clipboardCopyAction",
    precondition: undefined,
    kbOpts: // Do not bind copy keybindings in the browser,
    // since browsers do that for us and it avoids security prompts
    $1d81R.isNative ? {
        primary: 2081 /* KeyC */ ,
        win: {
            primary: 2081 /* KeyC */ ,
            secondary: [
                2067 /* Insert */ 
            ]
        },
        weight: 100 /* EditorContrib */ 
    } : undefined,
    menuOpts: [
        {
            menuId: (0, $2IxgH.MenuId).MenubarEditMenu,
            group: "2_ccp",
            title: $58WHl.localize({
                key: "miCopy",
                comment: [
                    "&& denotes a mnemonic"
                ]
            }, "&&Copy"),
            order: 2
        },
        {
            menuId: (0, $2IxgH.MenuId).EditorContext,
            group: $d1511080c061b3f0$var$CLIPBOARD_CONTEXT_MENU_GROUP,
            title: $58WHl.localize("actions.clipboard.copyLabel", "Copy"),
            order: 2
        },
        {
            menuId: (0, $2IxgH.MenuId).CommandPalette,
            group: "",
            title: $58WHl.localize("actions.clipboard.copyLabel", "Copy"),
            order: 1
        },
        {
            menuId: (0, $2IxgH.MenuId).SimpleEditorContext,
            group: $d1511080c061b3f0$var$CLIPBOARD_CONTEXT_MENU_GROUP,
            title: $58WHl.localize("actions.clipboard.copyLabel", "Copy"),
            order: 2
        }
    ]
})) : undefined;
(0, $2IxgH.MenuRegistry).appendMenuItem((0, $2IxgH.MenuId).MenubarEditMenu, {
    submenu: (0, $2IxgH.MenuId).MenubarCopy,
    title: {
        value: $58WHl.localize("copy as", "Copy As"),
        original: "Copy As"
    },
    group: "2_ccp",
    order: 3
});
(0, $2IxgH.MenuRegistry).appendMenuItem((0, $2IxgH.MenuId).EditorContext, {
    submenu: (0, $2IxgH.MenuId).EditorContextCopy,
    title: {
        value: $58WHl.localize("copy as", "Copy As"),
        original: "Copy As"
    },
    group: $d1511080c061b3f0$var$CLIPBOARD_CONTEXT_MENU_GROUP,
    order: 3
});
const $d1511080c061b3f0$export$c386eebeb0318c58 = $d1511080c061b3f0$var$supportsPaste ? $d1511080c061b3f0$var$registerCommand(new (0, $gGOeQ.MultiCommand)({
    id: "editor.action.clipboardPasteAction",
    precondition: undefined,
    kbOpts: // Do not bind paste keybindings in the browser,
    // since browsers do that for us and it avoids security prompts
    $1d81R.isNative ? {
        primary: 2100 /* KeyV */ ,
        win: {
            primary: 2100 /* KeyV */ ,
            secondary: [
                1043 /* Insert */ 
            ]
        },
        linux: {
            primary: 2100 /* KeyV */ ,
            secondary: [
                1043 /* Insert */ 
            ]
        },
        weight: 100 /* EditorContrib */ 
    } : undefined,
    menuOpts: [
        {
            menuId: (0, $2IxgH.MenuId).MenubarEditMenu,
            group: "2_ccp",
            title: $58WHl.localize({
                key: "miPaste",
                comment: [
                    "&& denotes a mnemonic"
                ]
            }, "&&Paste"),
            order: 4
        },
        {
            menuId: (0, $2IxgH.MenuId).EditorContext,
            group: $d1511080c061b3f0$var$CLIPBOARD_CONTEXT_MENU_GROUP,
            title: $58WHl.localize("actions.clipboard.pasteLabel", "Paste"),
            when: (0, $bdLce.EditorContextKeys).writable,
            order: 4
        },
        {
            menuId: (0, $2IxgH.MenuId).CommandPalette,
            group: "",
            title: $58WHl.localize("actions.clipboard.pasteLabel", "Paste"),
            order: 1
        },
        {
            menuId: (0, $2IxgH.MenuId).SimpleEditorContext,
            group: $d1511080c061b3f0$var$CLIPBOARD_CONTEXT_MENU_GROUP,
            title: $58WHl.localize("actions.clipboard.pasteLabel", "Paste"),
            when: (0, $bdLce.EditorContextKeys).writable,
            order: 4
        }
    ]
})) : undefined;
class $d1511080c061b3f0$var$ExecCommandCopyWithSyntaxHighlightingAction extends (0, $gGOeQ.EditorAction) {
    run(accessor, editor) {
        if (!editor.hasModel()) return;
        const emptySelectionClipboard = editor.getOption(32 /* emptySelectionClipboard */ );
        if (!emptySelectionClipboard && editor.getSelection().isEmpty()) return;
        (0, $1QmYG.CopyOptions).forceCopyWithSyntaxHighlighting = true;
        editor.focus();
        document.execCommand("copy");
        (0, $1QmYG.CopyOptions).forceCopyWithSyntaxHighlighting = false;
    }
    constructor(){
        super({
            id: "editor.action.clipboardCopyWithSyntaxHighlightingAction",
            label: $58WHl.localize("actions.clipboard.copyWithSyntaxHighlightingLabel", "Copy With Syntax Highlighting"),
            alias: "Copy With Syntax Highlighting",
            precondition: undefined,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).textInputFocus,
                primary: 0,
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
function $d1511080c061b3f0$var$registerExecCommandImpl(target, browserCommand) {
    if (!target) return;
    // 1. handle case when focus is in editor.
    target.addImplementation(10000, "code-editor", (accessor, args)=>{
        // Only if editor text focus (i.e. not if editor has widget focus).
        const focusedEditor = accessor.get((0, $aXAVz.ICodeEditorService)).getFocusedCodeEditor();
        if (focusedEditor && focusedEditor.hasTextFocus()) {
            // Do not execute if there is no selection and empty selection clipboard is off
            const emptySelectionClipboard = focusedEditor.getOption(32 /* emptySelectionClipboard */ );
            const selection = focusedEditor.getSelection();
            if (selection && selection.isEmpty() && !emptySelectionClipboard) return true;
            document.execCommand(browserCommand);
            return true;
        }
        return false;
    });
    // 2. (default) handle case when focus is somewhere else.
    target.addImplementation(0, "generic-dom", (accessor, args)=>{
        document.execCommand(browserCommand);
        return true;
    });
}
$d1511080c061b3f0$var$registerExecCommandImpl($d1511080c061b3f0$export$c126fcd83420b17, "cut");
$d1511080c061b3f0$var$registerExecCommandImpl($d1511080c061b3f0$export$958df07cbf9735fc, "copy");
if ($d1511080c061b3f0$export$c386eebeb0318c58) {
    // 1. Paste: handle case when focus is in editor.
    $d1511080c061b3f0$export$c386eebeb0318c58.addImplementation(10000, "code-editor", (accessor, args)=>{
        const codeEditorService = accessor.get((0, $aXAVz.ICodeEditorService));
        const clipboardService = accessor.get((0, $lkKTA.IClipboardService));
        // Only if editor text focus (i.e. not if editor has widget focus).
        const focusedEditor = codeEditorService.getFocusedCodeEditor();
        if (focusedEditor && focusedEditor.hasTextFocus()) {
            const result = document.execCommand("paste");
            // Use the clipboard service if document.execCommand('paste') was not successful
            if (!result && $1d81R.isWeb) return (()=>$d1511080c061b3f0$var$__awaiter(void 0, void 0, void 0, function*() {
                    const clipboardText = yield clipboardService.readText();
                    if (clipboardText !== "") {
                        const metadata = (0, $1QmYG.InMemoryClipboardMetadataManager).INSTANCE.get(clipboardText);
                        let pasteOnNewLine = false;
                        let multicursorText = null;
                        let mode = null;
                        if (metadata) {
                            pasteOnNewLine = focusedEditor.getOption(32 /* emptySelectionClipboard */ ) && !!metadata.isFromEmptySelection;
                            multicursorText = typeof metadata.multicursorText !== "undefined" ? metadata.multicursorText : null;
                            mode = metadata.mode;
                        }
                        focusedEditor.trigger("keyboard", "paste" /* Paste */ , {
                            text: clipboardText,
                            pasteOnNewLine: pasteOnNewLine,
                            multicursorText: multicursorText,
                            mode: mode
                        });
                    }
                }))();
            return true;
        }
        return false;
    });
    // 2. Paste: (default) handle case when focus is somewhere else.
    $d1511080c061b3f0$export$c386eebeb0318c58.addImplementation(0, "generic-dom", (accessor, args)=>{
        document.execCommand("paste");
        return true;
    });
}
if ($d1511080c061b3f0$var$supportsCopy) (0, $gGOeQ.registerEditorAction)($d1511080c061b3f0$var$ExecCommandCopyWithSyntaxHighlightingAction);



var $gGOeQ = parcelRequire("gGOeQ");
var $c1488eff038c387a$exports = {};

$parcel$export($c1488eff038c387a$exports, "QuickFixController", function () { return $c1488eff038c387a$export$12bfd62cda48c28c; }, function (v) { return $c1488eff038c387a$export$12bfd62cda48c28c = v; });
$parcel$export($c1488eff038c387a$exports, "QuickFixAction", function () { return $c1488eff038c387a$export$882e0ee127a25fbb; }, function (v) { return $c1488eff038c387a$export$882e0ee127a25fbb = v; });
$parcel$export($c1488eff038c387a$exports, "AutoFixAction", function () { return $c1488eff038c387a$export$2bffd38cf19da049; }, function (v) { return $c1488eff038c387a$export$2bffd38cf19da049 = v; });
$parcel$export($c1488eff038c387a$exports, "CodeActionCommand", function () { return $c1488eff038c387a$export$94d24ce7f8ca1f8c; }, function (v) { return $c1488eff038c387a$export$94d24ce7f8ca1f8c = v; });
$parcel$export($c1488eff038c387a$exports, "RefactorAction", function () { return $c1488eff038c387a$export$717c8b29cf6c7de0; }, function (v) { return $c1488eff038c387a$export$717c8b29cf6c7de0 = v; });
$parcel$export($c1488eff038c387a$exports, "SourceAction", function () { return $c1488eff038c387a$export$6754a4b1b720e9fb; }, function (v) { return $c1488eff038c387a$export$6754a4b1b720e9fb = v; });
$parcel$export($c1488eff038c387a$exports, "OrganizeImportsAction", function () { return $c1488eff038c387a$export$839e26b4813ba04c; }, function (v) { return $c1488eff038c387a$export$839e26b4813ba04c = v; });
$parcel$export($c1488eff038c387a$exports, "FixAllAction", function () { return $c1488eff038c387a$export$900fefaddb0995e3; }, function (v) { return $c1488eff038c387a$export$900fefaddb0995e3 = v; });

var $gnEXx = parcelRequire("gnEXx");
class $44551a9ce7cb9453$export$b624eff549462981 {
    /**
     * Get the wrapped value.
     *
     * This will force evaluation of the lazy value if it has not been resolved yet. Lazy values are only
     * resolved once. `getValue` will re-throw exceptions that are hit while resolving the value
     */ getValue() {
        if (!this._didRun) try {
            this._value = this.executor();
        } catch (err) {
            this._error = err;
        } finally{
            this._didRun = true;
        }
        if (this._error) throw this._error;
        return this._value;
    }
    /**
     * Get the wrapped value without forcing evaluation.
     */ get rawValue() {
        return this._value;
    }
    constructor(executor){
        this.executor = executor;
        this._didRun = false;
    }
}



var $atiRx = parcelRequire("atiRx");

var $9TEeL = parcelRequire("9TEeL");

var $gGOeQ = parcelRequire("gGOeQ");

var $5N8h4 = parcelRequire("5N8h4");

var $bdLce = parcelRequire("bdLce");
var $3c8987ef19ae5b59$exports = {};

$parcel$export($3c8987ef19ae5b59$exports, "codeActionCommandId", function () { return $3c8987ef19ae5b59$export$47d177835ea6d398; }, function (v) { return $3c8987ef19ae5b59$export$47d177835ea6d398 = v; });
$parcel$export($3c8987ef19ae5b59$exports, "refactorCommandId", function () { return $3c8987ef19ae5b59$export$691d097e330e1493; }, function (v) { return $3c8987ef19ae5b59$export$691d097e330e1493 = v; });
$parcel$export($3c8987ef19ae5b59$exports, "sourceActionCommandId", function () { return $3c8987ef19ae5b59$export$239def49abcdebc4; }, function (v) { return $3c8987ef19ae5b59$export$239def49abcdebc4 = v; });
$parcel$export($3c8987ef19ae5b59$exports, "organizeImportsCommandId", function () { return $3c8987ef19ae5b59$export$9f47236fc64ddcf5; }, function (v) { return $3c8987ef19ae5b59$export$9f47236fc64ddcf5 = v; });
$parcel$export($3c8987ef19ae5b59$exports, "fixAllCommandId", function () { return $3c8987ef19ae5b59$export$9866f0c931c06a92; }, function (v) { return $3c8987ef19ae5b59$export$9866f0c931c06a92 = v; });
$parcel$export($3c8987ef19ae5b59$exports, "CodeActionItem", function () { return $3c8987ef19ae5b59$export$1ff0bf878d7aea77; }, function (v) { return $3c8987ef19ae5b59$export$1ff0bf878d7aea77 = v; });
$parcel$export($3c8987ef19ae5b59$exports, "getCodeActions", function () { return $3c8987ef19ae5b59$export$52ee0249dd058aac; }, function (v) { return $3c8987ef19ae5b59$export$52ee0249dd058aac = v; });

var $4xCD7 = parcelRequire("4xCD7");

var $gnEXx = parcelRequire("gnEXx");

var $g0782 = parcelRequire("g0782");

var $atiRx = parcelRequire("atiRx");

var $7K96x = parcelRequire("7K96x");

var $iVwSq = parcelRequire("iVwSq");

var $3HpR4 = parcelRequire("3HpR4");

var $cz0c7 = parcelRequire("cz0c7");

var $eKhCe = parcelRequire("eKhCe");

var $dwrPd = parcelRequire("dwrPd");

var $fAXtX = parcelRequire("fAXtX");

var $9xODy = parcelRequire("9xODy");
class $76aa5b67436f3853$export$c72b5966cfff6b4d {
    equals(other) {
        return this.value === other.value;
    }
    contains(other) {
        return this.equals(other) || this.value === "" || other.value.startsWith(this.value + $76aa5b67436f3853$export$c72b5966cfff6b4d.sep);
    }
    intersects(other) {
        return this.contains(other) || other.contains(this);
    }
    append(part) {
        return new $76aa5b67436f3853$export$c72b5966cfff6b4d(this.value + $76aa5b67436f3853$export$c72b5966cfff6b4d.sep + part);
    }
    constructor(value){
        this.value = value;
    }
}
$76aa5b67436f3853$export$c72b5966cfff6b4d.sep = ".";
$76aa5b67436f3853$export$c72b5966cfff6b4d.None = new $76aa5b67436f3853$export$c72b5966cfff6b4d("@@none@@"); // Special code action that contains nothing
$76aa5b67436f3853$export$c72b5966cfff6b4d.Empty = new $76aa5b67436f3853$export$c72b5966cfff6b4d("");
$76aa5b67436f3853$export$c72b5966cfff6b4d.QuickFix = new $76aa5b67436f3853$export$c72b5966cfff6b4d("quickfix");
$76aa5b67436f3853$export$c72b5966cfff6b4d.Refactor = new $76aa5b67436f3853$export$c72b5966cfff6b4d("refactor");
$76aa5b67436f3853$export$c72b5966cfff6b4d.Source = new $76aa5b67436f3853$export$c72b5966cfff6b4d("source");
$76aa5b67436f3853$export$c72b5966cfff6b4d.SourceOrganizeImports = $76aa5b67436f3853$export$c72b5966cfff6b4d.Source.append("organizeImports");
$76aa5b67436f3853$export$c72b5966cfff6b4d.SourceFixAll = $76aa5b67436f3853$export$c72b5966cfff6b4d.Source.append("fixAll");
function $76aa5b67436f3853$export$260c8da5ecf5f71d(filter, providedKind) {
    // A provided kind may be a subset or superset of our filtered kind.
    if (filter.include && !filter.include.intersects(providedKind)) return false;
    if (filter.excludes) {
        if (filter.excludes.some((exclude)=>$76aa5b67436f3853$var$excludesAction(providedKind, exclude, filter.include))) return false;
    }
    // Don't return source actions unless they are explicitly requested
    if (!filter.includeSourceActions && $76aa5b67436f3853$export$c72b5966cfff6b4d.Source.contains(providedKind)) return false;
    return true;
}
function $76aa5b67436f3853$export$b4bbf6ad637c4d35(filter, action) {
    const actionKind = action.kind ? new $76aa5b67436f3853$export$c72b5966cfff6b4d(action.kind) : undefined;
    // Filter out actions by kind
    if (filter.include) {
        if (!actionKind || !filter.include.contains(actionKind)) return false;
    }
    if (filter.excludes) {
        if (actionKind && filter.excludes.some((exclude)=>$76aa5b67436f3853$var$excludesAction(actionKind, exclude, filter.include))) return false;
    }
    // Don't return source actions unless they are explicitly requested
    if (!filter.includeSourceActions) {
        if (actionKind && $76aa5b67436f3853$export$c72b5966cfff6b4d.Source.contains(actionKind)) return false;
    }
    if (filter.onlyIncludePreferredActions) {
        if (!action.isPreferred) return false;
    }
    return true;
}
function $76aa5b67436f3853$var$excludesAction(providedKind, exclude, include) {
    if (!exclude.contains(providedKind)) return false;
    if (include && exclude.contains(include)) // The include is more specific, don't filter out
    return false;
    return true;
}
class $76aa5b67436f3853$export$b4557d8a7419d430 {
    static fromUser(arg, defaults) {
        if (!arg || typeof arg !== "object") return new $76aa5b67436f3853$export$b4557d8a7419d430(defaults.kind, defaults.apply, false);
        return new $76aa5b67436f3853$export$b4557d8a7419d430($76aa5b67436f3853$export$b4557d8a7419d430.getKindFromUser(arg, defaults.kind), $76aa5b67436f3853$export$b4557d8a7419d430.getApplyFromUser(arg, defaults.apply), $76aa5b67436f3853$export$b4557d8a7419d430.getPreferredUser(arg));
    }
    static getApplyFromUser(arg, defaultAutoApply) {
        switch(typeof arg.apply === "string" ? arg.apply.toLowerCase() : ""){
            case "first":
                return "first" /* First */ ;
            case "never":
                return "never" /* Never */ ;
            case "ifsingle":
                return "ifSingle" /* IfSingle */ ;
            default:
                return defaultAutoApply;
        }
    }
    static getKindFromUser(arg, defaultKind) {
        return typeof arg.kind === "string" ? new $76aa5b67436f3853$export$c72b5966cfff6b4d(arg.kind) : defaultKind;
    }
    static getPreferredUser(arg) {
        return typeof arg.preferred === "boolean" ? arg.preferred : false;
    }
    constructor(kind, apply, preferred){
        this.kind = kind;
        this.apply = apply;
        this.preferred = preferred;
    }
}


/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $3c8987ef19ae5b59$var$__awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const $3c8987ef19ae5b59$export$47d177835ea6d398 = "editor.action.codeAction";
const $3c8987ef19ae5b59$export$691d097e330e1493 = "editor.action.refactor";
const $3c8987ef19ae5b59$export$239def49abcdebc4 = "editor.action.sourceAction";
const $3c8987ef19ae5b59$export$9f47236fc64ddcf5 = "editor.action.organizeImports";
const $3c8987ef19ae5b59$export$9866f0c931c06a92 = "editor.action.fixAll";
class $3c8987ef19ae5b59$export$1ff0bf878d7aea77 {
    resolve(token) {
        var _a;
        return $3c8987ef19ae5b59$var$__awaiter(this, void 0, void 0, function*() {
            if (((_a = this.provider) === null || _a === void 0 ? void 0 : _a.resolveCodeAction) && !this.action.edit) {
                let action;
                try {
                    action = yield this.provider.resolveCodeAction(this.action, token);
                } catch (err) {
                    (0, $g0782.onUnexpectedExternalError)(err);
                }
                if (action) this.action.edit = action.edit;
            }
            return this;
        });
    }
    constructor(action, provider){
        this.action = action;
        this.provider = provider;
    }
}
class $3c8987ef19ae5b59$var$ManagedCodeActionSet extends (0, $atiRx.Disposable) {
    static codeActionsComparator({ action: a  }, { action: b  }) {
        if (a.isPreferred && !b.isPreferred) return -1;
        else if (!a.isPreferred && b.isPreferred) return 1;
        if ((0, $4xCD7.isNonEmptyArray)(a.diagnostics)) {
            if ((0, $4xCD7.isNonEmptyArray)(b.diagnostics)) return a.diagnostics[0].message.localeCompare(b.diagnostics[0].message);
            else return -1;
        } else if ((0, $4xCD7.isNonEmptyArray)(b.diagnostics)) return 1;
        else return 0; // both have no diagnostics
    }
    get hasAutoFix() {
        return this.validActions.some(({ action: fix  })=>!!fix.kind && (0, $76aa5b67436f3853$export$c72b5966cfff6b4d).QuickFix.contains(new (0, $76aa5b67436f3853$export$c72b5966cfff6b4d)(fix.kind)) && !!fix.isPreferred);
    }
    constructor(actions, documentation, disposables){
        super();
        this.documentation = documentation;
        this._register(disposables);
        this.allActions = [
            ...actions
        ].sort($3c8987ef19ae5b59$var$ManagedCodeActionSet.codeActionsComparator);
        this.validActions = this.allActions.filter(({ action: action  })=>!action.disabled);
    }
}
const $3c8987ef19ae5b59$var$emptyCodeActionsResponse = {
    actions: [],
    documentation: undefined
};
function $3c8987ef19ae5b59$export$52ee0249dd058aac(model, rangeOrSelection, trigger, progress, token) {
    var _a;
    const filter = trigger.filter || {};
    const codeActionContext = {
        only: (_a = filter.include) === null || _a === void 0 ? void 0 : _a.value,
        trigger: trigger.type
    };
    const cts = new (0, $iVwSq.TextModelCancellationTokenSource)(model, token);
    const providers = $3c8987ef19ae5b59$var$getCodeActionProviders(model, filter);
    const disposables = new (0, $atiRx.DisposableStore)();
    const promises = providers.map((provider)=>$3c8987ef19ae5b59$var$__awaiter(this, void 0, void 0, function*() {
            try {
                progress.report(provider);
                const providedCodeActions = yield provider.provideCodeActions(model, rangeOrSelection, codeActionContext, cts.token);
                if (providedCodeActions) disposables.add(providedCodeActions);
                if (cts.token.isCancellationRequested) return $3c8987ef19ae5b59$var$emptyCodeActionsResponse;
                const filteredActions = ((providedCodeActions === null || providedCodeActions === void 0 ? void 0 : providedCodeActions.actions) || []).filter((action)=>action && (0, $76aa5b67436f3853$export$b4bbf6ad637c4d35)(filter, action));
                const documentation = $3c8987ef19ae5b59$var$getDocumentation(provider, filteredActions, filter.include);
                return {
                    actions: filteredActions.map((action)=>new $3c8987ef19ae5b59$export$1ff0bf878d7aea77(action, provider)),
                    documentation: documentation
                };
            } catch (err) {
                if ((0, $g0782.isPromiseCanceledError)(err)) throw err;
                (0, $g0782.onUnexpectedExternalError)(err);
                return $3c8987ef19ae5b59$var$emptyCodeActionsResponse;
            }
        }));
    const listener = $eKhCe.CodeActionProviderRegistry.onDidChange(()=>{
        const newProviders = $eKhCe.CodeActionProviderRegistry.all(model);
        if (!(0, $4xCD7.equals)(newProviders, providers)) cts.cancel();
    });
    return Promise.all(promises).then((actions)=>{
        const allActions = (0, $4xCD7.flatten)(actions.map((x)=>x.actions));
        const allDocumentation = (0, $4xCD7.coalesce)(actions.map((x)=>x.documentation));
        return new $3c8987ef19ae5b59$var$ManagedCodeActionSet(allActions, allDocumentation, disposables);
    }).finally(()=>{
        listener.dispose();
        cts.dispose();
    });
}
function $3c8987ef19ae5b59$var$getCodeActionProviders(model, filter) {
    return $eKhCe.CodeActionProviderRegistry.all(model)// Don't include providers that we know will not return code actions of interest
    .filter((provider)=>{
        if (!provider.providedCodeActionKinds) // We don't know what type of actions this provider will return.
        return true;
        return provider.providedCodeActionKinds.some((kind)=>(0, $76aa5b67436f3853$export$260c8da5ecf5f71d)(filter, new (0, $76aa5b67436f3853$export$c72b5966cfff6b4d)(kind)));
    });
}
function $3c8987ef19ae5b59$var$getDocumentation(provider, providedCodeActions, only) {
    if (!provider.documentation) return undefined;
    const documentation = provider.documentation.map((entry)=>({
            kind: new (0, $76aa5b67436f3853$export$c72b5966cfff6b4d)(entry.kind),
            command: entry.command
        }));
    if (only) {
        let currentBest;
        for (const entry of documentation)if (entry.kind.contains(only)) {
            if (!currentBest) currentBest = entry;
            else // Take best match
            if (currentBest.kind.contains(entry.kind)) currentBest = entry;
        }
        if (currentBest) return currentBest === null || currentBest === void 0 ? void 0 : currentBest.command;
    }
    // Otherwise, check to see if any of the provided actions match.
    for (const action of providedCodeActions){
        if (!action.kind) continue;
        for (const entry1 of documentation){
            if (entry1.kind.contains(new (0, $76aa5b67436f3853$export$c72b5966cfff6b4d)(action.kind))) return entry1.command;
        }
    }
    return undefined;
}
(0, $fAXtX.CommandsRegistry).registerCommand("_executeCodeActionProvider", function(accessor, resource, rangeOrSelection, kind, itemResolveCount) {
    return $3c8987ef19ae5b59$var$__awaiter(this, void 0, void 0, function*() {
        if (!(resource instanceof (0, $7K96x.URI))) throw (0, $g0782.illegalArgument)();
        const model = accessor.get((0, $dwrPd.IModelService)).getModel(resource);
        if (!model) throw (0, $g0782.illegalArgument)();
        const validatedRangeOrSelection = (0, $cz0c7.Selection).isISelection(rangeOrSelection) ? (0, $cz0c7.Selection).liftSelection(rangeOrSelection) : (0, $3HpR4.Range).isIRange(rangeOrSelection) ? model.validateRange(rangeOrSelection) : undefined;
        if (!validatedRangeOrSelection) throw (0, $g0782.illegalArgument)();
        const include = typeof kind === "string" ? new (0, $76aa5b67436f3853$export$c72b5966cfff6b4d)(kind) : undefined;
        const codeActionSet = yield $3c8987ef19ae5b59$export$52ee0249dd058aac(model, validatedRangeOrSelection, {
            type: 1 /* Invoke */ ,
            filter: {
                includeSourceActions: true,
                include: include
            }
        }, (0, $9xODy.Progress).None, (0, $gnEXx.CancellationToken).None);
        const resolving = [];
        const resolveCount = Math.min(codeActionSet.validActions.length, typeof itemResolveCount === "number" ? itemResolveCount : 0);
        for(let i = 0; i < resolveCount; i++)resolving.push(codeActionSet.validActions[i].resolve((0, $gnEXx.CancellationToken).None));
        try {
            yield Promise.all(resolving);
            return codeActionSet.validActions.map((item)=>item.action);
        } finally{
            setTimeout(()=>codeActionSet.dispose(), 100);
        }
    });
});


var $0f1998e2dcd6e887$exports = {};

$parcel$export($0f1998e2dcd6e887$exports, "CodeActionUi", function () { return $0f1998e2dcd6e887$export$47357a276704fe7; }, function (v) { return $0f1998e2dcd6e887$export$47357a276704fe7 = v; });

var $g0782 = parcelRequire("g0782");


var $atiRx = parcelRequire("atiRx");
var $fd39257ccc55be8e$exports = {};

$parcel$export($fd39257ccc55be8e$exports, "MessageController", function () { return $fd39257ccc55be8e$export$8c2d6d477e341dce; }, function (v) { return $fd39257ccc55be8e$export$8c2d6d477e341dce = v; });

var $cVmYb = parcelRequire("cVmYb");

var $eFOsn = parcelRequire("eFOsn");

var $atiRx = parcelRequire("atiRx");


var $gGOeQ = parcelRequire("gGOeQ");

var $3HpR4 = parcelRequire("3HpR4");

var $58WHl = parcelRequire("58WHl");

var $bRtox = parcelRequire("bRtox");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $fd39257ccc55be8e$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $fd39257ccc55be8e$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
let $fd39257ccc55be8e$export$8c2d6d477e341dce = class MessageController {
    static get(editor) {
        return editor.getContribution(MessageController.ID);
    }
    dispose() {
        this._editorListener.dispose();
        this._messageListeners.dispose();
        this._messageWidget.dispose();
        this._visible.reset();
    }
    showMessage(message, position) {
        (0, $cVmYb.alert)(message);
        this._visible.set(true);
        this._messageWidget.clear();
        this._messageListeners.clear();
        this._messageWidget.value = new $fd39257ccc55be8e$var$MessageWidget(this._editor, position, message);
        // close on blur, cursor, model change, dispose
        this._messageListeners.add(this._editor.onDidBlurEditorText(()=>this.closeMessage()));
        this._messageListeners.add(this._editor.onDidChangeCursorPosition(()=>this.closeMessage()));
        this._messageListeners.add(this._editor.onDidDispose(()=>this.closeMessage()));
        this._messageListeners.add(this._editor.onDidChangeModel(()=>this.closeMessage()));
        // 3sec
        this._messageListeners.add(new (0, $eFOsn.TimeoutTimer)(()=>this.closeMessage(), 3000));
        // close on mouse move
        let bounds;
        this._messageListeners.add(this._editor.onMouseMove((e)=>{
            // outside the text area
            if (!e.target.position) return;
            if (!bounds) // define bounding box around position and first mouse occurance
            bounds = new (0, $3HpR4.Range)(position.lineNumber - 3, 1, e.target.position.lineNumber + 3, 1);
            else if (!bounds.containsPosition(e.target.position)) // check if position is still in bounds
            this.closeMessage();
        }));
    }
    closeMessage() {
        this._visible.reset();
        this._messageListeners.clear();
        if (this._messageWidget.value) this._messageListeners.add($fd39257ccc55be8e$var$MessageWidget.fadeOut(this._messageWidget.value));
    }
    _onDidAttemptReadOnlyEdit() {
        if (this._editor.hasModel()) this.showMessage($58WHl.localize("editor.readonly", "Cannot edit in read-only editor"), this._editor.getPosition());
    }
    constructor(editor, contextKeyService){
        this._messageWidget = new (0, $atiRx.MutableDisposable)();
        this._messageListeners = new (0, $atiRx.DisposableStore)();
        this._editor = editor;
        this._visible = MessageController.MESSAGE_VISIBLE.bindTo(contextKeyService);
        this._editorListener = this._editor.onDidAttemptReadOnlyEdit(()=>this._onDidAttemptReadOnlyEdit());
    }
};
$fd39257ccc55be8e$export$8c2d6d477e341dce.ID = "editor.contrib.messageController";
$fd39257ccc55be8e$export$8c2d6d477e341dce.MESSAGE_VISIBLE = new (0, $bRtox.RawContextKey)("messageVisible", false, $58WHl.localize("messageVisible", "Whether the editor is currently showing an inline message"));
$fd39257ccc55be8e$export$8c2d6d477e341dce = $fd39257ccc55be8e$var$__decorate([
    $fd39257ccc55be8e$var$__param(1, (0, $bRtox.IContextKeyService))
], $fd39257ccc55be8e$export$8c2d6d477e341dce);
const $fd39257ccc55be8e$var$MessageCommand = (0, $gGOeQ.EditorCommand).bindToContribution($fd39257ccc55be8e$export$8c2d6d477e341dce.get);
(0, $gGOeQ.registerEditorCommand)(new $fd39257ccc55be8e$var$MessageCommand({
    id: "leaveEditorMessage",
    precondition: $fd39257ccc55be8e$export$8c2d6d477e341dce.MESSAGE_VISIBLE,
    handler: (c)=>c.closeMessage(),
    kbOpts: {
        weight: 130,
        primary: 9 /* Escape */ 
    }
}));
class $fd39257ccc55be8e$var$MessageWidget {
    static fadeOut(messageWidget) {
        let handle;
        const dispose = ()=>{
            messageWidget.dispose();
            clearTimeout(handle);
            messageWidget.getDomNode().removeEventListener("animationend", dispose);
        };
        handle = setTimeout(dispose, 110);
        messageWidget.getDomNode().addEventListener("animationend", dispose);
        messageWidget.getDomNode().classList.add("fadeOut");
        return {
            dispose: dispose
        };
    }
    dispose() {
        this._editor.removeContentWidget(this);
    }
    getId() {
        return "messageoverlay";
    }
    getDomNode() {
        return this._domNode;
    }
    getPosition() {
        return {
            position: this._position,
            preference: [
                1 /* ABOVE */ ,
                2 /* BELOW */ 
            ]
        };
    }
    afterRender(position) {
        this._domNode.classList.toggle("below", position === 2 /* BELOW */ );
    }
    constructor(editor, { lineNumber: lineNumber , column: column  }, text){
        // Editor.IContentWidget.allowEditorOverflow
        this.allowEditorOverflow = true;
        this.suppressMouseDown = false;
        this._editor = editor;
        this._editor.revealLinesInCenterIfOutsideViewport(lineNumber, lineNumber, 0 /* Smooth */ );
        this._position = {
            lineNumber: lineNumber,
            column: column - 1
        };
        this._domNode = document.createElement("div");
        this._domNode.classList.add("monaco-editor-overlaymessage");
        const anchorTop = document.createElement("div");
        anchorTop.classList.add("anchor", "top");
        this._domNode.appendChild(anchorTop);
        const message = document.createElement("div");
        message.classList.add("message");
        message.textContent = text;
        this._domNode.appendChild(message);
        const anchorBottom = document.createElement("div");
        anchorBottom.classList.add("anchor", "below");
        this._domNode.appendChild(anchorBottom);
        this._editor.addContentWidget(this);
        this._domNode.classList.add("fadeIn");
    }
}
(0, $gGOeQ.registerEditorContribution)($fd39257ccc55be8e$export$8c2d6d477e341dce.ID, $fd39257ccc55be8e$export$8c2d6d477e341dce);



var $iZW67 = parcelRequire("iZW67");
var $61a2cf5e411344bb$exports = {};

$parcel$export($61a2cf5e411344bb$exports, "CodeActionMenu", function () { return $61a2cf5e411344bb$export$b25117b97cd5f4f9; }, function (v) { return $61a2cf5e411344bb$export$b25117b97cd5f4f9 = v; });

var $jOYcd = parcelRequire("jOYcd");

var $1e8So = parcelRequire("1e8So");

var $g0782 = parcelRequire("g0782");


var $atiRx = parcelRequire("atiRx");

var $8qXsZ = parcelRequire("8qXsZ");

var $eKhCe = parcelRequire("eKhCe");



var $jINLy = parcelRequire("jINLy");

var $gY9wc = parcelRequire("gY9wc");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $61a2cf5e411344bb$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $61a2cf5e411344bb$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var $61a2cf5e411344bb$var$__awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class $61a2cf5e411344bb$var$CodeActionAction extends (0, $1e8So.Action) {
    constructor(action, callback){
        super(action.command ? action.command.id : action.title, $61a2cf5e411344bb$var$stripNewlines(action.title), undefined, !action.disabled, callback);
        this.action = action;
    }
}
function $61a2cf5e411344bb$var$stripNewlines(str) {
    return str.replace(/\r\n|\r|\n/g, " ");
}
let $61a2cf5e411344bb$export$b25117b97cd5f4f9 = class CodeActionMenu extends (0, $atiRx.Disposable) {
    get isVisible() {
        return this._visible;
    }
    show(trigger, codeActions, at, options) {
        return $61a2cf5e411344bb$var$__awaiter(this, void 0, void 0, function*() {
            const actionsToShow = options.includeDisabledActions ? codeActions.allActions : codeActions.validActions;
            if (!actionsToShow.length) {
                this._visible = false;
                return;
            }
            if (!this._editor.getDomNode()) {
                // cancel when editor went off-dom
                this._visible = false;
                throw (0, $g0782.canceled)();
            }
            this._visible = true;
            this._showingActions.value = codeActions;
            const menuActions = this.getMenuActions(trigger, actionsToShow, codeActions.documentation);
            const anchor = (0, $8qXsZ.Position).isIPosition(at) ? this._toCoords(at) : at || {
                x: 0,
                y: 0
            };
            const resolver = this._keybindingResolver.getResolver();
            const useShadowDOM = this._editor.getOption(114 /* useShadowDOM */ );
            this._contextMenuService.showContextMenu({
                domForShadowRoot: useShadowDOM ? this._editor.getDomNode() : undefined,
                getAnchor: ()=>anchor,
                getActions: ()=>menuActions,
                onHide: ()=>{
                    this._visible = false;
                    this._editor.focus();
                },
                autoSelectFirstItem: true,
                getKeyBinding: (action)=>action instanceof $61a2cf5e411344bb$var$CodeActionAction ? resolver(action.action) : undefined
            });
        });
    }
    getMenuActions(trigger, actionsToShow, documentation) {
        var _a, _b;
        const toCodeActionAction = (item)=>new $61a2cf5e411344bb$var$CodeActionAction(item.action, ()=>this._delegate.onSelectCodeAction(item));
        const result = actionsToShow.map(toCodeActionAction);
        const allDocumentation = [
            ...documentation
        ];
        const model = this._editor.getModel();
        if (model && result.length) {
            for (const provider of (0, $eKhCe.CodeActionProviderRegistry).all(model))if (provider._getAdditionalMenuItems) allDocumentation.push(...provider._getAdditionalMenuItems({
                trigger: trigger.type,
                only: (_b = (_a = trigger.filter) === null || _a === void 0 ? void 0 : _a.include) === null || _b === void 0 ? void 0 : _b.value
            }, actionsToShow.map((item)=>item.action)));
        }
        if (allDocumentation.length) result.push(new (0, $1e8So.Separator)(), ...allDocumentation.map((command)=>toCodeActionAction(new (0, $3c8987ef19ae5b59$exports.CodeActionItem)({
                title: command.title,
                command: command
            }, undefined))));
        return result;
    }
    _toCoords(position) {
        if (!this._editor.hasModel()) return {
            x: 0,
            y: 0
        };
        this._editor.revealPosition(position, 1 /* Immediate */ );
        this._editor.render();
        // Translate to absolute editor position
        const cursorCoords = this._editor.getScrolledVisiblePosition(position);
        const editorCoords = (0, $jOYcd.getDomNodePagePosition)(this._editor.getDomNode());
        const x = editorCoords.left + cursorCoords.left;
        const y = editorCoords.top + cursorCoords.top + cursorCoords.height;
        return {
            x: x,
            y: y
        };
    }
    constructor(_editor, _delegate, _contextMenuService, keybindingService){
        super();
        this._editor = _editor;
        this._delegate = _delegate;
        this._contextMenuService = _contextMenuService;
        this._visible = false;
        this._showingActions = this._register(new (0, $atiRx.MutableDisposable)());
        this._keybindingResolver = new $61a2cf5e411344bb$export$5b41f08e102f6dbe({
            getKeybindings: ()=>keybindingService.getKeybindings()
        });
    }
};
$61a2cf5e411344bb$export$b25117b97cd5f4f9 = $61a2cf5e411344bb$var$__decorate([
    $61a2cf5e411344bb$var$__param(2, (0, $jINLy.IContextMenuService)),
    $61a2cf5e411344bb$var$__param(3, (0, $gY9wc.IKeybindingService))
], $61a2cf5e411344bb$export$b25117b97cd5f4f9);
class $61a2cf5e411344bb$export$5b41f08e102f6dbe {
    getResolver() {
        // Lazy since we may not actually ever read the value
        const allCodeActionBindings = new (0, $44551a9ce7cb9453$export$b624eff549462981)(()=>this._keybindingProvider.getKeybindings().filter((item)=>$61a2cf5e411344bb$export$5b41f08e102f6dbe.codeActionCommands.indexOf(item.command) >= 0).filter((item)=>item.resolvedKeybinding).map((item)=>{
                // Special case these commands since they come built-in with VS Code and don't use 'commandArgs'
                let commandArgs = item.commandArgs;
                if (item.command === (0, $3c8987ef19ae5b59$exports.organizeImportsCommandId)) commandArgs = {
                    kind: (0, $76aa5b67436f3853$export$c72b5966cfff6b4d).SourceOrganizeImports.value
                };
                else if (item.command === (0, $3c8987ef19ae5b59$exports.fixAllCommandId)) commandArgs = {
                    kind: (0, $76aa5b67436f3853$export$c72b5966cfff6b4d).SourceFixAll.value
                };
                return Object.assign({
                    resolvedKeybinding: item.resolvedKeybinding
                }, (0, $76aa5b67436f3853$export$b4557d8a7419d430).fromUser(commandArgs, {
                    kind: (0, $76aa5b67436f3853$export$c72b5966cfff6b4d).None,
                    apply: "never" /* Never */ 
                }));
            }));
        return (action)=>{
            if (action.kind) {
                const binding = this.bestKeybindingForCodeAction(action, allCodeActionBindings.getValue());
                return binding === null || binding === void 0 ? void 0 : binding.resolvedKeybinding;
            }
            return undefined;
        };
    }
    bestKeybindingForCodeAction(action, candidates) {
        if (!action.kind) return undefined;
        const kind = new (0, $76aa5b67436f3853$export$c72b5966cfff6b4d)(action.kind);
        return candidates.filter((candidate)=>candidate.kind.contains(kind)).filter((candidate)=>{
            if (candidate.preferred) // If the candidate keybinding only applies to preferred actions, the this action must also be preferred
            return action.isPreferred;
            return true;
        }).reduceRight((currentBest, candidate)=>{
            if (!currentBest) return candidate;
            // Select the more specific binding
            return currentBest.kind.contains(candidate.kind) ? candidate : currentBest;
        }, undefined);
    }
    constructor(_keybindingProvider){
        this._keybindingProvider = _keybindingProvider;
    }
}
$61a2cf5e411344bb$export$5b41f08e102f6dbe.codeActionCommands = [
    (0, $3c8987ef19ae5b59$exports.refactorCommandId),
    (0, $3c8987ef19ae5b59$exports.codeActionCommandId),
    (0, $3c8987ef19ae5b59$exports.sourceActionCommandId),
    (0, $3c8987ef19ae5b59$exports.organizeImportsCommandId),
    (0, $3c8987ef19ae5b59$exports.fixAllCommandId)
];


var $558a574f1a509448$exports = {};

$parcel$export($558a574f1a509448$exports, "LightBulbWidget", function () { return $558a574f1a509448$export$87ab1750f69500a0; }, function (v) { return $558a574f1a509448$export$87ab1750f69500a0 = v; });

var $jOYcd = parcelRequire("jOYcd");

var $iEcvm = parcelRequire("iEcvm");

var $50vT2 = parcelRequire("50vT2");

var $8HDYc = parcelRequire("8HDYc");

var $fSvkC = parcelRequire("fSvkC");

var $atiRx = parcelRequire("atiRx");


var $g88WD = parcelRequire("g88WD");

var $58WHl = parcelRequire("58WHl");

var $gY9wc = parcelRequire("gY9wc");

var $3XYy8 = parcelRequire("3XYy8");

var $fUTzO = parcelRequire("fUTzO");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $558a574f1a509448$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $558a574f1a509448$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var $558a574f1a509448$var$LightBulbState;
(function(LightBulbState) {
    LightBulbState.Hidden = {
        type: 0 /* Hidden */ 
    };
    class Showing {
        constructor(actions, trigger, editorPosition, widgetPosition){
            this.actions = actions;
            this.trigger = trigger;
            this.editorPosition = editorPosition;
            this.widgetPosition = widgetPosition;
            this.type = 1 /* Showing */ ;
        }
    }
    LightBulbState.Showing = Showing;
})($558a574f1a509448$var$LightBulbState || ($558a574f1a509448$var$LightBulbState = {}));
let $558a574f1a509448$export$87ab1750f69500a0 = class LightBulbWidget extends (0, $atiRx.Disposable) {
    dispose() {
        super.dispose();
        this._editor.removeContentWidget(this);
    }
    getId() {
        return "LightBulbWidget";
    }
    getDomNode() {
        return this._domNode;
    }
    getPosition() {
        return this._state.type === 1 /* Showing */  ? this._state.widgetPosition : null;
    }
    update(actions, trigger, atPosition) {
        if (actions.validActions.length <= 0) return this.hide();
        const options = this._editor.getOptions();
        if (!options.get(56 /* lightbulb */ ).enabled) return this.hide();
        const model = this._editor.getModel();
        if (!model) return this.hide();
        const { lineNumber: lineNumber , column: column  } = model.validatePosition(atPosition);
        const tabSize = model.getOptions().tabSize;
        const fontInfo = options.get(43 /* fontInfo */ );
        const lineContent = model.getLineContent(lineNumber);
        const indent = (0, $g88WD.TextModel).computeIndentLevel(lineContent, tabSize);
        const lineHasSpace = fontInfo.spaceWidth * indent > 22;
        const isFolded = (lineNumber)=>{
            return lineNumber > 2 && this._editor.getTopForLineNumber(lineNumber) === this._editor.getTopForLineNumber(lineNumber - 1);
        };
        let effectiveLineNumber = lineNumber;
        if (!lineHasSpace) {
            if (lineNumber > 1 && !isFolded(lineNumber - 1)) effectiveLineNumber -= 1;
            else if (!isFolded(lineNumber + 1)) effectiveLineNumber += 1;
            else if (column * fontInfo.spaceWidth < 22) // cannot show lightbulb above/below and showing
            // it inline would overlay the cursor...
            return this.hide();
        }
        this.state = new $558a574f1a509448$var$LightBulbState.Showing(actions, trigger, atPosition, {
            position: {
                lineNumber: effectiveLineNumber,
                column: 1
            },
            preference: LightBulbWidget._posPref
        });
        this._editor.layoutContentWidget(this);
    }
    hide() {
        this.state = $558a574f1a509448$var$LightBulbState.Hidden;
        this._editor.layoutContentWidget(this);
    }
    get state() {
        return this._state;
    }
    set state(value) {
        this._state = value;
        this._updateLightBulbTitleAndIcon();
    }
    _updateLightBulbTitleAndIcon() {
        if (this.state.type === 1 /* Showing */  && this.state.actions.hasAutoFix) {
            // update icon
            this._domNode.classList.remove(...(0, $8HDYc.Codicon).lightBulb.classNamesArray);
            this._domNode.classList.add(...(0, $8HDYc.Codicon).lightbulbAutofix.classNamesArray);
            const preferredKb = this._keybindingService.lookupKeybinding(this._preferredFixActionId);
            if (preferredKb) {
                this.title = $58WHl.localize("preferredcodeActionWithKb", "Show Code Actions. Preferred Quick Fix Available ({0})", preferredKb.getLabel());
                return;
            }
        }
        // update icon
        this._domNode.classList.remove(...(0, $8HDYc.Codicon).lightbulbAutofix.classNamesArray);
        this._domNode.classList.add(...(0, $8HDYc.Codicon).lightBulb.classNamesArray);
        const kb = this._keybindingService.lookupKeybinding(this._quickFixActionId);
        if (kb) this.title = $58WHl.localize("codeActionWithKb", "Show Code Actions ({0})", kb.getLabel());
        else this.title = $58WHl.localize("codeAction", "Show Code Actions");
    }
    set title(value) {
        this._domNode.title = value;
    }
    constructor(_editor, _quickFixActionId, _preferredFixActionId, _keybindingService){
        super();
        this._editor = _editor;
        this._quickFixActionId = _quickFixActionId;
        this._preferredFixActionId = _preferredFixActionId;
        this._keybindingService = _keybindingService;
        this._onClick = this._register(new (0, $fSvkC.Emitter)());
        this.onClick = this._onClick.event;
        this._state = $558a574f1a509448$var$LightBulbState.Hidden;
        this._domNode = document.createElement("div");
        this._domNode.className = (0, $8HDYc.Codicon).lightBulb.classNames;
        this._editor.addContentWidget(this);
        this._register(this._editor.onDidChangeModelContent((_)=>{
            // cancel when the line in question has been removed
            const editorModel = this._editor.getModel();
            if (this.state.type !== 1 /* Showing */  || !editorModel || this.state.editorPosition.lineNumber >= editorModel.getLineCount()) this.hide();
        }));
        (0, $50vT2.Gesture).ignoreTarget(this._domNode);
        this._register($jOYcd.addStandardDisposableGenericMouseDownListner(this._domNode, (e)=>{
            if (this.state.type !== 1 /* Showing */ ) return;
            // Make sure that focus / cursor location is not lost when clicking widget icon
            this._editor.focus();
            e.preventDefault();
            // a bit of extra work to make sure the menu
            // doesn't cover the line-text
            const { top: top , height: height  } = $jOYcd.getDomNodePagePosition(this._domNode);
            const lineHeight = this._editor.getOption(58 /* lineHeight */ );
            let pad = Math.floor(lineHeight / 3);
            if (this.state.widgetPosition.position !== null && this.state.widgetPosition.position.lineNumber < this.state.editorPosition.lineNumber) pad += lineHeight;
            this._onClick.fire({
                x: e.posx,
                y: top + height + pad,
                actions: this.state.actions,
                trigger: this.state.trigger
            });
        }));
        this._register($jOYcd.addDisposableListener(this._domNode, "mouseenter", (e)=>{
            if ((e.buttons & 1) !== 1) return;
            // mouse enters lightbulb while the primary/left button
            // is being pressed -> hide the lightbulb and block future
            // showings until mouse is released
            this.hide();
            const monitor = new (0, $iEcvm.GlobalMouseMoveMonitor)();
            monitor.startMonitoring(e.target, e.buttons, (0, $iEcvm.standardMouseMoveMerger), ()=>{}, ()=>{
                monitor.dispose();
            });
        }));
        this._register(this._editor.onDidChangeConfiguration((e)=>{
            // hide when told to do so
            if (e.hasChanged(56 /* lightbulb */ ) && !this._editor.getOption(56 /* lightbulb */ ).enabled) this.hide();
        }));
        this._updateLightBulbTitleAndIcon();
        this._register(this._keybindingService.onDidUpdateKeybindings(this._updateLightBulbTitleAndIcon, this));
    }
};
$558a574f1a509448$export$87ab1750f69500a0._posPref = [
    0 /* EXACT */ 
];
$558a574f1a509448$export$87ab1750f69500a0 = $558a574f1a509448$var$__decorate([
    $558a574f1a509448$var$__param(3, (0, $gY9wc.IKeybindingService))
], $558a574f1a509448$export$87ab1750f69500a0);
(0, $fUTzO.registerThemingParticipant)((theme, collector)=>{
    var _a;
    const editorBackgroundColor = (_a = theme.getColor((0, $3XYy8.editorBackground))) === null || _a === void 0 ? void 0 : _a.transparent(0.7);
    // Lightbulb Icon
    const editorLightBulbForegroundColor = theme.getColor((0, $3XYy8.editorLightBulbForeground));
    if (editorLightBulbForegroundColor) collector.addRule(`
		.monaco-editor .contentWidgets ${(0, $8HDYc.Codicon).lightBulb.cssSelector} {
			color: ${editorLightBulbForegroundColor};
			background-color: ${editorBackgroundColor};
		}`);
    // Lightbulb Auto Fix Icon
    const editorLightBulbAutoFixForegroundColor = theme.getColor((0, $3XYy8.editorLightBulbAutoFixForeground));
    if (editorLightBulbAutoFixForegroundColor) collector.addRule(`
		.monaco-editor .contentWidgets ${(0, $8HDYc.Codicon).lightbulbAutofix.cssSelector} {
			color: ${editorLightBulbAutoFixForegroundColor};
			background-color: ${editorBackgroundColor};
		}`);
});


/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $0f1998e2dcd6e887$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $0f1998e2dcd6e887$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var $0f1998e2dcd6e887$var$__awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var $0f1998e2dcd6e887$var$__classPrivateFieldSet = undefined && undefined.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
};
var $0f1998e2dcd6e887$var$__classPrivateFieldGet = undefined && undefined.__classPrivateFieldGet || function(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var $0f1998e2dcd6e887$var$_CodeActionUi_disposed;
let $0f1998e2dcd6e887$export$47357a276704fe7 = class CodeActionUi extends (0, $atiRx.Disposable) {
    dispose() {
        $0f1998e2dcd6e887$var$__classPrivateFieldSet(this, $0f1998e2dcd6e887$var$_CodeActionUi_disposed, true, "f");
        super.dispose();
    }
    update(newState) {
        var _a, _b, _c;
        return $0f1998e2dcd6e887$var$__awaiter(this, void 0, void 0, function*() {
            if (newState.type !== 1 /* Triggered */ ) {
                (_a = this._lightBulbWidget.rawValue) === null || _a === void 0 || _a.hide();
                return;
            }
            let actions;
            try {
                actions = yield newState.actions;
            } catch (e) {
                (0, $g0782.onUnexpectedError)(e);
                return;
            }
            if ($0f1998e2dcd6e887$var$__classPrivateFieldGet(this, $0f1998e2dcd6e887$var$_CodeActionUi_disposed, "f")) return;
            this._lightBulbWidget.getValue().update(actions, newState.trigger, newState.position);
            if (newState.trigger.type === 1 /* Invoke */ ) {
                if ((_b = newState.trigger.filter) === null || _b === void 0 ? void 0 : _b.include) {
                    // Check to see if we want to auto apply.
                    const validActionToApply = this.tryGetValidActionToApply(newState.trigger, actions);
                    if (validActionToApply) {
                        try {
                            this._lightBulbWidget.getValue().hide();
                            yield this.delegate.applyCodeAction(validActionToApply, false);
                        } finally{
                            actions.dispose();
                        }
                        return;
                    }
                    // Check to see if there is an action that we would have applied were it not invalid
                    if (newState.trigger.context) {
                        const invalidAction = this.getInvalidActionThatWouldHaveBeenApplied(newState.trigger, actions);
                        if (invalidAction && invalidAction.action.disabled) {
                            (0, $fd39257ccc55be8e$exports.MessageController).get(this._editor).showMessage(invalidAction.action.disabled, newState.trigger.context.position);
                            actions.dispose();
                            return;
                        }
                    }
                }
                const includeDisabledActions = !!((_c = newState.trigger.filter) === null || _c === void 0 ? void 0 : _c.include);
                if (newState.trigger.context) {
                    if (!actions.allActions.length || !includeDisabledActions && !actions.validActions.length) {
                        (0, $fd39257ccc55be8e$exports.MessageController).get(this._editor).showMessage(newState.trigger.context.notAvailableMessage, newState.trigger.context.position);
                        this._activeCodeActions.value = actions;
                        actions.dispose();
                        return;
                    }
                }
                this._activeCodeActions.value = actions;
                this._codeActionWidget.getValue().show(newState.trigger, actions, newState.position, {
                    includeDisabledActions: includeDisabledActions
                });
            } else // auto magically triggered
            if (this._codeActionWidget.getValue().isVisible) // TODO: Figure out if we should update the showing menu?
            actions.dispose();
            else this._activeCodeActions.value = actions;
        });
    }
    getInvalidActionThatWouldHaveBeenApplied(trigger, actions) {
        if (!actions.allActions.length) return undefined;
        if (trigger.autoApply === "first" /* First */  && actions.validActions.length === 0 || trigger.autoApply === "ifSingle" /* IfSingle */  && actions.allActions.length === 1) return actions.allActions.find(({ action: action  })=>action.disabled);
        return undefined;
    }
    tryGetValidActionToApply(trigger, actions) {
        if (!actions.validActions.length) return undefined;
        if (trigger.autoApply === "first" /* First */  && actions.validActions.length > 0 || trigger.autoApply === "ifSingle" /* IfSingle */  && actions.validActions.length === 1) return actions.validActions[0];
        return undefined;
    }
    showCodeActionList(trigger, actions, at, options) {
        return $0f1998e2dcd6e887$var$__awaiter(this, void 0, void 0, function*() {
            this._codeActionWidget.getValue().show(trigger, actions, at, options);
        });
    }
    constructor(_editor, quickFixActionId, preferredFixActionId, delegate, instantiationService){
        super();
        this._editor = _editor;
        this.delegate = delegate;
        this._activeCodeActions = this._register(new (0, $atiRx.MutableDisposable)());
        $0f1998e2dcd6e887$var$_CodeActionUi_disposed.set(this, false);
        this._codeActionWidget = new (0, $44551a9ce7cb9453$export$b624eff549462981)(()=>{
            return this._register(instantiationService.createInstance((0, $61a2cf5e411344bb$exports.CodeActionMenu), this._editor, {
                onSelectCodeAction: (action)=>$0f1998e2dcd6e887$var$__awaiter(this, void 0, void 0, function*() {
                        this.delegate.applyCodeAction(action, /* retrigger */ true);
                    })
            }));
        });
        this._lightBulbWidget = new (0, $44551a9ce7cb9453$export$b624eff549462981)(()=>{
            const widget = this._register(instantiationService.createInstance((0, $558a574f1a509448$exports.LightBulbWidget), this._editor, quickFixActionId, preferredFixActionId));
            this._register(widget.onClick((e)=>this.showCodeActionList(e.trigger, e.actions, e, {
                    includeDisabledActions: false
                })));
            return widget;
        });
    }
};
$0f1998e2dcd6e887$var$_CodeActionUi_disposed = new WeakMap();
$0f1998e2dcd6e887$export$47357a276704fe7 = $0f1998e2dcd6e887$var$__decorate([
    $0f1998e2dcd6e887$var$__param(4, (0, $iZW67.IInstantiationService))
], $0f1998e2dcd6e887$export$47357a276704fe7);




var $58WHl = parcelRequire("58WHl");

var $fAXtX = parcelRequire("fAXtX");

var $bRtox = parcelRequire("bRtox");

var $iZW67 = parcelRequire("iZW67");

var $bnsNn = parcelRequire("bnsNn");

var $dgZ0t = parcelRequire("dgZ0t");

var $9xODy = parcelRequire("9xODy");

var $2EG7I = parcelRequire("2EG7I");
var $2369698a90acb466$exports = {};

$parcel$export($2369698a90acb466$exports, "SUPPORTED_CODE_ACTIONS", function () { return $2369698a90acb466$export$1209f8b35536d626; }, function (v) { return $2369698a90acb466$export$1209f8b35536d626 = v; });
$parcel$export($2369698a90acb466$exports, "CodeActionModel", function () { return $2369698a90acb466$export$d2ba69ecaab87b2c; }, function (v) { return $2369698a90acb466$export$d2ba69ecaab87b2c = v; });

var $eFOsn = parcelRequire("eFOsn");

var $g0782 = parcelRequire("g0782");

var $fSvkC = parcelRequire("fSvkC");

var $atiRx = parcelRequire("atiRx");

var $aMhG1 = parcelRequire("aMhG1");

var $3HpR4 = parcelRequire("3HpR4");

var $eKhCe = parcelRequire("eKhCe");

var $bRtox = parcelRequire("bRtox");

var $9xODy = parcelRequire("9xODy");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $2369698a90acb466$var$__classPrivateFieldGet = undefined && undefined.__classPrivateFieldGet || function(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var $2369698a90acb466$var$__classPrivateFieldSet = undefined && undefined.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
};
var $2369698a90acb466$var$_CodeActionModel_isDisposed;
const $2369698a90acb466$export$1209f8b35536d626 = new (0, $bRtox.RawContextKey)("supportedCodeAction", "");
class $2369698a90acb466$var$CodeActionOracle extends (0, $atiRx.Disposable) {
    trigger(trigger) {
        const selection = this._getRangeOfSelectionUnlessWhitespaceEnclosed(trigger);
        return this._createEventAndSignalChange(trigger, selection);
    }
    _onMarkerChanges(resources) {
        const model = this._editor.getModel();
        if (!model) return;
        if (resources.some((resource)=>(0, $aMhG1.isEqual)(resource, model.uri))) this._autoTriggerTimer.cancelAndSet(()=>{
            this.trigger({
                type: 2 /* Auto */ 
            });
        }, this._delay);
    }
    _onCursorChange() {
        this._autoTriggerTimer.cancelAndSet(()=>{
            this.trigger({
                type: 2 /* Auto */ 
            });
        }, this._delay);
    }
    _getRangeOfMarker(selection) {
        const model = this._editor.getModel();
        if (!model) return undefined;
        for (const marker of this._markerService.read({
            resource: model.uri
        })){
            const markerRange = model.validateRange(marker);
            if ((0, $3HpR4.Range).intersectRanges(markerRange, selection)) return (0, $3HpR4.Range).lift(markerRange);
        }
        return undefined;
    }
    _getRangeOfSelectionUnlessWhitespaceEnclosed(trigger) {
        if (!this._editor.hasModel()) return undefined;
        const model = this._editor.getModel();
        const selection = this._editor.getSelection();
        if (selection.isEmpty() && trigger.type === 2 /* Auto */ ) {
            const { lineNumber: lineNumber , column: column  } = selection.getPosition();
            const line = model.getLineContent(lineNumber);
            if (line.length === 0) // empty line
            return undefined;
            else if (column === 1) {
                // look only right
                if (/\s/.test(line[0])) return undefined;
            } else if (column === model.getLineMaxColumn(lineNumber)) {
                // look only left
                if (/\s/.test(line[line.length - 1])) return undefined;
            } else {
                // look left and right
                if (/\s/.test(line[column - 2]) && /\s/.test(line[column - 1])) return undefined;
            }
        }
        return selection;
    }
    _createEventAndSignalChange(trigger, selection) {
        const model = this._editor.getModel();
        if (!selection || !model) {
            // cancel
            this._signalChange(undefined);
            return undefined;
        }
        const markerRange = this._getRangeOfMarker(selection);
        const position = markerRange ? markerRange.getStartPosition() : selection.getStartPosition();
        const e = {
            trigger: trigger,
            selection: selection,
            position: position
        };
        this._signalChange(e);
        return e;
    }
    constructor(_editor, _markerService, _signalChange, _delay = 250){
        super();
        this._editor = _editor;
        this._markerService = _markerService;
        this._signalChange = _signalChange;
        this._delay = _delay;
        this._autoTriggerTimer = this._register(new (0, $eFOsn.TimeoutTimer)());
        this._register(this._markerService.onMarkerChanged((e)=>this._onMarkerChanges(e)));
        this._register(this._editor.onDidChangeCursorPosition(()=>this._onCursorChange()));
    }
}
var $2369698a90acb466$export$6e13bf9b6b21a756;
(function(CodeActionsState) {
    CodeActionsState.Empty = {
        type: 0 /* Empty */ 
    };
    class Triggered {
        cancel() {
            this._cancellablePromise.cancel();
        }
        constructor(trigger, rangeOrSelection, position, _cancellablePromise){
            this.trigger = trigger;
            this.rangeOrSelection = rangeOrSelection;
            this.position = position;
            this._cancellablePromise = _cancellablePromise;
            this.type = 1 /* Triggered */ ;
            this.actions = _cancellablePromise.catch((e)=>{
                if ((0, $g0782.isPromiseCanceledError)(e)) return $2369698a90acb466$var$emptyCodeActionSet;
                throw e;
            });
        }
    }
    CodeActionsState.Triggered = Triggered;
})($2369698a90acb466$export$6e13bf9b6b21a756 || ($2369698a90acb466$export$6e13bf9b6b21a756 = {}));
const $2369698a90acb466$var$emptyCodeActionSet = {
    allActions: [],
    validActions: [],
    dispose: ()=>{},
    documentation: [],
    hasAutoFix: false
};
class $2369698a90acb466$export$d2ba69ecaab87b2c extends (0, $atiRx.Disposable) {
    dispose() {
        if ($2369698a90acb466$var$__classPrivateFieldGet(this, $2369698a90acb466$var$_CodeActionModel_isDisposed, "f")) return;
        $2369698a90acb466$var$__classPrivateFieldSet(this, $2369698a90acb466$var$_CodeActionModel_isDisposed, true, "f");
        super.dispose();
        this.setState($2369698a90acb466$export$6e13bf9b6b21a756.Empty, true);
    }
    _update() {
        if ($2369698a90acb466$var$__classPrivateFieldGet(this, $2369698a90acb466$var$_CodeActionModel_isDisposed, "f")) return;
        this._codeActionOracle.value = undefined;
        this.setState($2369698a90acb466$export$6e13bf9b6b21a756.Empty);
        const model = this._editor.getModel();
        if (model && (0, $eKhCe.CodeActionProviderRegistry).has(model) && !this._editor.getOption(80 /* readOnly */ )) {
            const supportedActions = [];
            for (const provider of (0, $eKhCe.CodeActionProviderRegistry).all(model))if (Array.isArray(provider.providedCodeActionKinds)) supportedActions.push(...provider.providedCodeActionKinds);
            this._supportedCodeActions.set(supportedActions.join(" "));
            this._codeActionOracle.value = new $2369698a90acb466$var$CodeActionOracle(this._editor, this._markerService, (trigger)=>{
                var _a;
                if (!trigger) {
                    this.setState($2369698a90acb466$export$6e13bf9b6b21a756.Empty);
                    return;
                }
                const actions = (0, $eFOsn.createCancelablePromise)((token)=>(0, $3c8987ef19ae5b59$exports.getCodeActions)(model, trigger.selection, trigger.trigger, (0, $9xODy.Progress).None, token));
                if (trigger.trigger.type === 1 /* Invoke */ ) (_a = this._progressService) === null || _a === void 0 || _a.showWhile(actions, 250);
                this.setState(new $2369698a90acb466$export$6e13bf9b6b21a756.Triggered(trigger.trigger, trigger.selection, trigger.position, actions));
            }, undefined);
            this._codeActionOracle.value.trigger({
                type: 2 /* Auto */ 
            });
        } else this._supportedCodeActions.reset();
    }
    trigger(trigger) {
        if (this._codeActionOracle.value) this._codeActionOracle.value.trigger(trigger);
    }
    setState(newState, skipNotify) {
        if (newState === this._state) return;
        // Cancel old request
        if (this._state.type === 1 /* Triggered */ ) this._state.cancel();
        this._state = newState;
        if (!skipNotify && !$2369698a90acb466$var$__classPrivateFieldGet(this, $2369698a90acb466$var$_CodeActionModel_isDisposed, "f")) this._onDidChangeState.fire(newState);
    }
    constructor(_editor, _markerService, contextKeyService, _progressService){
        super();
        this._editor = _editor;
        this._markerService = _markerService;
        this._progressService = _progressService;
        this._codeActionOracle = this._register(new (0, $atiRx.MutableDisposable)());
        this._state = $2369698a90acb466$export$6e13bf9b6b21a756.Empty;
        this._onDidChangeState = this._register(new (0, $fSvkC.Emitter)());
        this.onDidChangeState = this._onDidChangeState.event;
        $2369698a90acb466$var$_CodeActionModel_isDisposed.set(this, false);
        this._supportedCodeActions = $2369698a90acb466$export$1209f8b35536d626.bindTo(contextKeyService);
        this._register(this._editor.onDidChangeModel(()=>this._update()));
        this._register(this._editor.onDidChangeModelLanguage(()=>this._update()));
        this._register((0, $eKhCe.CodeActionProviderRegistry).onDidChange(()=>this._update()));
        this._update();
    }
}
$2369698a90acb466$var$_CodeActionModel_isDisposed = new WeakMap();



/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $c1488eff038c387a$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $c1488eff038c387a$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var $c1488eff038c387a$var$__awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
function $c1488eff038c387a$var$contextKeyForSupportedActions(kind) {
    return (0, $bRtox.ContextKeyExpr).regex((0, $2369698a90acb466$exports.SUPPORTED_CODE_ACTIONS).keys()[0], new RegExp("(\\s|^)" + (0, $9TEeL.escapeRegExpCharacters)(kind.value) + "\\b"));
}
const $c1488eff038c387a$var$argsSchema = {
    type: "object",
    defaultSnippets: [
        {
            body: {
                kind: ""
            }
        }
    ],
    properties: {
        "kind": {
            type: "string",
            description: $58WHl.localize("args.schema.kind", "Kind of the code action to run.")
        },
        "apply": {
            type: "string",
            description: $58WHl.localize("args.schema.apply", "Controls when the returned actions are applied."),
            default: "ifSingle" /* IfSingle */ ,
            enum: [
                "first" /* First */ ,
                "ifSingle" /* IfSingle */ ,
                "never" /* Never */ 
            ],
            enumDescriptions: [
                $58WHl.localize("args.schema.apply.first", "Always apply the first returned code action."),
                $58WHl.localize("args.schema.apply.ifSingle", "Apply the first returned code action if it is the only one."),
                $58WHl.localize("args.schema.apply.never", "Do not apply the returned code actions."), 
            ]
        },
        "preferred": {
            type: "boolean",
            default: false,
            description: $58WHl.localize("args.schema.preferred", "Controls if only preferred code actions should be returned.")
        }
    }
};
let $c1488eff038c387a$export$12bfd62cda48c28c = class QuickFixController extends (0, $atiRx.Disposable) {
    static get(editor) {
        return editor.getContribution(QuickFixController.ID);
    }
    update(newState) {
        this._ui.getValue().update(newState);
    }
    showCodeActions(trigger, actions, at) {
        return this._ui.getValue().showCodeActionList(trigger, actions, at, {
            includeDisabledActions: false
        });
    }
    manualTriggerAtCurrentPosition(notAvailableMessage, filter, autoApply) {
        if (!this._editor.hasModel()) return;
        (0, $fd39257ccc55be8e$exports.MessageController).get(this._editor).closeMessage();
        const triggerPosition = this._editor.getPosition();
        this._trigger({
            type: 1 /* Invoke */ ,
            filter: filter,
            autoApply: autoApply,
            context: {
                notAvailableMessage: notAvailableMessage,
                position: triggerPosition
            }
        });
    }
    _trigger(trigger) {
        return this._model.trigger(trigger);
    }
    _applyCodeAction(action) {
        return this._instantiationService.invokeFunction($c1488eff038c387a$export$69c5fd17c7ee0695, action, this._editor);
    }
    constructor(editor, markerService, contextKeyService, progressService, _instantiationService){
        super();
        this._instantiationService = _instantiationService;
        this._editor = editor;
        this._model = this._register(new (0, $2369698a90acb466$exports.CodeActionModel)(this._editor, markerService, contextKeyService, progressService));
        this._register(this._model.onDidChangeState((newState)=>this.update(newState)));
        this._ui = new (0, $44551a9ce7cb9453$export$b624eff549462981)(()=>this._register(new (0, $0f1998e2dcd6e887$exports.CodeActionUi)(editor, $c1488eff038c387a$export$882e0ee127a25fbb.Id, $c1488eff038c387a$export$2bffd38cf19da049.Id, {
                applyCodeAction: (action, retrigger)=>$c1488eff038c387a$var$__awaiter(this, void 0, void 0, function*() {
                        try {
                            yield this._applyCodeAction(action);
                        } finally{
                            if (retrigger) this._trigger({
                                type: 2 /* Auto */ ,
                                filter: {}
                            });
                        }
                    })
            }, this._instantiationService)));
    }
};
$c1488eff038c387a$export$12bfd62cda48c28c.ID = "editor.contrib.quickFixController";
$c1488eff038c387a$export$12bfd62cda48c28c = $c1488eff038c387a$var$__decorate([
    $c1488eff038c387a$var$__param(1, (0, $bnsNn.IMarkerService)),
    $c1488eff038c387a$var$__param(2, (0, $bRtox.IContextKeyService)),
    $c1488eff038c387a$var$__param(3, (0, $9xODy.IEditorProgressService)),
    $c1488eff038c387a$var$__param(4, (0, $iZW67.IInstantiationService))
], $c1488eff038c387a$export$12bfd62cda48c28c);
function $c1488eff038c387a$export$69c5fd17c7ee0695(accessor, item, editor) {
    return $c1488eff038c387a$var$__awaiter(this, void 0, void 0, function*() {
        const bulkEditService = accessor.get((0, $5N8h4.IBulkEditService));
        const commandService = accessor.get((0, $fAXtX.ICommandService));
        const telemetryService = accessor.get((0, $2EG7I.ITelemetryService));
        const notificationService = accessor.get((0, $dgZ0t.INotificationService));
        telemetryService.publicLog2("codeAction.applyCodeAction", {
            codeActionTitle: item.action.title,
            codeActionKind: item.action.kind,
            codeActionIsPreferred: !!item.action.isPreferred
        });
        yield item.resolve((0, $gnEXx.CancellationToken).None);
        if (item.action.edit) yield bulkEditService.apply((0, $5N8h4.ResourceEdit).convert(item.action.edit), {
            editor: editor,
            label: item.action.title
        });
        if (item.action.command) try {
            yield commandService.executeCommand(item.action.command.id, ...item.action.command.arguments || []);
        } catch (err) {
            const message = $c1488eff038c387a$var$asMessage(err);
            notificationService.error(typeof message === "string" ? message : $58WHl.localize("applyCodeActionFailed", "An unknown error occurred while applying the code action"));
        }
    });
}
function $c1488eff038c387a$var$asMessage(err) {
    if (typeof err === "string") return err;
    else if (err instanceof Error && typeof err.message === "string") return err.message;
    else return undefined;
}
function $c1488eff038c387a$var$triggerCodeActionsForEditorSelection(editor, notAvailableMessage, filter, autoApply) {
    if (editor.hasModel()) {
        const controller = $c1488eff038c387a$export$12bfd62cda48c28c.get(editor);
        if (controller) controller.manualTriggerAtCurrentPosition(notAvailableMessage, filter, autoApply);
    }
}
class $c1488eff038c387a$export$882e0ee127a25fbb extends (0, $gGOeQ.EditorAction) {
    run(_accessor, editor) {
        return $c1488eff038c387a$var$triggerCodeActionsForEditorSelection(editor, $58WHl.localize("editor.action.quickFix.noneMessage", "No code actions available"), undefined, undefined);
    }
    constructor(){
        super({
            id: $c1488eff038c387a$export$882e0ee127a25fbb.Id,
            label: $58WHl.localize("quickfix.trigger.label", "Quick Fix..."),
            alias: "Quick Fix...",
            precondition: (0, $bRtox.ContextKeyExpr).and((0, $bdLce.EditorContextKeys).writable, (0, $bdLce.EditorContextKeys).hasCodeActionsProvider),
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: 2132 /* Period */ ,
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
$c1488eff038c387a$export$882e0ee127a25fbb.Id = "editor.action.quickFix";
class $c1488eff038c387a$export$94d24ce7f8ca1f8c extends (0, $gGOeQ.EditorCommand) {
    runEditorCommand(_accessor, editor, userArgs) {
        const args = (0, $76aa5b67436f3853$export$b4557d8a7419d430).fromUser(userArgs, {
            kind: (0, $76aa5b67436f3853$export$c72b5966cfff6b4d).Empty,
            apply: "ifSingle" /* IfSingle */ 
        });
        return $c1488eff038c387a$var$triggerCodeActionsForEditorSelection(editor, typeof (userArgs === null || userArgs === void 0 ? void 0 : userArgs.kind) === "string" ? args.preferred ? $58WHl.localize("editor.action.codeAction.noneMessage.preferred.kind", "No preferred code actions for '{0}' available", userArgs.kind) : $58WHl.localize("editor.action.codeAction.noneMessage.kind", "No code actions for '{0}' available", userArgs.kind) : args.preferred ? $58WHl.localize("editor.action.codeAction.noneMessage.preferred", "No preferred code actions available") : $58WHl.localize("editor.action.codeAction.noneMessage", "No code actions available"), {
            include: args.kind,
            includeSourceActions: true,
            onlyIncludePreferredActions: args.preferred
        }, args.apply);
    }
    constructor(){
        super({
            id: (0, $3c8987ef19ae5b59$exports.codeActionCommandId),
            precondition: (0, $bRtox.ContextKeyExpr).and((0, $bdLce.EditorContextKeys).writable, (0, $bdLce.EditorContextKeys).hasCodeActionsProvider),
            description: {
                description: "Trigger a code action",
                args: [
                    {
                        name: "args",
                        schema: $c1488eff038c387a$var$argsSchema
                    }
                ]
            }
        });
    }
}
class $c1488eff038c387a$export$717c8b29cf6c7de0 extends (0, $gGOeQ.EditorAction) {
    run(_accessor, editor, userArgs) {
        const args = (0, $76aa5b67436f3853$export$b4557d8a7419d430).fromUser(userArgs, {
            kind: (0, $76aa5b67436f3853$export$c72b5966cfff6b4d).Refactor,
            apply: "never" /* Never */ 
        });
        return $c1488eff038c387a$var$triggerCodeActionsForEditorSelection(editor, typeof (userArgs === null || userArgs === void 0 ? void 0 : userArgs.kind) === "string" ? args.preferred ? $58WHl.localize("editor.action.refactor.noneMessage.preferred.kind", "No preferred refactorings for '{0}' available", userArgs.kind) : $58WHl.localize("editor.action.refactor.noneMessage.kind", "No refactorings for '{0}' available", userArgs.kind) : args.preferred ? $58WHl.localize("editor.action.refactor.noneMessage.preferred", "No preferred refactorings available") : $58WHl.localize("editor.action.refactor.noneMessage", "No refactorings available"), {
            include: (0, $76aa5b67436f3853$export$c72b5966cfff6b4d).Refactor.contains(args.kind) ? args.kind : (0, $76aa5b67436f3853$export$c72b5966cfff6b4d).None,
            onlyIncludePreferredActions: args.preferred
        }, args.apply);
    }
    constructor(){
        super({
            id: (0, $3c8987ef19ae5b59$exports.refactorCommandId),
            label: $58WHl.localize("refactor.label", "Refactor..."),
            alias: "Refactor...",
            precondition: (0, $bRtox.ContextKeyExpr).and((0, $bdLce.EditorContextKeys).writable, (0, $bdLce.EditorContextKeys).hasCodeActionsProvider),
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: 3120 /* KeyR */ ,
                mac: {
                    primary: 1328 /* KeyR */ 
                },
                weight: 100 /* EditorContrib */ 
            },
            contextMenuOpts: {
                group: "1_modification",
                order: 2,
                when: (0, $bRtox.ContextKeyExpr).and((0, $bdLce.EditorContextKeys).writable, $c1488eff038c387a$var$contextKeyForSupportedActions((0, $76aa5b67436f3853$export$c72b5966cfff6b4d).Refactor))
            },
            description: {
                description: "Refactor...",
                args: [
                    {
                        name: "args",
                        schema: $c1488eff038c387a$var$argsSchema
                    }
                ]
            }
        });
    }
}
class $c1488eff038c387a$export$6754a4b1b720e9fb extends (0, $gGOeQ.EditorAction) {
    run(_accessor, editor, userArgs) {
        const args = (0, $76aa5b67436f3853$export$b4557d8a7419d430).fromUser(userArgs, {
            kind: (0, $76aa5b67436f3853$export$c72b5966cfff6b4d).Source,
            apply: "never" /* Never */ 
        });
        return $c1488eff038c387a$var$triggerCodeActionsForEditorSelection(editor, typeof (userArgs === null || userArgs === void 0 ? void 0 : userArgs.kind) === "string" ? args.preferred ? $58WHl.localize("editor.action.source.noneMessage.preferred.kind", "No preferred source actions for '{0}' available", userArgs.kind) : $58WHl.localize("editor.action.source.noneMessage.kind", "No source actions for '{0}' available", userArgs.kind) : args.preferred ? $58WHl.localize("editor.action.source.noneMessage.preferred", "No preferred source actions available") : $58WHl.localize("editor.action.source.noneMessage", "No source actions available"), {
            include: (0, $76aa5b67436f3853$export$c72b5966cfff6b4d).Source.contains(args.kind) ? args.kind : (0, $76aa5b67436f3853$export$c72b5966cfff6b4d).None,
            includeSourceActions: true,
            onlyIncludePreferredActions: args.preferred
        }, args.apply);
    }
    constructor(){
        super({
            id: (0, $3c8987ef19ae5b59$exports.sourceActionCommandId),
            label: $58WHl.localize("source.label", "Source Action..."),
            alias: "Source Action...",
            precondition: (0, $bRtox.ContextKeyExpr).and((0, $bdLce.EditorContextKeys).writable, (0, $bdLce.EditorContextKeys).hasCodeActionsProvider),
            contextMenuOpts: {
                group: "1_modification",
                order: 2.1,
                when: (0, $bRtox.ContextKeyExpr).and((0, $bdLce.EditorContextKeys).writable, $c1488eff038c387a$var$contextKeyForSupportedActions((0, $76aa5b67436f3853$export$c72b5966cfff6b4d).Source))
            },
            description: {
                description: "Source Action...",
                args: [
                    {
                        name: "args",
                        schema: $c1488eff038c387a$var$argsSchema
                    }
                ]
            }
        });
    }
}
class $c1488eff038c387a$export$839e26b4813ba04c extends (0, $gGOeQ.EditorAction) {
    run(_accessor, editor) {
        return $c1488eff038c387a$var$triggerCodeActionsForEditorSelection(editor, $58WHl.localize("editor.action.organize.noneMessage", "No organize imports action available"), {
            include: (0, $76aa5b67436f3853$export$c72b5966cfff6b4d).SourceOrganizeImports,
            includeSourceActions: true
        }, "ifSingle" /* IfSingle */ );
    }
    constructor(){
        super({
            id: (0, $3c8987ef19ae5b59$exports.organizeImportsCommandId),
            label: $58WHl.localize("organizeImports.label", "Organize Imports"),
            alias: "Organize Imports",
            precondition: (0, $bRtox.ContextKeyExpr).and((0, $bdLce.EditorContextKeys).writable, $c1488eff038c387a$var$contextKeyForSupportedActions((0, $76aa5b67436f3853$export$c72b5966cfff6b4d).SourceOrganizeImports)),
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: 1581 /* KeyO */ ,
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
class $c1488eff038c387a$export$900fefaddb0995e3 extends (0, $gGOeQ.EditorAction) {
    run(_accessor, editor) {
        return $c1488eff038c387a$var$triggerCodeActionsForEditorSelection(editor, $58WHl.localize("fixAll.noneMessage", "No fix all action available"), {
            include: (0, $76aa5b67436f3853$export$c72b5966cfff6b4d).SourceFixAll,
            includeSourceActions: true
        }, "ifSingle" /* IfSingle */ );
    }
    constructor(){
        super({
            id: (0, $3c8987ef19ae5b59$exports.fixAllCommandId),
            label: $58WHl.localize("fixAll.label", "Fix All"),
            alias: "Fix All",
            precondition: (0, $bRtox.ContextKeyExpr).and((0, $bdLce.EditorContextKeys).writable, $c1488eff038c387a$var$contextKeyForSupportedActions((0, $76aa5b67436f3853$export$c72b5966cfff6b4d).SourceFixAll))
        });
    }
}
class $c1488eff038c387a$export$2bffd38cf19da049 extends (0, $gGOeQ.EditorAction) {
    run(_accessor, editor) {
        return $c1488eff038c387a$var$triggerCodeActionsForEditorSelection(editor, $58WHl.localize("editor.action.autoFix.noneMessage", "No auto fixes available"), {
            include: (0, $76aa5b67436f3853$export$c72b5966cfff6b4d).QuickFix,
            onlyIncludePreferredActions: true
        }, "ifSingle" /* IfSingle */ );
    }
    constructor(){
        super({
            id: $c1488eff038c387a$export$2bffd38cf19da049.Id,
            label: $58WHl.localize("autoFix.label", "Auto Fix..."),
            alias: "Auto Fix...",
            precondition: (0, $bRtox.ContextKeyExpr).and((0, $bdLce.EditorContextKeys).writable, $c1488eff038c387a$var$contextKeyForSupportedActions((0, $76aa5b67436f3853$export$c72b5966cfff6b4d).QuickFix)),
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: 1620 /* Period */ ,
                mac: {
                    primary: 2644 /* Period */ 
                },
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
$c1488eff038c387a$export$2bffd38cf19da049.Id = "editor.action.autoFix";


(0, $gGOeQ.registerEditorContribution)((0, $c1488eff038c387a$exports.QuickFixController).ID, (0, $c1488eff038c387a$exports.QuickFixController));
(0, $gGOeQ.registerEditorAction)((0, $c1488eff038c387a$exports.QuickFixAction));
(0, $gGOeQ.registerEditorAction)((0, $c1488eff038c387a$exports.RefactorAction));
(0, $gGOeQ.registerEditorAction)((0, $c1488eff038c387a$exports.SourceAction));
(0, $gGOeQ.registerEditorAction)((0, $c1488eff038c387a$exports.OrganizeImportsAction));
(0, $gGOeQ.registerEditorAction)((0, $c1488eff038c387a$exports.AutoFixAction));
(0, $gGOeQ.registerEditorAction)((0, $c1488eff038c387a$exports.FixAllAction));
(0, $gGOeQ.registerEditorCommand)(new (0, $c1488eff038c387a$exports.CodeActionCommand)());


var $6c4d1d007163d6a7$exports = {};

var $jOYcd = parcelRequire("jOYcd");

var $eFOsn = parcelRequire("eFOsn");

var $g0782 = parcelRequire("g0782");

var $cQRg9 = parcelRequire("cQRg9");

var $atiRx = parcelRequire("atiRx");

var $iVwSq = parcelRequire("iVwSq");

var $gGOeQ = parcelRequire("gGOeQ");

var $3xLkU = parcelRequire("3xLkU");

var $bdLce = parcelRequire("bdLce");

var $eKhCe = parcelRequire("eKhCe");

var $lkrXF = parcelRequire("lkrXF");
var $513f443c4625f780$exports = {};

$parcel$export($513f443c4625f780$exports, "CodeLensModel", function () { return $513f443c4625f780$export$c6268d20d31c03ba; }, function (v) { return $513f443c4625f780$export$c6268d20d31c03ba = v; });
$parcel$export($513f443c4625f780$exports, "getCodeLensModel", function () { return $513f443c4625f780$export$bebcff98c7e74873; }, function (v) { return $513f443c4625f780$export$bebcff98c7e74873 = v; });

var $gnEXx = parcelRequire("gnEXx");

var $g0782 = parcelRequire("g0782");

var $atiRx = parcelRequire("atiRx");

var $3ICxR = parcelRequire("3ICxR");

var $7K96x = parcelRequire("7K96x");

var $eKhCe = parcelRequire("eKhCe");

var $dwrPd = parcelRequire("dwrPd");

var $fAXtX = parcelRequire("fAXtX");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $513f443c4625f780$var$__awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class $513f443c4625f780$export$c6268d20d31c03ba {
    dispose() {
        this._disposables.dispose();
    }
    add(list, provider) {
        this._disposables.add(list);
        for (const symbol of list.lenses)this.lenses.push({
            symbol: symbol,
            provider: provider
        });
    }
    constructor(){
        this.lenses = [];
        this._disposables = new (0, $atiRx.DisposableStore)();
    }
}
function $513f443c4625f780$export$bebcff98c7e74873(model, token) {
    return $513f443c4625f780$var$__awaiter(this, void 0, void 0, function*() {
        const provider = (0, $eKhCe.CodeLensProviderRegistry).ordered(model);
        const providerRanks = new Map();
        const result = new $513f443c4625f780$export$c6268d20d31c03ba();
        const promises = provider.map((provider, i)=>$513f443c4625f780$var$__awaiter(this, void 0, void 0, function*() {
                providerRanks.set(provider, i);
                try {
                    const list = yield Promise.resolve(provider.provideCodeLenses(model, token));
                    if (list) result.add(list, provider);
                } catch (err) {
                    (0, $g0782.onUnexpectedExternalError)(err);
                }
            }));
        yield Promise.all(promises);
        result.lenses = result.lenses.sort((a, b)=>{
            // sort by lineNumber, provider-rank, and column
            if (a.symbol.range.startLineNumber < b.symbol.range.startLineNumber) return -1;
            else if (a.symbol.range.startLineNumber > b.symbol.range.startLineNumber) return 1;
            else if (providerRanks.get(a.provider) < providerRanks.get(b.provider)) return -1;
            else if (providerRanks.get(a.provider) > providerRanks.get(b.provider)) return 1;
            else if (a.symbol.range.startColumn < b.symbol.range.startColumn) return -1;
            else if (a.symbol.range.startColumn > b.symbol.range.startColumn) return 1;
            else return 0;
        });
        return result;
    });
}
(0, $fAXtX.CommandsRegistry).registerCommand("_executeCodeLensProvider", function(accessor, ...args) {
    let [uri, itemResolveCount] = args;
    (0, $3ICxR.assertType)((0, $7K96x.URI).isUri(uri));
    (0, $3ICxR.assertType)(typeof itemResolveCount === "number" || !itemResolveCount);
    const model = accessor.get((0, $dwrPd.IModelService)).getModel(uri);
    if (!model) throw (0, $g0782.illegalArgument)();
    const result = [];
    const disposables = new (0, $atiRx.DisposableStore)();
    return $513f443c4625f780$export$bebcff98c7e74873(model, (0, $gnEXx.CancellationToken).None).then((value)=>{
        disposables.add(value);
        let resolve = [];
        for (const item of value.lenses){
            if (itemResolveCount === undefined || itemResolveCount === null || Boolean(item.symbol.command)) result.push(item.symbol);
            else if (itemResolveCount-- > 0 && item.provider.resolveCodeLens) resolve.push(Promise.resolve(item.provider.resolveCodeLens(model, item.symbol, (0, $gnEXx.CancellationToken).None)).then((symbol)=>result.push(symbol || item.symbol)));
        }
        return Promise.all(resolve);
    }).then(()=>{
        return result;
    }).finally(()=>{
        // make sure to return results, then (on next tick)
        // dispose the results
        setTimeout(()=>disposables.dispose(), 100);
    });
});


var $7f1a460a30d70a4f$exports = {};

$parcel$export($7f1a460a30d70a4f$exports, "ICodeLensCache", function () { return $7f1a460a30d70a4f$export$49a51fe6a3a59e77; }, function (v) { return $7f1a460a30d70a4f$export$49a51fe6a3a59e77 = v; });

var $eFOsn = parcelRequire("eFOsn");

var $6q0hA = parcelRequire("6q0hA");

var $4HO2P = parcelRequire("4HO2P");

var $3HpR4 = parcelRequire("3HpR4");


var $6pFSu = parcelRequire("6pFSu");

var $iZW67 = parcelRequire("iZW67");

var $6XVdL = parcelRequire("6XVdL");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $7f1a460a30d70a4f$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $7f1a460a30d70a4f$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
const $7f1a460a30d70a4f$export$49a51fe6a3a59e77 = (0, $iZW67.createDecorator)("ICodeLensCache");
class $7f1a460a30d70a4f$var$CacheItem {
    constructor(lineCount, data){
        this.lineCount = lineCount;
        this.data = data;
    }
}
let $7f1a460a30d70a4f$export$ff670dd45c13b8eb = class CodeLensCache {
    put(model, data) {
        // create a copy of the model that is without command-ids
        // but with comand-labels
        const copyItems = data.lenses.map((item)=>{
            var _a;
            return {
                range: item.symbol.range,
                command: item.symbol.command && {
                    id: "",
                    title: (_a = item.symbol.command) === null || _a === void 0 ? void 0 : _a.title
                }
            };
        });
        const copyModel = new (0, $513f443c4625f780$exports.CodeLensModel)();
        copyModel.add({
            lenses: copyItems,
            dispose: ()=>{}
        }, this._fakeProvider);
        const item = new $7f1a460a30d70a4f$var$CacheItem(model.getLineCount(), copyModel);
        this._cache.set(model.uri.toString(), item);
    }
    get(model) {
        const item = this._cache.get(model.uri.toString());
        return item && item.lineCount === model.getLineCount() ? item.data : undefined;
    }
    delete(model) {
        this._cache.delete(model.uri.toString());
    }
    // --- persistence
    _serialize() {
        const data = Object.create(null);
        for (const [key, value] of this._cache){
            const lines = new Set();
            for (const d of value.data.lenses)lines.add(d.symbol.range.startLineNumber);
            data[key] = {
                lineCount: value.lineCount,
                lines: [
                    ...lines.values()
                ]
            };
        }
        return JSON.stringify(data);
    }
    _deserialize(raw) {
        try {
            const data = JSON.parse(raw);
            for(const key in data){
                const element = data[key];
                const lenses = [];
                for (const line of element.lines)lenses.push({
                    range: new (0, $3HpR4.Range)(line, 1, line, 11)
                });
                const model = new (0, $513f443c4625f780$exports.CodeLensModel)();
                model.add({
                    lenses: lenses,
                    dispose () {}
                }, this._fakeProvider);
                this._cache.set(key, new $7f1a460a30d70a4f$var$CacheItem(element.lineCount, model));
            }
        } catch (_a) {
        // ignore...
        }
    }
    constructor(storageService){
        this._fakeProvider = new class {
            provideCodeLenses() {
                throw new Error("not supported");
            }
        };
        this._cache = new (0, $4HO2P.LRUCache)(20, 0.75);
        // remove old data
        const oldkey = "codelens/cache";
        (0, $eFOsn.runWhenIdle)(()=>storageService.remove(oldkey, 1 /* WORKSPACE */ ));
        // restore lens data on start
        const key = "codelens/cache2";
        const raw = storageService.get(key, 1 /* WORKSPACE */ , "{}");
        this._deserialize(raw);
        // store lens data on shutdown
        (0, $6q0hA.once)(storageService.onWillSaveState)((e)=>{
            if (e.reason === (0, $6XVdL.WillSaveStateReason).SHUTDOWN) storageService.store(key, this._serialize(), 1 /* WORKSPACE */ , 1 /* MACHINE */ );
        });
    }
};
$7f1a460a30d70a4f$export$ff670dd45c13b8eb = $7f1a460a30d70a4f$var$__decorate([
    $7f1a460a30d70a4f$var$__param(0, (0, $6XVdL.IStorageService))
], $7f1a460a30d70a4f$export$ff670dd45c13b8eb);
(0, $6pFSu.registerSingleton)($7f1a460a30d70a4f$export$49a51fe6a3a59e77, $7f1a460a30d70a4f$export$ff670dd45c13b8eb);



var $jOYcd = parcelRequire("jOYcd");

var $7Kngw = parcelRequire("7Kngw");


var $3HpR4 = parcelRequire("3HpR4");

var $g88WD = parcelRequire("g88WD");
class $b249f60aea22b200$var$CodeLensViewZone {
    onComputedHeight(height) {
        if (this._lastHeight === undefined) this._lastHeight = height;
        else if (this._lastHeight !== height) {
            this._lastHeight = height;
            this._onHeight();
        }
    }
    isVisible() {
        return this._lastHeight !== 0 && this.domNode.hasAttribute("monaco-visible-view-zone");
    }
    constructor(afterLineNumber, heightInPx, onHeight){
        this.afterLineNumber = afterLineNumber;
        this.heightInPx = heightInPx;
        this._onHeight = onHeight;
        this.suppressMouseDown = true;
        this.domNode = document.createElement("div");
    }
}
class $b249f60aea22b200$var$CodeLensContentWidget {
    withCommands(lenses, animate) {
        this._commands.clear();
        let children = [];
        let hasSymbol = false;
        for(let i = 0; i < lenses.length; i++){
            const lens = lenses[i];
            if (!lens) continue;
            hasSymbol = true;
            if (lens.command) {
                const title = (0, $7Kngw.renderLabelWithIcons)(lens.command.title.trim());
                if (lens.command.id) {
                    children.push($jOYcd.$("a", {
                        id: String(i),
                        title: lens.command.tooltip
                    }, ...title));
                    this._commands.set(String(i), lens.command);
                } else children.push($jOYcd.$("span", {
                    title: lens.command.tooltip
                }, ...title));
                if (i + 1 < lenses.length) children.push($jOYcd.$("span", undefined, "\xa0|\xa0"));
            }
        }
        if (!hasSymbol) // symbols but no commands
        $jOYcd.reset(this._domNode, $jOYcd.$("span", undefined, "no commands"));
        else {
            // symbols and commands
            $jOYcd.reset(this._domNode, ...children);
            if (this._isEmpty && animate) this._domNode.classList.add("fadein");
            this._isEmpty = false;
        }
    }
    getCommand(link) {
        return link.parentElement === this._domNode ? this._commands.get(link.id) : undefined;
    }
    getId() {
        return this._id;
    }
    getDomNode() {
        return this._domNode;
    }
    updatePosition(line) {
        const column = this._editor.getModel().getLineFirstNonWhitespaceColumn(line);
        this._widgetPosition = {
            position: {
                lineNumber: line,
                column: column
            },
            preference: [
                1 /* ABOVE */ 
            ]
        };
    }
    getPosition() {
        return this._widgetPosition || null;
    }
    constructor(editor, className, line){
        // Editor.IContentWidget.allowEditorOverflow
        this.allowEditorOverflow = false;
        this.suppressMouseDown = true;
        this._commands = new Map();
        this._isEmpty = true;
        this._editor = editor;
        this._id = `codelens.widget-${$b249f60aea22b200$var$CodeLensContentWidget._idPool++}`;
        this.updatePosition(line);
        this._domNode = document.createElement("span");
        this._domNode.className = `codelens-decoration ${className}`;
    }
}
$b249f60aea22b200$var$CodeLensContentWidget._idPool = 0;
class $b249f60aea22b200$export$76bdebf29cc4b59e {
    addDecoration(decoration, callback) {
        this._addDecorations.push(decoration);
        this._addDecorationsCallbacks.push(callback);
    }
    removeDecoration(decorationId) {
        this._removeDecorations.push(decorationId);
    }
    commit(changeAccessor) {
        let resultingDecorations = changeAccessor.deltaDecorations(this._removeDecorations, this._addDecorations);
        for(let i = 0, len = resultingDecorations.length; i < len; i++)this._addDecorationsCallbacks[i](resultingDecorations[i]);
    }
    constructor(){
        this._removeDecorations = [];
        this._addDecorations = [];
        this._addDecorationsCallbacks = [];
    }
}
class $b249f60aea22b200$export$c4760329dfff1b1c {
    _createContentWidgetIfNecessary() {
        if (!this._contentWidget) {
            this._contentWidget = new $b249f60aea22b200$var$CodeLensContentWidget(this._editor, this._className, this._viewZone.afterLineNumber + 1);
            this._editor.addContentWidget(this._contentWidget);
        } else this._editor.layoutContentWidget(this._contentWidget);
    }
    dispose(helper, viewZoneChangeAccessor) {
        this._decorationIds.forEach(helper.removeDecoration, helper);
        this._decorationIds = [];
        if (viewZoneChangeAccessor) viewZoneChangeAccessor.removeZone(this._viewZoneId);
        if (this._contentWidget) {
            this._editor.removeContentWidget(this._contentWidget);
            this._contentWidget = undefined;
        }
        this._isDisposed = true;
    }
    isDisposed() {
        return this._isDisposed;
    }
    isValid() {
        return this._decorationIds.some((id, i)=>{
            const range = this._editor.getModel().getDecorationRange(id);
            const symbol = this._data[i].symbol;
            return !!(range && (0, $3HpR4.Range).isEmpty(symbol.range) === range.isEmpty());
        });
    }
    updateCodeLensSymbols(data, helper) {
        this._decorationIds.forEach(helper.removeDecoration, helper);
        this._decorationIds = [];
        this._data = data;
        this._data.forEach((codeLensData, i)=>{
            helper.addDecoration({
                range: codeLensData.symbol.range,
                options: (0, $g88WD.ModelDecorationOptions).EMPTY
            }, (id)=>this._decorationIds[i] = id);
        });
    }
    updateHeight(height, viewZoneChangeAccessor) {
        this._viewZone.heightInPx = height;
        viewZoneChangeAccessor.layoutZone(this._viewZoneId);
        if (this._contentWidget) this._editor.layoutContentWidget(this._contentWidget);
    }
    computeIfNecessary(model) {
        if (!this._viewZone.isVisible()) return null;
        // Read editor current state
        for(let i = 0; i < this._decorationIds.length; i++){
            const range = model.getDecorationRange(this._decorationIds[i]);
            if (range) this._data[i].symbol.range = range;
        }
        return this._data;
    }
    updateCommands(symbols) {
        this._createContentWidgetIfNecessary();
        this._contentWidget.withCommands(symbols, true);
        for(let i = 0; i < this._data.length; i++){
            const resolved = symbols[i];
            if (resolved) {
                const { symbol: symbol  } = this._data[i];
                symbol.command = resolved.command || symbol.command;
            }
        }
    }
    getCommand(link) {
        var _a;
        return (_a = this._contentWidget) === null || _a === void 0 ? void 0 : _a.getCommand(link);
    }
    getLineNumber() {
        const range = this._editor.getModel().getDecorationRange(this._decorationIds[0]);
        if (range) return range.startLineNumber;
        return -1;
    }
    update(viewZoneChangeAccessor) {
        if (this.isValid()) {
            const range = this._editor.getModel().getDecorationRange(this._decorationIds[0]);
            if (range) {
                this._viewZone.afterLineNumber = range.startLineNumber - 1;
                viewZoneChangeAccessor.layoutZone(this._viewZoneId);
                if (this._contentWidget) {
                    this._contentWidget.updatePosition(range.startLineNumber);
                    this._editor.layoutContentWidget(this._contentWidget);
                }
            }
        }
    }
    getItems() {
        return this._data;
    }
    constructor(data, editor, className, helper, viewZoneChangeAccessor, heightInPx, updateCallback){
        this._isDisposed = false;
        this._editor = editor;
        this._className = className;
        this._data = data;
        // create combined range, track all ranges with decorations,
        // check if there is already something to render
        this._decorationIds = [];
        let range;
        let lenses = [];
        this._data.forEach((codeLensData, i)=>{
            if (codeLensData.symbol.command) lenses.push(codeLensData.symbol);
            helper.addDecoration({
                range: codeLensData.symbol.range,
                options: (0, $g88WD.ModelDecorationOptions).EMPTY
            }, (id)=>this._decorationIds[i] = id);
            // the range contains all lenses on this line
            if (!range) range = (0, $3HpR4.Range).lift(codeLensData.symbol.range);
            else range = (0, $3HpR4.Range).plusRange(range, codeLensData.symbol.range);
        });
        this._viewZone = new $b249f60aea22b200$var$CodeLensViewZone(range.startLineNumber - 1, heightInPx, updateCallback);
        this._viewZoneId = viewZoneChangeAccessor.addZone(this._viewZone);
        if (lenses.length > 0) {
            this._createContentWidgetIfNecessary();
            this._contentWidget.withCommands(lenses, false);
        }
    }
}



var $58WHl = parcelRequire("58WHl");

var $fAXtX = parcelRequire("fAXtX");

var $dgZ0t = parcelRequire("dgZ0t");

var $aqUJX = parcelRequire("aqUJX");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $6c4d1d007163d6a7$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $6c4d1d007163d6a7$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var $6c4d1d007163d6a7$var$__awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
let $6c4d1d007163d6a7$export$2ad2fe275c1424ff = class CodeLensContribution {
    dispose() {
        var _a;
        this._localDispose();
        this._disposables.dispose();
        this._oldCodeLensModels.dispose();
        (_a = this._currentCodeLensModel) === null || _a === void 0 || _a.dispose();
        this._styleElement.remove();
    }
    _getLayoutInfo() {
        let fontSize = this._editor.getOption(16 /* codeLensFontSize */ );
        let codeLensHeight;
        if (!fontSize || fontSize < 5) {
            fontSize = this._editor.getOption(45 /* fontSize */ ) * .9 | 0;
            codeLensHeight = this._editor.getOption(58 /* lineHeight */ );
        } else codeLensHeight = fontSize * Math.max(1.3, this._editor.getOption(58 /* lineHeight */ ) / this._editor.getOption(45 /* fontSize */ )) | 0;
        return {
            codeLensHeight: codeLensHeight,
            fontSize: fontSize
        };
    }
    _updateLensStyle() {
        const { codeLensHeight: codeLensHeight , fontSize: fontSize  } = this._getLayoutInfo();
        const fontFamily = this._editor.getOption(15 /* codeLensFontFamily */ );
        const editorFontInfo = this._editor.getOption(43 /* fontInfo */ );
        const fontFamilyVar = `--codelens-font-family${this._styleClassName}`;
        const fontFeaturesVar = `--codelens-font-features${this._styleClassName}`;
        let newStyle = `
		.monaco-editor .codelens-decoration.${this._styleClassName} { line-height: ${codeLensHeight}px; font-size: ${fontSize}px; padding-right: ${Math.round(fontSize * 0.5)}px; font-feature-settings: var(${fontFeaturesVar}) }
		.monaco-editor .codelens-decoration.${this._styleClassName} span.codicon { line-height: ${codeLensHeight}px; font-size: ${fontSize}px; }
		`;
        if (fontFamily) newStyle += `.monaco-editor .codelens-decoration.${this._styleClassName} { font-family: var(${fontFamilyVar}), ${(0, $3xLkU.EDITOR_FONT_DEFAULTS).fontFamily}}`;
        this._styleElement.textContent = newStyle;
        this._editor.getContainerDomNode().style.setProperty(fontFamilyVar, fontFamily !== null && fontFamily !== void 0 ? fontFamily : "inherit");
        this._editor.getContainerDomNode().style.setProperty(fontFeaturesVar, editorFontInfo.fontFeatureSettings);
        //
        this._editor.changeViewZones((accessor)=>{
            for (let lens of this._lenses)lens.updateHeight(codeLensHeight, accessor);
        });
    }
    _localDispose() {
        var _a, _b, _c;
        (_a = this._getCodeLensModelPromise) === null || _a === void 0 || _a.cancel();
        this._getCodeLensModelPromise = undefined;
        (_b = this._resolveCodeLensesPromise) === null || _b === void 0 || _b.cancel();
        this._resolveCodeLensesPromise = undefined;
        this._localToDispose.clear();
        this._oldCodeLensModels.clear();
        (_c = this._currentCodeLensModel) === null || _c === void 0 || _c.dispose();
    }
    _onModelChange() {
        this._localDispose();
        const model = this._editor.getModel();
        if (!model) return;
        if (!this._editor.getOption(14 /* codeLens */ )) return;
        const cachedLenses = this._codeLensCache.get(model);
        if (cachedLenses) this._renderCodeLensSymbols(cachedLenses);
        if (!(0, $eKhCe.CodeLensProviderRegistry).has(model)) {
            // no provider -> return but check with
            // cached lenses. they expire after 30 seconds
            if (cachedLenses) this._localToDispose.add((0, $eFOsn.disposableTimeout)(()=>{
                const cachedLensesNow = this._codeLensCache.get(model);
                if (cachedLenses === cachedLensesNow) {
                    this._codeLensCache.delete(model);
                    this._onModelChange();
                }
            }, 30000));
            return;
        }
        for (const provider of (0, $eKhCe.CodeLensProviderRegistry).all(model))if (typeof provider.onDidChange === "function") {
            let registration = provider.onDidChange(()=>scheduler.schedule());
            this._localToDispose.add(registration);
        }
        const scheduler = new (0, $eFOsn.RunOnceScheduler)(()=>{
            var _a;
            const t1 = Date.now();
            (_a = this._getCodeLensModelPromise) === null || _a === void 0 || _a.cancel();
            this._getCodeLensModelPromise = (0, $eFOsn.createCancelablePromise)((token)=>(0, $513f443c4625f780$exports.getCodeLensModel)(model, token));
            this._getCodeLensModelPromise.then((result)=>{
                if (this._currentCodeLensModel) this._oldCodeLensModels.add(this._currentCodeLensModel);
                this._currentCodeLensModel = result;
                // cache model to reduce flicker
                this._codeLensCache.put(model, result);
                // update moving average
                const newDelay = this._getCodeLensModelDelays.update(model, Date.now() - t1);
                scheduler.delay = newDelay;
                // render lenses
                this._renderCodeLensSymbols(result);
                // dom.scheduleAtNextAnimationFrame(() => this._resolveCodeLensesInViewport());
                this._resolveCodeLensesInViewportSoon();
            }, (0, $g0782.onUnexpectedError));
        }, this._getCodeLensModelDelays.get(model));
        this._localToDispose.add(scheduler);
        this._localToDispose.add((0, $atiRx.toDisposable)(()=>this._resolveCodeLensesScheduler.cancel()));
        this._localToDispose.add(this._editor.onDidChangeModelContent(()=>{
            this._editor.changeDecorations((decorationsAccessor)=>{
                this._editor.changeViewZones((viewZonesAccessor)=>{
                    let toDispose = [];
                    let lastLensLineNumber = -1;
                    this._lenses.forEach((lens)=>{
                        if (!lens.isValid() || lastLensLineNumber === lens.getLineNumber()) // invalid -> lens collapsed, attach range doesn't exist anymore
                        // line_number -> lenses should never be on the same line
                        toDispose.push(lens);
                        else {
                            lens.update(viewZonesAccessor);
                            lastLensLineNumber = lens.getLineNumber();
                        }
                    });
                    let helper = new (0, $b249f60aea22b200$export$76bdebf29cc4b59e)();
                    toDispose.forEach((l)=>{
                        l.dispose(helper, viewZonesAccessor);
                        this._lenses.splice(this._lenses.indexOf(l), 1);
                    });
                    helper.commit(decorationsAccessor);
                });
            });
            // Ask for all references again
            scheduler.schedule();
        }));
        this._localToDispose.add(this._editor.onDidFocusEditorWidget(()=>{
            scheduler.schedule();
        }));
        this._localToDispose.add(this._editor.onDidScrollChange((e)=>{
            if (e.scrollTopChanged && this._lenses.length > 0) this._resolveCodeLensesInViewportSoon();
        }));
        this._localToDispose.add(this._editor.onDidLayoutChange(()=>{
            this._resolveCodeLensesInViewportSoon();
        }));
        this._localToDispose.add((0, $atiRx.toDisposable)(()=>{
            if (this._editor.getModel()) {
                const scrollState = (0, $iVwSq.StableEditorScrollState).capture(this._editor);
                this._editor.changeDecorations((decorationsAccessor)=>{
                    this._editor.changeViewZones((viewZonesAccessor)=>{
                        this._disposeAllLenses(decorationsAccessor, viewZonesAccessor);
                    });
                });
                scrollState.restore(this._editor);
            } else // No accessors available
            this._disposeAllLenses(undefined, undefined);
        }));
        this._localToDispose.add(this._editor.onMouseDown((e)=>{
            if (e.target.type !== 9 /* CONTENT_WIDGET */ ) return;
            let target = e.target.element;
            if ((target === null || target === void 0 ? void 0 : target.tagName) === "SPAN") target = target.parentElement;
            if ((target === null || target === void 0 ? void 0 : target.tagName) === "A") for (const lens of this._lenses){
                let command = lens.getCommand(target);
                if (command) {
                    this._commandService.executeCommand(command.id, ...command.arguments || []).catch((err)=>this._notificationService.error(err));
                    break;
                }
            }
        }));
        scheduler.schedule();
    }
    _disposeAllLenses(decChangeAccessor, viewZoneChangeAccessor) {
        const helper = new (0, $b249f60aea22b200$export$76bdebf29cc4b59e)();
        for (const lens of this._lenses)lens.dispose(helper, viewZoneChangeAccessor);
        if (decChangeAccessor) helper.commit(decChangeAccessor);
        this._lenses.length = 0;
    }
    _renderCodeLensSymbols(symbols) {
        if (!this._editor.hasModel()) return;
        let maxLineNumber = this._editor.getModel().getLineCount();
        let groups = [];
        let lastGroup;
        for (let symbol of symbols.lenses){
            let line = symbol.symbol.range.startLineNumber;
            if (line < 1 || line > maxLineNumber) continue;
            else if (lastGroup && lastGroup[lastGroup.length - 1].symbol.range.startLineNumber === line) // on same line as previous
            lastGroup.push(symbol);
            else {
                // on later line as previous
                lastGroup = [
                    symbol
                ];
                groups.push(lastGroup);
            }
        }
        const scrollState = (0, $iVwSq.StableEditorScrollState).capture(this._editor);
        const layoutInfo = this._getLayoutInfo();
        this._editor.changeDecorations((decorationsAccessor)=>{
            this._editor.changeViewZones((viewZoneAccessor)=>{
                const helper = new (0, $b249f60aea22b200$export$76bdebf29cc4b59e)();
                let codeLensIndex = 0;
                let groupsIndex = 0;
                while(groupsIndex < groups.length && codeLensIndex < this._lenses.length){
                    let symbolsLineNumber = groups[groupsIndex][0].symbol.range.startLineNumber;
                    let codeLensLineNumber = this._lenses[codeLensIndex].getLineNumber();
                    if (codeLensLineNumber < symbolsLineNumber) {
                        this._lenses[codeLensIndex].dispose(helper, viewZoneAccessor);
                        this._lenses.splice(codeLensIndex, 1);
                    } else if (codeLensLineNumber === symbolsLineNumber) {
                        this._lenses[codeLensIndex].updateCodeLensSymbols(groups[groupsIndex], helper);
                        groupsIndex++;
                        codeLensIndex++;
                    } else {
                        this._lenses.splice(codeLensIndex, 0, new (0, $b249f60aea22b200$export$c4760329dfff1b1c)(groups[groupsIndex], this._editor, this._styleClassName, helper, viewZoneAccessor, layoutInfo.codeLensHeight, ()=>this._resolveCodeLensesInViewportSoon()));
                        codeLensIndex++;
                        groupsIndex++;
                    }
                }
                // Delete extra code lenses
                while(codeLensIndex < this._lenses.length){
                    this._lenses[codeLensIndex].dispose(helper, viewZoneAccessor);
                    this._lenses.splice(codeLensIndex, 1);
                }
                // Create extra symbols
                while(groupsIndex < groups.length){
                    this._lenses.push(new (0, $b249f60aea22b200$export$c4760329dfff1b1c)(groups[groupsIndex], this._editor, this._styleClassName, helper, viewZoneAccessor, layoutInfo.codeLensHeight, ()=>this._resolveCodeLensesInViewportSoon()));
                    groupsIndex++;
                }
                helper.commit(decorationsAccessor);
            });
        });
        scrollState.restore(this._editor);
    }
    _resolveCodeLensesInViewportSoon() {
        const model = this._editor.getModel();
        if (model) this._resolveCodeLensesScheduler.schedule();
    }
    _resolveCodeLensesInViewport() {
        var _a;
        (_a = this._resolveCodeLensesPromise) === null || _a === void 0 || _a.cancel();
        this._resolveCodeLensesPromise = undefined;
        const model = this._editor.getModel();
        if (!model) return;
        const toResolve = [];
        const lenses = [];
        this._lenses.forEach((lens)=>{
            const request = lens.computeIfNecessary(model);
            if (request) {
                toResolve.push(request);
                lenses.push(lens);
            }
        });
        if (toResolve.length === 0) return;
        const t1 = Date.now();
        const resolvePromise = (0, $eFOsn.createCancelablePromise)((token)=>{
            const promises = toResolve.map((request, i)=>{
                const resolvedSymbols = new Array(request.length);
                const promises = request.map((request, i)=>{
                    if (!request.symbol.command && typeof request.provider.resolveCodeLens === "function") return Promise.resolve(request.provider.resolveCodeLens(model, request.symbol, token)).then((symbol)=>{
                        resolvedSymbols[i] = symbol;
                    }, (0, $g0782.onUnexpectedExternalError));
                    else {
                        resolvedSymbols[i] = request.symbol;
                        return Promise.resolve(undefined);
                    }
                });
                return Promise.all(promises).then(()=>{
                    if (!token.isCancellationRequested && !lenses[i].isDisposed()) lenses[i].updateCommands(resolvedSymbols);
                });
            });
            return Promise.all(promises);
        });
        this._resolveCodeLensesPromise = resolvePromise;
        this._resolveCodeLensesPromise.then(()=>{
            // update moving average
            const newDelay = this._resolveCodeLensesDelays.update(model, Date.now() - t1);
            this._resolveCodeLensesScheduler.delay = newDelay;
            if (this._currentCodeLensModel) this._codeLensCache.put(model, this._currentCodeLensModel);
            this._oldCodeLensModels.clear(); // dispose old models once we have updated the UI with the current model
            if (resolvePromise === this._resolveCodeLensesPromise) this._resolveCodeLensesPromise = undefined;
        }, (err)=>{
            (0, $g0782.onUnexpectedError)(err); // can also be cancellation!
            if (resolvePromise === this._resolveCodeLensesPromise) this._resolveCodeLensesPromise = undefined;
        });
    }
    getLenses() {
        return this._lenses;
    }
    constructor(_editor, _commandService, _notificationService, _codeLensCache){
        this._editor = _editor;
        this._commandService = _commandService;
        this._notificationService = _notificationService;
        this._codeLensCache = _codeLensCache;
        this._disposables = new (0, $atiRx.DisposableStore)();
        this._localToDispose = new (0, $atiRx.DisposableStore)();
        this._lenses = [];
        this._getCodeLensModelDelays = new (0, $lkrXF.LanguageFeatureRequestDelays)((0, $eKhCe.CodeLensProviderRegistry), 250, 2500);
        this._oldCodeLensModels = new (0, $atiRx.DisposableStore)();
        this._resolveCodeLensesDelays = new (0, $lkrXF.LanguageFeatureRequestDelays)((0, $eKhCe.CodeLensProviderRegistry), 250, 2500);
        this._resolveCodeLensesScheduler = new (0, $eFOsn.RunOnceScheduler)(()=>this._resolveCodeLensesInViewport(), this._resolveCodeLensesDelays.min);
        this._disposables.add(this._editor.onDidChangeModel(()=>this._onModelChange()));
        this._disposables.add(this._editor.onDidChangeModelLanguage(()=>this._onModelChange()));
        this._disposables.add(this._editor.onDidChangeConfiguration((e)=>{
            if (e.hasChanged(43 /* fontInfo */ ) || e.hasChanged(16 /* codeLensFontSize */ ) || e.hasChanged(15 /* codeLensFontFamily */ )) this._updateLensStyle();
            if (e.hasChanged(14 /* codeLens */ )) this._onModelChange();
        }));
        this._disposables.add((0, $eKhCe.CodeLensProviderRegistry).onDidChange(this._onModelChange, this));
        this._onModelChange();
        this._styleClassName = "_" + (0, $cQRg9.hash)(this._editor.getId()).toString(16);
        this._styleElement = $jOYcd.createStyleSheet($jOYcd.isInShadowDOM(this._editor.getContainerDomNode()) ? this._editor.getContainerDomNode() : undefined);
        this._updateLensStyle();
    }
};
$6c4d1d007163d6a7$export$2ad2fe275c1424ff.ID = "css.editor.codeLens";
$6c4d1d007163d6a7$export$2ad2fe275c1424ff = $6c4d1d007163d6a7$var$__decorate([
    $6c4d1d007163d6a7$var$__param(1, (0, $fAXtX.ICommandService)),
    $6c4d1d007163d6a7$var$__param(2, (0, $dgZ0t.INotificationService)),
    $6c4d1d007163d6a7$var$__param(3, (0, $7f1a460a30d70a4f$exports.ICodeLensCache))
], $6c4d1d007163d6a7$export$2ad2fe275c1424ff);
(0, $gGOeQ.registerEditorContribution)($6c4d1d007163d6a7$export$2ad2fe275c1424ff.ID, $6c4d1d007163d6a7$export$2ad2fe275c1424ff);
(0, $gGOeQ.registerEditorAction)(class ShowLensesInCurrentLine extends (0, $gGOeQ.EditorAction) {
    run(accessor, editor) {
        return $6c4d1d007163d6a7$var$__awaiter(this, void 0, void 0, function*() {
            if (!editor.hasModel()) return;
            const quickInputService = accessor.get((0, $aqUJX.IQuickInputService));
            const commandService = accessor.get((0, $fAXtX.ICommandService));
            const notificationService = accessor.get((0, $dgZ0t.INotificationService));
            const lineNumber = editor.getSelection().positionLineNumber;
            const codelensController = editor.getContribution($6c4d1d007163d6a7$export$2ad2fe275c1424ff.ID);
            const items = [];
            for (let lens of codelensController.getLenses()){
                if (lens.getLineNumber() === lineNumber) for (let item of lens.getItems()){
                    const { command: command  } = item.symbol;
                    if (command) items.push({
                        label: command.title,
                        command: command
                    });
                }
            }
            if (items.length === 0) // We dont want an empty picker
            return;
            const item1 = yield quickInputService.pick(items, {
                canPickMany: false
            });
            if (!item1) // Nothing picked
            return;
            try {
                yield commandService.executeCommand(item1.command.id, ...item1.command.arguments || []);
            } catch (err) {
                notificationService.error(err);
            }
        });
    }
    constructor(){
        super({
            id: "codelens.showLensesInCurrentLine",
            precondition: (0, $bdLce.EditorContextKeys).hasCodeLensProvider,
            label: (0, $58WHl.localize)("showLensOnLine", "Show CodeLens Commands For Current Line"),
            alias: "Show CodeLens Commands For Current Line"
        });
    }
});



var $atiRx = parcelRequire("atiRx");

var $gGOeQ = parcelRequire("gGOeQ");

var $3HpR4 = parcelRequire("3HpR4");
var $a08a87c8cfcb2171$exports = {};

$parcel$export($a08a87c8cfcb2171$exports, "ColorDetector", function () { return $a08a87c8cfcb2171$export$267b3b1876bfdb86; }, function (v) { return $a08a87c8cfcb2171$export$267b3b1876bfdb86 = v; });

var $eFOsn = parcelRequire("eFOsn");

var $6yffc = parcelRequire("6yffc");

var $g0782 = parcelRequire("g0782");

var $atiRx = parcelRequire("atiRx");

var $9TEeL = parcelRequire("9TEeL");

var $2tXCm = parcelRequire("2tXCm");

var $gGOeQ = parcelRequire("gGOeQ");

var $3HpR4 = parcelRequire("3HpR4");

var $g88WD = parcelRequire("g88WD");

var $eKhCe = parcelRequire("eKhCe");

var $gnEXx = parcelRequire("gnEXx");

var $g0782 = parcelRequire("g0782");

var $7K96x = parcelRequire("7K96x");

var $3HpR4 = parcelRequire("3HpR4");

var $eKhCe = parcelRequire("eKhCe");

var $dwrPd = parcelRequire("dwrPd");

var $fAXtX = parcelRequire("fAXtX");
function $78bc6055ce5a0afc$export$6cee60e8aa85e528(model, token) {
    const colors = [];
    const providers = (0, $eKhCe.ColorProviderRegistry).ordered(model).reverse();
    const promises = providers.map((provider)=>Promise.resolve(provider.provideDocumentColors(model, token)).then((result)=>{
            if (Array.isArray(result)) for (let colorInfo of result)colors.push({
                colorInfo: colorInfo,
                provider: provider
            });
        }));
    return Promise.all(promises).then(()=>colors);
}
function $78bc6055ce5a0afc$export$c3064c7f8ffdbaa5(model, colorInfo, provider, token) {
    return Promise.resolve(provider.provideColorPresentations(model, colorInfo, token));
}
(0, $fAXtX.CommandsRegistry).registerCommand("_executeDocumentColorProvider", function(accessor, ...args) {
    const [resource] = args;
    if (!(resource instanceof (0, $7K96x.URI))) throw (0, $g0782.illegalArgument)();
    const model = accessor.get((0, $dwrPd.IModelService)).getModel(resource);
    if (!model) throw (0, $g0782.illegalArgument)();
    const rawCIs = [];
    const providers = (0, $eKhCe.ColorProviderRegistry).ordered(model).reverse();
    const promises = providers.map((provider)=>Promise.resolve(provider.provideDocumentColors(model, (0, $gnEXx.CancellationToken).None)).then((result)=>{
            if (Array.isArray(result)) for (let ci of result)rawCIs.push({
                range: ci.range,
                color: [
                    ci.color.red,
                    ci.color.green,
                    ci.color.blue,
                    ci.color.alpha
                ]
            });
        }));
    return Promise.all(promises).then(()=>rawCIs);
});
(0, $fAXtX.CommandsRegistry).registerCommand("_executeColorPresentationProvider", function(accessor, ...args) {
    const [color, context] = args;
    const { uri: uri , range: range  } = context;
    if (!(uri instanceof (0, $7K96x.URI)) || !Array.isArray(color) || color.length !== 4 || !(0, $3HpR4.Range).isIRange(range)) throw (0, $g0782.illegalArgument)();
    const [red, green, blue, alpha] = color;
    const model = accessor.get((0, $dwrPd.IModelService)).getModel(uri);
    if (!model) throw (0, $g0782.illegalArgument)();
    const colorInfo = {
        range: range,
        color: {
            red: red,
            green: green,
            blue: blue,
            alpha: alpha
        }
    };
    const presentations = [];
    const providers = (0, $eKhCe.ColorProviderRegistry).ordered(model).reverse();
    const promises = providers.map((provider)=>Promise.resolve(provider.provideColorPresentations(model, colorInfo, (0, $gnEXx.CancellationToken).None)).then((result)=>{
            if (Array.isArray(result)) presentations.push(...result);
        }));
    return Promise.all(promises).then(()=>presentations);
});



var $9BIBz = parcelRequire("9BIBz");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $a08a87c8cfcb2171$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $a08a87c8cfcb2171$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
const $a08a87c8cfcb2171$var$MAX_DECORATORS = 500;
let $a08a87c8cfcb2171$export$267b3b1876bfdb86 = class ColorDetector extends (0, $atiRx.Disposable) {
    isEnabled() {
        const model = this._editor.getModel();
        if (!model) return false;
        const languageId = model.getLanguageId();
        // handle deprecated settings. [languageId].colorDecorators.enable
        const deprecatedConfig = this._configurationService.getValue(languageId);
        if (deprecatedConfig && typeof deprecatedConfig === "object") {
            const colorDecorators = deprecatedConfig["colorDecorators"]; // deprecatedConfig.valueOf('.colorDecorators.enable');
            if (colorDecorators && colorDecorators["enable"] !== undefined && !colorDecorators["enable"]) return colorDecorators["enable"];
        }
        return this._editor.getOption(17 /* colorDecorators */ );
    }
    static get(editor) {
        return editor.getContribution(this.ID);
    }
    dispose() {
        this.stop();
        this.removeAllDecorations();
        super.dispose();
    }
    onModelChanged() {
        this.stop();
        if (!this._isEnabled) return;
        const model = this._editor.getModel();
        if (!model || !(0, $eKhCe.ColorProviderRegistry).has(model)) return;
        this._localToDispose.add(this._editor.onDidChangeModelContent(()=>{
            if (!this._timeoutTimer) {
                this._timeoutTimer = new (0, $eFOsn.TimeoutTimer)();
                this._timeoutTimer.cancelAndSet(()=>{
                    this._timeoutTimer = null;
                    this.beginCompute();
                }, ColorDetector.RECOMPUTE_TIME);
            }
        }));
        this.beginCompute();
    }
    beginCompute() {
        this._computePromise = (0, $eFOsn.createCancelablePromise)((token)=>{
            const model = this._editor.getModel();
            if (!model) return Promise.resolve([]);
            return (0, $78bc6055ce5a0afc$export$6cee60e8aa85e528)(model, token);
        });
        this._computePromise.then((colorInfos)=>{
            this.updateDecorations(colorInfos);
            this.updateColorDecorators(colorInfos);
            this._computePromise = null;
        }, (0, $g0782.onUnexpectedError));
    }
    stop() {
        if (this._timeoutTimer) {
            this._timeoutTimer.cancel();
            this._timeoutTimer = null;
        }
        if (this._computePromise) {
            this._computePromise.cancel();
            this._computePromise = null;
        }
        this._localToDispose.clear();
    }
    updateDecorations(colorDatas) {
        const decorations = colorDatas.map((c)=>({
                range: {
                    startLineNumber: c.colorInfo.range.startLineNumber,
                    startColumn: c.colorInfo.range.startColumn,
                    endLineNumber: c.colorInfo.range.endLineNumber,
                    endColumn: c.colorInfo.range.endColumn
                },
                options: (0, $g88WD.ModelDecorationOptions).EMPTY
            }));
        this._decorationsIds = this._editor.deltaDecorations(this._decorationsIds, decorations);
        this._colorDatas = new Map();
        this._decorationsIds.forEach((id, i)=>this._colorDatas.set(id, colorDatas[i]));
    }
    updateColorDecorators(colorData) {
        this._colorDecorationClassRefs.clear();
        let decorations = [];
        for(let i = 0; i < colorData.length && decorations.length < $a08a87c8cfcb2171$var$MAX_DECORATORS; i++){
            const { red: red , green: green , blue: blue , alpha: alpha  } = colorData[i].colorInfo.color;
            const rgba = new (0, $6yffc.RGBA)(Math.round(red * 255), Math.round(green * 255), Math.round(blue * 255), alpha);
            let color = `rgba(${rgba.r}, ${rgba.g}, ${rgba.b}, ${rgba.a})`;
            const ref = this._colorDecorationClassRefs.add(this._ruleFactory.createClassNameRef({
                backgroundColor: color
            }));
            decorations.push({
                range: {
                    startLineNumber: colorData[i].colorInfo.range.startLineNumber,
                    startColumn: colorData[i].colorInfo.range.startColumn,
                    endLineNumber: colorData[i].colorInfo.range.endLineNumber,
                    endColumn: colorData[i].colorInfo.range.endColumn
                },
                options: {
                    description: "colorDetector",
                    before: {
                        content: (0, $9TEeL.noBreakWhitespace),
                        inlineClassName: `${ref.className} colorpicker-color-decoration`,
                        inlineClassNameAffectsLetterSpacing: true
                    }
                }
            });
        }
        this._colorDecoratorIds = new Set(this._editor.deltaDecorations([
            ...this._colorDecoratorIds
        ], decorations));
    }
    removeAllDecorations() {
        this._decorationsIds = this._editor.deltaDecorations(this._decorationsIds, []);
        this._colorDecoratorIds = new Set(this._editor.deltaDecorations([
            ...this._colorDecoratorIds
        ], []));
        this._colorDecorationClassRefs.clear();
    }
    getColorData(position) {
        const model = this._editor.getModel();
        if (!model) return null;
        const decorations = model.getDecorationsInRange((0, $3HpR4.Range).fromPositions(position, position)).filter((d)=>this._colorDatas.has(d.id));
        if (decorations.length === 0) return null;
        return this._colorDatas.get(decorations[0].id);
    }
    isColorDecorationId(decorationId) {
        return this._colorDecoratorIds.has(decorationId);
    }
    constructor(_editor, _configurationService){
        super();
        this._editor = _editor;
        this._configurationService = _configurationService;
        this._localToDispose = this._register(new (0, $atiRx.DisposableStore)());
        this._decorationsIds = [];
        this._colorDatas = new Map();
        this._colorDecoratorIds = new Set();
        this._ruleFactory = new (0, $2tXCm.DynamicCssRules)(this._editor);
        this._colorDecorationClassRefs = this._register(new (0, $atiRx.DisposableStore)());
        this._register(_editor.onDidChangeModel(()=>{
            this._isEnabled = this.isEnabled();
            this.onModelChanged();
        }));
        this._register(_editor.onDidChangeModelLanguage(()=>this.onModelChanged()));
        this._register((0, $eKhCe.ColorProviderRegistry).onDidChange(()=>this.onModelChanged()));
        this._register(_editor.onDidChangeConfiguration(()=>{
            let prevIsEnabled = this._isEnabled;
            this._isEnabled = this.isEnabled();
            if (prevIsEnabled !== this._isEnabled) {
                if (this._isEnabled) this.onModelChanged();
                else this.removeAllDecorations();
            }
        }));
        this._timeoutTimer = null;
        this._computePromise = null;
        this._isEnabled = this.isEnabled();
        this.onModelChanged();
    }
};
$a08a87c8cfcb2171$export$267b3b1876bfdb86.ID = "editor.contrib.colorDetector";
$a08a87c8cfcb2171$export$267b3b1876bfdb86.RECOMPUTE_TIME = 1000; // ms
$a08a87c8cfcb2171$export$267b3b1876bfdb86 = $a08a87c8cfcb2171$var$__decorate([
    $a08a87c8cfcb2171$var$__param(1, (0, $9BIBz.IConfigurationService))
], $a08a87c8cfcb2171$export$267b3b1876bfdb86);
(0, $gGOeQ.registerEditorContribution)($a08a87c8cfcb2171$export$267b3b1876bfdb86.ID, $a08a87c8cfcb2171$export$267b3b1876bfdb86);


var $b90e09b07616b8ec$exports = {};

$parcel$export($b90e09b07616b8ec$exports, "ModesHoverController", function () { return $b90e09b07616b8ec$export$5fb2eabf73ef0293; }, function (v) { return $b90e09b07616b8ec$export$5fb2eabf73ef0293 = v; });

var $fQtIR = parcelRequire("fQtIR");

var $atiRx = parcelRequire("atiRx");

var $gGOeQ = parcelRequire("gGOeQ");

var $3HpR4 = parcelRequire("3HpR4");

var $bdLce = parcelRequire("bdLce");

var $6o4cZ = parcelRequire("6o4cZ");
var $0c5c4a66d5e29ecc$exports = {};

$parcel$export($0c5c4a66d5e29ecc$exports, "GotoDefinitionAtPositionEditorContribution", function () { return $0c5c4a66d5e29ecc$export$35cdf6493d1302e; }, function (v) { return $0c5c4a66d5e29ecc$export$35cdf6493d1302e = v; });

var $eFOsn = parcelRequire("eFOsn");

var $g0782 = parcelRequire("g0782");

var $chTln = parcelRequire("chTln");

var $atiRx = parcelRequire("atiRx");

var $3ICxR = parcelRequire("3ICxR");


var $iVwSq = parcelRequire("iVwSq");

var $gGOeQ = parcelRequire("gGOeQ");

var $8qXsZ = parcelRequire("8qXsZ");

var $3HpR4 = parcelRequire("3HpR4");

var $eKhCe = parcelRequire("eKhCe");

var $6o4cZ = parcelRequire("6o4cZ");

var $iwSMU = parcelRequire("iwSMU");

var $fSvkC = parcelRequire("fSvkC");

var $atiRx = parcelRequire("atiRx");

var $1d81R = parcelRequire("1d81R");
function $0689be8677adfa61$var$hasModifier(e, modifier) {
    return !!e[modifier];
}
class $0689be8677adfa61$export$69f99c1197f68370 {
    constructor(source, opts){
        this.target = source.target;
        this.hasTriggerModifier = $0689be8677adfa61$var$hasModifier(source.event, opts.triggerModifier);
        this.hasSideBySideModifier = $0689be8677adfa61$var$hasModifier(source.event, opts.triggerSideBySideModifier);
        this.isNoneOrSingleMouseDown = source.event.detail <= 1;
    }
}
class $0689be8677adfa61$export$40b9eb22d04cd705 {
    constructor(source, opts){
        this.keyCodeIsTriggerKey = source.keyCode === opts.triggerKey;
        this.keyCodeIsSideBySideKey = source.keyCode === opts.triggerSideBySideKey;
        this.hasTriggerModifier = $0689be8677adfa61$var$hasModifier(source, opts.triggerModifier);
    }
}
class $0689be8677adfa61$export$17acd7002e6c5cb3 {
    equals(other) {
        return this.triggerKey === other.triggerKey && this.triggerModifier === other.triggerModifier && this.triggerSideBySideKey === other.triggerSideBySideKey && this.triggerSideBySideModifier === other.triggerSideBySideModifier;
    }
    constructor(triggerKey, triggerModifier, triggerSideBySideKey, triggerSideBySideModifier){
        this.triggerKey = triggerKey;
        this.triggerModifier = triggerModifier;
        this.triggerSideBySideKey = triggerSideBySideKey;
        this.triggerSideBySideModifier = triggerSideBySideModifier;
    }
}
function $0689be8677adfa61$var$createOptions(multiCursorModifier) {
    if (multiCursorModifier === "altKey") {
        if ($1d81R.isMacintosh) return new $0689be8677adfa61$export$17acd7002e6c5cb3(57 /* Meta */ , "metaKey", 6 /* Alt */ , "altKey");
        return new $0689be8677adfa61$export$17acd7002e6c5cb3(5 /* Ctrl */ , "ctrlKey", 6 /* Alt */ , "altKey");
    }
    if ($1d81R.isMacintosh) return new $0689be8677adfa61$export$17acd7002e6c5cb3(6 /* Alt */ , "altKey", 57 /* Meta */ , "metaKey");
    return new $0689be8677adfa61$export$17acd7002e6c5cb3(6 /* Alt */ , "altKey", 5 /* Ctrl */ , "ctrlKey");
}
class $0689be8677adfa61$export$e5a83b5c609cb4bb extends (0, $atiRx.Disposable) {
    _onDidChangeCursorSelection(e) {
        if (e.selection && e.selection.startColumn !== e.selection.endColumn) this._resetHandler(); // immediately stop this feature if the user starts to select (https://github.com/microsoft/vscode/issues/7827)
    }
    _onEditorMouseMove(mouseEvent) {
        this._lastMouseMoveEvent = mouseEvent;
        this._onMouseMoveOrRelevantKeyDown.fire([
            mouseEvent,
            null
        ]);
    }
    _onEditorMouseDown(mouseEvent) {
        // We need to record if we had the trigger key on mouse down because someone might select something in the editor
        // holding the mouse down and then while mouse is down start to press Ctrl/Cmd to start a copy operation and then
        // release the mouse button without wanting to do the navigation.
        // With this flag we prevent goto definition if the mouse was down before the trigger key was pressed.
        this._hasTriggerKeyOnMouseDown = mouseEvent.hasTriggerModifier;
        this._lineNumberOnMouseDown = mouseEvent.target.position ? mouseEvent.target.position.lineNumber : 0;
    }
    _onEditorMouseUp(mouseEvent) {
        const currentLineNumber = mouseEvent.target.position ? mouseEvent.target.position.lineNumber : 0;
        if (this._hasTriggerKeyOnMouseDown && this._lineNumberOnMouseDown && this._lineNumberOnMouseDown === currentLineNumber) this._onExecute.fire(mouseEvent);
    }
    _onEditorKeyDown(e) {
        if (this._lastMouseMoveEvent && (e.keyCodeIsTriggerKey // User just pressed Ctrl/Cmd (normal goto definition)
         || e.keyCodeIsSideBySideKey && e.hasTriggerModifier // User pressed Ctrl/Cmd+Alt (goto definition to the side)
        )) this._onMouseMoveOrRelevantKeyDown.fire([
            this._lastMouseMoveEvent,
            e
        ]);
        else if (e.hasTriggerModifier) this._onCancel.fire(); // remove decorations if user holds another key with ctrl/cmd to prevent accident goto declaration
    }
    _onEditorKeyUp(e) {
        if (e.keyCodeIsTriggerKey) this._onCancel.fire();
    }
    _resetHandler() {
        this._lastMouseMoveEvent = null;
        this._hasTriggerKeyOnMouseDown = false;
        this._onCancel.fire();
    }
    constructor(editor){
        super();
        this._onMouseMoveOrRelevantKeyDown = this._register(new (0, $fSvkC.Emitter)());
        this.onMouseMoveOrRelevantKeyDown = this._onMouseMoveOrRelevantKeyDown.event;
        this._onExecute = this._register(new (0, $fSvkC.Emitter)());
        this.onExecute = this._onExecute.event;
        this._onCancel = this._register(new (0, $fSvkC.Emitter)());
        this.onCancel = this._onCancel.event;
        this._editor = editor;
        this._opts = $0689be8677adfa61$var$createOptions(this._editor.getOption(69 /* multiCursorModifier */ ));
        this._lastMouseMoveEvent = null;
        this._hasTriggerKeyOnMouseDown = false;
        this._lineNumberOnMouseDown = 0;
        this._register(this._editor.onDidChangeConfiguration((e)=>{
            if (e.hasChanged(69 /* multiCursorModifier */ )) {
                const newOpts = $0689be8677adfa61$var$createOptions(this._editor.getOption(69 /* multiCursorModifier */ ));
                if (this._opts.equals(newOpts)) return;
                this._opts = newOpts;
                this._lastMouseMoveEvent = null;
                this._hasTriggerKeyOnMouseDown = false;
                this._lineNumberOnMouseDown = 0;
                this._onCancel.fire();
            }
        }));
        this._register(this._editor.onMouseMove((e)=>this._onEditorMouseMove(new $0689be8677adfa61$export$69f99c1197f68370(e, this._opts))));
        this._register(this._editor.onMouseDown((e)=>this._onEditorMouseDown(new $0689be8677adfa61$export$69f99c1197f68370(e, this._opts))));
        this._register(this._editor.onMouseUp((e)=>this._onEditorMouseUp(new $0689be8677adfa61$export$69f99c1197f68370(e, this._opts))));
        this._register(this._editor.onKeyDown((e)=>this._onEditorKeyDown(new $0689be8677adfa61$export$40b9eb22d04cd705(e, this._opts))));
        this._register(this._editor.onKeyUp((e)=>this._onEditorKeyUp(new $0689be8677adfa61$export$40b9eb22d04cd705(e, this._opts))));
        this._register(this._editor.onMouseDrag(()=>this._resetHandler()));
        this._register(this._editor.onDidChangeCursorSelection((e)=>this._onDidChangeCursorSelection(e)));
        this._register(this._editor.onDidChangeModel((e)=>this._resetHandler()));
        this._register(this._editor.onDidChangeModelContent(()=>this._resetHandler()));
        this._register(this._editor.onDidScrollChange((e)=>{
            if (e.scrollTopChanged || e.scrollLeftChanged) this._resetHandler();
        }));
    }
}


var $0607d5721260c302$exports = {};

$parcel$export($0607d5721260c302$exports, "IPeekViewService", function () { return $0607d5721260c302$export$8277d1187e5db7d6; }, function (v) { return $0607d5721260c302$export$8277d1187e5db7d6 = v; });
$parcel$export($0607d5721260c302$exports, "PeekContext", function () { return $0607d5721260c302$export$5afd50a7c05ff96a; }, function (v) { return $0607d5721260c302$export$5afd50a7c05ff96a = v; });
$parcel$export($0607d5721260c302$exports, "getOuterEditor", function () { return $0607d5721260c302$export$434a98f74be8c7b9; }, function (v) { return $0607d5721260c302$export$434a98f74be8c7b9 = v; });
$parcel$export($0607d5721260c302$exports, "PeekViewWidget", function () { return $0607d5721260c302$export$85acc0ce60f75b9f; }, function (v) { return $0607d5721260c302$export$85acc0ce60f75b9f = v; });
$parcel$export($0607d5721260c302$exports, "peekViewTitleBackground", function () { return $0607d5721260c302$export$b1e2a843606aa53d; }, function (v) { return $0607d5721260c302$export$b1e2a843606aa53d = v; });
$parcel$export($0607d5721260c302$exports, "peekViewTitleForeground", function () { return $0607d5721260c302$export$5f7b8e8b47f91ad3; }, function (v) { return $0607d5721260c302$export$5f7b8e8b47f91ad3 = v; });
$parcel$export($0607d5721260c302$exports, "peekViewTitleInfoForeground", function () { return $0607d5721260c302$export$cdda5f1c5d2481c1; }, function (v) { return $0607d5721260c302$export$cdda5f1c5d2481c1 = v; });
$parcel$export($0607d5721260c302$exports, "peekViewBorder", function () { return $0607d5721260c302$export$2d4f038d18170ad2; }, function (v) { return $0607d5721260c302$export$2d4f038d18170ad2 = v; });
$parcel$export($0607d5721260c302$exports, "peekViewResultsBackground", function () { return $0607d5721260c302$export$84f26812d83dda36; }, function (v) { return $0607d5721260c302$export$84f26812d83dda36 = v; });

var $jOYcd = parcelRequire("jOYcd");

var $dxI2a = parcelRequire("dxI2a");

var $1e8So = parcelRequire("1e8So");

var $8HDYc = parcelRequire("8HDYc");

var $6yffc = parcelRequire("6yffc");

var $fSvkC = parcelRequire("fSvkC");

var $25SUP = parcelRequire("25SUP");


var $gGOeQ = parcelRequire("gGOeQ");

var $aXAVz = parcelRequire("aXAVz");
var $cd934ec6628ad62c$exports = {};

$parcel$export($cd934ec6628ad62c$exports, "EmbeddedCodeEditorWidget", function () { return $cd934ec6628ad62c$export$3c7efbd913d316d0; }, function (v) { return $cd934ec6628ad62c$export$3c7efbd913d316d0 = v; });

var $25SUP = parcelRequire("25SUP");

var $aXAVz = parcelRequire("aXAVz");

var $leKKm = parcelRequire("leKKm");

var $fAXtX = parcelRequire("fAXtX");

var $bRtox = parcelRequire("bRtox");

var $iZW67 = parcelRequire("iZW67");

var $dgZ0t = parcelRequire("dgZ0t");

var $fUTzO = parcelRequire("fUTzO");

var $6qNtj = parcelRequire("6qNtj");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $cd934ec6628ad62c$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $cd934ec6628ad62c$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
let $cd934ec6628ad62c$export$3c7efbd913d316d0 = class EmbeddedCodeEditorWidget extends (0, $leKKm.CodeEditorWidget) {
    getParentEditor() {
        return this._parentEditor;
    }
    _onParentConfigurationChanged(e) {
        super.updateOptions(this._parentEditor.getRawOptions());
        super.updateOptions(this._overwriteOptions);
    }
    updateOptions(newOptions) {
        $25SUP.mixin(this._overwriteOptions, newOptions, true);
        super.updateOptions(this._overwriteOptions);
    }
    constructor(domElement, options, parentEditor, instantiationService, codeEditorService, commandService, contextKeyService, themeService, notificationService, accessibilityService){
        super(domElement, Object.assign(Object.assign({}, parentEditor.getRawOptions()), {
            overflowWidgetsDomNode: parentEditor.getOverflowWidgetsDomNode()
        }), {}, instantiationService, codeEditorService, commandService, contextKeyService, themeService, notificationService, accessibilityService);
        this._parentEditor = parentEditor;
        this._overwriteOptions = options;
        // Overwrite parent's options
        super.updateOptions(this._overwriteOptions);
        this._register(parentEditor.onDidChangeConfiguration((e)=>this._onParentConfigurationChanged(e)));
    }
};
$cd934ec6628ad62c$export$3c7efbd913d316d0 = $cd934ec6628ad62c$var$__decorate([
    $cd934ec6628ad62c$var$__param(3, (0, $iZW67.IInstantiationService)),
    $cd934ec6628ad62c$var$__param(4, (0, $aXAVz.ICodeEditorService)),
    $cd934ec6628ad62c$var$__param(5, (0, $fAXtX.ICommandService)),
    $cd934ec6628ad62c$var$__param(6, (0, $bRtox.IContextKeyService)),
    $cd934ec6628ad62c$var$__param(7, (0, $fUTzO.IThemeService)),
    $cd934ec6628ad62c$var$__param(8, (0, $dgZ0t.INotificationService)),
    $cd934ec6628ad62c$var$__param(9, (0, $6qNtj.IAccessibilityService))
], $cd934ec6628ad62c$export$3c7efbd913d316d0);



var $jOYcd = parcelRequire("jOYcd");

var $4icNR = parcelRequire("4icNR");

var $6yffc = parcelRequire("6yffc");

var $jInpn = parcelRequire("jInpn");

var $atiRx = parcelRequire("atiRx");

var $25SUP = parcelRequire("25SUP");


var $3HpR4 = parcelRequire("3HpR4");

var $g88WD = parcelRequire("g88WD");
const $cfbc2735d56f5686$var$defaultColor = new (0, $6yffc.Color)(new (0, $6yffc.RGBA)(0, 122, 204));
const $cfbc2735d56f5686$var$defaultOptions = {
    showArrow: true,
    showFrame: true,
    className: "",
    frameColor: $cfbc2735d56f5686$var$defaultColor,
    arrowColor: $cfbc2735d56f5686$var$defaultColor,
    keepEditorSelection: false
};
const $cfbc2735d56f5686$var$WIDGET_ID = "vs.editor.contrib.zoneWidget";
class $cfbc2735d56f5686$export$4ca7b154cb5b1d8d {
    onDomNodeTop(top) {
        this._onDomNodeTop(top);
    }
    onComputedHeight(height) {
        this._onComputedHeight(height);
    }
    constructor(domNode, afterLineNumber, afterColumn, heightInLines, onDomNodeTop, onComputedHeight){
        this.id = ""; // A valid zone id should be greater than 0
        this.domNode = domNode;
        this.afterLineNumber = afterLineNumber;
        this.afterColumn = afterColumn;
        this.heightInLines = heightInLines;
        this._onDomNodeTop = onDomNodeTop;
        this._onComputedHeight = onComputedHeight;
    }
}
class $cfbc2735d56f5686$export$4f860089b67ba96 {
    getId() {
        return this._id;
    }
    getDomNode() {
        return this._domNode;
    }
    getPosition() {
        return null;
    }
    constructor(id, domNode){
        this._id = id;
        this._domNode = domNode;
    }
}
class $cfbc2735d56f5686$var$Arrow {
    dispose() {
        this.hide();
        $jOYcd.removeCSSRulesContainingSelector(this._ruleName);
    }
    set color(value) {
        if (this._color !== value) {
            this._color = value;
            this._updateStyle();
        }
    }
    set height(value) {
        if (this._height !== value) {
            this._height = value;
            this._updateStyle();
        }
    }
    _updateStyle() {
        $jOYcd.removeCSSRulesContainingSelector(this._ruleName);
        $jOYcd.createCSSRule(`.monaco-editor ${this._ruleName}`, `border-style: solid; border-color: transparent; border-bottom-color: ${this._color}; border-width: ${this._height}px; bottom: -${this._height}px; margin-left: -${this._height}px; `);
    }
    show(where) {
        if (where.column === 1) // the arrow isn't pretty at column 1 and we need to push it out a little
        where = {
            lineNumber: where.lineNumber,
            column: 2
        };
        this._decorations = this._editor.deltaDecorations(this._decorations, [
            {
                range: (0, $3HpR4.Range).fromPositions(where),
                options: {
                    description: "zone-widget-arrow",
                    className: this._ruleName,
                    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ 
                }
            }
        ]);
    }
    hide() {
        this._editor.deltaDecorations(this._decorations, []);
    }
    constructor(_editor){
        this._editor = _editor;
        this._ruleName = $cfbc2735d56f5686$var$Arrow._IdGenerator.nextId();
        this._decorations = [];
        this._color = null;
        this._height = -1;
    //
    }
}
$cfbc2735d56f5686$var$Arrow._IdGenerator = new (0, $jInpn.IdGenerator)(".arrow-decoration-");
class $cfbc2735d56f5686$export$4a50bb71db87eba6 {
    dispose() {
        if (this._overlayWidget) {
            this.editor.removeOverlayWidget(this._overlayWidget);
            this._overlayWidget = null;
        }
        if (this._viewZone) this.editor.changeViewZones((accessor)=>{
            if (this._viewZone) accessor.removeZone(this._viewZone.id);
            this._viewZone = null;
        });
        this.editor.deltaDecorations(this._positionMarkerId, []);
        this._positionMarkerId = [];
        this._disposables.dispose();
    }
    create() {
        this.domNode.classList.add("zone-widget");
        if (this.options.className) this.domNode.classList.add(this.options.className);
        this.container = document.createElement("div");
        this.container.classList.add("zone-widget-container");
        this.domNode.appendChild(this.container);
        if (this.options.showArrow) {
            this._arrow = new $cfbc2735d56f5686$var$Arrow(this.editor);
            this._disposables.add(this._arrow);
        }
        this._fillContainer(this.container);
        this._initSash();
        this._applyStyles();
    }
    style(styles) {
        if (styles.frameColor) this.options.frameColor = styles.frameColor;
        if (styles.arrowColor) this.options.arrowColor = styles.arrowColor;
        this._applyStyles();
    }
    _applyStyles() {
        if (this.container && this.options.frameColor) {
            let frameColor = this.options.frameColor.toString();
            this.container.style.borderTopColor = frameColor;
            this.container.style.borderBottomColor = frameColor;
        }
        if (this._arrow && this.options.arrowColor) {
            let arrowColor = this.options.arrowColor.toString();
            this._arrow.color = arrowColor;
        }
    }
    _getWidth(info) {
        return info.width - info.minimap.minimapWidth - info.verticalScrollbarWidth;
    }
    _getLeft(info) {
        // If minimap is to the left, we move beyond it
        if (info.minimap.minimapWidth > 0 && info.minimap.minimapLeft === 0) return info.minimap.minimapWidth;
        return 0;
    }
    _onViewZoneTop(top) {
        this.domNode.style.top = top + "px";
    }
    _onViewZoneHeight(height) {
        this.domNode.style.height = `${height}px`;
        if (this.container) {
            let containerHeight = height - this._decoratingElementsHeight();
            this.container.style.height = `${containerHeight}px`;
            const layoutInfo = this.editor.getLayoutInfo();
            this._doLayout(containerHeight, this._getWidth(layoutInfo));
        }
        if (this._resizeSash) this._resizeSash.layout();
    }
    get position() {
        const [id] = this._positionMarkerId;
        if (!id) return undefined;
        const model = this.editor.getModel();
        if (!model) return undefined;
        const range = model.getDecorationRange(id);
        if (!range) return undefined;
        return range.getStartPosition();
    }
    show(rangeOrPos, heightInLines) {
        const range = (0, $3HpR4.Range).isIRange(rangeOrPos) ? (0, $3HpR4.Range).lift(rangeOrPos) : (0, $3HpR4.Range).fromPositions(rangeOrPos);
        this._isShowing = true;
        this._showImpl(range, heightInLines);
        this._isShowing = false;
        this._positionMarkerId = this.editor.deltaDecorations(this._positionMarkerId, [
            {
                range: range,
                options: (0, $g88WD.ModelDecorationOptions).EMPTY
            }
        ]);
    }
    hide() {
        if (this._viewZone) {
            this.editor.changeViewZones((accessor)=>{
                if (this._viewZone) accessor.removeZone(this._viewZone.id);
            });
            this._viewZone = null;
        }
        if (this._overlayWidget) {
            this.editor.removeOverlayWidget(this._overlayWidget);
            this._overlayWidget = null;
        }
        if (this._arrow) this._arrow.hide();
    }
    _decoratingElementsHeight() {
        let lineHeight = this.editor.getOption(58 /* lineHeight */ );
        let result = 0;
        if (this.options.showArrow) {
            let arrowHeight = Math.round(lineHeight / 3);
            result += 2 * arrowHeight;
        }
        if (this.options.showFrame) {
            let frameThickness = Math.round(lineHeight / 9);
            result += 2 * frameThickness;
        }
        return result;
    }
    _showImpl(where, heightInLines) {
        const position = where.getStartPosition();
        const layoutInfo = this.editor.getLayoutInfo();
        const width = this._getWidth(layoutInfo);
        this.domNode.style.width = `${width}px`;
        this.domNode.style.left = this._getLeft(layoutInfo) + "px";
        // Render the widget as zone (rendering) and widget (lifecycle)
        const viewZoneDomNode = document.createElement("div");
        viewZoneDomNode.style.overflow = "hidden";
        const lineHeight = this.editor.getOption(58 /* lineHeight */ );
        // adjust heightInLines to viewport
        const maxHeightInLines = Math.max(12, this.editor.getLayoutInfo().height / lineHeight * 0.8);
        heightInLines = Math.min(heightInLines, maxHeightInLines);
        let arrowHeight = 0;
        let frameThickness = 0;
        // Render the arrow one 1/3 of an editor line height
        if (this._arrow && this.options.showArrow) {
            arrowHeight = Math.round(lineHeight / 3);
            this._arrow.height = arrowHeight;
            this._arrow.show(position);
        }
        // Render the frame as 1/9 of an editor line height
        if (this.options.showFrame) frameThickness = Math.round(lineHeight / 9);
        // insert zone widget
        this.editor.changeViewZones((accessor)=>{
            if (this._viewZone) accessor.removeZone(this._viewZone.id);
            if (this._overlayWidget) {
                this.editor.removeOverlayWidget(this._overlayWidget);
                this._overlayWidget = null;
            }
            this.domNode.style.top = "-1000px";
            this._viewZone = new $cfbc2735d56f5686$export$4ca7b154cb5b1d8d(viewZoneDomNode, position.lineNumber, position.column, heightInLines, (top)=>this._onViewZoneTop(top), (height)=>this._onViewZoneHeight(height));
            this._viewZone.id = accessor.addZone(this._viewZone);
            this._overlayWidget = new $cfbc2735d56f5686$export$4f860089b67ba96($cfbc2735d56f5686$var$WIDGET_ID + this._viewZone.id, this.domNode);
            this.editor.addOverlayWidget(this._overlayWidget);
        });
        if (this.container && this.options.showFrame) {
            const width1 = this.options.frameWidth ? this.options.frameWidth : frameThickness;
            this.container.style.borderTopWidth = width1 + "px";
            this.container.style.borderBottomWidth = width1 + "px";
        }
        let containerHeight = heightInLines * lineHeight - this._decoratingElementsHeight();
        if (this.container) {
            this.container.style.top = arrowHeight + "px";
            this.container.style.height = containerHeight + "px";
            this.container.style.overflow = "hidden";
        }
        this._doLayout(containerHeight, width);
        if (!this.options.keepEditorSelection) this.editor.setSelection(where);
        const model = this.editor.getModel();
        if (model) {
            const revealLine = where.endLineNumber + 1;
            if (revealLine <= model.getLineCount()) // reveal line below the zone widget
            this.revealLine(revealLine, false);
            else // reveal last line atop
            this.revealLine(model.getLineCount(), true);
        }
    }
    revealLine(lineNumber, isLastLine) {
        if (isLastLine) this.editor.revealLineInCenter(lineNumber, 0 /* Smooth */ );
        else this.editor.revealLine(lineNumber, 0 /* Smooth */ );
    }
    setCssClass(className, classToReplace) {
        if (!this.container) return;
        if (classToReplace) this.container.classList.remove(classToReplace);
        this.container.classList.add(className);
    }
    _onWidth(widthInPixel) {
    // implement in subclass
    }
    _doLayout(heightInPixel, widthInPixel) {
    // implement in subclass
    }
    _relayout(newHeightInLines) {
        if (this._viewZone && this._viewZone.heightInLines !== newHeightInLines) this.editor.changeViewZones((accessor)=>{
            if (this._viewZone) {
                this._viewZone.heightInLines = newHeightInLines;
                accessor.layoutZone(this._viewZone.id);
            }
        });
    }
    // --- sash
    _initSash() {
        if (this._resizeSash) return;
        this._resizeSash = this._disposables.add(new (0, $4icNR.Sash)(this.domNode, this, {
            orientation: 1 /* HORIZONTAL */ 
        }));
        if (!this.options.isResizeable) this._resizeSash.state = 0 /* Disabled */ ;
        let data;
        this._disposables.add(this._resizeSash.onDidStart((e)=>{
            if (this._viewZone) data = {
                startY: e.startY,
                heightInLines: this._viewZone.heightInLines
            };
        }));
        this._disposables.add(this._resizeSash.onDidEnd(()=>{
            data = undefined;
        }));
        this._disposables.add(this._resizeSash.onDidChange((evt)=>{
            if (data) {
                let lineDelta = (evt.currentY - data.startY) / this.editor.getOption(58 /* lineHeight */ );
                let roundedLineDelta = lineDelta < 0 ? Math.ceil(lineDelta) : Math.floor(lineDelta);
                let newHeightInLines = data.heightInLines + roundedLineDelta;
                if (newHeightInLines > 5 && newHeightInLines < 35) this._relayout(newHeightInLines);
            }
        }));
    }
    getHorizontalSashLeft() {
        return 0;
    }
    getHorizontalSashTop() {
        return (this.domNode.style.height === null ? 0 : parseInt(this.domNode.style.height)) - this._decoratingElementsHeight() / 2;
    }
    getHorizontalSashWidth() {
        const layoutInfo = this.editor.getLayoutInfo();
        return layoutInfo.width - layoutInfo.minimap.minimapWidth;
    }
    constructor(editor, options = {}){
        this._arrow = null;
        this._overlayWidget = null;
        this._resizeSash = null;
        this._positionMarkerId = [];
        this._viewZone = null;
        this._disposables = new (0, $atiRx.DisposableStore)();
        this.container = null;
        this._isShowing = false;
        this.editor = editor;
        this.options = $25SUP.deepClone(options);
        $25SUP.mixin(this.options, $cfbc2735d56f5686$var$defaultOptions, false);
        this.domNode = document.createElement("div");
        if (!this.options.isAccessible) {
            this.domNode.setAttribute("aria-hidden", "true");
            this.domNode.setAttribute("role", "presentation");
        }
        this._disposables.add(this.editor.onDidLayoutChange((info)=>{
            const width = this._getWidth(info);
            this.domNode.style.width = width + "px";
            this.domNode.style.left = this._getLeft(info) + "px";
            this._onWidth(width);
        }));
    }
}



var $58WHl = parcelRequire("58WHl");
var $ec16e17bf8793314$exports = {};

$parcel$export($ec16e17bf8793314$exports, "createAndFillInActionBarActions", function () { return $ec16e17bf8793314$export$3b3f8def22d21768; }, function (v) { return $ec16e17bf8793314$export$3b3f8def22d21768 = v; });
$parcel$export($ec16e17bf8793314$exports, "MenuEntryActionViewItem", function () { return $ec16e17bf8793314$export$8606409db23e2e47; }, function (v) { return $ec16e17bf8793314$export$8606409db23e2e47 = v; });
$parcel$export($ec16e17bf8793314$exports, "createActionViewItem", function () { return $ec16e17bf8793314$export$9d27065ccc5be4d8; }, function (v) { return $ec16e17bf8793314$export$9d27065ccc5be4d8 = v; });

var $jOYcd = parcelRequire("jOYcd");

var $iiWsJ = parcelRequire("iiWsJ");

var $bhJjH = parcelRequire("bhJjH");

var $jOYcd = parcelRequire("jOYcd");

var $bhJjH = parcelRequire("bhJjH");

var $jOYcd = parcelRequire("jOYcd");

var $iiWsJ = parcelRequire("iiWsJ");

var $50vT2 = parcelRequire("50vT2");

var $1e8So = parcelRequire("1e8So");

var $fSvkC = parcelRequire("fSvkC");

class $98ecbbd393467844$export$962ca21a659a1a24 extends (0, $1e8So.ActionRunner) {
    get element() {
        return this._element;
    }
    show() {
        if (!this.visible) {
            this.visible = true;
            this._onDidChangeVisibility.fire(true);
        }
    }
    hide() {
        if (this.visible) {
            this.visible = false;
            this._onDidChangeVisibility.fire(false);
        }
    }
    dispose() {
        super.dispose();
        this.hide();
        if (this.boxContainer) {
            this.boxContainer.remove();
            this.boxContainer = undefined;
        }
        if (this.contents) {
            this.contents.remove();
            this.contents = undefined;
        }
        if (this._label) {
            this._label.remove();
            this._label = undefined;
        }
    }
    constructor(container, options){
        super();
        this._onDidChangeVisibility = this._register(new (0, $fSvkC.Emitter)());
        this.onDidChangeVisibility = this._onDidChangeVisibility.event;
        this._element = (0, $jOYcd.append)(container, (0, $jOYcd.$)(".monaco-dropdown"));
        this._label = (0, $jOYcd.append)(this._element, (0, $jOYcd.$)(".dropdown-label"));
        let labelRenderer = options.labelRenderer;
        if (!labelRenderer) labelRenderer = (container)=>{
            container.textContent = options.label || "";
            return null;
        };
        for (const event of [
            (0, $jOYcd.EventType).CLICK,
            (0, $jOYcd.EventType).MOUSE_DOWN,
            (0, $50vT2.EventType).Tap
        ])this._register((0, $jOYcd.addDisposableListener)(this.element, event, (e)=>(0, $jOYcd.EventHelper).stop(e, true))); // prevent default click behaviour to trigger
        for (const event1 of [
            (0, $jOYcd.EventType).MOUSE_DOWN,
            (0, $50vT2.EventType).Tap
        ])this._register((0, $jOYcd.addDisposableListener)(this._label, event1, (e)=>{
            if (e instanceof MouseEvent && e.detail > 1) return; // prevent multiple clicks to open multiple context menus (https://github.com/microsoft/vscode/issues/41363)
            if (this.visible) this.hide();
            else this.show();
        }));
        this._register((0, $jOYcd.addDisposableListener)(this._label, (0, $jOYcd.EventType).KEY_UP, (e)=>{
            const event = new (0, $iiWsJ.StandardKeyboardEvent)(e);
            if (event.equals(3 /* Enter */ ) || event.equals(10 /* Space */ )) {
                (0, $jOYcd.EventHelper).stop(e, true); // https://github.com/microsoft/vscode/issues/57997
                if (this.visible) this.hide();
                else this.show();
            }
        }));
        const cleanupFn = labelRenderer(this._label);
        if (cleanupFn) this._register(cleanupFn);
        this._register((0, $50vT2.Gesture).addTarget(this._label));
    }
}
class $98ecbbd393467844$export$e44a253a59704894 extends $98ecbbd393467844$export$962ca21a659a1a24 {
    set menuOptions(options) {
        this._menuOptions = options;
    }
    get menuOptions() {
        return this._menuOptions;
    }
    get actions() {
        if (this.actionProvider) return this.actionProvider.getActions();
        return this._actions;
    }
    set actions(actions) {
        this._actions = actions;
    }
    show() {
        super.show();
        this.element.classList.add("active");
        this._contextMenuProvider.showContextMenu({
            getAnchor: ()=>this.element,
            getActions: ()=>this.actions,
            getActionsContext: ()=>this.menuOptions ? this.menuOptions.context : null,
            getActionViewItem: (action)=>this.menuOptions && this.menuOptions.actionViewItemProvider ? this.menuOptions.actionViewItemProvider(action) : undefined,
            getKeyBinding: (action)=>this.menuOptions && this.menuOptions.getKeyBinding ? this.menuOptions.getKeyBinding(action) : undefined,
            getMenuClassName: ()=>this.menuClassName,
            onHide: ()=>this.onHide(),
            actionRunner: this.menuOptions ? this.menuOptions.actionRunner : undefined,
            anchorAlignment: this.menuOptions ? this.menuOptions.anchorAlignment : 0 /* LEFT */ ,
            domForShadowRoot: this.menuAsChild ? this.element : undefined
        });
    }
    hide() {
        super.hide();
    }
    onHide() {
        this.hide();
        this.element.classList.remove("active");
    }
    constructor(container, options){
        super(container, options);
        this._actions = [];
        this._contextMenuProvider = options.contextMenuProvider;
        this.actions = options.actions || [];
        this.actionProvider = options.actionProvider;
        this.menuClassName = options.menuClassName || "";
        this.menuAsChild = !!options.menuAsChild;
    }
}



var $fSvkC = parcelRequire("fSvkC");

class $7cdb2fa25ed0d69c$export$7c477a01defd15d5 extends (0, $bhJjH.BaseActionViewItem) {
    render(container) {
        this.actionItem = container;
        const labelRenderer = (el)=>{
            this.element = (0, $jOYcd.append)(el, (0, $jOYcd.$)("a.action-label"));
            let classNames = [];
            if (typeof this.options.classNames === "string") classNames = this.options.classNames.split(/\s+/g).filter((s)=>!!s);
            else if (this.options.classNames) classNames = this.options.classNames;
            // todo@aeschli: remove codicon, should come through `this.options.classNames`
            if (!classNames.find((c)=>c === "icon")) classNames.push("codicon");
            this.element.classList.add(...classNames);
            this.element.setAttribute("role", "button");
            this.element.setAttribute("aria-haspopup", "true");
            this.element.setAttribute("aria-expanded", "false");
            this.element.title = this._action.label || "";
            return null;
        };
        const isActionsArray = Array.isArray(this.menuActionsOrProvider);
        const options = {
            contextMenuProvider: this.contextMenuProvider,
            labelRenderer: labelRenderer,
            menuAsChild: this.options.menuAsChild,
            actions: isActionsArray ? this.menuActionsOrProvider : undefined,
            actionProvider: isActionsArray ? undefined : this.menuActionsOrProvider
        };
        this.dropdownMenu = this._register(new (0, $98ecbbd393467844$export$e44a253a59704894)(container, options));
        this._register(this.dropdownMenu.onDidChangeVisibility((visible)=>{
            var _a;
            (_a = this.element) === null || _a === void 0 || _a.setAttribute("aria-expanded", `${visible}`);
            this._onDidChangeVisibility.fire(visible);
        }));
        this.dropdownMenu.menuOptions = {
            actionViewItemProvider: this.options.actionViewItemProvider,
            actionRunner: this.actionRunner,
            getKeyBinding: this.options.keybindingProvider,
            context: this._context
        };
        if (this.options.anchorAlignmentProvider) {
            const that = this;
            this.dropdownMenu.menuOptions = Object.assign(Object.assign({}, this.dropdownMenu.menuOptions), {
                get anchorAlignment () {
                    return that.options.anchorAlignmentProvider();
                }
            });
        }
        this.updateEnabled();
    }
    setActionContext(newContext) {
        super.setActionContext(newContext);
        if (this.dropdownMenu) {
            if (this.dropdownMenu.menuOptions) this.dropdownMenu.menuOptions.context = newContext;
            else this.dropdownMenu.menuOptions = {
                context: newContext
            };
        }
    }
    updateEnabled() {
        var _a, _b;
        const disabled = !this.getAction().enabled;
        (_a = this.actionItem) === null || _a === void 0 || _a.classList.toggle("disabled", disabled);
        (_b = this.element) === null || _b === void 0 || _b.classList.toggle("disabled", disabled);
    }
    constructor(action, menuActionsOrProvider, contextMenuProvider, options = Object.create(null)){
        super(null, action, options);
        this.actionItem = null;
        this._onDidChangeVisibility = this._register(new (0, $fSvkC.Emitter)());
        this.menuActionsOrProvider = menuActionsOrProvider;
        this.contextMenuProvider = contextMenuProvider;
        this.options = options;
        if (this.options.actionRunner) this.actionRunner = this.options.actionRunner;
    }
}



var $1e8So = parcelRequire("1e8So");

var $7dRZu = parcelRequire("7dRZu");

var $atiRx = parcelRequire("atiRx");

var $1d81R = parcelRequire("1d81R");


var $58WHl = parcelRequire("58WHl");

var $2IxgH = parcelRequire("2IxgH");

var $bRtox = parcelRequire("bRtox");

var $jINLy = parcelRequire("jINLy");

var $iZW67 = parcelRequire("iZW67");

var $gY9wc = parcelRequire("gY9wc");

var $dgZ0t = parcelRequire("dgZ0t");

var $6XVdL = parcelRequire("6XVdL");

var $fUTzO = parcelRequire("fUTzO");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $ec16e17bf8793314$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ec16e17bf8793314$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var $ec16e17bf8793314$var$__awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
function $ec16e17bf8793314$export$3b3f8def22d21768(menu, options, target, primaryGroup, primaryMaxCount, shouldInlineSubmenu, useSeparatorsInPrimaryActions) {
    const groups = menu.getActions(options);
    const isPrimaryAction = typeof primaryGroup === "string" ? (actionGroup)=>actionGroup === primaryGroup : primaryGroup;
    // Action bars handle alternative actions on their own so the alternative actions should be ignored
    $ec16e17bf8793314$var$fillInActions(groups, target, false, isPrimaryAction, primaryMaxCount, shouldInlineSubmenu, useSeparatorsInPrimaryActions);
    return $ec16e17bf8793314$var$asDisposable(groups);
}
function $ec16e17bf8793314$var$asDisposable(groups) {
    const disposables = new (0, $atiRx.DisposableStore)();
    for (const [, actions] of groups)for (const action of actions)disposables.add(action);
    return disposables;
}
function $ec16e17bf8793314$var$fillInActions(groups, target, useAlternativeActions, isPrimaryAction = (actionGroup)=>actionGroup === "navigation", primaryMaxCount = Number.MAX_SAFE_INTEGER, shouldInlineSubmenu = ()=>false, useSeparatorsInPrimaryActions = false) {
    let primaryBucket;
    let secondaryBucket;
    if (Array.isArray(target)) {
        primaryBucket = target;
        secondaryBucket = target;
    } else {
        primaryBucket = target.primary;
        secondaryBucket = target.secondary;
    }
    const submenuInfo = new Set();
    for (const [group, actions] of groups){
        let target1;
        if (isPrimaryAction(group)) {
            target1 = primaryBucket;
            if (target1.length > 0 && useSeparatorsInPrimaryActions) target1.push(new (0, $1e8So.Separator)());
        } else {
            target1 = secondaryBucket;
            if (target1.length > 0) target1.push(new (0, $1e8So.Separator)());
        }
        for (let action of actions){
            if (useAlternativeActions) action = action instanceof (0, $2IxgH.MenuItemAction) && action.alt ? action.alt : action;
            const newLen = target1.push(action);
            // keep submenu info for later inlining
            if (action instanceof (0, $1e8So.SubmenuAction)) submenuInfo.add({
                group: group,
                action: action,
                index: newLen - 1
            });
        }
    }
    // ask the outside if submenu should be inlined or not. only ask when
    // there would be enough space
    for (const { group: group1 , action: action1 , index: index  } of submenuInfo){
        const target2 = isPrimaryAction(group1) ? primaryBucket : secondaryBucket;
        // inlining submenus with length 0 or 1 is easy,
        // larger submenus need to be checked with the overall limit
        const submenuActions = action1.actions;
        if ((submenuActions.length <= 1 || target2.length + submenuActions.length - 2 <= primaryMaxCount) && shouldInlineSubmenu(action1, group1, target2.length)) target2.splice(index, 1, ...submenuActions);
    }
    // overflow items from the primary group into the secondary bucket
    if (primaryBucket !== secondaryBucket && primaryBucket.length > primaryMaxCount) {
        const overflow = primaryBucket.splice(primaryMaxCount, primaryBucket.length - primaryMaxCount);
        secondaryBucket.unshift(...overflow, new (0, $1e8So.Separator)());
    }
}
let $ec16e17bf8793314$export$8606409db23e2e47 = class MenuEntryActionViewItem extends (0, $bhJjH.ActionViewItem) {
    get _menuItemAction() {
        return this._action;
    }
    get _commandAction() {
        return this._wantsAltCommand && this._menuItemAction.alt || this._menuItemAction;
    }
    onClick(event) {
        return $ec16e17bf8793314$var$__awaiter(this, void 0, void 0, function*() {
            event.preventDefault();
            event.stopPropagation();
            try {
                yield this.actionRunner.run(this._commandAction, this._context);
            } catch (err) {
                this._notificationService.error(err);
            }
        });
    }
    render(container) {
        super.render(container);
        container.classList.add("menu-entry");
        this._updateItemClass(this._menuItemAction.item);
        let mouseOver = false;
        let alternativeKeyDown = this._altKey.keyStatus.altKey || ((0, $1d81R.isWindows) || (0, $1d81R.isLinux)) && this._altKey.keyStatus.shiftKey;
        const updateAltState = ()=>{
            const wantsAltCommand = mouseOver && alternativeKeyDown;
            if (wantsAltCommand !== this._wantsAltCommand) {
                this._wantsAltCommand = wantsAltCommand;
                this.updateLabel();
                this.updateTooltip();
                this.updateClass();
            }
        };
        if (this._menuItemAction.alt) this._register(this._altKey.event((value)=>{
            alternativeKeyDown = value.altKey || ((0, $1d81R.isWindows) || (0, $1d81R.isLinux)) && value.shiftKey;
            updateAltState();
        }));
        this._register((0, $jOYcd.addDisposableListener)(container, "mouseleave", (_)=>{
            mouseOver = false;
            updateAltState();
        }));
        this._register((0, $jOYcd.addDisposableListener)(container, "mouseenter", (_)=>{
            mouseOver = true;
            updateAltState();
        }));
    }
    updateLabel() {
        if (this.options.label && this.label) this.label.textContent = this._commandAction.label;
    }
    updateTooltip() {
        if (this.label) {
            const keybinding = this._keybindingService.lookupKeybinding(this._commandAction.id, this._contextKeyService);
            const keybindingLabel = keybinding && keybinding.getLabel();
            const tooltip = this._commandAction.tooltip || this._commandAction.label;
            let title = keybindingLabel ? (0, $58WHl.localize)("titleAndKb", "{0} ({1})", tooltip, keybindingLabel) : tooltip;
            if (!this._wantsAltCommand && this._menuItemAction.alt) {
                const altTooltip = this._menuItemAction.alt.tooltip || this._menuItemAction.alt.label;
                const altKeybinding = this._keybindingService.lookupKeybinding(this._menuItemAction.alt.id, this._contextKeyService);
                const altKeybindingLabel = altKeybinding && altKeybinding.getLabel();
                const altTitleSection = altKeybindingLabel ? (0, $58WHl.localize)("titleAndKb", "{0} ({1})", altTooltip, altKeybindingLabel) : altTooltip;
                title += `\n[${(0, $7dRZu.UILabelProvider).modifierLabels[0, $1d81R.OS].altKey}] ${altTitleSection}`;
            }
            this.label.title = title;
        }
    }
    updateClass() {
        if (this.options.icon) {
            if (this._commandAction !== this._menuItemAction) {
                if (this._menuItemAction.alt) this._updateItemClass(this._menuItemAction.alt.item);
            } else if (this._menuItemAction.alt) this._updateItemClass(this._menuItemAction.item);
        }
    }
    _updateItemClass(item) {
        var _a;
        this._itemClassDispose.value = undefined;
        const { element: element , label: label  } = this;
        if (!element || !label) return;
        const icon = this._commandAction.checked && ((_a = item.toggled) === null || _a === void 0 ? void 0 : _a.icon) ? item.toggled.icon : item.icon;
        if (!icon) return;
        if ((0, $fUTzO.ThemeIcon).isThemeIcon(icon)) {
            // theme icons
            const iconClasses = (0, $fUTzO.ThemeIcon).asClassNameArray(icon);
            label.classList.add(...iconClasses);
            this._itemClassDispose.value = (0, $atiRx.toDisposable)(()=>{
                label.classList.remove(...iconClasses);
            });
        } else {
            // icon path/url
            if (icon.light) label.style.setProperty("--menu-entry-icon-light", (0, $jOYcd.asCSSUrl)(icon.light));
            if (icon.dark) label.style.setProperty("--menu-entry-icon-dark", (0, $jOYcd.asCSSUrl)(icon.dark));
            label.classList.add("icon");
            this._itemClassDispose.value = (0, $atiRx.toDisposable)(()=>{
                label.classList.remove("icon");
                label.style.removeProperty("--menu-entry-icon-light");
                label.style.removeProperty("--menu-entry-icon-dark");
            });
        }
    }
    constructor(_action, options, _keybindingService, _notificationService, _contextKeyService){
        super(undefined, _action, {
            icon: !!(_action.class || _action.item.icon),
            label: !_action.class && !_action.item.icon,
            draggable: options === null || options === void 0 ? void 0 : options.draggable
        });
        this._keybindingService = _keybindingService;
        this._notificationService = _notificationService;
        this._contextKeyService = _contextKeyService;
        this._wantsAltCommand = false;
        this._itemClassDispose = this._register(new (0, $atiRx.MutableDisposable)());
        this._altKey = (0, $jOYcd.ModifierKeyEmitter).getInstance();
    }
};
$ec16e17bf8793314$export$8606409db23e2e47 = $ec16e17bf8793314$var$__decorate([
    $ec16e17bf8793314$var$__param(2, (0, $gY9wc.IKeybindingService)),
    $ec16e17bf8793314$var$__param(3, (0, $dgZ0t.INotificationService)),
    $ec16e17bf8793314$var$__param(4, (0, $bRtox.IContextKeyService))
], $ec16e17bf8793314$export$8606409db23e2e47);
let $ec16e17bf8793314$export$18ad113e1f38dbd9 = class SubmenuEntryActionViewItem extends (0, $7cdb2fa25ed0d69c$export$7c477a01defd15d5) {
    render(container) {
        super.render(container);
        if (this.element) {
            container.classList.add("menu-entry");
            const { icon: icon  } = this._action.item;
            if (icon && !(0, $fUTzO.ThemeIcon).isThemeIcon(icon)) {
                this.element.classList.add("icon");
                if (icon.light) this.element.style.setProperty("--menu-entry-icon-light", (0, $jOYcd.asCSSUrl)(icon.light));
                if (icon.dark) this.element.style.setProperty("--menu-entry-icon-dark", (0, $jOYcd.asCSSUrl)(icon.dark));
            }
        }
    }
    constructor(action, options, contextMenuService){
        var _a, _b;
        const dropdownOptions = Object.assign({}, options !== null && options !== void 0 ? options : Object.create(null), {
            menuAsChild: (_a = options === null || options === void 0 ? void 0 : options.menuAsChild) !== null && _a !== void 0 ? _a : false,
            classNames: (_b = options === null || options === void 0 ? void 0 : options.classNames) !== null && _b !== void 0 ? _b : (0, $fUTzO.ThemeIcon).isThemeIcon(action.item.icon) ? (0, $fUTzO.ThemeIcon).asClassName(action.item.icon) : undefined
        });
        super(action, {
            getActions: ()=>action.actions
        }, contextMenuService, dropdownOptions);
    }
};
$ec16e17bf8793314$export$18ad113e1f38dbd9 = $ec16e17bf8793314$var$__decorate([
    $ec16e17bf8793314$var$__param(2, (0, $jINLy.IContextMenuService))
], $ec16e17bf8793314$export$18ad113e1f38dbd9);
let $ec16e17bf8793314$var$DropdownWithDefaultActionViewItem = class DropdownWithDefaultActionViewItem extends (0, $bhJjH.BaseActionViewItem) {
    update(lastAction) {
        this._storageService.store(this._storageKey, lastAction.id, 1 /* WORKSPACE */ , 0 /* USER */ );
        this._defaultAction.dispose();
        this._defaultAction = this._instaService.createInstance($ec16e17bf8793314$export$8606409db23e2e47, lastAction, undefined);
        this._defaultAction.actionRunner = new class extends (0, $1e8So.ActionRunner) {
            runAction(action, context) {
                return $ec16e17bf8793314$var$__awaiter(this, void 0, void 0, function*() {
                    yield action.run(undefined);
                });
            }
        }();
        if (this._container) this._defaultAction.render((0, $jOYcd.prepend)(this._container, (0, $jOYcd.$)(".action-container")));
    }
    setActionContext(newContext) {
        super.setActionContext(newContext);
        this._defaultAction.setActionContext(newContext);
        this._dropdown.setActionContext(newContext);
    }
    render(container) {
        this._container = container;
        super.render(this._container);
        this._container.classList.add("monaco-dropdown-with-default");
        const primaryContainer = (0, $jOYcd.$)(".action-container");
        this._defaultAction.render((0, $jOYcd.append)(this._container, primaryContainer));
        this._register((0, $jOYcd.addDisposableListener)(primaryContainer, (0, $jOYcd.EventType).KEY_DOWN, (e)=>{
            const event = new (0, $iiWsJ.StandardKeyboardEvent)(e);
            if (event.equals(17 /* RightArrow */ )) {
                this._defaultAction.element.tabIndex = -1;
                this._dropdown.focus();
                event.stopPropagation();
            }
        }));
        const dropdownContainer = (0, $jOYcd.$)(".dropdown-action-container");
        this._dropdown.render((0, $jOYcd.append)(this._container, dropdownContainer));
        this._register((0, $jOYcd.addDisposableListener)(dropdownContainer, (0, $jOYcd.EventType).KEY_DOWN, (e)=>{
            var _a;
            const event = new (0, $iiWsJ.StandardKeyboardEvent)(e);
            if (event.equals(15 /* LeftArrow */ )) {
                this._defaultAction.element.tabIndex = 0;
                this._dropdown.setFocusable(false);
                (_a = this._defaultAction.element) === null || _a === void 0 || _a.focus();
                event.stopPropagation();
            }
        }));
    }
    focus(fromRight) {
        if (fromRight) this._dropdown.focus();
        else {
            this._defaultAction.element.tabIndex = 0;
            this._defaultAction.element.focus();
        }
    }
    blur() {
        this._defaultAction.element.tabIndex = -1;
        this._dropdown.blur();
        this._container.blur();
    }
    setFocusable(focusable) {
        if (focusable) this._defaultAction.element.tabIndex = 0;
        else {
            this._defaultAction.element.tabIndex = -1;
            this._dropdown.setFocusable(false);
        }
    }
    dispose() {
        this._defaultAction.dispose();
        this._dropdown.dispose();
        super.dispose();
    }
    constructor(submenuAction, options, _keybindingService, _notificationService, _contextMenuService, _menuService, _instaService, _storageService){
        var _a, _b, _c;
        super(null, submenuAction);
        this._keybindingService = _keybindingService;
        this._notificationService = _notificationService;
        this._contextMenuService = _contextMenuService;
        this._menuService = _menuService;
        this._instaService = _instaService;
        this._storageService = _storageService;
        this._container = null;
        this._storageKey = `${submenuAction.item.submenu._debugName}_lastActionId`;
        // determine default action
        let defaultAction;
        let defaultActionId = _storageService.get(this._storageKey, 1 /* WORKSPACE */ );
        if (defaultActionId) defaultAction = submenuAction.actions.find((a)=>defaultActionId === a.id);
        if (!defaultAction) defaultAction = submenuAction.actions[0];
        this._defaultAction = this._instaService.createInstance($ec16e17bf8793314$export$8606409db23e2e47, defaultAction, undefined);
        const dropdownOptions = Object.assign({}, options !== null && options !== void 0 ? options : Object.create(null), {
            menuAsChild: (_a = options === null || options === void 0 ? void 0 : options.menuAsChild) !== null && _a !== void 0 ? _a : true,
            classNames: (_b = options === null || options === void 0 ? void 0 : options.classNames) !== null && _b !== void 0 ? _b : [
                "codicon",
                "codicon-chevron-down"
            ],
            actionRunner: (_c = options === null || options === void 0 ? void 0 : options.actionRunner) !== null && _c !== void 0 ? _c : new (0, $1e8So.ActionRunner)()
        });
        this._dropdown = new (0, $7cdb2fa25ed0d69c$export$7c477a01defd15d5)(submenuAction, submenuAction.actions, this._contextMenuService, dropdownOptions);
        this._dropdown.actionRunner.onDidRun((e)=>{
            if (e.action instanceof (0, $2IxgH.MenuItemAction)) this.update(e.action);
        });
    }
};
$ec16e17bf8793314$var$DropdownWithDefaultActionViewItem = $ec16e17bf8793314$var$__decorate([
    $ec16e17bf8793314$var$__param(2, (0, $gY9wc.IKeybindingService)),
    $ec16e17bf8793314$var$__param(3, (0, $dgZ0t.INotificationService)),
    $ec16e17bf8793314$var$__param(4, (0, $jINLy.IContextMenuService)),
    $ec16e17bf8793314$var$__param(5, (0, $2IxgH.IMenuService)),
    $ec16e17bf8793314$var$__param(6, (0, $iZW67.IInstantiationService)),
    $ec16e17bf8793314$var$__param(7, (0, $6XVdL.IStorageService))
], $ec16e17bf8793314$var$DropdownWithDefaultActionViewItem);
function $ec16e17bf8793314$export$9d27065ccc5be4d8(instaService, action, options) {
    if (action instanceof (0, $2IxgH.MenuItemAction)) return instaService.createInstance($ec16e17bf8793314$export$8606409db23e2e47, action, undefined);
    else if (action instanceof (0, $2IxgH.SubmenuItemAction)) {
        if (action.item.rememberDefaultAction) return instaService.createInstance($ec16e17bf8793314$var$DropdownWithDefaultActionViewItem, action, options);
        else return instaService.createInstance($ec16e17bf8793314$export$18ad113e1f38dbd9, action, options);
    } else return undefined;
}



var $bRtox = parcelRequire("bRtox");

var $6pFSu = parcelRequire("6pFSu");

var $iZW67 = parcelRequire("iZW67");

var $3XYy8 = parcelRequire("3XYy8");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $0607d5721260c302$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $0607d5721260c302$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
const $0607d5721260c302$export$8277d1187e5db7d6 = (0, $iZW67.createDecorator)("IPeekViewService");
(0, $6pFSu.registerSingleton)($0607d5721260c302$export$8277d1187e5db7d6, class {
    addExclusiveWidget(editor, widget) {
        const existing = this._widgets.get(editor);
        if (existing) {
            existing.listener.dispose();
            existing.widget.dispose();
        }
        const remove = ()=>{
            const data = this._widgets.get(editor);
            if (data && data.widget === widget) {
                data.listener.dispose();
                this._widgets.delete(editor);
            }
        };
        this._widgets.set(editor, {
            widget: widget,
            listener: widget.onDidClose(remove)
        });
    }
    constructor(){
        this._widgets = new Map();
    }
});
var $0607d5721260c302$export$5afd50a7c05ff96a;
(function(PeekContext) {
    PeekContext.inPeekEditor = new (0, $bRtox.RawContextKey)("inReferenceSearchEditor", true, $58WHl.localize("inReferenceSearchEditor", "Whether the current code editor is embedded inside peek"));
    PeekContext.notInPeekEditor = PeekContext.inPeekEditor.toNegated();
})($0607d5721260c302$export$5afd50a7c05ff96a || ($0607d5721260c302$export$5afd50a7c05ff96a = {}));
let $0607d5721260c302$var$PeekContextController = class PeekContextController {
    dispose() {}
    constructor(editor, contextKeyService){
        if (editor instanceof (0, $cd934ec6628ad62c$exports.EmbeddedCodeEditorWidget)) $0607d5721260c302$export$5afd50a7c05ff96a.inPeekEditor.bindTo(contextKeyService);
    }
};
$0607d5721260c302$var$PeekContextController.ID = "editor.contrib.referenceController";
$0607d5721260c302$var$PeekContextController = $0607d5721260c302$var$__decorate([
    $0607d5721260c302$var$__param(1, (0, $bRtox.IContextKeyService))
], $0607d5721260c302$var$PeekContextController);
(0, $gGOeQ.registerEditorContribution)($0607d5721260c302$var$PeekContextController.ID, $0607d5721260c302$var$PeekContextController);
function $0607d5721260c302$export$434a98f74be8c7b9(accessor) {
    let editor = accessor.get((0, $aXAVz.ICodeEditorService)).getFocusedCodeEditor();
    if (editor instanceof (0, $cd934ec6628ad62c$exports.EmbeddedCodeEditorWidget)) return editor.getParentEditor();
    return editor;
}
const $0607d5721260c302$var$defaultOptions = {
    headerBackgroundColor: (0, $6yffc.Color).white,
    primaryHeadingColor: (0, $6yffc.Color).fromHex("#333333"),
    secondaryHeadingColor: (0, $6yffc.Color).fromHex("#6c6c6cb3")
};
let $0607d5721260c302$export$85acc0ce60f75b9f = class PeekViewWidget extends (0, $cfbc2735d56f5686$export$4a50bb71db87eba6) {
    dispose() {
        if (!this.disposed) {
            this.disposed = true; // prevent consumers who dispose on onDidClose from looping
            super.dispose();
            this._onDidClose.fire(this);
        }
    }
    style(styles) {
        let options = this.options;
        if (styles.headerBackgroundColor) options.headerBackgroundColor = styles.headerBackgroundColor;
        if (styles.primaryHeadingColor) options.primaryHeadingColor = styles.primaryHeadingColor;
        if (styles.secondaryHeadingColor) options.secondaryHeadingColor = styles.secondaryHeadingColor;
        super.style(styles);
    }
    _applyStyles() {
        super._applyStyles();
        let options = this.options;
        if (this._headElement && options.headerBackgroundColor) this._headElement.style.backgroundColor = options.headerBackgroundColor.toString();
        if (this._primaryHeading && options.primaryHeadingColor) this._primaryHeading.style.color = options.primaryHeadingColor.toString();
        if (this._secondaryHeading && options.secondaryHeadingColor) this._secondaryHeading.style.color = options.secondaryHeadingColor.toString();
        if (this._bodyElement && options.frameColor) this._bodyElement.style.borderColor = options.frameColor.toString();
    }
    _fillContainer(container) {
        this.setCssClass("peekview-widget");
        this._headElement = $jOYcd.$(".head");
        this._bodyElement = $jOYcd.$(".body");
        this._fillHead(this._headElement);
        this._fillBody(this._bodyElement);
        container.appendChild(this._headElement);
        container.appendChild(this._bodyElement);
    }
    _fillHead(container, noCloseAction) {
        const titleElement = $jOYcd.$(".peekview-title");
        if (this.options.supportOnTitleClick) {
            titleElement.classList.add("clickable");
            $jOYcd.addStandardDisposableListener(titleElement, "click", (event)=>this._onTitleClick(event));
        }
        $jOYcd.append(this._headElement, titleElement);
        this._fillTitleIcon(titleElement);
        this._primaryHeading = $jOYcd.$("span.filename");
        this._secondaryHeading = $jOYcd.$("span.dirname");
        this._metaHeading = $jOYcd.$("span.meta");
        $jOYcd.append(titleElement, this._primaryHeading, this._secondaryHeading, this._metaHeading);
        const actionsContainer = $jOYcd.$(".peekview-actions");
        $jOYcd.append(this._headElement, actionsContainer);
        const actionBarOptions = this._getActionBarOptions();
        this._actionbarWidget = new (0, $dxI2a.ActionBar)(actionsContainer, actionBarOptions);
        this._disposables.add(this._actionbarWidget);
        if (!noCloseAction) this._actionbarWidget.push(new (0, $1e8So.Action)("peekview.close", $58WHl.localize("label.close", "Close"), (0, $8HDYc.Codicon).close.classNames, true, ()=>{
            this.dispose();
            return Promise.resolve();
        }), {
            label: false,
            icon: true
        });
    }
    _fillTitleIcon(container) {}
    _getActionBarOptions() {
        return {
            actionViewItemProvider: (0, $ec16e17bf8793314$exports.createActionViewItem).bind(undefined, this.instantiationService),
            orientation: 0 /* HORIZONTAL */ 
        };
    }
    _onTitleClick(event) {
    // implement me if supportOnTitleClick option is set
    }
    setTitle(primaryHeading, secondaryHeading) {
        if (this._primaryHeading && this._secondaryHeading) {
            this._primaryHeading.innerText = primaryHeading;
            this._primaryHeading.setAttribute("title", primaryHeading);
            if (secondaryHeading) this._secondaryHeading.innerText = secondaryHeading;
            else $jOYcd.clearNode(this._secondaryHeading);
        }
    }
    setMetaTitle(value) {
        if (this._metaHeading) {
            if (value) {
                this._metaHeading.innerText = value;
                $jOYcd.show(this._metaHeading);
            } else $jOYcd.hide(this._metaHeading);
        }
    }
    _doLayout(heightInPixel, widthInPixel) {
        if (!this._isShowing && heightInPixel < 0) {
            // Looks like the view zone got folded away!
            this.dispose();
            return;
        }
        const headHeight = Math.ceil(this.editor.getOption(58 /* lineHeight */ ) * 1.2);
        const bodyHeight = Math.round(heightInPixel - (headHeight + 2 /* the border-top/bottom width*/ ));
        this._doLayoutHead(headHeight, widthInPixel);
        this._doLayoutBody(bodyHeight, widthInPixel);
    }
    _doLayoutHead(heightInPixel, widthInPixel) {
        if (this._headElement) {
            this._headElement.style.height = `${heightInPixel}px`;
            this._headElement.style.lineHeight = this._headElement.style.height;
        }
    }
    _doLayoutBody(heightInPixel, widthInPixel) {
        if (this._bodyElement) this._bodyElement.style.height = `${heightInPixel}px`;
    }
    constructor(editor, options, instantiationService){
        super(editor, options);
        this.instantiationService = instantiationService;
        this._onDidClose = new (0, $fSvkC.Emitter)();
        this.onDidClose = this._onDidClose.event;
        $25SUP.mixin(this.options, $0607d5721260c302$var$defaultOptions, false);
    }
};
$0607d5721260c302$export$85acc0ce60f75b9f = $0607d5721260c302$var$__decorate([
    $0607d5721260c302$var$__param(2, (0, $iZW67.IInstantiationService))
], $0607d5721260c302$export$85acc0ce60f75b9f);
const $0607d5721260c302$export$b1e2a843606aa53d = (0, $3XYy8.registerColor)("peekViewTitle.background", {
    dark: (0, $3XYy8.transparent)((0, $3XYy8.editorInfoForeground), .1),
    light: (0, $3XYy8.transparent)((0, $3XYy8.editorInfoForeground), .1),
    hc: null
}, $58WHl.localize("peekViewTitleBackground", "Background color of the peek view title area."));
const $0607d5721260c302$export$5f7b8e8b47f91ad3 = (0, $3XYy8.registerColor)("peekViewTitleLabel.foreground", {
    dark: (0, $6yffc.Color).white,
    light: (0, $6yffc.Color).black,
    hc: (0, $6yffc.Color).white
}, $58WHl.localize("peekViewTitleForeground", "Color of the peek view title."));
const $0607d5721260c302$export$cdda5f1c5d2481c1 = (0, $3XYy8.registerColor)("peekViewTitleDescription.foreground", {
    dark: "#ccccccb3",
    light: "#616161",
    hc: "#FFFFFF99"
}, $58WHl.localize("peekViewTitleInfoForeground", "Color of the peek view title info."));
const $0607d5721260c302$export$2d4f038d18170ad2 = (0, $3XYy8.registerColor)("peekView.border", {
    dark: (0, $3XYy8.editorInfoForeground),
    light: (0, $3XYy8.editorInfoForeground),
    hc: (0, $3XYy8.contrastBorder)
}, $58WHl.localize("peekViewBorder", "Color of the peek view borders and arrow."));
const $0607d5721260c302$export$84f26812d83dda36 = (0, $3XYy8.registerColor)("peekViewResult.background", {
    dark: "#252526",
    light: "#F3F3F3",
    hc: (0, $6yffc.Color).black
}, $58WHl.localize("peekViewResultsBackground", "Background color of the peek view result list."));



var $58WHl = parcelRequire("58WHl");

var $bRtox = parcelRequire("bRtox");

var $3XYy8 = parcelRequire("3XYy8");

var $fUTzO = parcelRequire("fUTzO");
var $c1b9951d8cb44fb6$exports = {};

$parcel$export($c1b9951d8cb44fb6$exports, "DefinitionAction", function () { return $c1b9951d8cb44fb6$export$5aed1003b9513172; }, function (v) { return $c1b9951d8cb44fb6$export$5aed1003b9513172 = v; });

var $abQPx = parcelRequire("abQPx");

var $cVmYb = parcelRequire("cVmYb");

var $eFOsn = parcelRequire("eFOsn");

var $fQtIR = parcelRequire("fQtIR");

var $1d81R = parcelRequire("1d81R");

var $3ICxR = parcelRequire("3ICxR");

var $7K96x = parcelRequire("7K96x");

var $iVwSq = parcelRequire("iVwSq");

var $1hSTN = parcelRequire("1hSTN");

var $gGOeQ = parcelRequire("gGOeQ");

var $aXAVz = parcelRequire("aXAVz");


var $8qXsZ = parcelRequire("8qXsZ");

var $3HpR4 = parcelRequire("3HpR4");

var $bdLce = parcelRequire("bdLce");

var $eKhCe = parcelRequire("eKhCe");
var $aaffe83f20c0dfa0$exports = {};

$parcel$export($aaffe83f20c0dfa0$exports, "ReferencesController", function () { return $aaffe83f20c0dfa0$export$60e6f978b59c492d; }, function (v) { return $aaffe83f20c0dfa0$export$60e6f978b59c492d = v; });

var $eFOsn = parcelRequire("eFOsn");

var $g0782 = parcelRequire("g0782");

var $fQtIR = parcelRequire("fQtIR");

var $atiRx = parcelRequire("atiRx");

var $aXAVz = parcelRequire("aXAVz");

var $8qXsZ = parcelRequire("8qXsZ");

var $3HpR4 = parcelRequire("3HpR4");


var $58WHl = parcelRequire("58WHl");

var $fAXtX = parcelRequire("fAXtX");

var $9BIBz = parcelRequire("9BIBz");

var $bRtox = parcelRequire("bRtox");

var $iZW67 = parcelRequire("iZW67");

var $cczLz = parcelRequire("cczLz");

var $cvIYl = parcelRequire("cvIYl");

var $dgZ0t = parcelRequire("dgZ0t");

var $6XVdL = parcelRequire("6XVdL");
var $4cdccf6479bdc78a$exports = {};

$parcel$export($4cdccf6479bdc78a$exports, "OneReference", function () { return $4cdccf6479bdc78a$export$5a16ca2afcb50c8b; }, function (v) { return $4cdccf6479bdc78a$export$5a16ca2afcb50c8b = v; });
$parcel$export($4cdccf6479bdc78a$exports, "FileReferences", function () { return $4cdccf6479bdc78a$export$abd311b1beafe84f; }, function (v) { return $4cdccf6479bdc78a$export$abd311b1beafe84f = v; });
$parcel$export($4cdccf6479bdc78a$exports, "ReferencesModel", function () { return $4cdccf6479bdc78a$export$f3299b77f3be0450; }, function (v) { return $4cdccf6479bdc78a$export$f3299b77f3be0450 = v; });

var $g0782 = parcelRequire("g0782");

var $fSvkC = parcelRequire("fSvkC");

var $jInpn = parcelRequire("jInpn");

var $atiRx = parcelRequire("atiRx");

var $4HO2P = parcelRequire("4HO2P");

var $aMhG1 = parcelRequire("aMhG1");

var $9TEeL = parcelRequire("9TEeL");

var $3HpR4 = parcelRequire("3HpR4");

var $58WHl = parcelRequire("58WHl");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $4cdccf6479bdc78a$var$__awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class $4cdccf6479bdc78a$export$5a16ca2afcb50c8b {
    get uri() {
        return this.link.uri;
    }
    get range() {
        var _a, _b;
        return (_b = (_a = this._range) !== null && _a !== void 0 ? _a : this.link.targetSelectionRange) !== null && _b !== void 0 ? _b : this.link.range;
    }
    set range(value) {
        this._range = value;
        this._rangeCallback(this);
    }
    get ariaMessage() {
        var _a;
        const preview = (_a = this.parent.getPreview(this)) === null || _a === void 0 ? void 0 : _a.preview(this.range);
        if (!preview) return (0, $58WHl.localize)("aria.oneReference", "symbol in {0} on line {1} at column {2}", (0, $aMhG1.basename)(this.uri), this.range.startLineNumber, this.range.startColumn);
        else return (0, $58WHl.localize)({
            key: "aria.oneReference.preview",
            comment: [
                "Placeholders are: 0: filename, 1:line number, 2: column number, 3: preview snippet of source code"
            ]
        }, "symbol in {0} on line {1} at column {2}, {3}", (0, $aMhG1.basename)(this.uri), this.range.startLineNumber, this.range.startColumn, preview.value);
    }
    constructor(isProviderFirst, parent, link, _rangeCallback){
        this.isProviderFirst = isProviderFirst;
        this.parent = parent;
        this.link = link;
        this._rangeCallback = _rangeCallback;
        this.id = (0, $jInpn.defaultGenerator).nextId();
    }
}
class $4cdccf6479bdc78a$export$a127194569a41afb {
    dispose() {
        this._modelReference.dispose();
    }
    preview(range, n = 8) {
        const model = this._modelReference.object.textEditorModel;
        if (!model) return undefined;
        const { startLineNumber: startLineNumber , startColumn: startColumn , endLineNumber: endLineNumber , endColumn: endColumn  } = range;
        const word = model.getWordUntilPosition({
            lineNumber: startLineNumber,
            column: startColumn - n
        });
        const beforeRange = new (0, $3HpR4.Range)(startLineNumber, word.startColumn, startLineNumber, startColumn);
        const afterRange = new (0, $3HpR4.Range)(endLineNumber, endColumn, endLineNumber, 1073741824 /* MAX_SAFE_SMALL_INTEGER */ );
        const before = model.getValueInRange(beforeRange).replace(/^\s+/, "");
        const inside = model.getValueInRange(range);
        const after = model.getValueInRange(afterRange).replace(/\s+$/, "");
        return {
            value: before + inside + after,
            highlight: {
                start: before.length,
                end: before.length + inside.length
            }
        };
    }
    constructor(_modelReference){
        this._modelReference = _modelReference;
    }
}
class $4cdccf6479bdc78a$export$abd311b1beafe84f {
    dispose() {
        (0, $atiRx.dispose)(this._previews.values());
        this._previews.clear();
    }
    getPreview(child) {
        return this._previews.get(child.uri);
    }
    get ariaMessage() {
        const len = this.children.length;
        if (len === 1) return (0, $58WHl.localize)("aria.fileReferences.1", "1 symbol in {0}, full path {1}", (0, $aMhG1.basename)(this.uri), this.uri.fsPath);
        else return (0, $58WHl.localize)("aria.fileReferences.N", "{0} symbols in {1}, full path {2}", len, (0, $aMhG1.basename)(this.uri), this.uri.fsPath);
    }
    resolve(textModelResolverService) {
        return $4cdccf6479bdc78a$var$__awaiter(this, void 0, void 0, function*() {
            if (this._previews.size !== 0) return this;
            for (let child of this.children){
                if (this._previews.has(child.uri)) continue;
                try {
                    const ref = yield textModelResolverService.createModelReference(child.uri);
                    this._previews.set(child.uri, new $4cdccf6479bdc78a$export$a127194569a41afb(ref));
                } catch (err) {
                    (0, $g0782.onUnexpectedError)(err);
                }
            }
            return this;
        });
    }
    constructor(parent, uri){
        this.parent = parent;
        this.uri = uri;
        this.children = [];
        this._previews = new (0, $4HO2P.ResourceMap)();
    }
}
class $4cdccf6479bdc78a$export$f3299b77f3be0450 {
    dispose() {
        (0, $atiRx.dispose)(this.groups);
        this._onDidChangeReferenceRange.dispose();
        this.groups.length = 0;
    }
    clone() {
        return new $4cdccf6479bdc78a$export$f3299b77f3be0450(this._links, this._title);
    }
    get title() {
        return this._title;
    }
    get isEmpty() {
        return this.groups.length === 0;
    }
    get ariaMessage() {
        if (this.isEmpty) return (0, $58WHl.localize)("aria.result.0", "No results found");
        else if (this.references.length === 1) return (0, $58WHl.localize)("aria.result.1", "Found 1 symbol in {0}", this.references[0].uri.fsPath);
        else if (this.groups.length === 1) return (0, $58WHl.localize)("aria.result.n1", "Found {0} symbols in {1}", this.references.length, this.groups[0].uri.fsPath);
        else return (0, $58WHl.localize)("aria.result.nm", "Found {0} symbols in {1} files", this.references.length, this.groups.length);
    }
    nextOrPreviousReference(reference, next) {
        let { parent: parent  } = reference;
        let idx = parent.children.indexOf(reference);
        let childCount = parent.children.length;
        let groupCount = parent.parent.groups.length;
        if (groupCount === 1 || next && idx + 1 < childCount || !next && idx > 0) {
            // cycling within one file
            if (next) idx = (idx + 1) % childCount;
            else idx = (idx + childCount - 1) % childCount;
            return parent.children[idx];
        }
        idx = parent.parent.groups.indexOf(parent);
        if (next) {
            idx = (idx + 1) % groupCount;
            return parent.parent.groups[idx].children[0];
        } else {
            idx = (idx + groupCount - 1) % groupCount;
            return parent.parent.groups[idx].children[parent.parent.groups[idx].children.length - 1];
        }
    }
    nearestReference(resource, position) {
        const nearest = this.references.map((ref, idx)=>{
            return {
                idx: idx,
                prefixLen: $9TEeL.commonPrefixLength(ref.uri.toString(), resource.toString()),
                offsetDist: Math.abs(ref.range.startLineNumber - position.lineNumber) * 100 + Math.abs(ref.range.startColumn - position.column)
            };
        }).sort((a, b)=>{
            if (a.prefixLen > b.prefixLen) return -1;
            else if (a.prefixLen < b.prefixLen) return 1;
            else if (a.offsetDist < b.offsetDist) return -1;
            else if (a.offsetDist > b.offsetDist) return 1;
            else return 0;
        })[0];
        if (nearest) return this.references[nearest.idx];
        return undefined;
    }
    referenceAt(resource, position) {
        for (const ref of this.references)if (ref.uri.toString() === resource.toString()) {
            if ((0, $3HpR4.Range).containsPosition(ref.range, position)) return ref;
        }
        return undefined;
    }
    firstReference() {
        for (const ref of this.references){
            if (ref.isProviderFirst) return ref;
        }
        return this.references[0];
    }
    static _compareReferences(a, b) {
        return (0, $aMhG1.extUri).compare(a.uri, b.uri) || (0, $3HpR4.Range).compareRangesUsingStarts(a.range, b.range);
    }
    constructor(links, title){
        this.groups = [];
        this.references = [];
        this._onDidChangeReferenceRange = new (0, $fSvkC.Emitter)();
        this.onDidChangeReferenceRange = this._onDidChangeReferenceRange.event;
        this._links = links;
        this._title = title;
        // grouping and sorting
        const [providersFirst] = links;
        links.sort($4cdccf6479bdc78a$export$f3299b77f3be0450._compareReferences);
        let current;
        for (let link of links){
            if (!current || !(0, $aMhG1.extUri).isEqual(current.uri, link.uri, true)) {
                // new group
                current = new $4cdccf6479bdc78a$export$abd311b1beafe84f(this, link.uri);
                this.groups.push(current);
            }
            // append, check for equality first!
            if (current.children.length === 0 || $4cdccf6479bdc78a$export$f3299b77f3be0450._compareReferences(link, current.children[current.children.length - 1]) !== 0) {
                const oneRef = new $4cdccf6479bdc78a$export$5a16ca2afcb50c8b(providersFirst === link, current, link, (ref)=>this._onDidChangeReferenceRange.fire(ref));
                this.references.push(oneRef);
                current.children.push(oneRef);
            }
        }
    }
}


var $a37d7bdf5fc6adbf$exports = {};

$parcel$export($a37d7bdf5fc6adbf$exports, "LayoutData", function () { return $a37d7bdf5fc6adbf$export$276a580b24a20d1; }, function (v) { return $a37d7bdf5fc6adbf$export$276a580b24a20d1 = v; });
$parcel$export($a37d7bdf5fc6adbf$exports, "ReferenceWidget", function () { return $a37d7bdf5fc6adbf$export$a6aef00aae3b3577; }, function (v) { return $a37d7bdf5fc6adbf$export$a6aef00aae3b3577 = v; });

var $jOYcd = parcelRequire("jOYcd");

var $iwqvz = parcelRequire("iwqvz");

var $6yffc = parcelRequire("6yffc");

var $fSvkC = parcelRequire("fSvkC");

var $atiRx = parcelRequire("atiRx");

var $fDjBp = parcelRequire("fDjBp");

var $aMhG1 = parcelRequire("aMhG1");



var $3HpR4 = parcelRequire("3HpR4");

var $g88WD = parcelRequire("g88WD");

var $9wt9e = parcelRequire("9wt9e");

var $6o4cZ = parcelRequire("6o4cZ");

var $iwSMU = parcelRequire("iwSMU");
var $ea5f6d950bc07003$exports = {};

$parcel$export($ea5f6d950bc07003$exports, "DataSource", function () { return $ea5f6d950bc07003$export$accd73d198d77d2f; }, function (v) { return $ea5f6d950bc07003$export$accd73d198d77d2f = v; });
$parcel$export($ea5f6d950bc07003$exports, "Delegate", function () { return $ea5f6d950bc07003$export$2a8f9cc4e68431ea; }, function (v) { return $ea5f6d950bc07003$export$2a8f9cc4e68431ea = v; });
$parcel$export($ea5f6d950bc07003$exports, "FileReferencesRenderer", function () { return $ea5f6d950bc07003$export$15497fea8d02acf6; }, function (v) { return $ea5f6d950bc07003$export$15497fea8d02acf6 = v; });
$parcel$export($ea5f6d950bc07003$exports, "OneReferenceRenderer", function () { return $ea5f6d950bc07003$export$b181a089ad2d048d; }, function (v) { return $ea5f6d950bc07003$export$b181a089ad2d048d = v; });
$parcel$export($ea5f6d950bc07003$exports, "StringRepresentationProvider", function () { return $ea5f6d950bc07003$export$5a1ff9bb06397f8e; }, function (v) { return $ea5f6d950bc07003$export$5a1ff9bb06397f8e = v; });
$parcel$export($ea5f6d950bc07003$exports, "IdentityProvider", function () { return $ea5f6d950bc07003$export$26106abfb5b2a456; }, function (v) { return $ea5f6d950bc07003$export$26106abfb5b2a456 = v; });
$parcel$export($ea5f6d950bc07003$exports, "AccessibilityProvider", function () { return $ea5f6d950bc07003$export$aa8739b876e4b61f; }, function (v) { return $ea5f6d950bc07003$export$aa8739b876e4b61f = v; });

var $jOYcd = parcelRequire("jOYcd");

var $9vUGD = parcelRequire("9vUGD");

var $f4MoY = parcelRequire("f4MoY");

var $eCmkC = parcelRequire("eCmkC");

var $c8WLW = parcelRequire("c8WLW");

var $hpZ7v = parcelRequire("hpZ7v");

var $fDjBp = parcelRequire("fDjBp");

var $1d81R = parcelRequire("1d81R");

var $aMhG1 = parcelRequire("aMhG1");

var $7K96x = parcelRequire("7K96x");
function $41d3b2f5b9c576d9$export$c8ab9bf6b3a1df37(resource) {
    if (!resource) return undefined;
    if (typeof resource === "string") resource = (0, $7K96x.URI).file(resource);
    const base = (0, $aMhG1.basename)(resource) || (resource.scheme === (0, $fDjBp.Schemas).file ? resource.fsPath : resource.path /* can be empty string if '/' is passed in */ );
    // convert c: => C:
    if ((0, $1d81R.isWindows) && (0, $hpZ7v.isRootOrDriveLetter)(base)) return $41d3b2f5b9c576d9$export$86de3c9238cdb7b7(base);
    return base;
}
function $41d3b2f5b9c576d9$export$86de3c9238cdb7b7(path, continueAsWindows) {
    if ((0, $hpZ7v.hasDriveLetter)(path, continueAsWindows)) return path.charAt(0).toUpperCase() + path.slice(1);
    return path;
}



var $atiRx = parcelRequire("atiRx");

var $aMhG1 = parcelRequire("aMhG1");

var $iwSMU = parcelRequire("iwSMU");

var $58WHl = parcelRequire("58WHl");

var $iZW67 = parcelRequire("iZW67");

var $gY9wc = parcelRequire("gY9wc");

var $4znCf = parcelRequire("4znCf");

var $diaKF = parcelRequire("diaKF");

var $fUTzO = parcelRequire("fUTzO");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $ea5f6d950bc07003$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ea5f6d950bc07003$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
let $ea5f6d950bc07003$export$accd73d198d77d2f = class DataSource {
    hasChildren(element) {
        if (element instanceof (0, $4cdccf6479bdc78a$exports.ReferencesModel)) return true;
        if (element instanceof (0, $4cdccf6479bdc78a$exports.FileReferences)) return true;
        return false;
    }
    getChildren(element) {
        if (element instanceof (0, $4cdccf6479bdc78a$exports.ReferencesModel)) return element.groups;
        if (element instanceof (0, $4cdccf6479bdc78a$exports.FileReferences)) return element.resolve(this._resolverService).then((val)=>{
            // if (element.failure) {
            // 	// refresh the element on failure so that
            // 	// we can update its rendering
            // 	return tree.refresh(element).then(() => val.children);
            // }
            return val.children;
        });
        throw new Error("bad tree");
    }
    constructor(_resolverService){
        this._resolverService = _resolverService;
    }
};
$ea5f6d950bc07003$export$accd73d198d77d2f = $ea5f6d950bc07003$var$__decorate([
    $ea5f6d950bc07003$var$__param(0, (0, $iwSMU.ITextModelService))
], $ea5f6d950bc07003$export$accd73d198d77d2f);
class $ea5f6d950bc07003$export$2a8f9cc4e68431ea {
    getHeight() {
        return 23;
    }
    getTemplateId(element) {
        if (element instanceof (0, $4cdccf6479bdc78a$exports.FileReferences)) return $ea5f6d950bc07003$export$15497fea8d02acf6.id;
        else return $ea5f6d950bc07003$export$b181a089ad2d048d.id;
    }
}
let $ea5f6d950bc07003$export$5a1ff9bb06397f8e = class StringRepresentationProvider {
    getKeyboardNavigationLabel(element) {
        var _a;
        if (element instanceof (0, $4cdccf6479bdc78a$exports.OneReference)) {
            const parts = (_a = element.parent.getPreview(element)) === null || _a === void 0 ? void 0 : _a.preview(element.range);
            if (parts) return parts.value;
        }
        // FileReferences or unresolved OneReference
        return (0, $aMhG1.basename)(element.uri);
    }
    constructor(_keybindingService){
        this._keybindingService = _keybindingService;
    }
};
$ea5f6d950bc07003$export$5a1ff9bb06397f8e = $ea5f6d950bc07003$var$__decorate([
    $ea5f6d950bc07003$var$__param(0, (0, $gY9wc.IKeybindingService))
], $ea5f6d950bc07003$export$5a1ff9bb06397f8e);
class $ea5f6d950bc07003$export$26106abfb5b2a456 {
    getId(element) {
        return element instanceof (0, $4cdccf6479bdc78a$exports.OneReference) ? element.id : element.uri;
    }
}
//#region render: File
let $ea5f6d950bc07003$var$FileReferencesTemplate = class FileReferencesTemplate extends (0, $atiRx.Disposable) {
    set(element, matches) {
        let parent = (0, $aMhG1.dirname)(element.uri);
        this.file.setLabel((0, $41d3b2f5b9c576d9$export$c8ab9bf6b3a1df37)(element.uri), this._uriLabel.getUriLabel(parent, {
            relative: true
        }), {
            title: this._uriLabel.getUriLabel(element.uri),
            matches: matches
        });
        const len = element.children.length;
        this.badge.setCount(len);
        if (len > 1) this.badge.setTitleFormat((0, $58WHl.localize)("referencesCount", "{0} references", len));
        else this.badge.setTitleFormat((0, $58WHl.localize)("referenceCount", "{0} reference", len));
    }
    constructor(container, _uriLabel, themeService){
        super();
        this._uriLabel = _uriLabel;
        const parent = document.createElement("div");
        parent.classList.add("reference-file");
        this.file = this._register(new (0, $eCmkC.IconLabel)(parent, {
            supportHighlights: true
        }));
        this.badge = new (0, $9vUGD.CountBadge)($jOYcd.append(parent, $jOYcd.$(".count")));
        this._register((0, $diaKF.attachBadgeStyler)(this.badge, themeService));
        container.appendChild(parent);
    }
};
$ea5f6d950bc07003$var$FileReferencesTemplate = $ea5f6d950bc07003$var$__decorate([
    $ea5f6d950bc07003$var$__param(1, (0, $4znCf.ILabelService)),
    $ea5f6d950bc07003$var$__param(2, (0, $fUTzO.IThemeService))
], $ea5f6d950bc07003$var$FileReferencesTemplate);
let $ea5f6d950bc07003$export$15497fea8d02acf6 = class FileReferencesRenderer {
    renderTemplate(container) {
        return this._instantiationService.createInstance($ea5f6d950bc07003$var$FileReferencesTemplate, container);
    }
    renderElement(node, index, template) {
        template.set(node.element, (0, $c8WLW.createMatches)(node.filterData));
    }
    disposeTemplate(templateData) {
        templateData.dispose();
    }
    constructor(_instantiationService){
        this._instantiationService = _instantiationService;
        this.templateId = FileReferencesRenderer.id;
    }
};
$ea5f6d950bc07003$export$15497fea8d02acf6.id = "FileReferencesRenderer";
$ea5f6d950bc07003$export$15497fea8d02acf6 = $ea5f6d950bc07003$var$__decorate([
    $ea5f6d950bc07003$var$__param(0, (0, $iZW67.IInstantiationService))
], $ea5f6d950bc07003$export$15497fea8d02acf6);
//#endregion
//#region render: Reference
class $ea5f6d950bc07003$var$OneReferenceTemplate {
    set(element, score) {
        var _a;
        const preview = (_a = element.parent.getPreview(element)) === null || _a === void 0 ? void 0 : _a.preview(element.range);
        if (!preview || !preview.value) // this means we FAILED to resolve the document or the value is the empty string
        this.label.set(`${(0, $aMhG1.basename)(element.uri)}:${element.range.startLineNumber + 1}:${element.range.startColumn + 1}`);
        else {
            // render search match as highlight unless
            // we have score, then render the score
            const { value: value , highlight: highlight  } = preview;
            if (score && !(0, $c8WLW.FuzzyScore).isDefault(score)) {
                this.label.element.classList.toggle("referenceMatch", false);
                this.label.set(value, (0, $c8WLW.createMatches)(score));
            } else {
                this.label.element.classList.toggle("referenceMatch", true);
                this.label.set(value, [
                    highlight
                ]);
            }
        }
    }
    constructor(container){
        this.label = new (0, $f4MoY.HighlightedLabel)(container);
    }
}
class $ea5f6d950bc07003$export$b181a089ad2d048d {
    renderTemplate(container) {
        return new $ea5f6d950bc07003$var$OneReferenceTemplate(container);
    }
    renderElement(node, index, templateData) {
        templateData.set(node.element, node.filterData);
    }
    disposeTemplate() {}
    constructor(){
        this.templateId = $ea5f6d950bc07003$export$b181a089ad2d048d.id;
    }
}
$ea5f6d950bc07003$export$b181a089ad2d048d.id = "OneReferenceRenderer";
class $ea5f6d950bc07003$export$aa8739b876e4b61f {
    getWidgetAriaLabel() {
        return (0, $58WHl.localize)("treeAriaLabel", "References");
    }
    getAriaLabel(element) {
        return element.ariaMessage;
    }
}




var $58WHl = parcelRequire("58WHl");

var $iZW67 = parcelRequire("iZW67");

var $gY9wc = parcelRequire("gY9wc");

var $4znCf = parcelRequire("4znCf");

var $cvIYl = parcelRequire("cvIYl");

var $fUTzO = parcelRequire("fUTzO");

var $5pInD = parcelRequire("5pInD");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $a37d7bdf5fc6adbf$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $a37d7bdf5fc6adbf$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var $a37d7bdf5fc6adbf$var$__awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class $a37d7bdf5fc6adbf$var$DecorationsManager {
    dispose() {
        this._callOnModelChange.dispose();
        this._callOnDispose.dispose();
        this.removeDecorations();
    }
    _onModelChanged() {
        this._callOnModelChange.clear();
        const model = this._editor.getModel();
        if (!model) return;
        for (let ref of this._model.references)if (ref.uri.toString() === model.uri.toString()) {
            this._addDecorations(ref.parent);
            return;
        }
    }
    _addDecorations(reference) {
        if (!this._editor.hasModel()) return;
        this._callOnModelChange.add(this._editor.getModel().onDidChangeDecorations(()=>this._onDecorationChanged()));
        const newDecorations = [];
        const newDecorationsActualIndex = [];
        for(let i = 0, len = reference.children.length; i < len; i++){
            let oneReference = reference.children[i];
            if (this._decorationIgnoreSet.has(oneReference.id)) continue;
            if (oneReference.uri.toString() !== this._editor.getModel().uri.toString()) continue;
            newDecorations.push({
                range: oneReference.range,
                options: $a37d7bdf5fc6adbf$var$DecorationsManager.DecorationOptions
            });
            newDecorationsActualIndex.push(i);
        }
        const decorations = this._editor.deltaDecorations([], newDecorations);
        for(let i1 = 0; i1 < decorations.length; i1++)this._decorations.set(decorations[i1], reference.children[newDecorationsActualIndex[i1]]);
    }
    _onDecorationChanged() {
        const toRemove = [];
        const model = this._editor.getModel();
        if (!model) return;
        for (let [decorationId, reference] of this._decorations){
            const newRange = model.getDecorationRange(decorationId);
            if (!newRange) continue;
            let ignore = false;
            if ((0, $3HpR4.Range).equalsRange(newRange, reference.range)) continue;
            if ((0, $3HpR4.Range).spansMultipleLines(newRange)) ignore = true;
            else {
                const lineLength = reference.range.endColumn - reference.range.startColumn;
                const newLineLength = newRange.endColumn - newRange.startColumn;
                if (lineLength !== newLineLength) ignore = true;
            }
            if (ignore) {
                this._decorationIgnoreSet.add(reference.id);
                toRemove.push(decorationId);
            } else reference.range = newRange;
        }
        for(let i = 0, len = toRemove.length; i < len; i++)this._decorations.delete(toRemove[i]);
        this._editor.deltaDecorations(toRemove, []);
    }
    removeDecorations() {
        this._editor.deltaDecorations([
            ...this._decorations.keys()
        ], []);
        this._decorations.clear();
    }
    constructor(_editor, _model){
        this._editor = _editor;
        this._model = _model;
        this._decorations = new Map();
        this._decorationIgnoreSet = new Set();
        this._callOnDispose = new (0, $atiRx.DisposableStore)();
        this._callOnModelChange = new (0, $atiRx.DisposableStore)();
        this._callOnDispose.add(this._editor.onDidChangeModel(()=>this._onModelChanged()));
        this._onModelChanged();
    }
}
$a37d7bdf5fc6adbf$var$DecorationsManager.DecorationOptions = (0, $g88WD.ModelDecorationOptions).register({
    description: "reference-decoration",
    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ ,
    className: "reference-decoration"
});
class $a37d7bdf5fc6adbf$export$276a580b24a20d1 {
    static fromJSON(raw) {
        let ratio;
        let heightInLines;
        try {
            const data = JSON.parse(raw);
            ratio = data.ratio;
            heightInLines = data.heightInLines;
        } catch (_a) {
        //
        }
        return {
            ratio: ratio || 0.7,
            heightInLines: heightInLines || 18
        };
    }
    constructor(){
        this.ratio = 0.7;
        this.heightInLines = 18;
    }
}
class $a37d7bdf5fc6adbf$var$ReferencesTree extends (0, $cvIYl.WorkbenchAsyncDataTree) {
}
/**
 * ZoneWidget that is shown inside the editor
 */ let $a37d7bdf5fc6adbf$export$a6aef00aae3b3577 = class ReferenceWidget extends $0607d5721260c302$exports.PeekViewWidget {
    dispose() {
        this.setModel(undefined);
        this._callOnDispose.dispose();
        this._disposeOnNewModel.dispose();
        (0, $atiRx.dispose)(this._preview);
        (0, $atiRx.dispose)(this._previewNotAvailableMessage);
        (0, $atiRx.dispose)(this._tree);
        (0, $atiRx.dispose)(this._previewModelReference);
        this._splitView.dispose();
        super.dispose();
    }
    _applyTheme(theme) {
        const borderColor = theme.getColor($0607d5721260c302$exports.peekViewBorder) || (0, $6yffc.Color).transparent;
        this.style({
            arrowColor: borderColor,
            frameColor: borderColor,
            headerBackgroundColor: theme.getColor($0607d5721260c302$exports.peekViewTitleBackground) || (0, $6yffc.Color).transparent,
            primaryHeadingColor: theme.getColor($0607d5721260c302$exports.peekViewTitleForeground),
            secondaryHeadingColor: theme.getColor($0607d5721260c302$exports.peekViewTitleInfoForeground)
        });
    }
    show(where) {
        this.editor.revealRangeInCenterIfOutsideViewport(where, 0 /* Smooth */ );
        super.show(where, this.layoutData.heightInLines || 18);
    }
    focusOnReferenceTree() {
        this._tree.domFocus();
    }
    focusOnPreviewEditor() {
        this._preview.focus();
    }
    isPreviewEditorFocused() {
        return this._preview.hasTextFocus();
    }
    _onTitleClick(e) {
        if (this._preview && this._preview.getModel()) this._onDidSelectReference.fire({
            element: this._getFocusedReference(),
            kind: e.ctrlKey || e.metaKey || e.altKey ? "side" : "open",
            source: "title"
        });
    }
    _fillBody(containerElement) {
        this.setCssClass("reference-zone-widget");
        // message pane
        this._messageContainer = $jOYcd.append(containerElement, $jOYcd.$("div.messages"));
        $jOYcd.hide(this._messageContainer);
        this._splitView = new (0, $iwqvz.SplitView)(containerElement, {
            orientation: 1 /* HORIZONTAL */ 
        });
        // editor
        this._previewContainer = $jOYcd.append(containerElement, $jOYcd.$("div.preview.inline"));
        let options = {
            scrollBeyondLastLine: false,
            scrollbar: {
                verticalScrollbarSize: 14,
                horizontal: "auto",
                useShadows: true,
                verticalHasArrows: false,
                horizontalHasArrows: false,
                alwaysConsumeMouseWheel: false
            },
            overviewRulerLanes: 2,
            fixedOverflowWidgets: true,
            minimap: {
                enabled: false
            }
        };
        this._preview = this._instantiationService.createInstance((0, $cd934ec6628ad62c$exports.EmbeddedCodeEditorWidget), this._previewContainer, options, this.editor);
        $jOYcd.hide(this._previewContainer);
        this._previewNotAvailableMessage = new (0, $g88WD.TextModel)($58WHl.localize("missingPreviewMessage", "no preview available"), (0, $g88WD.TextModel).DEFAULT_CREATION_OPTIONS, null, null, this._undoRedoService, this._modeService, this._languageConfigurationService);
        // tree
        this._treeContainer = $jOYcd.append(containerElement, $jOYcd.$("div.ref-tree.inline"));
        const treeOptions = {
            keyboardSupport: this._defaultTreeKeyboardSupport,
            accessibilityProvider: new (0, $ea5f6d950bc07003$exports.AccessibilityProvider)(),
            keyboardNavigationLabelProvider: this._instantiationService.createInstance((0, $ea5f6d950bc07003$exports.StringRepresentationProvider)),
            identityProvider: new (0, $ea5f6d950bc07003$exports.IdentityProvider)(),
            openOnSingleClick: true,
            selectionNavigation: true,
            overrideStyles: {
                listBackground: $0607d5721260c302$exports.peekViewResultsBackground
            }
        };
        if (this._defaultTreeKeyboardSupport) // the tree will consume `Escape` and prevent the widget from closing
        this._callOnDispose.add($jOYcd.addStandardDisposableListener(this._treeContainer, "keydown", (e)=>{
            if (e.equals(9 /* Escape */ )) {
                this._keybindingService.dispatchEvent(e, e.target);
                e.stopPropagation();
            }
        }, true));
        this._tree = this._instantiationService.createInstance($a37d7bdf5fc6adbf$var$ReferencesTree, "ReferencesWidget", this._treeContainer, new (0, $ea5f6d950bc07003$exports.Delegate)(), [
            this._instantiationService.createInstance((0, $ea5f6d950bc07003$exports.FileReferencesRenderer)),
            this._instantiationService.createInstance((0, $ea5f6d950bc07003$exports.OneReferenceRenderer)), 
        ], this._instantiationService.createInstance((0, $ea5f6d950bc07003$exports.DataSource)), treeOptions);
        // split stuff
        this._splitView.addView({
            onDidChange: (0, $fSvkC.Event).None,
            element: this._previewContainer,
            minimumSize: 200,
            maximumSize: Number.MAX_VALUE,
            layout: (width)=>{
                this._preview.layout({
                    height: this._dim.height,
                    width: width
                });
            }
        }, (0, $iwqvz.Sizing).Distribute);
        this._splitView.addView({
            onDidChange: (0, $fSvkC.Event).None,
            element: this._treeContainer,
            minimumSize: 100,
            maximumSize: Number.MAX_VALUE,
            layout: (width)=>{
                this._treeContainer.style.height = `${this._dim.height}px`;
                this._treeContainer.style.width = `${width}px`;
                this._tree.layout(this._dim.height, width);
            }
        }, (0, $iwqvz.Sizing).Distribute);
        this._disposables.add(this._splitView.onDidSashChange(()=>{
            if (this._dim.width) this.layoutData.ratio = this._splitView.getViewSize(0) / this._dim.width;
        }, undefined));
        // listen on selection and focus
        let onEvent = (element, kind)=>{
            if (element instanceof (0, $4cdccf6479bdc78a$exports.OneReference)) {
                if (kind === "show") this._revealReference(element, false);
                this._onDidSelectReference.fire({
                    element: element,
                    kind: kind,
                    source: "tree"
                });
            }
        };
        this._tree.onDidOpen((e)=>{
            if (e.sideBySide) onEvent(e.element, "side");
            else if (e.editorOptions.pinned) onEvent(e.element, "goto");
            else onEvent(e.element, "show");
        });
        $jOYcd.hide(this._treeContainer);
    }
    _onWidth(width) {
        if (this._dim) this._doLayoutBody(this._dim.height, width);
    }
    _doLayoutBody(heightInPixel, widthInPixel) {
        super._doLayoutBody(heightInPixel, widthInPixel);
        this._dim = new $jOYcd.Dimension(widthInPixel, heightInPixel);
        this.layoutData.heightInLines = this._viewZone ? this._viewZone.heightInLines : this.layoutData.heightInLines;
        this._splitView.layout(widthInPixel);
        this._splitView.resizeView(0, widthInPixel * this.layoutData.ratio);
    }
    setSelection(selection) {
        return this._revealReference(selection, true).then(()=>{
            if (!this._model) // disposed
            return;
            // show in tree
            this._tree.setSelection([
                selection
            ]);
            this._tree.setFocus([
                selection
            ]);
        });
    }
    setModel(newModel) {
        // clean up
        this._disposeOnNewModel.clear();
        this._model = newModel;
        if (this._model) return this._onNewModel();
        return Promise.resolve();
    }
    _onNewModel() {
        if (!this._model) return Promise.resolve(undefined);
        if (this._model.isEmpty) {
            this.setTitle("");
            this._messageContainer.innerText = $58WHl.localize("noResults", "No results");
            $jOYcd.show(this._messageContainer);
            return Promise.resolve(undefined);
        }
        $jOYcd.hide(this._messageContainer);
        this._decorationsManager = new $a37d7bdf5fc6adbf$var$DecorationsManager(this._preview, this._model);
        this._disposeOnNewModel.add(this._decorationsManager);
        // listen on model changes
        this._disposeOnNewModel.add(this._model.onDidChangeReferenceRange((reference)=>this._tree.rerender(reference)));
        // listen on editor
        this._disposeOnNewModel.add(this._preview.onMouseDown((e)=>{
            const { event: event , target: target  } = e;
            if (event.detail !== 2) return;
            const element = this._getFocusedReference();
            if (!element) return;
            this._onDidSelectReference.fire({
                element: {
                    uri: element.uri,
                    range: target.range
                },
                kind: event.ctrlKey || event.metaKey || event.altKey ? "side" : "open",
                source: "editor"
            });
        }));
        // make sure things are rendered
        this.container.classList.add("results-loaded");
        $jOYcd.show(this._treeContainer);
        $jOYcd.show(this._previewContainer);
        this._splitView.layout(this._dim.width);
        this.focusOnReferenceTree();
        // pick input and a reference to begin with
        return this._tree.setInput(this._model.groups.length === 1 ? this._model.groups[0] : this._model);
    }
    _getFocusedReference() {
        const [element] = this._tree.getFocus();
        if (element instanceof (0, $4cdccf6479bdc78a$exports.OneReference)) return element;
        else if (element instanceof (0, $4cdccf6479bdc78a$exports.FileReferences)) {
            if (element.children.length > 0) return element.children[0];
        }
        return undefined;
    }
    revealReference(reference) {
        return $a37d7bdf5fc6adbf$var$__awaiter(this, void 0, void 0, function*() {
            yield this._revealReference(reference, false);
            this._onDidSelectReference.fire({
                element: reference,
                kind: "goto",
                source: "tree"
            });
        });
    }
    _revealReference(reference, revealParent) {
        return $a37d7bdf5fc6adbf$var$__awaiter(this, void 0, void 0, function*() {
            // check if there is anything to do...
            if (this._revealedReference === reference) return;
            this._revealedReference = reference;
            // Update widget header
            if (reference.uri.scheme !== (0, $fDjBp.Schemas).inMemory) this.setTitle((0, $aMhG1.basenameOrAuthority)(reference.uri), this._uriLabel.getUriLabel((0, $aMhG1.dirname)(reference.uri)));
            else this.setTitle($58WHl.localize("peekView.alternateTitle", "References"));
            const promise = this._textModelResolverService.createModelReference(reference.uri);
            if (this._tree.getInput() === reference.parent) this._tree.reveal(reference);
            else {
                if (revealParent) this._tree.reveal(reference.parent);
                yield this._tree.expand(reference.parent);
                this._tree.reveal(reference);
            }
            const ref = yield promise;
            if (!this._model) {
                // disposed
                ref.dispose();
                return;
            }
            (0, $atiRx.dispose)(this._previewModelReference);
            // show in editor
            const model = ref.object;
            if (model) {
                const scrollType = this._preview.getModel() === model.textEditorModel ? 0 /* Smooth */  : 1 /* Immediate */ ;
                const sel = (0, $3HpR4.Range).lift(reference.range).collapseToStart();
                this._previewModelReference = ref;
                this._preview.setModel(model.textEditorModel);
                this._preview.setSelection(sel);
                this._preview.revealRangeInCenter(sel, scrollType);
            } else {
                this._preview.setModel(this._previewNotAvailableMessage);
                ref.dispose();
            }
        });
    }
    constructor(editor, _defaultTreeKeyboardSupport, layoutData, themeService, _textModelResolverService, _instantiationService, _peekViewService, _uriLabel, _undoRedoService, _keybindingService, _modeService, _languageConfigurationService){
        super(editor, {
            showFrame: false,
            showArrow: true,
            isResizeable: true,
            isAccessible: true,
            supportOnTitleClick: true
        }, _instantiationService);
        this._defaultTreeKeyboardSupport = _defaultTreeKeyboardSupport;
        this.layoutData = layoutData;
        this._textModelResolverService = _textModelResolverService;
        this._instantiationService = _instantiationService;
        this._peekViewService = _peekViewService;
        this._uriLabel = _uriLabel;
        this._undoRedoService = _undoRedoService;
        this._keybindingService = _keybindingService;
        this._modeService = _modeService;
        this._languageConfigurationService = _languageConfigurationService;
        this._disposeOnNewModel = new (0, $atiRx.DisposableStore)();
        this._callOnDispose = new (0, $atiRx.DisposableStore)();
        this._onDidSelectReference = new (0, $fSvkC.Emitter)();
        this.onDidSelectReference = this._onDidSelectReference.event;
        this._dim = new $jOYcd.Dimension(0, 0);
        this._applyTheme(themeService.getColorTheme());
        this._callOnDispose.add(themeService.onDidColorThemeChange(this._applyTheme.bind(this)));
        this._peekViewService.addExclusiveWidget(editor, this);
        this.create();
    }
};
$a37d7bdf5fc6adbf$export$a6aef00aae3b3577 = $a37d7bdf5fc6adbf$var$__decorate([
    $a37d7bdf5fc6adbf$var$__param(3, (0, $fUTzO.IThemeService)),
    $a37d7bdf5fc6adbf$var$__param(4, (0, $iwSMU.ITextModelService)),
    $a37d7bdf5fc6adbf$var$__param(5, (0, $iZW67.IInstantiationService)),
    $a37d7bdf5fc6adbf$var$__param(6, $0607d5721260c302$exports.IPeekViewService),
    $a37d7bdf5fc6adbf$var$__param(7, (0, $4znCf.ILabelService)),
    $a37d7bdf5fc6adbf$var$__param(8, (0, $5pInD.IUndoRedoService)),
    $a37d7bdf5fc6adbf$var$__param(9, (0, $gY9wc.IKeybindingService)),
    $a37d7bdf5fc6adbf$var$__param(10, (0, $6o4cZ.IModeService)),
    $a37d7bdf5fc6adbf$var$__param(11, (0, $9wt9e.ILanguageConfigurationService))
], $a37d7bdf5fc6adbf$export$a6aef00aae3b3577);


/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $aaffe83f20c0dfa0$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $aaffe83f20c0dfa0$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var $aaffe83f20c0dfa0$var$__awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const $aaffe83f20c0dfa0$export$8ecb7f78c7d67b70 = new (0, $bRtox.RawContextKey)("referenceSearchVisible", false, $58WHl.localize("referenceSearchVisible", "Whether reference peek is visible, like 'Peek References' or 'Peek Definition'"));
let $aaffe83f20c0dfa0$export$60e6f978b59c492d = class ReferencesController {
    static get(editor) {
        return editor.getContribution(ReferencesController.ID);
    }
    dispose() {
        var _a, _b;
        this._referenceSearchVisible.reset();
        this._disposables.dispose();
        (_a = this._widget) === null || _a === void 0 || _a.dispose();
        (_b = this._model) === null || _b === void 0 || _b.dispose();
        this._widget = undefined;
        this._model = undefined;
    }
    toggleWidget(range, modelPromise, peekMode) {
        // close current widget and return early is position didn't change
        let widgetPosition;
        if (this._widget) widgetPosition = this._widget.position;
        this.closeWidget();
        if (!!widgetPosition && range.containsPosition(widgetPosition)) return;
        this._peekMode = peekMode;
        this._referenceSearchVisible.set(true);
        // close the widget on model/mode changes
        this._disposables.add(this._editor.onDidChangeModelLanguage(()=>{
            this.closeWidget();
        }));
        this._disposables.add(this._editor.onDidChangeModel(()=>{
            if (!this._ignoreModelChangeEvent) this.closeWidget();
        }));
        const storageKey = "peekViewLayout";
        const data = (0, $a37d7bdf5fc6adbf$exports.LayoutData).fromJSON(this._storageService.get(storageKey, 0 /* GLOBAL */ , "{}"));
        this._widget = this._instantiationService.createInstance((0, $a37d7bdf5fc6adbf$exports.ReferenceWidget), this._editor, this._defaultTreeKeyboardSupport, data);
        this._widget.setTitle($58WHl.localize("labelLoading", "Loading..."));
        this._widget.show(range);
        this._disposables.add(this._widget.onDidClose(()=>{
            modelPromise.cancel();
            if (this._widget) {
                this._storageService.store(storageKey, JSON.stringify(this._widget.layoutData), 0 /* GLOBAL */ , 1 /* MACHINE */ );
                this._widget = undefined;
            }
            this.closeWidget();
        }));
        this._disposables.add(this._widget.onDidSelectReference((event)=>{
            let { element: element , kind: kind  } = event;
            if (!element) return;
            switch(kind){
                case "open":
                    if (event.source !== "editor" || !this._configurationService.getValue("editor.stablePeek")) // when stable peek is configured we don't close
                    // the peek window on selecting the editor
                    this.openReference(element, false, false);
                    break;
                case "side":
                    this.openReference(element, true, false);
                    break;
                case "goto":
                    if (peekMode) this._gotoReference(element);
                    else this.openReference(element, false, true);
                    break;
            }
        }));
        const requestId = ++this._requestIdPool;
        modelPromise.then((model)=>{
            var _a;
            // still current request? widget still open?
            if (requestId !== this._requestIdPool || !this._widget) {
                model.dispose();
                return undefined;
            }
            (_a = this._model) === null || _a === void 0 || _a.dispose();
            this._model = model;
            // show widget
            return this._widget.setModel(this._model).then(()=>{
                if (this._widget && this._model && this._editor.hasModel()) {
                    // set title
                    if (!this._model.isEmpty) this._widget.setMetaTitle($58WHl.localize("metaTitle.N", "{0} ({1})", this._model.title, this._model.references.length));
                    else this._widget.setMetaTitle("");
                    // set 'best' selection
                    let uri = this._editor.getModel().uri;
                    let pos = new (0, $8qXsZ.Position)(range.startLineNumber, range.startColumn);
                    let selection = this._model.nearestReference(uri, pos);
                    if (selection) return this._widget.setSelection(selection).then(()=>{
                        if (this._widget && this._editor.getOption(76 /* peekWidgetDefaultFocus */ ) === "editor") this._widget.focusOnPreviewEditor();
                    });
                }
                return undefined;
            });
        }, (error)=>{
            this._notificationService.error(error);
        });
    }
    changeFocusBetweenPreviewAndReferences() {
        if (!this._widget) // can be called while still resolving...
        return;
        if (this._widget.isPreviewEditorFocused()) this._widget.focusOnReferenceTree();
        else this._widget.focusOnPreviewEditor();
    }
    goToNextOrPreviousReference(fwd) {
        return $aaffe83f20c0dfa0$var$__awaiter(this, void 0, void 0, function*() {
            if (!this._editor.hasModel() || !this._model || !this._widget) // can be called while still resolving...
            return;
            const currentPosition = this._widget.position;
            if (!currentPosition) return;
            const source = this._model.nearestReference(this._editor.getModel().uri, currentPosition);
            if (!source) return;
            const target = this._model.nextOrPreviousReference(source, fwd);
            const editorFocus = this._editor.hasTextFocus();
            const previewEditorFocus = this._widget.isPreviewEditorFocused();
            yield this._widget.setSelection(target);
            yield this._gotoReference(target);
            if (editorFocus) this._editor.focus();
            else if (this._widget && previewEditorFocus) this._widget.focusOnPreviewEditor();
        });
    }
    revealReference(reference) {
        return $aaffe83f20c0dfa0$var$__awaiter(this, void 0, void 0, function*() {
            if (!this._editor.hasModel() || !this._model || !this._widget) // can be called while still resolving...
            return;
            yield this._widget.revealReference(reference);
        });
    }
    closeWidget(focusEditor = true) {
        var _a, _b;
        (_a = this._widget) === null || _a === void 0 || _a.dispose();
        (_b = this._model) === null || _b === void 0 || _b.dispose();
        this._referenceSearchVisible.reset();
        this._disposables.clear();
        this._widget = undefined;
        this._model = undefined;
        if (focusEditor) this._editor.focus();
        this._requestIdPool += 1; // Cancel pending requests
    }
    _gotoReference(ref) {
        if (this._widget) this._widget.hide();
        this._ignoreModelChangeEvent = true;
        const range = (0, $3HpR4.Range).lift(ref.range).collapseToStart();
        return this._editorService.openCodeEditor({
            resource: ref.uri,
            options: {
                selection: range
            }
        }, this._editor).then((openedEditor)=>{
            var _a;
            this._ignoreModelChangeEvent = false;
            if (!openedEditor || !this._widget) {
                // something went wrong...
                this.closeWidget();
                return;
            }
            if (this._editor === openedEditor) {
                //
                this._widget.show(range);
                this._widget.focusOnReferenceTree();
            } else {
                // we opened a different editor instance which means a different controller instance.
                // therefore we stop with this controller and continue with the other
                const other = ReferencesController.get(openedEditor);
                const model = this._model.clone();
                this.closeWidget();
                openedEditor.focus();
                other.toggleWidget(range, (0, $eFOsn.createCancelablePromise)((_)=>Promise.resolve(model)), (_a = this._peekMode) !== null && _a !== void 0 ? _a : false);
            }
        }, (err)=>{
            this._ignoreModelChangeEvent = false;
            (0, $g0782.onUnexpectedError)(err);
        });
    }
    openReference(ref, sideBySide, pinned) {
        // clear stage
        if (!sideBySide) this.closeWidget();
        const { uri: uri , range: range  } = ref;
        this._editorService.openCodeEditor({
            resource: uri,
            options: {
                selection: range,
                pinned: pinned
            }
        }, this._editor, sideBySide);
    }
    constructor(_defaultTreeKeyboardSupport, _editor, contextKeyService, _editorService, _notificationService, _instantiationService, _storageService, _configurationService){
        this._defaultTreeKeyboardSupport = _defaultTreeKeyboardSupport;
        this._editor = _editor;
        this._editorService = _editorService;
        this._notificationService = _notificationService;
        this._instantiationService = _instantiationService;
        this._storageService = _storageService;
        this._configurationService = _configurationService;
        this._disposables = new (0, $atiRx.DisposableStore)();
        this._requestIdPool = 0;
        this._ignoreModelChangeEvent = false;
        this._referenceSearchVisible = $aaffe83f20c0dfa0$export$8ecb7f78c7d67b70.bindTo(contextKeyService);
    }
};
$aaffe83f20c0dfa0$export$60e6f978b59c492d.ID = "editor.contrib.referencesController";
$aaffe83f20c0dfa0$export$60e6f978b59c492d = $aaffe83f20c0dfa0$var$__decorate([
    $aaffe83f20c0dfa0$var$__param(2, (0, $bRtox.IContextKeyService)),
    $aaffe83f20c0dfa0$var$__param(3, (0, $aXAVz.ICodeEditorService)),
    $aaffe83f20c0dfa0$var$__param(4, (0, $dgZ0t.INotificationService)),
    $aaffe83f20c0dfa0$var$__param(5, (0, $iZW67.IInstantiationService)),
    $aaffe83f20c0dfa0$var$__param(6, (0, $6XVdL.IStorageService)),
    $aaffe83f20c0dfa0$var$__param(7, (0, $9BIBz.IConfigurationService))
], $aaffe83f20c0dfa0$export$60e6f978b59c492d);
function $aaffe83f20c0dfa0$var$withController(accessor, fn) {
    const outerEditor = (0, $0607d5721260c302$exports.getOuterEditor)(accessor);
    if (!outerEditor) return;
    let controller = $aaffe83f20c0dfa0$export$60e6f978b59c492d.get(outerEditor);
    if (controller) fn(controller);
}
(0, $cczLz.KeybindingsRegistry).registerCommandAndKeybindingRule({
    id: "togglePeekWidgetFocus",
    weight: 100 /* EditorContrib */ ,
    primary: (0, $fQtIR.KeyChord)(2089 /* KeyK */ , 60 /* F2 */ ),
    when: (0, $bRtox.ContextKeyExpr).or($aaffe83f20c0dfa0$export$8ecb7f78c7d67b70, (0, $0607d5721260c302$exports.PeekContext).inPeekEditor),
    handler (accessor) {
        $aaffe83f20c0dfa0$var$withController(accessor, (controller)=>{
            controller.changeFocusBetweenPreviewAndReferences();
        });
    }
});
(0, $cczLz.KeybindingsRegistry).registerCommandAndKeybindingRule({
    id: "goToNextReference",
    weight: 90,
    primary: 62 /* F4 */ ,
    secondary: [
        70 /* F12 */ 
    ],
    when: (0, $bRtox.ContextKeyExpr).or($aaffe83f20c0dfa0$export$8ecb7f78c7d67b70, (0, $0607d5721260c302$exports.PeekContext).inPeekEditor),
    handler (accessor) {
        $aaffe83f20c0dfa0$var$withController(accessor, (controller)=>{
            controller.goToNextOrPreviousReference(true);
        });
    }
});
(0, $cczLz.KeybindingsRegistry).registerCommandAndKeybindingRule({
    id: "goToPreviousReference",
    weight: 90,
    primary: 1086 /* F4 */ ,
    secondary: [
        1094 /* F12 */ 
    ],
    when: (0, $bRtox.ContextKeyExpr).or($aaffe83f20c0dfa0$export$8ecb7f78c7d67b70, (0, $0607d5721260c302$exports.PeekContext).inPeekEditor),
    handler (accessor) {
        $aaffe83f20c0dfa0$var$withController(accessor, (controller)=>{
            controller.goToNextOrPreviousReference(false);
        });
    }
});
// commands that aren't needed anymore because there is now ContextKeyExpr.OR
(0, $fAXtX.CommandsRegistry).registerCommandAlias("goToNextReferenceFromEmbeddedEditor", "goToNextReference");
(0, $fAXtX.CommandsRegistry).registerCommandAlias("goToPreviousReferenceFromEmbeddedEditor", "goToPreviousReference");
// close
(0, $fAXtX.CommandsRegistry).registerCommandAlias("closeReferenceSearchEditor", "closeReferenceSearch");
(0, $fAXtX.CommandsRegistry).registerCommand("closeReferenceSearch", (accessor)=>$aaffe83f20c0dfa0$var$withController(accessor, (controller)=>controller.closeWidget()));
(0, $cczLz.KeybindingsRegistry).registerKeybindingRule({
    id: "closeReferenceSearch",
    weight: -1,
    primary: 9 /* Escape */ ,
    secondary: [
        1033 /* Escape */ 
    ],
    when: (0, $bRtox.ContextKeyExpr).and((0, $0607d5721260c302$exports.PeekContext).inPeekEditor, (0, $bRtox.ContextKeyExpr).not("config.editor.stablePeek"))
});
(0, $cczLz.KeybindingsRegistry).registerKeybindingRule({
    id: "closeReferenceSearch",
    weight: 250,
    primary: 9 /* Escape */ ,
    secondary: [
        1033 /* Escape */ 
    ],
    when: (0, $bRtox.ContextKeyExpr).and($aaffe83f20c0dfa0$export$8ecb7f78c7d67b70, (0, $bRtox.ContextKeyExpr).not("config.editor.stablePeek"))
});
(0, $cczLz.KeybindingsRegistry).registerCommandAndKeybindingRule({
    id: "revealReference",
    weight: 200 /* WorkbenchContrib */ ,
    primary: 3 /* Enter */ ,
    mac: {
        primary: 3 /* Enter */ ,
        secondary: [
            2066 /* DownArrow */ 
        ]
    },
    when: (0, $bRtox.ContextKeyExpr).and($aaffe83f20c0dfa0$export$8ecb7f78c7d67b70, (0, $cvIYl.WorkbenchListFocusContextKey)),
    handler (accessor) {
        var _a;
        const listService = accessor.get((0, $cvIYl.IListService));
        const focus = (_a = listService.lastFocusedList) === null || _a === void 0 ? void 0 : _a.getFocus();
        if (Array.isArray(focus) && focus[0] instanceof (0, $4cdccf6479bdc78a$exports.OneReference)) $aaffe83f20c0dfa0$var$withController(accessor, (controller)=>controller.revealReference(focus[0]));
    }
});
(0, $cczLz.KeybindingsRegistry).registerCommandAndKeybindingRule({
    id: "openReferenceToSide",
    weight: 100 /* EditorContrib */ ,
    primary: 2051 /* Enter */ ,
    mac: {
        primary: 259 /* Enter */ 
    },
    when: (0, $bRtox.ContextKeyExpr).and($aaffe83f20c0dfa0$export$8ecb7f78c7d67b70, (0, $cvIYl.WorkbenchListFocusContextKey)),
    handler (accessor) {
        var _a;
        const listService = accessor.get((0, $cvIYl.IListService));
        const focus = (_a = listService.lastFocusedList) === null || _a === void 0 ? void 0 : _a.getFocus();
        if (Array.isArray(focus) && focus[0] instanceof (0, $4cdccf6479bdc78a$exports.OneReference)) $aaffe83f20c0dfa0$var$withController(accessor, (controller)=>controller.openReference(focus[0], true, true));
    }
});
(0, $fAXtX.CommandsRegistry).registerCommand("openReference", (accessor)=>{
    var _a;
    const listService = accessor.get((0, $cvIYl.IListService));
    const focus = (_a = listService.lastFocusedList) === null || _a === void 0 ? void 0 : _a.getFocus();
    if (Array.isArray(focus) && focus[0] instanceof (0, $4cdccf6479bdc78a$exports.OneReference)) $aaffe83f20c0dfa0$var$withController(accessor, (controller)=>controller.openReference(focus[0], false, true));
});



var $84c63f7a41099be8$exports = {};

$parcel$export($84c63f7a41099be8$exports, "ISymbolNavigationService", function () { return $84c63f7a41099be8$export$feb1d4817f01196e; }, function (v) { return $84c63f7a41099be8$export$feb1d4817f01196e = v; });

var $fSvkC = parcelRequire("fSvkC");

var $atiRx = parcelRequire("atiRx");

var $aMhG1 = parcelRequire("aMhG1");

var $gGOeQ = parcelRequire("gGOeQ");

var $aXAVz = parcelRequire("aXAVz");

var $3HpR4 = parcelRequire("3HpR4");

var $58WHl = parcelRequire("58WHl");

var $bRtox = parcelRequire("bRtox");

var $6pFSu = parcelRequire("6pFSu");

var $iZW67 = parcelRequire("iZW67");

var $gY9wc = parcelRequire("gY9wc");

var $cczLz = parcelRequire("cczLz");

var $dgZ0t = parcelRequire("dgZ0t");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $84c63f7a41099be8$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $84c63f7a41099be8$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
const $84c63f7a41099be8$export$8abaed58afa3da78 = new (0, $bRtox.RawContextKey)("hasSymbols", false, (0, $58WHl.localize)("hasSymbols", "Whether there are symbol locations that can be navigated via keyboard-only."));
const $84c63f7a41099be8$export$feb1d4817f01196e = (0, $iZW67.createDecorator)("ISymbolNavigationService");
let $84c63f7a41099be8$var$SymbolNavigationService = class SymbolNavigationService {
    reset() {
        var _a, _b;
        this._ctxHasSymbols.reset();
        (_a = this._currentState) === null || _a === void 0 || _a.dispose();
        (_b = this._currentMessage) === null || _b === void 0 || _b.dispose();
        this._currentModel = undefined;
        this._currentIdx = -1;
    }
    put(anchor) {
        const refModel = anchor.parent.parent;
        if (refModel.references.length <= 1) {
            this.reset();
            return;
        }
        this._currentModel = refModel;
        this._currentIdx = refModel.references.indexOf(anchor);
        this._ctxHasSymbols.set(true);
        this._showMessage();
        const editorState = new $84c63f7a41099be8$var$EditorState(this._editorService);
        const listener = editorState.onDidChange((_)=>{
            if (this._ignoreEditorChange) return;
            const editor = this._editorService.getActiveCodeEditor();
            if (!editor) return;
            const model = editor.getModel();
            const position = editor.getPosition();
            if (!model || !position) return;
            let seenUri = false;
            let seenPosition = false;
            for (const reference of refModel.references){
                if ((0, $aMhG1.isEqual)(reference.uri, model.uri)) {
                    seenUri = true;
                    seenPosition = seenPosition || (0, $3HpR4.Range).containsPosition(reference.range, position);
                } else if (seenUri) break;
            }
            if (!seenUri || !seenPosition) this.reset();
        });
        this._currentState = (0, $atiRx.combinedDisposable)(editorState, listener);
    }
    revealNext(source) {
        if (!this._currentModel) return Promise.resolve();
        // get next result and advance
        this._currentIdx += 1;
        this._currentIdx %= this._currentModel.references.length;
        const reference = this._currentModel.references[this._currentIdx];
        // status
        this._showMessage();
        // open editor, ignore events while that happens
        this._ignoreEditorChange = true;
        return this._editorService.openCodeEditor({
            resource: reference.uri,
            options: {
                selection: (0, $3HpR4.Range).collapseToStart(reference.range),
                selectionRevealType: 3 /* NearTopIfOutsideViewport */ 
            }
        }, source).finally(()=>{
            this._ignoreEditorChange = false;
        });
    }
    _showMessage() {
        var _a;
        (_a = this._currentMessage) === null || _a === void 0 || _a.dispose();
        const kb = this._keybindingService.lookupKeybinding("editor.gotoNextSymbolFromResult");
        const message = kb ? (0, $58WHl.localize)("location.kb", "Symbol {0} of {1}, {2} for next", this._currentIdx + 1, this._currentModel.references.length, kb.getLabel()) : (0, $58WHl.localize)("location", "Symbol {0} of {1}", this._currentIdx + 1, this._currentModel.references.length);
        this._currentMessage = this._notificationService.status(message);
    }
    constructor(contextKeyService, _editorService, _notificationService, _keybindingService){
        this._editorService = _editorService;
        this._notificationService = _notificationService;
        this._keybindingService = _keybindingService;
        this._currentModel = undefined;
        this._currentIdx = -1;
        this._ignoreEditorChange = false;
        this._ctxHasSymbols = $84c63f7a41099be8$export$8abaed58afa3da78.bindTo(contextKeyService);
    }
};
$84c63f7a41099be8$var$SymbolNavigationService = $84c63f7a41099be8$var$__decorate([
    $84c63f7a41099be8$var$__param(0, (0, $bRtox.IContextKeyService)),
    $84c63f7a41099be8$var$__param(1, (0, $aXAVz.ICodeEditorService)),
    $84c63f7a41099be8$var$__param(2, (0, $dgZ0t.INotificationService)),
    $84c63f7a41099be8$var$__param(3, (0, $gY9wc.IKeybindingService))
], $84c63f7a41099be8$var$SymbolNavigationService);
(0, $6pFSu.registerSingleton)($84c63f7a41099be8$export$feb1d4817f01196e, $84c63f7a41099be8$var$SymbolNavigationService, true);
(0, $gGOeQ.registerEditorCommand)(new class extends (0, $gGOeQ.EditorCommand) {
    runEditorCommand(accessor, editor) {
        return accessor.get($84c63f7a41099be8$export$feb1d4817f01196e).revealNext(editor);
    }
    constructor(){
        super({
            id: "editor.gotoNextSymbolFromResult",
            precondition: $84c63f7a41099be8$export$8abaed58afa3da78,
            kbOpts: {
                weight: 100 /* EditorContrib */ ,
                primary: 70 /* F12 */ 
            }
        });
    }
});
(0, $cczLz.KeybindingsRegistry).registerCommandAndKeybindingRule({
    id: "editor.gotoNextSymbolFromResult.cancel",
    weight: 100 /* EditorContrib */ ,
    when: $84c63f7a41099be8$export$8abaed58afa3da78,
    primary: 9 /* Escape */ ,
    handler (accessor) {
        accessor.get($84c63f7a41099be8$export$feb1d4817f01196e).reset();
    }
});
//
let $84c63f7a41099be8$var$EditorState = class EditorState {
    dispose() {
        this._disposables.dispose();
        this._onDidChange.dispose();
        (0, $atiRx.dispose)(this._listener.values());
    }
    _onDidAddEditor(editor) {
        this._listener.set(editor, (0, $atiRx.combinedDisposable)(editor.onDidChangeCursorPosition((_)=>this._onDidChange.fire({
                editor: editor
            })), editor.onDidChangeModelContent((_)=>this._onDidChange.fire({
                editor: editor
            }))));
    }
    _onDidRemoveEditor(editor) {
        var _a;
        (_a = this._listener.get(editor)) === null || _a === void 0 || _a.dispose();
        this._listener.delete(editor);
    }
    constructor(editorService){
        this._listener = new Map();
        this._disposables = new (0, $atiRx.DisposableStore)();
        this._onDidChange = new (0, $fSvkC.Emitter)();
        this.onDidChange = this._onDidChange.event;
        this._disposables.add(editorService.onCodeEditorRemove(this._onDidRemoveEditor, this));
        this._disposables.add(editorService.onCodeEditorAdd(this._onDidAddEditor, this));
        editorService.listCodeEditors().forEach(this._onDidAddEditor, this);
    }
};
$84c63f7a41099be8$var$EditorState = $84c63f7a41099be8$var$__decorate([
    $84c63f7a41099be8$var$__param(0, (0, $aXAVz.ICodeEditorService))
], $84c63f7a41099be8$var$EditorState);





var $58WHl = parcelRequire("58WHl");

var $2IxgH = parcelRequire("2IxgH");

var $fAXtX = parcelRequire("fAXtX");

var $bRtox = parcelRequire("bRtox");

var $iZW67 = parcelRequire("iZW67");

var $dgZ0t = parcelRequire("dgZ0t");

var $9xODy = parcelRequire("9xODy");
var $8d7497a64739f40e$exports = {};

$parcel$export($8d7497a64739f40e$exports, "getDefinitionsAtPosition", function () { return $8d7497a64739f40e$export$6b9dcdfe32ab3450; }, function (v) { return $8d7497a64739f40e$export$6b9dcdfe32ab3450 = v; });
$parcel$export($8d7497a64739f40e$exports, "getDeclarationsAtPosition", function () { return $8d7497a64739f40e$export$268ced517630b719; }, function (v) { return $8d7497a64739f40e$export$268ced517630b719 = v; });
$parcel$export($8d7497a64739f40e$exports, "getImplementationsAtPosition", function () { return $8d7497a64739f40e$export$7d6802a2edcceb51; }, function (v) { return $8d7497a64739f40e$export$7d6802a2edcceb51 = v; });
$parcel$export($8d7497a64739f40e$exports, "getTypeDefinitionsAtPosition", function () { return $8d7497a64739f40e$export$e2b810cd1720408a; }, function (v) { return $8d7497a64739f40e$export$e2b810cd1720408a = v; });
$parcel$export($8d7497a64739f40e$exports, "getReferencesAtPosition", function () { return $8d7497a64739f40e$export$2bb33a4e47554443; }, function (v) { return $8d7497a64739f40e$export$2bb33a4e47554443 = v; });

var $gnEXx = parcelRequire("gnEXx");

var $g0782 = parcelRequire("g0782");

var $gGOeQ = parcelRequire("gGOeQ");

var $eKhCe = parcelRequire("eKhCe");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $8d7497a64739f40e$var$__awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
function $8d7497a64739f40e$var$getLocationLinks(model, position, registry, provide) {
    const provider = registry.ordered(model);
    // get results
    const promises = provider.map((provider)=>{
        return Promise.resolve(provide(provider, model, position)).then(undefined, (err)=>{
            (0, $g0782.onUnexpectedExternalError)(err);
            return undefined;
        });
    });
    return Promise.all(promises).then((values)=>{
        const result = [];
        for (let value of values){
            if (Array.isArray(value)) result.push(...value);
            else if (value) result.push(value);
        }
        return result;
    });
}
function $8d7497a64739f40e$export$6b9dcdfe32ab3450(model, position, token) {
    return $8d7497a64739f40e$var$getLocationLinks(model, position, (0, $eKhCe.DefinitionProviderRegistry), (provider, model, position)=>{
        return provider.provideDefinition(model, position, token);
    });
}
function $8d7497a64739f40e$export$268ced517630b719(model, position, token) {
    return $8d7497a64739f40e$var$getLocationLinks(model, position, (0, $eKhCe.DeclarationProviderRegistry), (provider, model, position)=>{
        return provider.provideDeclaration(model, position, token);
    });
}
function $8d7497a64739f40e$export$7d6802a2edcceb51(model, position, token) {
    return $8d7497a64739f40e$var$getLocationLinks(model, position, (0, $eKhCe.ImplementationProviderRegistry), (provider, model, position)=>{
        return provider.provideImplementation(model, position, token);
    });
}
function $8d7497a64739f40e$export$e2b810cd1720408a(model, position, token) {
    return $8d7497a64739f40e$var$getLocationLinks(model, position, (0, $eKhCe.TypeDefinitionProviderRegistry), (provider, model, position)=>{
        return provider.provideTypeDefinition(model, position, token);
    });
}
function $8d7497a64739f40e$export$2bb33a4e47554443(model, position, compact, token) {
    return $8d7497a64739f40e$var$getLocationLinks(model, position, (0, $eKhCe.ReferenceProviderRegistry), (provider, model, position)=>$8d7497a64739f40e$var$__awaiter(this, void 0, void 0, function*() {
            const result = yield provider.provideReferences(model, position, {
                includeDeclaration: true
            }, token);
            if (!compact || !result || result.length !== 2) return result;
            const resultWithoutDeclaration = yield provider.provideReferences(model, position, {
                includeDeclaration: false
            }, token);
            if (resultWithoutDeclaration && resultWithoutDeclaration.length === 1) return resultWithoutDeclaration;
            return result;
        }));
}
// -- API commands ----
function $8d7497a64739f40e$var$_sortedAndDeduped(callback) {
    return $8d7497a64739f40e$var$__awaiter(this, void 0, void 0, function*() {
        const rawLinks = yield callback();
        const model = new (0, $4cdccf6479bdc78a$exports.ReferencesModel)(rawLinks, "");
        const modelLinks = model.references.map((ref)=>ref.link);
        model.dispose();
        return modelLinks;
    });
}
(0, $gGOeQ.registerModelAndPositionCommand)("_executeDefinitionProvider", (model, position)=>$8d7497a64739f40e$var$_sortedAndDeduped(()=>$8d7497a64739f40e$export$6b9dcdfe32ab3450(model, position, (0, $gnEXx.CancellationToken).None)));
(0, $gGOeQ.registerModelAndPositionCommand)("_executeDeclarationProvider", (model, position)=>$8d7497a64739f40e$var$_sortedAndDeduped(()=>$8d7497a64739f40e$export$268ced517630b719(model, position, (0, $gnEXx.CancellationToken).None)));
(0, $gGOeQ.registerModelAndPositionCommand)("_executeImplementationProvider", (model, position)=>$8d7497a64739f40e$var$_sortedAndDeduped(()=>$8d7497a64739f40e$export$7d6802a2edcceb51(model, position, (0, $gnEXx.CancellationToken).None)));
(0, $gGOeQ.registerModelAndPositionCommand)("_executeTypeDefinitionProvider", (model, position)=>$8d7497a64739f40e$var$_sortedAndDeduped(()=>$8d7497a64739f40e$export$e2b810cd1720408a(model, position, (0, $gnEXx.CancellationToken).None)));
(0, $gGOeQ.registerModelAndPositionCommand)("_executeReferenceProvider", (model, position)=>$8d7497a64739f40e$var$_sortedAndDeduped(()=>$8d7497a64739f40e$export$2bb33a4e47554443(model, position, false, (0, $gnEXx.CancellationToken).None)));


/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $c1b9951d8cb44fb6$var$__awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var $c1b9951d8cb44fb6$var$_a, $c1b9951d8cb44fb6$var$_b, $c1b9951d8cb44fb6$var$_c, $c1b9951d8cb44fb6$var$_d, $c1b9951d8cb44fb6$var$_e, $c1b9951d8cb44fb6$var$_f, $c1b9951d8cb44fb6$var$_g, $c1b9951d8cb44fb6$var$_h;
(0, $2IxgH.MenuRegistry).appendMenuItem((0, $2IxgH.MenuId).EditorContext, {
    submenu: (0, $2IxgH.MenuId).EditorContextPeek,
    title: $58WHl.localize("peek.submenu", "Peek"),
    group: "navigation",
    order: 100
});
const $c1b9951d8cb44fb6$var$_goToActionIds = new Set();
function $c1b9951d8cb44fb6$var$registerGoToAction(ctor) {
    const result = new ctor();
    (0, $gGOeQ.registerInstantiatedEditorAction)(result);
    $c1b9951d8cb44fb6$var$_goToActionIds.add(result.id);
    return result;
}
class $c1b9951d8cb44fb6$var$SymbolNavigationAction extends (0, $gGOeQ.EditorAction) {
    run(accessor, editor) {
        if (!editor.hasModel()) return Promise.resolve(undefined);
        const notificationService = accessor.get((0, $dgZ0t.INotificationService));
        const editorService = accessor.get((0, $aXAVz.ICodeEditorService));
        const progressService = accessor.get((0, $9xODy.IEditorProgressService));
        const symbolNavService = accessor.get((0, $84c63f7a41099be8$exports.ISymbolNavigationService));
        const model = editor.getModel();
        const pos = editor.getPosition();
        const cts = new (0, $iVwSq.EditorStateCancellationTokenSource)(editor, 5 /* Position */ );
        const promise = (0, $eFOsn.raceCancellation)(this._getLocationModel(model, pos, cts.token), cts.token).then((references)=>$c1b9951d8cb44fb6$var$__awaiter(this, void 0, void 0, function*() {
                if (!references || cts.token.isCancellationRequested) return;
                (0, $cVmYb.alert)(references.ariaMessage);
                let altAction;
                if (references.referenceAt(model.uri, pos)) {
                    const altActionId = this._getAlternativeCommand(editor);
                    if (altActionId !== this.id && $c1b9951d8cb44fb6$var$_goToActionIds.has(altActionId)) altAction = editor.getAction(altActionId);
                }
                const referenceCount = references.references.length;
                if (referenceCount === 0) // no result -> show message
                {
                    if (!this._configuration.muteMessage) {
                        const info = model.getWordAtPosition(pos);
                        (0, $fd39257ccc55be8e$exports.MessageController).get(editor).showMessage(this._getNoResultFoundMessage(info), pos);
                    }
                } else if (referenceCount === 1 && altAction) // already at the only result, run alternative
                altAction.run();
                else // normal results handling
                return this._onResult(editorService, symbolNavService, editor, references);
            }), (err)=>{
            // report an error
            notificationService.error(err);
        }).finally(()=>{
            cts.dispose();
        });
        progressService.showWhile(promise, 250);
        return promise;
    }
    _onResult(editorService, symbolNavService, editor, model) {
        return $c1b9951d8cb44fb6$var$__awaiter(this, void 0, void 0, function*() {
            const gotoLocation = this._getGoToPreference(editor);
            if (!(editor instanceof (0, $cd934ec6628ad62c$exports.EmbeddedCodeEditorWidget)) && (this._configuration.openInPeek || gotoLocation === "peek" && model.references.length > 1)) this._openInPeek(editor, model);
            else {
                const next = model.firstReference();
                const peek = model.references.length > 1 && gotoLocation === "gotoAndPeek";
                const targetEditor = yield this._openReference(editor, editorService, next, this._configuration.openToSide, !peek);
                if (peek && targetEditor) this._openInPeek(targetEditor, model);
                else model.dispose();
                // keep remaining locations around when using
                // 'goto'-mode
                if (gotoLocation === "goto") symbolNavService.put(next);
            }
        });
    }
    _openReference(editor, editorService, reference, sideBySide, highlight) {
        return $c1b9951d8cb44fb6$var$__awaiter(this, void 0, void 0, function*() {
            // range is the target-selection-range when we have one
            // and the fallback is the 'full' range
            let range = undefined;
            if ((0, $eKhCe.isLocationLink)(reference)) range = reference.targetSelectionRange;
            if (!range) range = reference.range;
            if (!range) return undefined;
            const targetEditor = yield editorService.openCodeEditor({
                resource: reference.uri,
                options: {
                    selection: (0, $3HpR4.Range).collapseToStart(range),
                    selectionRevealType: 3 /* NearTopIfOutsideViewport */ 
                }
            }, editor, sideBySide);
            if (!targetEditor) return undefined;
            if (highlight) {
                const modelNow = targetEditor.getModel();
                const ids = targetEditor.deltaDecorations([], [
                    {
                        range: range,
                        options: {
                            description: "symbol-navigate-action-highlight",
                            className: "symbolHighlight"
                        }
                    }
                ]);
                setTimeout(()=>{
                    if (targetEditor.getModel() === modelNow) targetEditor.deltaDecorations(ids, []);
                }, 350);
            }
            return targetEditor;
        });
    }
    _openInPeek(target, model) {
        let controller = (0, $aaffe83f20c0dfa0$exports.ReferencesController).get(target);
        if (controller && target.hasModel()) controller.toggleWidget(target.getSelection(), (0, $eFOsn.createCancelablePromise)((_)=>Promise.resolve(model)), this._configuration.openInPeek);
        else model.dispose();
    }
    constructor(configuration, opts){
        super(opts);
        this._configuration = configuration;
    }
}
class $c1b9951d8cb44fb6$export$5aed1003b9513172 extends $c1b9951d8cb44fb6$var$SymbolNavigationAction {
    _getLocationModel(model, position, token) {
        return $c1b9951d8cb44fb6$var$__awaiter(this, void 0, void 0, function*() {
            return new (0, $4cdccf6479bdc78a$exports.ReferencesModel)((yield (0, $8d7497a64739f40e$exports.getDefinitionsAtPosition)(model, position, token)), $58WHl.localize("def.title", "Definitions"));
        });
    }
    _getNoResultFoundMessage(info) {
        return info && info.word ? $58WHl.localize("noResultWord", "No definition found for '{0}'", info.word) : $58WHl.localize("generic.noResults", "No definition found");
    }
    _getAlternativeCommand(editor) {
        return editor.getOption(50 /* gotoLocation */ ).alternativeDefinitionCommand;
    }
    _getGoToPreference(editor) {
        return editor.getOption(50 /* gotoLocation */ ).multipleDefinitions;
    }
}
const $c1b9951d8cb44fb6$var$goToDefinitionKb = (0, $1d81R.isWeb) && !(0, $abQPx.isStandalone) ? 2118 /* F12 */  : 70 /* F12 */ ;
$c1b9951d8cb44fb6$var$registerGoToAction(($c1b9951d8cb44fb6$var$_a = class GoToDefinitionAction extends $c1b9951d8cb44fb6$export$5aed1003b9513172 {
    constructor(){
        super({
            openToSide: false,
            openInPeek: false,
            muteMessage: false
        }, {
            id: GoToDefinitionAction.id,
            label: $58WHl.localize("actions.goToDecl.label", "Go to Definition"),
            alias: "Go to Definition",
            precondition: (0, $bRtox.ContextKeyExpr).and((0, $bdLce.EditorContextKeys).hasDefinitionProvider, (0, $bdLce.EditorContextKeys).isInWalkThroughSnippet.toNegated()),
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: $c1b9951d8cb44fb6$var$goToDefinitionKb,
                weight: 100 /* EditorContrib */ 
            },
            contextMenuOpts: {
                group: "navigation",
                order: 1.1
            }
        });
        (0, $fAXtX.CommandsRegistry).registerCommandAlias("editor.action.goToDeclaration", GoToDefinitionAction.id);
    }
}, $c1b9951d8cb44fb6$var$_a.id = "editor.action.revealDefinition", $c1b9951d8cb44fb6$var$_a));
$c1b9951d8cb44fb6$var$registerGoToAction(($c1b9951d8cb44fb6$var$_b = class OpenDefinitionToSideAction extends $c1b9951d8cb44fb6$export$5aed1003b9513172 {
    constructor(){
        super({
            openToSide: true,
            openInPeek: false,
            muteMessage: false
        }, {
            id: OpenDefinitionToSideAction.id,
            label: $58WHl.localize("actions.goToDeclToSide.label", "Open Definition to the Side"),
            alias: "Open Definition to the Side",
            precondition: (0, $bRtox.ContextKeyExpr).and((0, $bdLce.EditorContextKeys).hasDefinitionProvider, (0, $bdLce.EditorContextKeys).isInWalkThroughSnippet.toNegated()),
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: (0, $fQtIR.KeyChord)(2089 /* KeyK */ , $c1b9951d8cb44fb6$var$goToDefinitionKb),
                weight: 100 /* EditorContrib */ 
            }
        });
        (0, $fAXtX.CommandsRegistry).registerCommandAlias("editor.action.openDeclarationToTheSide", OpenDefinitionToSideAction.id);
    }
}, $c1b9951d8cb44fb6$var$_b.id = "editor.action.revealDefinitionAside", $c1b9951d8cb44fb6$var$_b));
$c1b9951d8cb44fb6$var$registerGoToAction(($c1b9951d8cb44fb6$var$_c = class PeekDefinitionAction extends $c1b9951d8cb44fb6$export$5aed1003b9513172 {
    constructor(){
        super({
            openToSide: false,
            openInPeek: true,
            muteMessage: false
        }, {
            id: PeekDefinitionAction.id,
            label: $58WHl.localize("actions.previewDecl.label", "Peek Definition"),
            alias: "Peek Definition",
            precondition: (0, $bRtox.ContextKeyExpr).and((0, $bdLce.EditorContextKeys).hasDefinitionProvider, (0, $0607d5721260c302$exports.PeekContext).notInPeekEditor, (0, $bdLce.EditorContextKeys).isInWalkThroughSnippet.toNegated()),
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: 582 /* F12 */ ,
                linux: {
                    primary: 3140 /* F10 */ 
                },
                weight: 100 /* EditorContrib */ 
            },
            contextMenuOpts: {
                menuId: (0, $2IxgH.MenuId).EditorContextPeek,
                group: "peek",
                order: 2
            }
        });
        (0, $fAXtX.CommandsRegistry).registerCommandAlias("editor.action.previewDeclaration", PeekDefinitionAction.id);
    }
}, $c1b9951d8cb44fb6$var$_c.id = "editor.action.peekDefinition", $c1b9951d8cb44fb6$var$_c));
//#endregion
//#region --- DECLARATION
class $c1b9951d8cb44fb6$var$DeclarationAction extends $c1b9951d8cb44fb6$var$SymbolNavigationAction {
    _getLocationModel(model, position, token) {
        return $c1b9951d8cb44fb6$var$__awaiter(this, void 0, void 0, function*() {
            return new (0, $4cdccf6479bdc78a$exports.ReferencesModel)((yield (0, $8d7497a64739f40e$exports.getDeclarationsAtPosition)(model, position, token)), $58WHl.localize("decl.title", "Declarations"));
        });
    }
    _getNoResultFoundMessage(info) {
        return info && info.word ? $58WHl.localize("decl.noResultWord", "No declaration found for '{0}'", info.word) : $58WHl.localize("decl.generic.noResults", "No declaration found");
    }
    _getAlternativeCommand(editor) {
        return editor.getOption(50 /* gotoLocation */ ).alternativeDeclarationCommand;
    }
    _getGoToPreference(editor) {
        return editor.getOption(50 /* gotoLocation */ ).multipleDeclarations;
    }
}
$c1b9951d8cb44fb6$var$registerGoToAction(($c1b9951d8cb44fb6$var$_d = class GoToDeclarationAction extends $c1b9951d8cb44fb6$var$DeclarationAction {
    _getNoResultFoundMessage(info) {
        return info && info.word ? $58WHl.localize("decl.noResultWord", "No declaration found for '{0}'", info.word) : $58WHl.localize("decl.generic.noResults", "No declaration found");
    }
    constructor(){
        super({
            openToSide: false,
            openInPeek: false,
            muteMessage: false
        }, {
            id: GoToDeclarationAction.id,
            label: $58WHl.localize("actions.goToDeclaration.label", "Go to Declaration"),
            alias: "Go to Declaration",
            precondition: (0, $bRtox.ContextKeyExpr).and((0, $bdLce.EditorContextKeys).hasDeclarationProvider, (0, $bdLce.EditorContextKeys).isInWalkThroughSnippet.toNegated()),
            contextMenuOpts: {
                group: "navigation",
                order: 1.3
            }
        });
    }
}, $c1b9951d8cb44fb6$var$_d.id = "editor.action.revealDeclaration", $c1b9951d8cb44fb6$var$_d));
$c1b9951d8cb44fb6$var$registerGoToAction(class PeekDeclarationAction extends $c1b9951d8cb44fb6$var$DeclarationAction {
    constructor(){
        super({
            openToSide: false,
            openInPeek: true,
            muteMessage: false
        }, {
            id: "editor.action.peekDeclaration",
            label: $58WHl.localize("actions.peekDecl.label", "Peek Declaration"),
            alias: "Peek Declaration",
            precondition: (0, $bRtox.ContextKeyExpr).and((0, $bdLce.EditorContextKeys).hasDeclarationProvider, (0, $0607d5721260c302$exports.PeekContext).notInPeekEditor, (0, $bdLce.EditorContextKeys).isInWalkThroughSnippet.toNegated()),
            contextMenuOpts: {
                menuId: (0, $2IxgH.MenuId).EditorContextPeek,
                group: "peek",
                order: 3
            }
        });
    }
});
//#endregion
//#region --- TYPE DEFINITION
class $c1b9951d8cb44fb6$var$TypeDefinitionAction extends $c1b9951d8cb44fb6$var$SymbolNavigationAction {
    _getLocationModel(model, position, token) {
        return $c1b9951d8cb44fb6$var$__awaiter(this, void 0, void 0, function*() {
            return new (0, $4cdccf6479bdc78a$exports.ReferencesModel)((yield (0, $8d7497a64739f40e$exports.getTypeDefinitionsAtPosition)(model, position, token)), $58WHl.localize("typedef.title", "Type Definitions"));
        });
    }
    _getNoResultFoundMessage(info) {
        return info && info.word ? $58WHl.localize("goToTypeDefinition.noResultWord", "No type definition found for '{0}'", info.word) : $58WHl.localize("goToTypeDefinition.generic.noResults", "No type definition found");
    }
    _getAlternativeCommand(editor) {
        return editor.getOption(50 /* gotoLocation */ ).alternativeTypeDefinitionCommand;
    }
    _getGoToPreference(editor) {
        return editor.getOption(50 /* gotoLocation */ ).multipleTypeDefinitions;
    }
}
$c1b9951d8cb44fb6$var$registerGoToAction(($c1b9951d8cb44fb6$var$_e = class GoToTypeDefinitionAction extends $c1b9951d8cb44fb6$var$TypeDefinitionAction {
    constructor(){
        super({
            openToSide: false,
            openInPeek: false,
            muteMessage: false
        }, {
            id: GoToTypeDefinitionAction.ID,
            label: $58WHl.localize("actions.goToTypeDefinition.label", "Go to Type Definition"),
            alias: "Go to Type Definition",
            precondition: (0, $bRtox.ContextKeyExpr).and((0, $bdLce.EditorContextKeys).hasTypeDefinitionProvider, (0, $bdLce.EditorContextKeys).isInWalkThroughSnippet.toNegated()),
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: 0,
                weight: 100 /* EditorContrib */ 
            },
            contextMenuOpts: {
                group: "navigation",
                order: 1.4
            }
        });
    }
}, $c1b9951d8cb44fb6$var$_e.ID = "editor.action.goToTypeDefinition", $c1b9951d8cb44fb6$var$_e));
$c1b9951d8cb44fb6$var$registerGoToAction(($c1b9951d8cb44fb6$var$_f = class PeekTypeDefinitionAction extends $c1b9951d8cb44fb6$var$TypeDefinitionAction {
    constructor(){
        super({
            openToSide: false,
            openInPeek: true,
            muteMessage: false
        }, {
            id: PeekTypeDefinitionAction.ID,
            label: $58WHl.localize("actions.peekTypeDefinition.label", "Peek Type Definition"),
            alias: "Peek Type Definition",
            precondition: (0, $bRtox.ContextKeyExpr).and((0, $bdLce.EditorContextKeys).hasTypeDefinitionProvider, (0, $0607d5721260c302$exports.PeekContext).notInPeekEditor, (0, $bdLce.EditorContextKeys).isInWalkThroughSnippet.toNegated()),
            contextMenuOpts: {
                menuId: (0, $2IxgH.MenuId).EditorContextPeek,
                group: "peek",
                order: 4
            }
        });
    }
}, $c1b9951d8cb44fb6$var$_f.ID = "editor.action.peekTypeDefinition", $c1b9951d8cb44fb6$var$_f));
//#endregion
//#region --- IMPLEMENTATION
class $c1b9951d8cb44fb6$var$ImplementationAction extends $c1b9951d8cb44fb6$var$SymbolNavigationAction {
    _getLocationModel(model, position, token) {
        return $c1b9951d8cb44fb6$var$__awaiter(this, void 0, void 0, function*() {
            return new (0, $4cdccf6479bdc78a$exports.ReferencesModel)((yield (0, $8d7497a64739f40e$exports.getImplementationsAtPosition)(model, position, token)), $58WHl.localize("impl.title", "Implementations"));
        });
    }
    _getNoResultFoundMessage(info) {
        return info && info.word ? $58WHl.localize("goToImplementation.noResultWord", "No implementation found for '{0}'", info.word) : $58WHl.localize("goToImplementation.generic.noResults", "No implementation found");
    }
    _getAlternativeCommand(editor) {
        return editor.getOption(50 /* gotoLocation */ ).alternativeImplementationCommand;
    }
    _getGoToPreference(editor) {
        return editor.getOption(50 /* gotoLocation */ ).multipleImplementations;
    }
}
$c1b9951d8cb44fb6$var$registerGoToAction(($c1b9951d8cb44fb6$var$_g = class GoToImplementationAction extends $c1b9951d8cb44fb6$var$ImplementationAction {
    constructor(){
        super({
            openToSide: false,
            openInPeek: false,
            muteMessage: false
        }, {
            id: GoToImplementationAction.ID,
            label: $58WHl.localize("actions.goToImplementation.label", "Go to Implementations"),
            alias: "Go to Implementations",
            precondition: (0, $bRtox.ContextKeyExpr).and((0, $bdLce.EditorContextKeys).hasImplementationProvider, (0, $bdLce.EditorContextKeys).isInWalkThroughSnippet.toNegated()),
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: 2118 /* F12 */ ,
                weight: 100 /* EditorContrib */ 
            },
            contextMenuOpts: {
                group: "navigation",
                order: 1.45
            }
        });
    }
}, $c1b9951d8cb44fb6$var$_g.ID = "editor.action.goToImplementation", $c1b9951d8cb44fb6$var$_g));
$c1b9951d8cb44fb6$var$registerGoToAction(($c1b9951d8cb44fb6$var$_h = class PeekImplementationAction extends $c1b9951d8cb44fb6$var$ImplementationAction {
    constructor(){
        super({
            openToSide: false,
            openInPeek: true,
            muteMessage: false
        }, {
            id: PeekImplementationAction.ID,
            label: $58WHl.localize("actions.peekImplementation.label", "Peek Implementations"),
            alias: "Peek Implementations",
            precondition: (0, $bRtox.ContextKeyExpr).and((0, $bdLce.EditorContextKeys).hasImplementationProvider, (0, $0607d5721260c302$exports.PeekContext).notInPeekEditor, (0, $bdLce.EditorContextKeys).isInWalkThroughSnippet.toNegated()),
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: 3142 /* F12 */ ,
                weight: 100 /* EditorContrib */ 
            },
            contextMenuOpts: {
                menuId: (0, $2IxgH.MenuId).EditorContextPeek,
                group: "peek",
                order: 5
            }
        });
    }
}, $c1b9951d8cb44fb6$var$_h.ID = "editor.action.peekImplementation", $c1b9951d8cb44fb6$var$_h));
//#endregion
//#region --- REFERENCES
class $c1b9951d8cb44fb6$var$ReferencesAction extends $c1b9951d8cb44fb6$var$SymbolNavigationAction {
    _getNoResultFoundMessage(info) {
        return info ? $58WHl.localize("references.no", "No references found for '{0}'", info.word) : $58WHl.localize("references.noGeneric", "No references found");
    }
    _getAlternativeCommand(editor) {
        return editor.getOption(50 /* gotoLocation */ ).alternativeReferenceCommand;
    }
    _getGoToPreference(editor) {
        return editor.getOption(50 /* gotoLocation */ ).multipleReferences;
    }
}
$c1b9951d8cb44fb6$var$registerGoToAction(class GoToReferencesAction extends $c1b9951d8cb44fb6$var$ReferencesAction {
    _getLocationModel(model, position, token) {
        return $c1b9951d8cb44fb6$var$__awaiter(this, void 0, void 0, function*() {
            return new (0, $4cdccf6479bdc78a$exports.ReferencesModel)((yield (0, $8d7497a64739f40e$exports.getReferencesAtPosition)(model, position, true, token)), $58WHl.localize("ref.title", "References"));
        });
    }
    constructor(){
        super({
            openToSide: false,
            openInPeek: false,
            muteMessage: false
        }, {
            id: "editor.action.goToReferences",
            label: $58WHl.localize("goToReferences.label", "Go to References"),
            alias: "Go to References",
            precondition: (0, $bRtox.ContextKeyExpr).and((0, $bdLce.EditorContextKeys).hasReferenceProvider, (0, $0607d5721260c302$exports.PeekContext).notInPeekEditor, (0, $bdLce.EditorContextKeys).isInWalkThroughSnippet.toNegated()),
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: 1094 /* F12 */ ,
                weight: 100 /* EditorContrib */ 
            },
            contextMenuOpts: {
                group: "navigation",
                order: 1.45
            }
        });
    }
});
$c1b9951d8cb44fb6$var$registerGoToAction(class PeekReferencesAction extends $c1b9951d8cb44fb6$var$ReferencesAction {
    _getLocationModel(model, position, token) {
        return $c1b9951d8cb44fb6$var$__awaiter(this, void 0, void 0, function*() {
            return new (0, $4cdccf6479bdc78a$exports.ReferencesModel)((yield (0, $8d7497a64739f40e$exports.getReferencesAtPosition)(model, position, false, token)), $58WHl.localize("ref.title", "References"));
        });
    }
    constructor(){
        super({
            openToSide: false,
            openInPeek: true,
            muteMessage: false
        }, {
            id: "editor.action.referenceSearch.trigger",
            label: $58WHl.localize("references.action.label", "Peek References"),
            alias: "Peek References",
            precondition: (0, $bRtox.ContextKeyExpr).and((0, $bdLce.EditorContextKeys).hasReferenceProvider, (0, $0607d5721260c302$exports.PeekContext).notInPeekEditor, (0, $bdLce.EditorContextKeys).isInWalkThroughSnippet.toNegated()),
            contextMenuOpts: {
                menuId: (0, $2IxgH.MenuId).EditorContextPeek,
                group: "peek",
                order: 6
            }
        });
    }
});
//#endregion
//#region --- GENERIC goto symbols command
class $c1b9951d8cb44fb6$var$GenericGoToLocationAction extends $c1b9951d8cb44fb6$var$SymbolNavigationAction {
    _getLocationModel(_model, _position, _token) {
        return $c1b9951d8cb44fb6$var$__awaiter(this, void 0, void 0, function*() {
            return new (0, $4cdccf6479bdc78a$exports.ReferencesModel)(this._references, $58WHl.localize("generic.title", "Locations"));
        });
    }
    _getNoResultFoundMessage(info) {
        return info && $58WHl.localize("generic.noResult", "No results for '{0}'", info.word) || "";
    }
    _getGoToPreference(editor) {
        var _a;
        return (_a = this._gotoMultipleBehaviour) !== null && _a !== void 0 ? _a : editor.getOption(50 /* gotoLocation */ ).multipleReferences;
    }
    _getAlternativeCommand() {
        return "";
    }
    constructor(config, _references, _gotoMultipleBehaviour){
        super(config, {
            id: "editor.action.goToLocation",
            label: $58WHl.localize("label.generic", "Go to Any Symbol"),
            alias: "Go to Any Symbol",
            precondition: (0, $bRtox.ContextKeyExpr).and((0, $0607d5721260c302$exports.PeekContext).notInPeekEditor, (0, $bdLce.EditorContextKeys).isInWalkThroughSnippet.toNegated())
        });
        this._references = _references;
        this._gotoMultipleBehaviour = _gotoMultipleBehaviour;
    }
}
(0, $fAXtX.CommandsRegistry).registerCommand({
    id: "editor.action.goToLocations",
    description: {
        description: "Go to locations from a position in a file",
        args: [
            {
                name: "uri",
                description: "The text document in which to start",
                constraint: (0, $7K96x.URI)
            },
            {
                name: "position",
                description: "The position at which to start",
                constraint: $8qXsZ.Position.isIPosition
            },
            {
                name: "locations",
                description: "An array of locations.",
                constraint: Array
            },
            {
                name: "multiple",
                description: "Define what to do when having multiple results, either `peek`, `gotoAndPeek`, or `goto"
            },
            {
                name: "noResultsMessage",
                description: "Human readable message that shows when locations is empty."
            }, 
        ]
    },
    handler: (accessor, resource, position, references, multiple, noResultsMessage, openInPeek)=>$c1b9951d8cb44fb6$var$__awaiter(void 0, void 0, void 0, function*() {
            (0, $3ICxR.assertType)((0, $7K96x.URI).isUri(resource));
            (0, $3ICxR.assertType)($8qXsZ.Position.isIPosition(position));
            (0, $3ICxR.assertType)(Array.isArray(references));
            (0, $3ICxR.assertType)(typeof multiple === "undefined" || typeof multiple === "string");
            (0, $3ICxR.assertType)(typeof openInPeek === "undefined" || typeof openInPeek === "boolean");
            const editorService = accessor.get((0, $aXAVz.ICodeEditorService));
            const editor = yield editorService.openCodeEditor({
                resource: resource
            }, editorService.getFocusedCodeEditor());
            if ((0, $1hSTN.isCodeEditor)(editor)) {
                editor.setPosition(position);
                editor.revealPositionInCenterIfOutsideViewport(position, 0 /* Smooth */ );
                return editor.invokeWithinContext((accessor)=>{
                    const command = new class extends $c1b9951d8cb44fb6$var$GenericGoToLocationAction {
                        _getNoResultFoundMessage(info) {
                            return noResultsMessage || super._getNoResultFoundMessage(info);
                        }
                    }({
                        muteMessage: !Boolean(noResultsMessage),
                        openInPeek: Boolean(openInPeek),
                        openToSide: false
                    }, references, multiple);
                    accessor.get((0, $iZW67.IInstantiationService)).invokeFunction(command.run.bind(command), editor);
                });
            }
        })
});
(0, $fAXtX.CommandsRegistry).registerCommand({
    id: "editor.action.peekLocations",
    description: {
        description: "Peek locations from a position in a file",
        args: [
            {
                name: "uri",
                description: "The text document in which to start",
                constraint: (0, $7K96x.URI)
            },
            {
                name: "position",
                description: "The position at which to start",
                constraint: $8qXsZ.Position.isIPosition
            },
            {
                name: "locations",
                description: "An array of locations.",
                constraint: Array
            },
            {
                name: "multiple",
                description: "Define what to do when having multiple results, either `peek`, `gotoAndPeek`, or `goto"
            }, 
        ]
    },
    handler: (accessor, resource, position, references, multiple)=>$c1b9951d8cb44fb6$var$__awaiter(void 0, void 0, void 0, function*() {
            accessor.get((0, $fAXtX.ICommandService)).executeCommand("editor.action.goToLocations", resource, position, references, multiple, undefined, true);
        })
});
//#endregion
//#region --- REFERENCE search special commands
(0, $fAXtX.CommandsRegistry).registerCommand({
    id: "editor.action.findReferences",
    handler: (accessor, resource, position)=>{
        (0, $3ICxR.assertType)((0, $7K96x.URI).isUri(resource));
        (0, $3ICxR.assertType)($8qXsZ.Position.isIPosition(position));
        const codeEditorService = accessor.get((0, $aXAVz.ICodeEditorService));
        return codeEditorService.openCodeEditor({
            resource: resource
        }, codeEditorService.getFocusedCodeEditor()).then((control)=>{
            if (!(0, $1hSTN.isCodeEditor)(control) || !control.hasModel()) return undefined;
            const controller = (0, $aaffe83f20c0dfa0$exports.ReferencesController).get(control);
            if (!controller) return undefined;
            const references = (0, $eFOsn.createCancelablePromise)((token)=>(0, $8d7497a64739f40e$exports.getReferencesAtPosition)(control.getModel(), $8qXsZ.Position.lift(position), false, token).then((references)=>new (0, $4cdccf6479bdc78a$exports.ReferencesModel)(references, $58WHl.localize("ref.title", "References"))));
            const range = new (0, $3HpR4.Range)(position.lineNumber, position.column, position.lineNumber, position.column);
            return Promise.resolve(controller.toggleWidget(range, references, false));
        });
    }
});
// use NEW command
(0, $fAXtX.CommandsRegistry).registerCommandAlias("editor.action.showReferences", "editor.action.peekLocations");
//#endregion
// -- unconditionally register goto-action
(0, $2IxgH.MenuRegistry).appendMenuItems([
    {
        id: (0, $2IxgH.MenuId).MenubarGoMenu,
        item: {
            command: {
                id: "editor.action.revealDefinition",
                title: $58WHl.localize({
                    key: "miGotoDefinition",
                    comment: [
                        "&& denotes a mnemonic"
                    ]
                }, "Go to &&Definition")
            },
            group: "4_symbol_nav",
            order: 2
        }
    },
    {
        id: (0, $2IxgH.MenuId).MenubarGoMenu,
        item: {
            command: {
                id: "editor.action.revealDeclaration",
                title: $58WHl.localize({
                    key: "miGotoDeclaration",
                    comment: [
                        "&& denotes a mnemonic"
                    ]
                }, "Go to &&Declaration")
            },
            group: "4_symbol_nav",
            order: 3
        }
    },
    {
        id: (0, $2IxgH.MenuId).MenubarGoMenu,
        item: {
            command: {
                id: "editor.action.goToTypeDefinition",
                title: $58WHl.localize({
                    key: "miGotoTypeDefinition",
                    comment: [
                        "&& denotes a mnemonic"
                    ]
                }, "Go to &&Type Definition")
            },
            group: "4_symbol_nav",
            order: 3
        }
    },
    {
        id: (0, $2IxgH.MenuId).MenubarGoMenu,
        item: {
            command: {
                id: "editor.action.goToImplementation",
                title: $58WHl.localize({
                    key: "miGotoImplementation",
                    comment: [
                        "&& denotes a mnemonic"
                    ]
                }, "Go to &&Implementations")
            },
            group: "4_symbol_nav",
            order: 4
        }
    },
    {
        id: (0, $2IxgH.MenuId).MenubarGoMenu,
        item: {
            command: {
                id: "editor.action.goToReferences",
                title: $58WHl.localize({
                    key: "miGotoReference",
                    comment: [
                        "&& denotes a mnemonic"
                    ]
                }, "Go to &&References")
            },
            group: "4_symbol_nav",
            order: 5
        }
    }, 
]);



/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $0c5c4a66d5e29ecc$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $0c5c4a66d5e29ecc$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
let $0c5c4a66d5e29ecc$export$35cdf6493d1302e = class GotoDefinitionAtPositionEditorContribution {
    static get(editor) {
        return editor.getContribution(GotoDefinitionAtPositionEditorContribution.ID);
    }
    startFindDefinitionFromCursor(position) {
        // For issue: https://github.com/microsoft/vscode/issues/46257
        // equivalent to mouse move with meta/ctrl key
        // First find the definition and add decorations
        // to the editor to be shown with the content hover widget
        return this.startFindDefinition(position).then(()=>{
            // Add listeners for editor cursor move and key down events
            // Dismiss the "extended" editor decorations when the user hides
            // the hover widget. There is no event for the widget itself so these
            // serve as a best effort. After removing the link decorations, the hover
            // widget is clean and will only show declarations per next request.
            this.toUnhookForKeyboard.add(this.editor.onDidChangeCursorPosition(()=>{
                this.currentWordAtPosition = null;
                this.removeLinkDecorations();
                this.toUnhookForKeyboard.clear();
            }));
            this.toUnhookForKeyboard.add(this.editor.onKeyDown((e)=>{
                if (e) {
                    this.currentWordAtPosition = null;
                    this.removeLinkDecorations();
                    this.toUnhookForKeyboard.clear();
                }
            }));
        });
    }
    startFindDefinitionFromMouse(mouseEvent, withKey) {
        // check if we are active and on a content widget
        if (mouseEvent.target.type === 9 /* CONTENT_WIDGET */  && this.linkDecorations.length > 0) return;
        if (!this.editor.hasModel() || !this.isEnabled(mouseEvent, withKey)) {
            this.currentWordAtPosition = null;
            this.removeLinkDecorations();
            return;
        }
        const position = mouseEvent.target.position;
        this.startFindDefinition(position);
    }
    startFindDefinition(position) {
        var _a;
        // Dispose listeners for updating decorations when using keyboard to show definition hover
        this.toUnhookForKeyboard.clear();
        // Find word at mouse position
        const word = position ? (_a = this.editor.getModel()) === null || _a === void 0 ? void 0 : _a.getWordAtPosition(position) : null;
        if (!word) {
            this.currentWordAtPosition = null;
            this.removeLinkDecorations();
            return Promise.resolve(0);
        }
        // Return early if word at position is still the same
        if (this.currentWordAtPosition && this.currentWordAtPosition.startColumn === word.startColumn && this.currentWordAtPosition.endColumn === word.endColumn && this.currentWordAtPosition.word === word.word) return Promise.resolve(0);
        this.currentWordAtPosition = word;
        // Find definition and decorate word if found
        let state = new (0, $iVwSq.EditorState)(this.editor, 15 /* Scroll */ );
        if (this.previousPromise) {
            this.previousPromise.cancel();
            this.previousPromise = null;
        }
        this.previousPromise = (0, $eFOsn.createCancelablePromise)((token)=>this.findDefinition(position, token));
        return this.previousPromise.then((results)=>{
            if (!results || !results.length || !state.validate(this.editor)) {
                this.removeLinkDecorations();
                return;
            }
            // Multiple results
            if (results.length > 1) this.addDecoration(new (0, $3HpR4.Range)(position.lineNumber, word.startColumn, position.lineNumber, word.endColumn), new (0, $chTln.MarkdownString)().appendText($58WHl.localize("multipleResults", "Click to show {0} definitions.", results.length)));
            else {
                let result = results[0];
                if (!result.uri) return;
                this.textModelResolverService.createModelReference(result.uri).then((ref)=>{
                    if (!ref.object || !ref.object.textEditorModel) {
                        ref.dispose();
                        return;
                    }
                    const { object: { textEditorModel: textEditorModel  }  } = ref;
                    const { startLineNumber: startLineNumber  } = result.range;
                    if (startLineNumber < 1 || startLineNumber > textEditorModel.getLineCount()) {
                        // invalid range
                        ref.dispose();
                        return;
                    }
                    const previewValue = this.getPreviewValue(textEditorModel, startLineNumber, result);
                    let wordRange;
                    if (result.originSelectionRange) wordRange = (0, $3HpR4.Range).lift(result.originSelectionRange);
                    else wordRange = new (0, $3HpR4.Range)(position.lineNumber, word.startColumn, position.lineNumber, word.endColumn);
                    const languageId = this.modeService.getModeIdByFilepathOrFirstLine(textEditorModel.uri);
                    this.addDecoration(wordRange, new (0, $chTln.MarkdownString)().appendCodeblock(languageId ? languageId : "", previewValue));
                    ref.dispose();
                });
            }
        }).then(undefined, (0, $g0782.onUnexpectedError));
    }
    getPreviewValue(textEditorModel, startLineNumber, result) {
        let rangeToUse = result.targetSelectionRange ? result.range : this.getPreviewRangeBasedOnBrackets(textEditorModel, startLineNumber);
        const numberOfLinesInRange = rangeToUse.endLineNumber - rangeToUse.startLineNumber;
        if (numberOfLinesInRange >= GotoDefinitionAtPositionEditorContribution.MAX_SOURCE_PREVIEW_LINES) rangeToUse = this.getPreviewRangeBasedOnIndentation(textEditorModel, startLineNumber);
        const previewValue = this.stripIndentationFromPreviewRange(textEditorModel, startLineNumber, rangeToUse);
        return previewValue;
    }
    stripIndentationFromPreviewRange(textEditorModel, startLineNumber, previewRange) {
        const startIndent = textEditorModel.getLineFirstNonWhitespaceColumn(startLineNumber);
        let minIndent = startIndent;
        for(let endLineNumber = startLineNumber + 1; endLineNumber < previewRange.endLineNumber; endLineNumber++){
            const endIndent = textEditorModel.getLineFirstNonWhitespaceColumn(endLineNumber);
            minIndent = Math.min(minIndent, endIndent);
        }
        const previewValue = textEditorModel.getValueInRange(previewRange).replace(new RegExp(`^\\s{${minIndent - 1}}`, "gm"), "").trim();
        return previewValue;
    }
    getPreviewRangeBasedOnIndentation(textEditorModel, startLineNumber) {
        const startIndent = textEditorModel.getLineFirstNonWhitespaceColumn(startLineNumber);
        const maxLineNumber = Math.min(textEditorModel.getLineCount(), startLineNumber + GotoDefinitionAtPositionEditorContribution.MAX_SOURCE_PREVIEW_LINES);
        let endLineNumber = startLineNumber + 1;
        for(; endLineNumber < maxLineNumber; endLineNumber++){
            let endIndent = textEditorModel.getLineFirstNonWhitespaceColumn(endLineNumber);
            if (startIndent === endIndent) break;
        }
        return new (0, $3HpR4.Range)(startLineNumber, 1, endLineNumber + 1, 1);
    }
    getPreviewRangeBasedOnBrackets(textEditorModel, startLineNumber) {
        const maxLineNumber = Math.min(textEditorModel.getLineCount(), startLineNumber + GotoDefinitionAtPositionEditorContribution.MAX_SOURCE_PREVIEW_LINES);
        const brackets = [];
        let ignoreFirstEmpty = true;
        let currentBracket = textEditorModel.bracketPairs.findNextBracket(new (0, $8qXsZ.Position)(startLineNumber, 1));
        while(currentBracket !== null){
            if (brackets.length === 0) brackets.push(currentBracket);
            else {
                const lastBracket = brackets[brackets.length - 1];
                if (lastBracket.open[0] === currentBracket.open[0] && lastBracket.isOpen && !currentBracket.isOpen) brackets.pop();
                else brackets.push(currentBracket);
                if (brackets.length === 0) {
                    if (ignoreFirstEmpty) ignoreFirstEmpty = false;
                    else return new (0, $3HpR4.Range)(startLineNumber, 1, currentBracket.range.endLineNumber + 1, 1);
                }
            }
            const maxColumn = textEditorModel.getLineMaxColumn(startLineNumber);
            let nextLineNumber = currentBracket.range.endLineNumber;
            let nextColumn = currentBracket.range.endColumn;
            if (maxColumn === currentBracket.range.endColumn) {
                nextLineNumber++;
                nextColumn = 1;
            }
            if (nextLineNumber > maxLineNumber) return new (0, $3HpR4.Range)(startLineNumber, 1, maxLineNumber + 1, 1);
            currentBracket = textEditorModel.bracketPairs.findNextBracket(new (0, $8qXsZ.Position)(nextLineNumber, nextColumn));
        }
        return new (0, $3HpR4.Range)(startLineNumber, 1, maxLineNumber + 1, 1);
    }
    addDecoration(range, hoverMessage) {
        const newDecorations = {
            range: range,
            options: {
                description: "goto-definition-link",
                inlineClassName: "goto-definition-link",
                hoverMessage: hoverMessage
            }
        };
        this.linkDecorations = this.editor.deltaDecorations(this.linkDecorations, [
            newDecorations
        ]);
    }
    removeLinkDecorations() {
        if (this.linkDecorations.length > 0) this.linkDecorations = this.editor.deltaDecorations(this.linkDecorations, []);
    }
    isEnabled(mouseEvent, withKey) {
        return this.editor.hasModel() && mouseEvent.isNoneOrSingleMouseDown && mouseEvent.target.type === 6 /* CONTENT_TEXT */  && (mouseEvent.hasTriggerModifier || (withKey ? withKey.keyCodeIsTriggerKey : false)) && (0, $eKhCe.DefinitionProviderRegistry).has(this.editor.getModel());
    }
    findDefinition(position, token) {
        const model = this.editor.getModel();
        if (!model) return Promise.resolve(null);
        return (0, $8d7497a64739f40e$exports.getDefinitionsAtPosition)(model, position, token);
    }
    gotoDefinition(position, openToSide) {
        this.editor.setPosition(position);
        return this.editor.invokeWithinContext((accessor)=>{
            const canPeek = !openToSide && this.editor.getOption(77 /* definitionLinkOpensInPeek */ ) && !this.isInPeekEditor(accessor);
            const action = new (0, $c1b9951d8cb44fb6$exports.DefinitionAction)({
                openToSide: openToSide,
                openInPeek: canPeek,
                muteMessage: true
            }, {
                alias: "",
                label: "",
                id: "",
                precondition: undefined
            });
            return action.run(accessor, this.editor);
        });
    }
    isInPeekEditor(accessor) {
        const contextKeyService = accessor.get((0, $bRtox.IContextKeyService));
        return (0, $0607d5721260c302$exports.PeekContext).inPeekEditor.getValue(contextKeyService);
    }
    dispose() {
        this.toUnhook.dispose();
    }
    constructor(editor, textModelResolverService, modeService){
        this.textModelResolverService = textModelResolverService;
        this.modeService = modeService;
        this.toUnhook = new (0, $atiRx.DisposableStore)();
        this.toUnhookForKeyboard = new (0, $atiRx.DisposableStore)();
        this.linkDecorations = [];
        this.currentWordAtPosition = null;
        this.previousPromise = null;
        this.editor = editor;
        let linkGesture = new (0, $0689be8677adfa61$export$e5a83b5c609cb4bb)(editor);
        this.toUnhook.add(linkGesture);
        this.toUnhook.add(linkGesture.onMouseMoveOrRelevantKeyDown(([mouseEvent, keyboardEvent])=>{
            this.startFindDefinitionFromMouse(mouseEvent, (0, $3ICxR.withNullAsUndefined)(keyboardEvent));
        }));
        this.toUnhook.add(linkGesture.onExecute((mouseEvent)=>{
            if (this.isEnabled(mouseEvent)) this.gotoDefinition(mouseEvent.target.position, mouseEvent.hasSideBySideModifier).then(()=>{
                this.removeLinkDecorations();
            }, (error)=>{
                this.removeLinkDecorations();
                (0, $g0782.onUnexpectedError)(error);
            });
        }));
        this.toUnhook.add(linkGesture.onCancel(()=>{
            this.removeLinkDecorations();
            this.currentWordAtPosition = null;
        }));
    }
};
$0c5c4a66d5e29ecc$export$35cdf6493d1302e.ID = "editor.contrib.gotodefinitionatposition";
$0c5c4a66d5e29ecc$export$35cdf6493d1302e.MAX_SOURCE_PREVIEW_LINES = 8;
$0c5c4a66d5e29ecc$export$35cdf6493d1302e = $0c5c4a66d5e29ecc$var$__decorate([
    $0c5c4a66d5e29ecc$var$__param(1, (0, $iwSMU.ITextModelService)),
    $0c5c4a66d5e29ecc$var$__param(2, (0, $6o4cZ.IModeService))
], $0c5c4a66d5e29ecc$export$35cdf6493d1302e);
(0, $gGOeQ.registerEditorContribution)($0c5c4a66d5e29ecc$export$35cdf6493d1302e.ID, $0c5c4a66d5e29ecc$export$35cdf6493d1302e);
(0, $fUTzO.registerThemingParticipant)((theme, collector)=>{
    const activeLinkForeground = theme.getColor((0, $3XYy8.editorActiveLinkForeground));
    if (activeLinkForeground) collector.addRule(`.monaco-editor .goto-definition-link { color: ${activeLinkForeground} !important; }`);
});


var $8c7ecbfaaee4ac63$exports = {};

$parcel$export($8c7ecbfaaee4ac63$exports, "ModesContentHoverWidget", function () { return $8c7ecbfaaee4ac63$export$27477712c6ad8b14; }, function (v) { return $8c7ecbfaaee4ac63$export$27477712c6ad8b14 = v; });

var $jOYcd = parcelRequire("jOYcd");

var $jOYcd = parcelRequire("jOYcd");

var $cffC6 = parcelRequire("cffC6");

var $atiRx = parcelRequire("atiRx");

const $685f6eb996bf9e24$var$$ = $jOYcd.$;
class $685f6eb996bf9e24$export$bd9cbe052e594410 extends (0, $atiRx.Disposable) {
    onContentsChanged() {
        this._scrollbar.scanDomNode();
    }
    constructor(){
        super();
        this.containerDomNode = document.createElement("div");
        this.containerDomNode.className = "monaco-hover";
        this.containerDomNode.tabIndex = 0;
        this.containerDomNode.setAttribute("role", "tooltip");
        this.contentsDomNode = document.createElement("div");
        this.contentsDomNode.className = "monaco-hover-content";
        this._scrollbar = this._register(new (0, $cffC6.DomScrollableElement)(this.contentsDomNode, {
            consumeMouseWheelIfScrollbarIsNeeded: true
        }));
        this.containerDomNode.appendChild(this._scrollbar.getDomNode());
    }
}
class $685f6eb996bf9e24$export$bc0ed2dd33dfd810 extends (0, $atiRx.Disposable) {
    static render(parent, actionOptions, keybindingLabel) {
        return new $685f6eb996bf9e24$export$bc0ed2dd33dfd810(parent, actionOptions, keybindingLabel);
    }
    setEnabled(enabled) {
        if (enabled) {
            this.actionContainer.classList.remove("disabled");
            this.actionContainer.removeAttribute("aria-disabled");
        } else {
            this.actionContainer.classList.add("disabled");
            this.actionContainer.setAttribute("aria-disabled", "true");
        }
    }
    constructor(parent, actionOptions, keybindingLabel){
        super();
        this.actionContainer = $jOYcd.append(parent, $685f6eb996bf9e24$var$$("div.action-container"));
        this.action = $jOYcd.append(this.actionContainer, $685f6eb996bf9e24$var$$("a.action"));
        this.action.setAttribute("role", "button");
        if (actionOptions.iconClass) $jOYcd.append(this.action, $685f6eb996bf9e24$var$$(`span.icon.${actionOptions.iconClass}`));
        const label = $jOYcd.append(this.action, $685f6eb996bf9e24$var$$("span"));
        label.textContent = keybindingLabel ? `${actionOptions.label} (${keybindingLabel})` : actionOptions.label;
        this._register($jOYcd.addDisposableListener(this.actionContainer, $jOYcd.EventType.MOUSE_DOWN, (e)=>{
            e.stopPropagation();
            e.preventDefault();
            actionOptions.run(this.actionContainer);
        }));
        this.setEnabled(true);
    }
}



var $5Bh2C = parcelRequire("5Bh2C");

var $4xCD7 = parcelRequire("4xCD7");

var $atiRx = parcelRequire("atiRx");

var $8qXsZ = parcelRequire("8qXsZ");

var $3HpR4 = parcelRequire("3HpR4");

var $g88WD = parcelRequire("g88WD");

var $eKhCe = parcelRequire("eKhCe");
var $3c464a16db535c4c$exports = {};

$parcel$export($3c464a16db535c4c$exports, "ColorHoverParticipant", function () { return $3c464a16db535c4c$export$c4145a38e12cf25c; }, function (v) { return $3c464a16db535c4c$export$c4145a38e12cf25c = v; });

var $eFOsn = parcelRequire("eFOsn");

var $gnEXx = parcelRequire("gnEXx");

var $6yffc = parcelRequire("6yffc");

var $atiRx = parcelRequire("atiRx");

var $3HpR4 = parcelRequire("3HpR4");



var $fSvkC = parcelRequire("fSvkC");
class $134716231d1af621$export$76cf66edc64e95a7 {
    get color() {
        return this._color;
    }
    set color(color) {
        if (this._color.equals(color)) return;
        this._color = color;
        this._onDidChangeColor.fire(color);
    }
    get presentation() {
        return this.colorPresentations[this.presentationIndex];
    }
    get colorPresentations() {
        return this._colorPresentations;
    }
    set colorPresentations(colorPresentations) {
        this._colorPresentations = colorPresentations;
        if (this.presentationIndex > colorPresentations.length - 1) this.presentationIndex = 0;
        this._onDidChangePresentation.fire(this.presentation);
    }
    selectNextColorPresentation() {
        this.presentationIndex = (this.presentationIndex + 1) % this.colorPresentations.length;
        this.flushColor();
        this._onDidChangePresentation.fire(this.presentation);
    }
    guessColorPresentation(color, originalText) {
        for(let i = 0; i < this.colorPresentations.length; i++)if (originalText.toLowerCase() === this.colorPresentations[i].label) {
            this.presentationIndex = i;
            this._onDidChangePresentation.fire(this.presentation);
            break;
        }
    }
    flushColor() {
        this._onColorFlushed.fire(this._color);
    }
    constructor(color, availableColorPresentations, presentationIndex){
        this.presentationIndex = presentationIndex;
        this._onColorFlushed = new (0, $fSvkC.Emitter)();
        this.onColorFlushed = this._onColorFlushed.event;
        this._onDidChangeColor = new (0, $fSvkC.Emitter)();
        this.onDidChangeColor = this._onDidChangeColor.event;
        this._onDidChangePresentation = new (0, $fSvkC.Emitter)();
        this.onDidChangePresentation = this._onDidChangePresentation.event;
        this.originalColor = color;
        this._color = color;
        this._colorPresentations = availableColorPresentations;
    }
}



var $abQPx = parcelRequire("abQPx");

var $jOYcd = parcelRequire("jOYcd");

var $iEcvm = parcelRequire("iEcvm");

var $5Bh2C = parcelRequire("5Bh2C");

var $6yffc = parcelRequire("6yffc");

var $fSvkC = parcelRequire("fSvkC");

var $atiRx = parcelRequire("atiRx");


var $58WHl = parcelRequire("58WHl");

var $3XYy8 = parcelRequire("3XYy8");

var $fUTzO = parcelRequire("fUTzO");
const $621615da28e36ca9$var$$ = $jOYcd.$;
class $621615da28e36ca9$export$89f2225ce9c7d7ad extends (0, $atiRx.Disposable) {
    onDidChangeColor(color) {
        this.pickedColorNode.style.backgroundColor = (0, $6yffc.Color).Format.CSS.format(color) || "";
        this.pickedColorNode.classList.toggle("light", color.rgba.a < 0.5 ? this.backgroundColor.isLighter() : color.isLighter());
        this.onDidChangePresentation();
    }
    onDidChangePresentation() {
        this.pickedColorNode.textContent = this.model.presentation ? this.model.presentation.label : "";
        this.pickedColorNode.prepend($621615da28e36ca9$var$$(".codicon.codicon-color-mode"));
    }
    constructor(container, model, themeService){
        super();
        this.model = model;
        this.domNode = $621615da28e36ca9$var$$(".colorpicker-header");
        $jOYcd.append(container, this.domNode);
        this.pickedColorNode = $jOYcd.append(this.domNode, $621615da28e36ca9$var$$(".picked-color"));
        const tooltip = (0, $58WHl.localize)("clickToToggleColorOptions", "Click to toggle color options (rgb/hsl/hex)");
        this.pickedColorNode.setAttribute("title", tooltip);
        const colorBox = $jOYcd.append(this.domNode, $621615da28e36ca9$var$$(".original-color"));
        colorBox.style.backgroundColor = (0, $6yffc.Color).Format.CSS.format(this.model.originalColor) || "";
        this.backgroundColor = themeService.getColorTheme().getColor((0, $3XYy8.editorHoverBackground)) || (0, $6yffc.Color).white;
        this._register((0, $fUTzO.registerThemingParticipant)((theme, collector)=>{
            this.backgroundColor = theme.getColor((0, $3XYy8.editorHoverBackground)) || (0, $6yffc.Color).white;
        }));
        this._register($jOYcd.addDisposableListener(this.pickedColorNode, $jOYcd.EventType.CLICK, ()=>this.model.selectNextColorPresentation()));
        this._register($jOYcd.addDisposableListener(colorBox, $jOYcd.EventType.CLICK, ()=>{
            this.model.color = this.model.originalColor;
            this.model.flushColor();
        }));
        this._register(model.onDidChangeColor(this.onDidChangeColor, this));
        this._register(model.onDidChangePresentation(this.onDidChangePresentation, this));
        this.pickedColorNode.style.backgroundColor = (0, $6yffc.Color).Format.CSS.format(model.color) || "";
        this.pickedColorNode.classList.toggle("light", model.color.rgba.a < 0.5 ? this.backgroundColor.isLighter() : model.color.isLighter());
        this.onDidChangeColor(this.model.color);
    }
}
class $621615da28e36ca9$export$d4d2a64f59ef343b extends (0, $atiRx.Disposable) {
    flushColor() {
        this.model.flushColor();
    }
    onDidSaturationValueChange({ s: s , v: v  }) {
        const hsva = this.model.color.hsva;
        this.model.color = new (0, $6yffc.Color)(new (0, $6yffc.HSVA)(hsva.h, s, v, hsva.a));
    }
    onDidOpacityChange(a) {
        const hsva = this.model.color.hsva;
        this.model.color = new (0, $6yffc.Color)(new (0, $6yffc.HSVA)(hsva.h, hsva.s, hsva.v, a));
    }
    onDidHueChange(value) {
        const hsva = this.model.color.hsva;
        const h = (1 - value) * 360;
        this.model.color = new (0, $6yffc.Color)(new (0, $6yffc.HSVA)(h === 360 ? 0 : h, hsva.s, hsva.v, hsva.a));
    }
    layout() {
        this.saturationBox.layout();
        this.opacityStrip.layout();
        this.hueStrip.layout();
    }
    constructor(container, model, pixelRatio){
        super();
        this.model = model;
        this.pixelRatio = pixelRatio;
        this.domNode = $621615da28e36ca9$var$$(".colorpicker-body");
        $jOYcd.append(container, this.domNode);
        this.saturationBox = new $621615da28e36ca9$var$SaturationBox(this.domNode, this.model, this.pixelRatio);
        this._register(this.saturationBox);
        this._register(this.saturationBox.onDidChange(this.onDidSaturationValueChange, this));
        this._register(this.saturationBox.onColorFlushed(this.flushColor, this));
        this.opacityStrip = new $621615da28e36ca9$var$OpacityStrip(this.domNode, this.model);
        this._register(this.opacityStrip);
        this._register(this.opacityStrip.onDidChange(this.onDidOpacityChange, this));
        this._register(this.opacityStrip.onColorFlushed(this.flushColor, this));
        this.hueStrip = new $621615da28e36ca9$var$HueStrip(this.domNode, this.model);
        this._register(this.hueStrip);
        this._register(this.hueStrip.onDidChange(this.onDidHueChange, this));
        this._register(this.hueStrip.onColorFlushed(this.flushColor, this));
    }
}
class $621615da28e36ca9$var$SaturationBox extends (0, $atiRx.Disposable) {
    onMouseDown(e) {
        this.monitor = this._register(new (0, $iEcvm.GlobalMouseMoveMonitor)());
        const origin = $jOYcd.getDomNodePagePosition(this.domNode);
        if (e.target !== this.selection) this.onDidChangePosition(e.offsetX, e.offsetY);
        this.monitor.startMonitoring(e.target, e.buttons, (0, $iEcvm.standardMouseMoveMerger), (event)=>this.onDidChangePosition(event.posx - origin.left, event.posy - origin.top), ()=>null);
        const mouseUpListener = $jOYcd.addDisposableGenericMouseUpListner(document, ()=>{
            this._onColorFlushed.fire();
            mouseUpListener.dispose();
            if (this.monitor) {
                this.monitor.stopMonitoring(true);
                this.monitor = null;
            }
        }, true);
    }
    onDidChangePosition(left, top) {
        const s = Math.max(0, Math.min(1, left / this.width));
        const v = Math.max(0, Math.min(1, 1 - top / this.height));
        this.paintSelection(s, v);
        this._onDidChange.fire({
            s: s,
            v: v
        });
    }
    layout() {
        this.width = this.domNode.offsetWidth;
        this.height = this.domNode.offsetHeight;
        this.canvas.width = this.width * this.pixelRatio;
        this.canvas.height = this.height * this.pixelRatio;
        this.paint();
        const hsva = this.model.color.hsva;
        this.paintSelection(hsva.s, hsva.v);
    }
    paint() {
        const hsva = this.model.color.hsva;
        const saturatedColor = new (0, $6yffc.Color)(new (0, $6yffc.HSVA)(hsva.h, 1, 1, 1));
        const ctx = this.canvas.getContext("2d");
        const whiteGradient = ctx.createLinearGradient(0, 0, this.canvas.width, 0);
        whiteGradient.addColorStop(0, "rgba(255, 255, 255, 1)");
        whiteGradient.addColorStop(0.5, "rgba(255, 255, 255, 0.5)");
        whiteGradient.addColorStop(1, "rgba(255, 255, 255, 0)");
        const blackGradient = ctx.createLinearGradient(0, 0, 0, this.canvas.height);
        blackGradient.addColorStop(0, "rgba(0, 0, 0, 0)");
        blackGradient.addColorStop(1, "rgba(0, 0, 0, 1)");
        ctx.rect(0, 0, this.canvas.width, this.canvas.height);
        ctx.fillStyle = (0, $6yffc.Color).Format.CSS.format(saturatedColor);
        ctx.fill();
        ctx.fillStyle = whiteGradient;
        ctx.fill();
        ctx.fillStyle = blackGradient;
        ctx.fill();
    }
    paintSelection(s, v) {
        this.selection.style.left = `${s * this.width}px`;
        this.selection.style.top = `${this.height - v * this.height}px`;
    }
    onDidChangeColor() {
        if (this.monitor && this.monitor.isMonitoring()) return;
        this.paint();
    }
    constructor(container, model, pixelRatio){
        super();
        this.model = model;
        this.pixelRatio = pixelRatio;
        this._onDidChange = new (0, $fSvkC.Emitter)();
        this.onDidChange = this._onDidChange.event;
        this._onColorFlushed = new (0, $fSvkC.Emitter)();
        this.onColorFlushed = this._onColorFlushed.event;
        this.domNode = $621615da28e36ca9$var$$(".saturation-wrap");
        $jOYcd.append(container, this.domNode);
        // Create canvas, draw selected color
        this.canvas = document.createElement("canvas");
        this.canvas.className = "saturation-box";
        $jOYcd.append(this.domNode, this.canvas);
        // Add selection circle
        this.selection = $621615da28e36ca9$var$$(".saturation-selection");
        $jOYcd.append(this.domNode, this.selection);
        this.layout();
        this._register($jOYcd.addDisposableGenericMouseDownListner(this.domNode, (e)=>this.onMouseDown(e)));
        this._register(this.model.onDidChangeColor(this.onDidChangeColor, this));
        this.monitor = null;
    }
}
class $621615da28e36ca9$var$Strip extends (0, $atiRx.Disposable) {
    layout() {
        this.height = this.domNode.offsetHeight - this.slider.offsetHeight;
        const value = this.getValue(this.model.color);
        this.updateSliderPosition(value);
    }
    onMouseDown(e) {
        const monitor = this._register(new (0, $iEcvm.GlobalMouseMoveMonitor)());
        const origin = $jOYcd.getDomNodePagePosition(this.domNode);
        this.domNode.classList.add("grabbing");
        if (e.target !== this.slider) this.onDidChangeTop(e.offsetY);
        monitor.startMonitoring(e.target, e.buttons, (0, $iEcvm.standardMouseMoveMerger), (event)=>this.onDidChangeTop(event.posy - origin.top), ()=>null);
        const mouseUpListener = $jOYcd.addDisposableGenericMouseUpListner(document, ()=>{
            this._onColorFlushed.fire();
            mouseUpListener.dispose();
            monitor.stopMonitoring(true);
            this.domNode.classList.remove("grabbing");
        }, true);
    }
    onDidChangeTop(top) {
        const value = Math.max(0, Math.min(1, 1 - top / this.height));
        this.updateSliderPosition(value);
        this._onDidChange.fire(value);
    }
    updateSliderPosition(value) {
        this.slider.style.top = `${(1 - value) * this.height}px`;
    }
    constructor(container, model){
        super();
        this.model = model;
        this._onDidChange = new (0, $fSvkC.Emitter)();
        this.onDidChange = this._onDidChange.event;
        this._onColorFlushed = new (0, $fSvkC.Emitter)();
        this.onColorFlushed = this._onColorFlushed.event;
        this.domNode = $jOYcd.append(container, $621615da28e36ca9$var$$(".strip"));
        this.overlay = $jOYcd.append(this.domNode, $621615da28e36ca9$var$$(".overlay"));
        this.slider = $jOYcd.append(this.domNode, $621615da28e36ca9$var$$(".slider"));
        this.slider.style.top = `0px`;
        this._register($jOYcd.addDisposableGenericMouseDownListner(this.domNode, (e)=>this.onMouseDown(e)));
        this.layout();
    }
}
class $621615da28e36ca9$var$OpacityStrip extends $621615da28e36ca9$var$Strip {
    onDidChangeColor(color) {
        const { r: r , g: g , b: b  } = color.rgba;
        const opaque = new (0, $6yffc.Color)(new (0, $6yffc.RGBA)(r, g, b, 1));
        const transparent = new (0, $6yffc.Color)(new (0, $6yffc.RGBA)(r, g, b, 0));
        this.overlay.style.background = `linear-gradient(to bottom, ${opaque} 0%, ${transparent} 100%)`;
    }
    getValue(color) {
        return color.hsva.a;
    }
    constructor(container, model){
        super(container, model);
        this.domNode.classList.add("opacity-strip");
        this._register(model.onDidChangeColor(this.onDidChangeColor, this));
        this.onDidChangeColor(this.model.color);
    }
}
class $621615da28e36ca9$var$HueStrip extends $621615da28e36ca9$var$Strip {
    getValue(color) {
        return 1 - color.hsva.h / 360;
    }
    constructor(container, model){
        super(container, model);
        this.domNode.classList.add("hue-strip");
    }
}
class $621615da28e36ca9$export$1d10c81ebf4df2e3 extends (0, $5Bh2C.Widget) {
    layout() {
        this.body.layout();
    }
    constructor(container, model, pixelRatio, themeService){
        super();
        this.model = model;
        this.pixelRatio = pixelRatio;
        this._register((0, $abQPx.onDidChangeZoomLevel)(()=>this.layout()));
        const element = $621615da28e36ca9$var$$(".colorpicker-widget");
        container.appendChild(element);
        const header = new $621615da28e36ca9$export$89f2225ce9c7d7ad(element, this.model, themeService);
        this.body = new $621615da28e36ca9$export$d4d2a64f59ef343b(element, this.model, this.pixelRatio);
        this._register(header);
        this._register(this.body);
    }
}



var $fUTzO = parcelRequire("fUTzO");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $3c464a16db535c4c$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $3c464a16db535c4c$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var $3c464a16db535c4c$var$__awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class $3c464a16db535c4c$export$1e790ecd6a44b70f {
    isValidForHoverAnchor(anchor) {
        return anchor.type === 1 /* Range */  && this.range.startColumn <= anchor.range.startColumn && this.range.endColumn >= anchor.range.endColumn;
    }
    constructor(owner, range, model, provider){
        this.owner = owner;
        this.range = range;
        this.model = model;
        this.provider = provider;
        /**
         * Force the hover to always be rendered at this specific range,
         * even in the case of multiple hover parts.
         */ this.forceShowAtRange = true;
    }
}
let $3c464a16db535c4c$export$c4145a38e12cf25c = class ColorHoverParticipant {
    computeSync(anchor, lineDecorations) {
        return [];
    }
    computeAsync(anchor, lineDecorations, token) {
        return (0, $eFOsn.AsyncIterableObject).fromPromise(this._computeAsync(anchor, lineDecorations, token));
    }
    _computeAsync(anchor, lineDecorations, token) {
        return $3c464a16db535c4c$var$__awaiter(this, void 0, void 0, function*() {
            if (!this._editor.hasModel()) return [];
            const colorDetector = (0, $a08a87c8cfcb2171$exports.ColorDetector).get(this._editor);
            for (const d of lineDecorations){
                if (!colorDetector.isColorDecorationId(d.id)) continue;
                const colorData = colorDetector.getColorData(d.range.getStartPosition());
                if (colorData) {
                    const colorHover = yield this._createColorHover(this._editor.getModel(), colorData.colorInfo, colorData.provider);
                    return [
                        colorHover
                    ];
                }
            }
            return [];
        });
    }
    _createColorHover(editorModel, colorInfo, provider) {
        return $3c464a16db535c4c$var$__awaiter(this, void 0, void 0, function*() {
            const originalText = editorModel.getValueInRange(colorInfo.range);
            const { red: red , green: green , blue: blue , alpha: alpha  } = colorInfo.color;
            const rgba = new (0, $6yffc.RGBA)(Math.round(red * 255), Math.round(green * 255), Math.round(blue * 255), alpha);
            const color = new (0, $6yffc.Color)(rgba);
            const colorPresentations = yield (0, $78bc6055ce5a0afc$export$c3064c7f8ffdbaa5)(editorModel, colorInfo, provider, (0, $gnEXx.CancellationToken).None);
            const model = new (0, $134716231d1af621$export$76cf66edc64e95a7)(color, [], 0);
            model.colorPresentations = colorPresentations || [];
            model.guessColorPresentation(color, originalText);
            return new $3c464a16db535c4c$export$1e790ecd6a44b70f(this, (0, $3HpR4.Range).lift(colorInfo.range), model, provider);
        });
    }
    renderHoverParts(hoverParts, fragment, statusBar) {
        if (hoverParts.length === 0 || !this._editor.hasModel()) return (0, $atiRx.Disposable).None;
        const disposables = new (0, $atiRx.DisposableStore)();
        const colorHover = hoverParts[0];
        const editorModel = this._editor.getModel();
        const model = colorHover.model;
        const widget = disposables.add(new (0, $621615da28e36ca9$export$1d10c81ebf4df2e3)(fragment, model, this._editor.getOption(128 /* pixelRatio */ ), this._themeService));
        let range = new (0, $3HpR4.Range)(colorHover.range.startLineNumber, colorHover.range.startColumn, colorHover.range.endLineNumber, colorHover.range.endColumn);
        const updateEditorModel = ()=>{
            let textEdits;
            let newRange;
            if (model.presentation.textEdit) {
                textEdits = [
                    model.presentation.textEdit
                ];
                newRange = new (0, $3HpR4.Range)(model.presentation.textEdit.range.startLineNumber, model.presentation.textEdit.range.startColumn, model.presentation.textEdit.range.endLineNumber, model.presentation.textEdit.range.endColumn);
                const trackedRange = this._editor.getModel()._setTrackedRange(null, newRange, 3 /* GrowsOnlyWhenTypingAfter */ );
                this._editor.pushUndoStop();
                this._editor.executeEdits("colorpicker", textEdits);
                newRange = this._editor.getModel()._getTrackedRange(trackedRange) || newRange;
            } else {
                textEdits = [
                    {
                        identifier: null,
                        range: range,
                        text: model.presentation.label,
                        forceMoveMarkers: false
                    }
                ];
                newRange = range.setEndPosition(range.endLineNumber, range.startColumn + model.presentation.label.length);
                this._editor.pushUndoStop();
                this._editor.executeEdits("colorpicker", textEdits);
            }
            if (model.presentation.additionalTextEdits) {
                textEdits = [
                    ...model.presentation.additionalTextEdits
                ];
                this._editor.executeEdits("colorpicker", textEdits);
                this._hover.hide();
            }
            this._editor.pushUndoStop();
            range = newRange;
        };
        const updateColorPresentations = (color)=>{
            return (0, $78bc6055ce5a0afc$export$c3064c7f8ffdbaa5)(editorModel, {
                range: range,
                color: {
                    red: color.rgba.r / 255,
                    green: color.rgba.g / 255,
                    blue: color.rgba.b / 255,
                    alpha: color.rgba.a
                }
            }, colorHover.provider, (0, $gnEXx.CancellationToken).None).then((colorPresentations)=>{
                model.colorPresentations = colorPresentations || [];
            });
        };
        disposables.add(model.onColorFlushed((color)=>{
            updateColorPresentations(color).then(updateEditorModel);
        }));
        disposables.add(model.onDidChangeColor(updateColorPresentations));
        this._hover.setColorPicker(widget);
        return disposables;
    }
    constructor(_editor, _hover, _themeService){
        this._editor = _editor;
        this._hover = _hover;
        this._themeService = _themeService;
    }
};
$3c464a16db535c4c$export$c4145a38e12cf25c = $3c464a16db535c4c$var$__decorate([
    $3c464a16db535c4c$var$__param(2, (0, $fUTzO.IThemeService))
], $3c464a16db535c4c$export$c4145a38e12cf25c);


var $53b7605684860f54$exports = {};

$parcel$export($53b7605684860f54$exports, "HoverOperation", function () { return $53b7605684860f54$export$35fb423ab90fde65; }, function (v) { return $53b7605684860f54$export$35fb423ab90fde65 = v; });

var $eFOsn = parcelRequire("eFOsn");

var $g0782 = parcelRequire("g0782");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $53b7605684860f54$var$__awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var $53b7605684860f54$var$__asyncValues = undefined && undefined.__asyncValues || function(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
};
class $53b7605684860f54$export$35fb423ab90fde65 {
    setHoverTime(hoverTime) {
        this._hoverTime = hoverTime;
    }
    _firstWaitTime() {
        return this._hoverTime / 2;
    }
    _secondWaitTime() {
        return this._hoverTime / 2;
    }
    _loadingMessageTime() {
        return 3 * this._hoverTime;
    }
    _triggerAsyncComputation() {
        this._state = 2 /* SECOND_WAIT */ ;
        this._secondWaitScheduler.schedule(this._secondWaitTime());
        if (this._computer.computeAsync) {
            this._asyncIterableDone = false;
            this._asyncIterable = (0, $eFOsn.createCancelableAsyncIterable)((token)=>this._computer.computeAsync(token));
            (()=>$53b7605684860f54$var$__awaiter(this, void 0, void 0, function*() {
                    var e_1, _a;
                    try {
                        try {
                            for(var _b = $53b7605684860f54$var$__asyncValues(this._asyncIterable), _c; _c = yield _b.next(), !_c.done;){
                                const item = _c.value;
                                if (item) {
                                    this._computer.onResult([
                                        item
                                    ], false);
                                    this._onProgress();
                                }
                            }
                        } catch (e_1_1) {
                            e_1 = {
                                error: e_1_1
                            };
                        } finally{
                            try {
                                if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                            } finally{
                                if (e_1) throw e_1.error;
                            }
                        }
                        this._asyncIterableDone = true;
                        this._withAsyncResult();
                    } catch (e) {
                        this._onError(e);
                    }
                }))();
        } else this._asyncIterableDone = true;
    }
    _triggerSyncComputation() {
        if (this._computer.computeSync) this._computer.onResult(this._computer.computeSync(), true);
        if (this._asyncIterableDone) {
            this._state = 0 /* IDLE */ ;
            this._onComplete();
        } else {
            this._state = 3 /* WAITING_FOR_ASYNC_COMPUTATION */ ;
            this._onProgress();
        }
    }
    _showLoadingMessage() {
        if (this._state === 3 /* WAITING_FOR_ASYNC_COMPUTATION */ ) {
            this._state = 4 /* WAITING_FOR_ASYNC_COMPUTATION_SHOWING_LOADING */ ;
            this._onProgress();
        }
    }
    _withAsyncResult() {
        if (this._state === 3 /* WAITING_FOR_ASYNC_COMPUTATION */  || this._state === 4 /* WAITING_FOR_ASYNC_COMPUTATION_SHOWING_LOADING */ ) {
            this._state = 0 /* IDLE */ ;
            this._onComplete();
        }
    }
    _onComplete() {
        this._completeCallback(this._computer.getResult());
    }
    _onError(error) {
        if (this._errorCallback) this._errorCallback(error);
        else (0, $g0782.onUnexpectedError)(error);
    }
    _onProgress() {
        if (this._state === 4 /* WAITING_FOR_ASYNC_COMPUTATION_SHOWING_LOADING */ ) this._progressCallback(this._computer.getResultWithLoadingMessage());
        else this._progressCallback(this._computer.getResult());
    }
    start(mode) {
        if (mode === 0 /* Delayed */ ) {
            if (this._state === 0 /* IDLE */ ) {
                this._state = 1 /* FIRST_WAIT */ ;
                this._firstWaitScheduler.schedule(this._firstWaitTime());
                this._loadingMessageScheduler.schedule(this._loadingMessageTime());
            }
        } else switch(this._state){
            case 0 /* IDLE */ :
                this._triggerAsyncComputation();
                this._secondWaitScheduler.cancel();
                this._triggerSyncComputation();
                break;
            case 2 /* SECOND_WAIT */ :
                this._secondWaitScheduler.cancel();
                this._triggerSyncComputation();
                break;
        }
    }
    cancel() {
        this._firstWaitScheduler.cancel();
        this._secondWaitScheduler.cancel();
        this._loadingMessageScheduler.cancel();
        if (this._asyncIterable) {
            this._asyncIterable.cancel();
            this._asyncIterable = null;
        }
        this._state = 0 /* IDLE */ ;
    }
    constructor(computer, success, error, progress, hoverTime){
        this._computer = computer;
        this._state = 0 /* IDLE */ ;
        this._hoverTime = hoverTime;
        this._firstWaitScheduler = new (0, $eFOsn.RunOnceScheduler)(()=>this._triggerAsyncComputation(), 0);
        this._secondWaitScheduler = new (0, $eFOsn.RunOnceScheduler)(()=>this._triggerSyncComputation(), 0);
        this._loadingMessageScheduler = new (0, $eFOsn.RunOnceScheduler)(()=>this._showLoadingMessage(), 0);
        this._asyncIterable = null;
        this._asyncIterableDone = false;
        this._completeCallback = success;
        this._errorCallback = error;
        this._progressCallback = progress;
    }
}


class $2c285531b7bd0e5c$export$2a967524099ecc2c {
    equals(other) {
        return other.type === 1 /* Range */  && this.range.equalsRange(other.range);
    }
    canAdoptVisibleHover(lastAnchor, showAtPosition) {
        return lastAnchor.type === 1 /* Range */  && showAtPosition.lineNumber === this.range.startLineNumber;
    }
    constructor(priority, range){
        this.priority = priority;
        this.range = range;
        this.type = 1 /* Range */ ;
    }
}
class $2c285531b7bd0e5c$export$cadc11e524c92809 {
    equals(other) {
        return other.type === 2 /* ForeignElement */  && this.owner === other.owner;
    }
    canAdoptVisibleHover(lastAnchor, showAtPosition) {
        return lastAnchor.type === 2 /* ForeignElement */  && this.owner === lastAnchor.owner;
    }
    constructor(priority, owner, range){
        this.priority = priority;
        this.owner = owner;
        this.range = range;
        this.type = 2 /* ForeignElement */ ;
    }
}


var $4c95ce6e2b4515d4$exports = {};

$parcel$export($4c95ce6e2b4515d4$exports, "MarkdownHover", function () { return $4c95ce6e2b4515d4$export$de5210377542b3f9; }, function (v) { return $4c95ce6e2b4515d4$export$de5210377542b3f9 = v; });
$parcel$export($4c95ce6e2b4515d4$exports, "MarkdownHoverParticipant", function () { return $4c95ce6e2b4515d4$export$db7233c4b0ae81a2; }, function (v) { return $4c95ce6e2b4515d4$export$db7233c4b0ae81a2 = v; });
$parcel$export($4c95ce6e2b4515d4$exports, "renderMarkdownHovers", function () { return $4c95ce6e2b4515d4$export$d74d68ef545bd110; }, function (v) { return $4c95ce6e2b4515d4$export$d74d68ef545bd110 = v; });

var $jOYcd = parcelRequire("jOYcd");

var $4xCD7 = parcelRequire("4xCD7");

var $eFOsn = parcelRequire("eFOsn");

var $chTln = parcelRequire("chTln");

var $atiRx = parcelRequire("atiRx");
var $ead540c899f453a8$exports = {};

$parcel$export($ead540c899f453a8$exports, "MarkdownRenderer", function () { return $ead540c899f453a8$export$22c2c977437cf477; }, function (v) { return $ead540c899f453a8$export$22c2c977437cf477 = v; });

var $jOYcd = parcelRequire("jOYcd");
/*! @license DOMPurify 2.3.1 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/2.3.1/LICENSE */ function $2567b26e29cb976a$var$_toConsumableArray(arr) {
    if (Array.isArray(arr)) {
        for(var i = 0, arr2 = Array(arr.length); i < arr.length; i++)arr2[i] = arr[i];
        return arr2;
    } else return Array.from(arr);
}
var $2567b26e29cb976a$var$hasOwnProperty = Object.hasOwnProperty, $2567b26e29cb976a$var$setPrototypeOf = Object.setPrototypeOf, $2567b26e29cb976a$var$isFrozen = Object.isFrozen, $2567b26e29cb976a$var$getPrototypeOf = Object.getPrototypeOf, $2567b26e29cb976a$var$getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var $2567b26e29cb976a$var$freeze = Object.freeze, $2567b26e29cb976a$var$seal = Object.seal, $2567b26e29cb976a$var$create = Object.create; // eslint-disable-line import/no-mutable-exports
var $2567b26e29cb976a$var$_ref = typeof Reflect !== "undefined" && Reflect, $2567b26e29cb976a$var$apply = $2567b26e29cb976a$var$_ref.apply, $2567b26e29cb976a$var$construct = $2567b26e29cb976a$var$_ref.construct;
if (!$2567b26e29cb976a$var$apply) $2567b26e29cb976a$var$apply = function apply(fun, thisValue, args) {
    return fun.apply(thisValue, args);
};
if (!$2567b26e29cb976a$var$freeze) $2567b26e29cb976a$var$freeze = function freeze(x) {
    return x;
};
if (!$2567b26e29cb976a$var$seal) $2567b26e29cb976a$var$seal = function seal(x) {
    return x;
};
if (!$2567b26e29cb976a$var$construct) $2567b26e29cb976a$var$construct = function construct(Func, args) {
    return new (Function.prototype.bind.apply(Func, [
        null
    ].concat($2567b26e29cb976a$var$_toConsumableArray(args))))();
};
var $2567b26e29cb976a$var$arrayForEach = $2567b26e29cb976a$var$unapply(Array.prototype.forEach);
var $2567b26e29cb976a$var$arrayPop = $2567b26e29cb976a$var$unapply(Array.prototype.pop);
var $2567b26e29cb976a$var$arrayPush = $2567b26e29cb976a$var$unapply(Array.prototype.push);
var $2567b26e29cb976a$var$stringToLowerCase = $2567b26e29cb976a$var$unapply(String.prototype.toLowerCase);
var $2567b26e29cb976a$var$stringMatch = $2567b26e29cb976a$var$unapply(String.prototype.match);
var $2567b26e29cb976a$var$stringReplace = $2567b26e29cb976a$var$unapply(String.prototype.replace);
var $2567b26e29cb976a$var$stringIndexOf = $2567b26e29cb976a$var$unapply(String.prototype.indexOf);
var $2567b26e29cb976a$var$stringTrim = $2567b26e29cb976a$var$unapply(String.prototype.trim);
var $2567b26e29cb976a$var$regExpTest = $2567b26e29cb976a$var$unapply(RegExp.prototype.test);
var $2567b26e29cb976a$var$typeErrorCreate = $2567b26e29cb976a$var$unconstruct(TypeError);
function $2567b26e29cb976a$var$unapply(func) {
    return function(thisArg) {
        for(var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
        return $2567b26e29cb976a$var$apply(func, thisArg, args);
    };
}
function $2567b26e29cb976a$var$unconstruct(func) {
    return function() {
        for(var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++)args[_key2] = arguments[_key2];
        return $2567b26e29cb976a$var$construct(func, args);
    };
}
/* Add properties to a lookup table */ function $2567b26e29cb976a$var$addToSet(set, array) {
    if ($2567b26e29cb976a$var$setPrototypeOf) // Make 'in' and truthy checks like Boolean(set.constructor)
    // independent of any properties defined on Object.prototype.
    // Prevent prototype setters from intercepting set as a this value.
    $2567b26e29cb976a$var$setPrototypeOf(set, null);
    var l = array.length;
    while(l--){
        var element = array[l];
        if (typeof element === "string") {
            var lcElement = $2567b26e29cb976a$var$stringToLowerCase(element);
            if (lcElement !== element) {
                // Config presets (e.g. tags.js, attrs.js) are immutable.
                if (!$2567b26e29cb976a$var$isFrozen(array)) array[l] = lcElement;
                element = lcElement;
            }
        }
        set[element] = true;
    }
    return set;
}
/* Shallow clone an object */ function $2567b26e29cb976a$var$clone(object) {
    var newObject = $2567b26e29cb976a$var$create(null);
    var property = void 0;
    for(property in object)if ($2567b26e29cb976a$var$apply($2567b26e29cb976a$var$hasOwnProperty, object, [
        property
    ])) newObject[property] = object[property];
    return newObject;
}
/* IE10 doesn't support __lookupGetter__ so lets'
 * simulate it. It also automatically checks
 * if the prop is function or getter and behaves
 * accordingly. */ function $2567b26e29cb976a$var$lookupGetter(object, prop) {
    while(object !== null){
        var desc = $2567b26e29cb976a$var$getOwnPropertyDescriptor(object, prop);
        if (desc) {
            if (desc.get) return $2567b26e29cb976a$var$unapply(desc.get);
            if (typeof desc.value === "function") return $2567b26e29cb976a$var$unapply(desc.value);
        }
        object = $2567b26e29cb976a$var$getPrototypeOf(object);
    }
    function fallbackValue(element) {
        console.warn("fallback value for", element);
        return null;
    }
    return fallbackValue;
}
var $2567b26e29cb976a$var$html = $2567b26e29cb976a$var$freeze([
    "a",
    "abbr",
    "acronym",
    "address",
    "area",
    "article",
    "aside",
    "audio",
    "b",
    "bdi",
    "bdo",
    "big",
    "blink",
    "blockquote",
    "body",
    "br",
    "button",
    "canvas",
    "caption",
    "center",
    "cite",
    "code",
    "col",
    "colgroup",
    "content",
    "data",
    "datalist",
    "dd",
    "decorator",
    "del",
    "details",
    "dfn",
    "dialog",
    "dir",
    "div",
    "dl",
    "dt",
    "element",
    "em",
    "fieldset",
    "figcaption",
    "figure",
    "font",
    "footer",
    "form",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "head",
    "header",
    "hgroup",
    "hr",
    "html",
    "i",
    "img",
    "input",
    "ins",
    "kbd",
    "label",
    "legend",
    "li",
    "main",
    "map",
    "mark",
    "marquee",
    "menu",
    "menuitem",
    "meter",
    "nav",
    "nobr",
    "ol",
    "optgroup",
    "option",
    "output",
    "p",
    "picture",
    "pre",
    "progress",
    "q",
    "rp",
    "rt",
    "ruby",
    "s",
    "samp",
    "section",
    "select",
    "shadow",
    "small",
    "source",
    "spacer",
    "span",
    "strike",
    "strong",
    "style",
    "sub",
    "summary",
    "sup",
    "table",
    "tbody",
    "td",
    "template",
    "textarea",
    "tfoot",
    "th",
    "thead",
    "time",
    "tr",
    "track",
    "tt",
    "u",
    "ul",
    "var",
    "video",
    "wbr"
]);
// SVG
var $2567b26e29cb976a$var$svg = $2567b26e29cb976a$var$freeze([
    "svg",
    "a",
    "altglyph",
    "altglyphdef",
    "altglyphitem",
    "animatecolor",
    "animatemotion",
    "animatetransform",
    "circle",
    "clippath",
    "defs",
    "desc",
    "ellipse",
    "filter",
    "font",
    "g",
    "glyph",
    "glyphref",
    "hkern",
    "image",
    "line",
    "lineargradient",
    "marker",
    "mask",
    "metadata",
    "mpath",
    "path",
    "pattern",
    "polygon",
    "polyline",
    "radialgradient",
    "rect",
    "stop",
    "style",
    "switch",
    "symbol",
    "text",
    "textpath",
    "title",
    "tref",
    "tspan",
    "view",
    "vkern"
]);
var $2567b26e29cb976a$var$svgFilters = $2567b26e29cb976a$var$freeze([
    "feBlend",
    "feColorMatrix",
    "feComponentTransfer",
    "feComposite",
    "feConvolveMatrix",
    "feDiffuseLighting",
    "feDisplacementMap",
    "feDistantLight",
    "feFlood",
    "feFuncA",
    "feFuncB",
    "feFuncG",
    "feFuncR",
    "feGaussianBlur",
    "feMerge",
    "feMergeNode",
    "feMorphology",
    "feOffset",
    "fePointLight",
    "feSpecularLighting",
    "feSpotLight",
    "feTile",
    "feTurbulence"
]);
// List of SVG elements that are disallowed by default.
// We still need to know them so that we can do namespace
// checks properly in case one wants to add them to
// allow-list.
var $2567b26e29cb976a$var$svgDisallowed = $2567b26e29cb976a$var$freeze([
    "animate",
    "color-profile",
    "cursor",
    "discard",
    "fedropshadow",
    "feimage",
    "font-face",
    "font-face-format",
    "font-face-name",
    "font-face-src",
    "font-face-uri",
    "foreignobject",
    "hatch",
    "hatchpath",
    "mesh",
    "meshgradient",
    "meshpatch",
    "meshrow",
    "missing-glyph",
    "script",
    "set",
    "solidcolor",
    "unknown",
    "use"
]);
var $2567b26e29cb976a$var$mathMl = $2567b26e29cb976a$var$freeze([
    "math",
    "menclose",
    "merror",
    "mfenced",
    "mfrac",
    "mglyph",
    "mi",
    "mlabeledtr",
    "mmultiscripts",
    "mn",
    "mo",
    "mover",
    "mpadded",
    "mphantom",
    "mroot",
    "mrow",
    "ms",
    "mspace",
    "msqrt",
    "mstyle",
    "msub",
    "msup",
    "msubsup",
    "mtable",
    "mtd",
    "mtext",
    "mtr",
    "munder",
    "munderover"
]);
// Similarly to SVG, we want to know all MathML elements,
// even those that we disallow by default.
var $2567b26e29cb976a$var$mathMlDisallowed = $2567b26e29cb976a$var$freeze([
    "maction",
    "maligngroup",
    "malignmark",
    "mlongdiv",
    "mscarries",
    "mscarry",
    "msgroup",
    "mstack",
    "msline",
    "msrow",
    "semantics",
    "annotation",
    "annotation-xml",
    "mprescripts",
    "none"
]);
var $2567b26e29cb976a$var$text = $2567b26e29cb976a$var$freeze([
    "#text"
]);
var $2567b26e29cb976a$var$html$1 = $2567b26e29cb976a$var$freeze([
    "accept",
    "action",
    "align",
    "alt",
    "autocapitalize",
    "autocomplete",
    "autopictureinpicture",
    "autoplay",
    "background",
    "bgcolor",
    "border",
    "capture",
    "cellpadding",
    "cellspacing",
    "checked",
    "cite",
    "class",
    "clear",
    "color",
    "cols",
    "colspan",
    "controls",
    "controlslist",
    "coords",
    "crossorigin",
    "datetime",
    "decoding",
    "default",
    "dir",
    "disabled",
    "disablepictureinpicture",
    "disableremoteplayback",
    "download",
    "draggable",
    "enctype",
    "enterkeyhint",
    "face",
    "for",
    "headers",
    "height",
    "hidden",
    "high",
    "href",
    "hreflang",
    "id",
    "inputmode",
    "integrity",
    "ismap",
    "kind",
    "label",
    "lang",
    "list",
    "loading",
    "loop",
    "low",
    "max",
    "maxlength",
    "media",
    "method",
    "min",
    "minlength",
    "multiple",
    "muted",
    "name",
    "noshade",
    "novalidate",
    "nowrap",
    "open",
    "optimum",
    "pattern",
    "placeholder",
    "playsinline",
    "poster",
    "preload",
    "pubdate",
    "radiogroup",
    "readonly",
    "rel",
    "required",
    "rev",
    "reversed",
    "role",
    "rows",
    "rowspan",
    "spellcheck",
    "scope",
    "selected",
    "shape",
    "size",
    "sizes",
    "span",
    "srclang",
    "start",
    "src",
    "srcset",
    "step",
    "style",
    "summary",
    "tabindex",
    "title",
    "translate",
    "type",
    "usemap",
    "valign",
    "value",
    "width",
    "xmlns",
    "slot"
]);
var $2567b26e29cb976a$var$svg$1 = $2567b26e29cb976a$var$freeze([
    "accent-height",
    "accumulate",
    "additive",
    "alignment-baseline",
    "ascent",
    "attributename",
    "attributetype",
    "azimuth",
    "basefrequency",
    "baseline-shift",
    "begin",
    "bias",
    "by",
    "class",
    "clip",
    "clippathunits",
    "clip-path",
    "clip-rule",
    "color",
    "color-interpolation",
    "color-interpolation-filters",
    "color-profile",
    "color-rendering",
    "cx",
    "cy",
    "d",
    "dx",
    "dy",
    "diffuseconstant",
    "direction",
    "display",
    "divisor",
    "dur",
    "edgemode",
    "elevation",
    "end",
    "fill",
    "fill-opacity",
    "fill-rule",
    "filter",
    "filterunits",
    "flood-color",
    "flood-opacity",
    "font-family",
    "font-size",
    "font-size-adjust",
    "font-stretch",
    "font-style",
    "font-variant",
    "font-weight",
    "fx",
    "fy",
    "g1",
    "g2",
    "glyph-name",
    "glyphref",
    "gradientunits",
    "gradienttransform",
    "height",
    "href",
    "id",
    "image-rendering",
    "in",
    "in2",
    "k",
    "k1",
    "k2",
    "k3",
    "k4",
    "kerning",
    "keypoints",
    "keysplines",
    "keytimes",
    "lang",
    "lengthadjust",
    "letter-spacing",
    "kernelmatrix",
    "kernelunitlength",
    "lighting-color",
    "local",
    "marker-end",
    "marker-mid",
    "marker-start",
    "markerheight",
    "markerunits",
    "markerwidth",
    "maskcontentunits",
    "maskunits",
    "max",
    "mask",
    "media",
    "method",
    "mode",
    "min",
    "name",
    "numoctaves",
    "offset",
    "operator",
    "opacity",
    "order",
    "orient",
    "orientation",
    "origin",
    "overflow",
    "paint-order",
    "path",
    "pathlength",
    "patterncontentunits",
    "patterntransform",
    "patternunits",
    "points",
    "preservealpha",
    "preserveaspectratio",
    "primitiveunits",
    "r",
    "rx",
    "ry",
    "radius",
    "refx",
    "refy",
    "repeatcount",
    "repeatdur",
    "restart",
    "result",
    "rotate",
    "scale",
    "seed",
    "shape-rendering",
    "specularconstant",
    "specularexponent",
    "spreadmethod",
    "startoffset",
    "stddeviation",
    "stitchtiles",
    "stop-color",
    "stop-opacity",
    "stroke-dasharray",
    "stroke-dashoffset",
    "stroke-linecap",
    "stroke-linejoin",
    "stroke-miterlimit",
    "stroke-opacity",
    "stroke",
    "stroke-width",
    "style",
    "surfacescale",
    "systemlanguage",
    "tabindex",
    "targetx",
    "targety",
    "transform",
    "text-anchor",
    "text-decoration",
    "text-rendering",
    "textlength",
    "type",
    "u1",
    "u2",
    "unicode",
    "values",
    "viewbox",
    "visibility",
    "version",
    "vert-adv-y",
    "vert-origin-x",
    "vert-origin-y",
    "width",
    "word-spacing",
    "wrap",
    "writing-mode",
    "xchannelselector",
    "ychannelselector",
    "x",
    "x1",
    "x2",
    "xmlns",
    "y",
    "y1",
    "y2",
    "z",
    "zoomandpan"
]);
var $2567b26e29cb976a$var$mathMl$1 = $2567b26e29cb976a$var$freeze([
    "accent",
    "accentunder",
    "align",
    "bevelled",
    "close",
    "columnsalign",
    "columnlines",
    "columnspan",
    "denomalign",
    "depth",
    "dir",
    "display",
    "displaystyle",
    "encoding",
    "fence",
    "frame",
    "height",
    "href",
    "id",
    "largeop",
    "length",
    "linethickness",
    "lspace",
    "lquote",
    "mathbackground",
    "mathcolor",
    "mathsize",
    "mathvariant",
    "maxsize",
    "minsize",
    "movablelimits",
    "notation",
    "numalign",
    "open",
    "rowalign",
    "rowlines",
    "rowspacing",
    "rowspan",
    "rspace",
    "rquote",
    "scriptlevel",
    "scriptminsize",
    "scriptsizemultiplier",
    "selection",
    "separator",
    "separators",
    "stretchy",
    "subscriptshift",
    "supscriptshift",
    "symmetric",
    "voffset",
    "width",
    "xmlns"
]);
var $2567b26e29cb976a$var$xml = $2567b26e29cb976a$var$freeze([
    "xlink:href",
    "xml:id",
    "xlink:title",
    "xml:space",
    "xmlns:xlink"
]);
// eslint-disable-next-line unicorn/better-regex
var $2567b26e29cb976a$var$MUSTACHE_EXPR = $2567b26e29cb976a$var$seal(/\{\{[\s\S]*|[\s\S]*\}\}/gm); // Specify template detection regex for SAFE_FOR_TEMPLATES mode
var $2567b26e29cb976a$var$ERB_EXPR = $2567b26e29cb976a$var$seal(/<%[\s\S]*|[\s\S]*%>/gm);
var $2567b26e29cb976a$var$DATA_ATTR = $2567b26e29cb976a$var$seal(/^data-[\-\w.\u00B7-\uFFFF]/); // eslint-disable-line no-useless-escape
var $2567b26e29cb976a$var$ARIA_ATTR = $2567b26e29cb976a$var$seal(/^aria-[\-\w]+$/); // eslint-disable-line no-useless-escape
var $2567b26e29cb976a$var$IS_ALLOWED_URI = $2567b26e29cb976a$var$seal(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i // eslint-disable-line no-useless-escape
);
var $2567b26e29cb976a$var$IS_SCRIPT_OR_DATA = $2567b26e29cb976a$var$seal(/^(?:\w+script|data):/i);
var $2567b26e29cb976a$var$ATTR_WHITESPACE = $2567b26e29cb976a$var$seal(/[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g // eslint-disable-line no-control-regex
);
var $2567b26e29cb976a$var$_typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
    return typeof obj;
} : function(obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};
function $2567b26e29cb976a$var$_toConsumableArray$1(arr) {
    if (Array.isArray(arr)) {
        for(var i = 0, arr2 = Array(arr.length); i < arr.length; i++)arr2[i] = arr[i];
        return arr2;
    } else return Array.from(arr);
}
var $2567b26e29cb976a$var$getGlobal = function getGlobal() {
    return typeof window === "undefined" ? null : window;
};
/**
 * Creates a no-op policy for internal use only.
 * Don't export this function outside this module!
 * @param {?TrustedTypePolicyFactory} trustedTypes The policy factory.
 * @param {Document} document The document object (to determine policy name suffix)
 * @return {?TrustedTypePolicy} The policy created (or null, if Trusted Types
 * are not supported).
 */ var $2567b26e29cb976a$var$_createTrustedTypesPolicy = function _createTrustedTypesPolicy(trustedTypes, document) {
    if ((typeof trustedTypes === "undefined" ? "undefined" : $2567b26e29cb976a$var$_typeof(trustedTypes)) !== "object" || typeof trustedTypes.createPolicy !== "function") return null;
    // Allow the callers to control the unique policy name
    // by adding a data-tt-policy-suffix to the script element with the DOMPurify.
    // Policy creation with duplicate names throws in Trusted Types.
    var suffix = null;
    var ATTR_NAME = "data-tt-policy-suffix";
    if (document.currentScript && document.currentScript.hasAttribute(ATTR_NAME)) suffix = document.currentScript.getAttribute(ATTR_NAME);
    var policyName = "dompurify" + (suffix ? "#" + suffix : "");
    try {
        return trustedTypes.createPolicy(policyName, {
            createHTML: function createHTML(html$$1) {
                return html$$1;
            }
        });
    } catch (_) {
        // Policy creation failed (most likely another DOMPurify script has
        // already run). Skip creating the policy, as this will only cause errors
        // if TT are enforced.
        console.warn("TrustedTypes policy " + policyName + " could not be created.");
        return null;
    }
};
function $2567b26e29cb976a$var$createDOMPurify() {
    var window1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : $2567b26e29cb976a$var$getGlobal();
    var DOMPurify = function DOMPurify(root) {
        return $2567b26e29cb976a$var$createDOMPurify(root);
    };
    /**
   * Version label, exposed for easier checks
   * if DOMPurify is up to date or not
   */ DOMPurify.version = "2.3.1";
    /**
   * Array of elements that DOMPurify removed during sanitation.
   * Empty if nothing was removed.
   */ DOMPurify.removed = [];
    if (!window1 || !window1.document || window1.document.nodeType !== 9) {
        // Not running in a browser, provide a factory function
        // so that you can pass your own Window
        DOMPurify.isSupported = false;
        return DOMPurify;
    }
    var originalDocument = window1.document;
    var document = window1.document;
    var DocumentFragment = window1.DocumentFragment, HTMLTemplateElement = window1.HTMLTemplateElement, Node = window1.Node, Element = window1.Element, NodeFilter = window1.NodeFilter, _window$NamedNodeMap = window1.NamedNodeMap, NamedNodeMap = _window$NamedNodeMap === undefined ? window1.NamedNodeMap || window1.MozNamedAttrMap : _window$NamedNodeMap, Text = window1.Text, Comment = window1.Comment, DOMParser = window1.DOMParser, trustedTypes = window1.trustedTypes;
    var ElementPrototype = Element.prototype;
    var cloneNode = $2567b26e29cb976a$var$lookupGetter(ElementPrototype, "cloneNode");
    var getNextSibling = $2567b26e29cb976a$var$lookupGetter(ElementPrototype, "nextSibling");
    var getChildNodes = $2567b26e29cb976a$var$lookupGetter(ElementPrototype, "childNodes");
    var getParentNode = $2567b26e29cb976a$var$lookupGetter(ElementPrototype, "parentNode");
    // As per issue #47, the web-components registry is inherited by a
    // new document created via createHTMLDocument. As per the spec
    // (http://w3c.github.io/webcomponents/spec/custom/#creating-and-passing-registries)
    // a new empty registry is used when creating a template contents owner
    // document, so we use that as our parent document to ensure nothing
    // is inherited.
    if (typeof HTMLTemplateElement === "function") {
        var template = document.createElement("template");
        if (template.content && template.content.ownerDocument) document = template.content.ownerDocument;
    }
    var trustedTypesPolicy = $2567b26e29cb976a$var$_createTrustedTypesPolicy(trustedTypes, originalDocument);
    var emptyHTML = trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML("") : "";
    var _document = document, implementation = _document.implementation, createNodeIterator = _document.createNodeIterator, createDocumentFragment = _document.createDocumentFragment, getElementsByTagName = _document.getElementsByTagName;
    var importNode = originalDocument.importNode;
    var documentMode = {};
    try {
        documentMode = $2567b26e29cb976a$var$clone(document).documentMode ? document.documentMode : {};
    } catch (_) {}
    var hooks = {};
    /**
   * Expose whether this browser supports running the full DOMPurify.
   */ DOMPurify.isSupported = typeof getParentNode === "function" && implementation && typeof implementation.createHTMLDocument !== "undefined" && documentMode !== 9;
    var MUSTACHE_EXPR$$1 = $2567b26e29cb976a$var$MUSTACHE_EXPR, ERB_EXPR$$1 = $2567b26e29cb976a$var$ERB_EXPR, DATA_ATTR$$1 = $2567b26e29cb976a$var$DATA_ATTR, ARIA_ATTR$$1 = $2567b26e29cb976a$var$ARIA_ATTR, IS_SCRIPT_OR_DATA$$1 = $2567b26e29cb976a$var$IS_SCRIPT_OR_DATA, ATTR_WHITESPACE$$1 = $2567b26e29cb976a$var$ATTR_WHITESPACE;
    var IS_ALLOWED_URI$$1 = $2567b26e29cb976a$var$IS_ALLOWED_URI;
    /**
   * We consider the elements and attributes below to be safe. Ideally
   * don't add any new ones but feel free to remove unwanted ones.
   */ /* allowed element names */ var ALLOWED_TAGS = null;
    var DEFAULT_ALLOWED_TAGS = $2567b26e29cb976a$var$addToSet({}, [].concat($2567b26e29cb976a$var$_toConsumableArray$1($2567b26e29cb976a$var$html), $2567b26e29cb976a$var$_toConsumableArray$1($2567b26e29cb976a$var$svg), $2567b26e29cb976a$var$_toConsumableArray$1($2567b26e29cb976a$var$svgFilters), $2567b26e29cb976a$var$_toConsumableArray$1($2567b26e29cb976a$var$mathMl), $2567b26e29cb976a$var$_toConsumableArray$1($2567b26e29cb976a$var$text)));
    /* Allowed attribute names */ var ALLOWED_ATTR = null;
    var DEFAULT_ALLOWED_ATTR = $2567b26e29cb976a$var$addToSet({}, [].concat($2567b26e29cb976a$var$_toConsumableArray$1($2567b26e29cb976a$var$html$1), $2567b26e29cb976a$var$_toConsumableArray$1($2567b26e29cb976a$var$svg$1), $2567b26e29cb976a$var$_toConsumableArray$1($2567b26e29cb976a$var$mathMl$1), $2567b26e29cb976a$var$_toConsumableArray$1($2567b26e29cb976a$var$xml)));
    /* Explicitly forbidden tags (overrides ALLOWED_TAGS/ADD_TAGS) */ var FORBID_TAGS = null;
    /* Explicitly forbidden attributes (overrides ALLOWED_ATTR/ADD_ATTR) */ var FORBID_ATTR = null;
    /* Decide if ARIA attributes are okay */ var ALLOW_ARIA_ATTR = true;
    /* Decide if custom data attributes are okay */ var ALLOW_DATA_ATTR = true;
    /* Decide if unknown protocols are okay */ var ALLOW_UNKNOWN_PROTOCOLS = false;
    /* Output should be safe for common template engines.
   * This means, DOMPurify removes data attributes, mustaches and ERB
   */ var SAFE_FOR_TEMPLATES = false;
    /* Decide if document with <html>... should be returned */ var WHOLE_DOCUMENT = false;
    /* Track whether config is already set on this instance of DOMPurify. */ var SET_CONFIG = false;
    /* Decide if all elements (e.g. style, script) must be children of
   * document.body. By default, browsers might move them to document.head */ var FORCE_BODY = false;
    /* Decide if a DOM `HTMLBodyElement` should be returned, instead of a html
   * string (or a TrustedHTML object if Trusted Types are supported).
   * If `WHOLE_DOCUMENT` is enabled a `HTMLHtmlElement` will be returned instead
   */ var RETURN_DOM = false;
    /* Decide if a DOM `DocumentFragment` should be returned, instead of a html
   * string  (or a TrustedHTML object if Trusted Types are supported) */ var RETURN_DOM_FRAGMENT = false;
    /* If `RETURN_DOM` or `RETURN_DOM_FRAGMENT` is enabled, decide if the returned DOM
   * `Node` is imported into the current `Document`. If this flag is not enabled the
   * `Node` will belong (its ownerDocument) to a fresh `HTMLDocument`, created by
   * DOMPurify.
   *
   * This defaults to `true` starting DOMPurify 2.2.0. Note that setting it to `false`
   * might cause XSS from attacks hidden in closed shadowroots in case the browser
   * supports Declarative Shadow: DOM https://web.dev/declarative-shadow-dom/
   */ var RETURN_DOM_IMPORT = true;
    /* Try to return a Trusted Type object instead of a string, return a string in
   * case Trusted Types are not supported  */ var RETURN_TRUSTED_TYPE = false;
    /* Output should be free from DOM clobbering attacks? */ var SANITIZE_DOM = true;
    /* Keep element content when removing element? */ var KEEP_CONTENT = true;
    /* If a `Node` is passed to sanitize(), then performs sanitization in-place instead
   * of importing it into a new Document and returning a sanitized copy */ var IN_PLACE = false;
    /* Allow usage of profiles like html, svg and mathMl */ var USE_PROFILES = {};
    /* Tags to ignore content of when KEEP_CONTENT is true */ var FORBID_CONTENTS = null;
    var DEFAULT_FORBID_CONTENTS = $2567b26e29cb976a$var$addToSet({}, [
        "annotation-xml",
        "audio",
        "colgroup",
        "desc",
        "foreignobject",
        "head",
        "iframe",
        "math",
        "mi",
        "mn",
        "mo",
        "ms",
        "mtext",
        "noembed",
        "noframes",
        "noscript",
        "plaintext",
        "script",
        "style",
        "svg",
        "template",
        "thead",
        "title",
        "video",
        "xmp"
    ]);
    /* Tags that are safe for data: URIs */ var DATA_URI_TAGS = null;
    var DEFAULT_DATA_URI_TAGS = $2567b26e29cb976a$var$addToSet({}, [
        "audio",
        "video",
        "img",
        "source",
        "image",
        "track"
    ]);
    /* Attributes safe for values like "javascript:" */ var URI_SAFE_ATTRIBUTES = null;
    var DEFAULT_URI_SAFE_ATTRIBUTES = $2567b26e29cb976a$var$addToSet({}, [
        "alt",
        "class",
        "for",
        "id",
        "label",
        "name",
        "pattern",
        "placeholder",
        "role",
        "summary",
        "title",
        "value",
        "style",
        "xmlns"
    ]);
    var MATHML_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
    var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
    var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
    /* Document namespace */ var NAMESPACE = HTML_NAMESPACE;
    var IS_EMPTY_INPUT = false;
    /* Keep a reference to config to pass to hooks */ var CONFIG = null;
    /* Ideally, do not touch anything below this line */ /* ______________________________________________ */ var formElement = document.createElement("form");
    /**
   * _parseConfig
   *
   * @param  {Object} cfg optional config literal
   */ // eslint-disable-next-line complexity
    var _parseConfig = function _parseConfig(cfg) {
        if (CONFIG && CONFIG === cfg) return;
        /* Shield configuration object from tampering */ if (!cfg || (typeof cfg === "undefined" ? "undefined" : $2567b26e29cb976a$var$_typeof(cfg)) !== "object") cfg = {};
        /* Shield configuration object from prototype pollution */ cfg = $2567b26e29cb976a$var$clone(cfg);
        /* Set configuration parameters */ ALLOWED_TAGS = "ALLOWED_TAGS" in cfg ? $2567b26e29cb976a$var$addToSet({}, cfg.ALLOWED_TAGS) : DEFAULT_ALLOWED_TAGS;
        ALLOWED_ATTR = "ALLOWED_ATTR" in cfg ? $2567b26e29cb976a$var$addToSet({}, cfg.ALLOWED_ATTR) : DEFAULT_ALLOWED_ATTR;
        URI_SAFE_ATTRIBUTES = "ADD_URI_SAFE_ATTR" in cfg ? $2567b26e29cb976a$var$addToSet($2567b26e29cb976a$var$clone(DEFAULT_URI_SAFE_ATTRIBUTES), cfg.ADD_URI_SAFE_ATTR) : DEFAULT_URI_SAFE_ATTRIBUTES;
        DATA_URI_TAGS = "ADD_DATA_URI_TAGS" in cfg ? $2567b26e29cb976a$var$addToSet($2567b26e29cb976a$var$clone(DEFAULT_DATA_URI_TAGS), cfg.ADD_DATA_URI_TAGS) : DEFAULT_DATA_URI_TAGS;
        FORBID_CONTENTS = "FORBID_CONTENTS" in cfg ? $2567b26e29cb976a$var$addToSet({}, cfg.FORBID_CONTENTS) : DEFAULT_FORBID_CONTENTS;
        FORBID_TAGS = "FORBID_TAGS" in cfg ? $2567b26e29cb976a$var$addToSet({}, cfg.FORBID_TAGS) : {};
        FORBID_ATTR = "FORBID_ATTR" in cfg ? $2567b26e29cb976a$var$addToSet({}, cfg.FORBID_ATTR) : {};
        USE_PROFILES = "USE_PROFILES" in cfg ? cfg.USE_PROFILES : false;
        ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false; // Default true
        ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false; // Default true
        ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false; // Default false
        SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false; // Default false
        WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false; // Default false
        RETURN_DOM = cfg.RETURN_DOM || false; // Default false
        RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false; // Default false
        RETURN_DOM_IMPORT = cfg.RETURN_DOM_IMPORT !== false; // Default true
        RETURN_TRUSTED_TYPE = cfg.RETURN_TRUSTED_TYPE || false; // Default false
        FORCE_BODY = cfg.FORCE_BODY || false; // Default false
        SANITIZE_DOM = cfg.SANITIZE_DOM !== false; // Default true
        KEEP_CONTENT = cfg.KEEP_CONTENT !== false; // Default true
        IN_PLACE = cfg.IN_PLACE || false; // Default false
        IS_ALLOWED_URI$$1 = cfg.ALLOWED_URI_REGEXP || IS_ALLOWED_URI$$1;
        NAMESPACE = cfg.NAMESPACE || HTML_NAMESPACE;
        if (SAFE_FOR_TEMPLATES) ALLOW_DATA_ATTR = false;
        if (RETURN_DOM_FRAGMENT) RETURN_DOM = true;
        /* Parse profile info */ if (USE_PROFILES) {
            ALLOWED_TAGS = $2567b26e29cb976a$var$addToSet({}, [].concat($2567b26e29cb976a$var$_toConsumableArray$1($2567b26e29cb976a$var$text)));
            ALLOWED_ATTR = [];
            if (USE_PROFILES.html === true) {
                $2567b26e29cb976a$var$addToSet(ALLOWED_TAGS, $2567b26e29cb976a$var$html);
                $2567b26e29cb976a$var$addToSet(ALLOWED_ATTR, $2567b26e29cb976a$var$html$1);
            }
            if (USE_PROFILES.svg === true) {
                $2567b26e29cb976a$var$addToSet(ALLOWED_TAGS, $2567b26e29cb976a$var$svg);
                $2567b26e29cb976a$var$addToSet(ALLOWED_ATTR, $2567b26e29cb976a$var$svg$1);
                $2567b26e29cb976a$var$addToSet(ALLOWED_ATTR, $2567b26e29cb976a$var$xml);
            }
            if (USE_PROFILES.svgFilters === true) {
                $2567b26e29cb976a$var$addToSet(ALLOWED_TAGS, $2567b26e29cb976a$var$svgFilters);
                $2567b26e29cb976a$var$addToSet(ALLOWED_ATTR, $2567b26e29cb976a$var$svg$1);
                $2567b26e29cb976a$var$addToSet(ALLOWED_ATTR, $2567b26e29cb976a$var$xml);
            }
            if (USE_PROFILES.mathMl === true) {
                $2567b26e29cb976a$var$addToSet(ALLOWED_TAGS, $2567b26e29cb976a$var$mathMl);
                $2567b26e29cb976a$var$addToSet(ALLOWED_ATTR, $2567b26e29cb976a$var$mathMl$1);
                $2567b26e29cb976a$var$addToSet(ALLOWED_ATTR, $2567b26e29cb976a$var$xml);
            }
        }
        /* Merge configuration parameters */ if (cfg.ADD_TAGS) {
            if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) ALLOWED_TAGS = $2567b26e29cb976a$var$clone(ALLOWED_TAGS);
            $2567b26e29cb976a$var$addToSet(ALLOWED_TAGS, cfg.ADD_TAGS);
        }
        if (cfg.ADD_ATTR) {
            if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) ALLOWED_ATTR = $2567b26e29cb976a$var$clone(ALLOWED_ATTR);
            $2567b26e29cb976a$var$addToSet(ALLOWED_ATTR, cfg.ADD_ATTR);
        }
        if (cfg.ADD_URI_SAFE_ATTR) $2567b26e29cb976a$var$addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR);
        if (cfg.FORBID_CONTENTS) {
            if (FORBID_CONTENTS === DEFAULT_FORBID_CONTENTS) FORBID_CONTENTS = $2567b26e29cb976a$var$clone(FORBID_CONTENTS);
            $2567b26e29cb976a$var$addToSet(FORBID_CONTENTS, cfg.FORBID_CONTENTS);
        }
        /* Add #text in case KEEP_CONTENT is set to true */ if (KEEP_CONTENT) ALLOWED_TAGS["#text"] = true;
        /* Add html, head and body to ALLOWED_TAGS in case WHOLE_DOCUMENT is true */ if (WHOLE_DOCUMENT) $2567b26e29cb976a$var$addToSet(ALLOWED_TAGS, [
            "html",
            "head",
            "body"
        ]);
        /* Add tbody to ALLOWED_TAGS in case tables are permitted, see #286, #365 */ if (ALLOWED_TAGS.table) {
            $2567b26e29cb976a$var$addToSet(ALLOWED_TAGS, [
                "tbody"
            ]);
            delete FORBID_TAGS.tbody;
        }
        // Prevent further manipulation of configuration.
        // Not available in IE8, Safari 5, etc.
        if ($2567b26e29cb976a$var$freeze) $2567b26e29cb976a$var$freeze(cfg);
        CONFIG = cfg;
    };
    var MATHML_TEXT_INTEGRATION_POINTS = $2567b26e29cb976a$var$addToSet({}, [
        "mi",
        "mo",
        "mn",
        "ms",
        "mtext"
    ]);
    var HTML_INTEGRATION_POINTS = $2567b26e29cb976a$var$addToSet({}, [
        "foreignobject",
        "desc",
        "title",
        "annotation-xml"
    ]);
    /* Keep track of all possible SVG and MathML tags
   * so that we can perform the namespace checks
   * correctly. */ var ALL_SVG_TAGS = $2567b26e29cb976a$var$addToSet({}, $2567b26e29cb976a$var$svg);
    $2567b26e29cb976a$var$addToSet(ALL_SVG_TAGS, $2567b26e29cb976a$var$svgFilters);
    $2567b26e29cb976a$var$addToSet(ALL_SVG_TAGS, $2567b26e29cb976a$var$svgDisallowed);
    var ALL_MATHML_TAGS = $2567b26e29cb976a$var$addToSet({}, $2567b26e29cb976a$var$mathMl);
    $2567b26e29cb976a$var$addToSet(ALL_MATHML_TAGS, $2567b26e29cb976a$var$mathMlDisallowed);
    /**
   *
   *
   * @param  {Element} element a DOM element whose namespace is being checked
   * @returns {boolean} Return false if the element has a
   *  namespace that a spec-compliant parser would never
   *  return. Return true otherwise.
   */ var _checkValidNamespace = function _checkValidNamespace(element) {
        var parent = getParentNode(element);
        // In JSDOM, if we're inside shadow DOM, then parentNode
        // can be null. We just simulate parent in this case.
        if (!parent || !parent.tagName) parent = {
            namespaceURI: HTML_NAMESPACE,
            tagName: "template"
        };
        var tagName = $2567b26e29cb976a$var$stringToLowerCase(element.tagName);
        var parentTagName = $2567b26e29cb976a$var$stringToLowerCase(parent.tagName);
        if (element.namespaceURI === SVG_NAMESPACE) {
            // The only way to switch from HTML namespace to SVG
            // is via <svg>. If it happens via any other tag, then
            // it should be killed.
            if (parent.namespaceURI === HTML_NAMESPACE) return tagName === "svg";
            // The only way to switch from MathML to SVG is via
            // svg if parent is either <annotation-xml> or MathML
            // text integration points.
            if (parent.namespaceURI === MATHML_NAMESPACE) return tagName === "svg" && (parentTagName === "annotation-xml" || MATHML_TEXT_INTEGRATION_POINTS[parentTagName]);
            // We only allow elements that are defined in SVG
            // spec. All others are disallowed in SVG namespace.
            return Boolean(ALL_SVG_TAGS[tagName]);
        }
        if (element.namespaceURI === MATHML_NAMESPACE) {
            // The only way to switch from HTML namespace to MathML
            // is via <math>. If it happens via any other tag, then
            // it should be killed.
            if (parent.namespaceURI === HTML_NAMESPACE) return tagName === "math";
            // The only way to switch from SVG to MathML is via
            // <math> and HTML integration points
            if (parent.namespaceURI === SVG_NAMESPACE) return tagName === "math" && HTML_INTEGRATION_POINTS[parentTagName];
            // We only allow elements that are defined in MathML
            // spec. All others are disallowed in MathML namespace.
            return Boolean(ALL_MATHML_TAGS[tagName]);
        }
        if (element.namespaceURI === HTML_NAMESPACE) {
            // The only way to switch from SVG to HTML is via
            // HTML integration points, and from MathML to HTML
            // is via MathML text integration points
            if (parent.namespaceURI === SVG_NAMESPACE && !HTML_INTEGRATION_POINTS[parentTagName]) return false;
            if (parent.namespaceURI === MATHML_NAMESPACE && !MATHML_TEXT_INTEGRATION_POINTS[parentTagName]) return false;
            // Certain elements are allowed in both SVG and HTML
            // namespace. We need to specify them explicitly
            // so that they don't get erronously deleted from
            // HTML namespace.
            var commonSvgAndHTMLElements = $2567b26e29cb976a$var$addToSet({}, [
                "title",
                "style",
                "font",
                "a",
                "script"
            ]);
            // We disallow tags that are specific for MathML
            // or SVG and should never appear in HTML namespace
            return !ALL_MATHML_TAGS[tagName] && (commonSvgAndHTMLElements[tagName] || !ALL_SVG_TAGS[tagName]);
        }
        // The code should never reach this place (this means
        // that the element somehow got namespace that is not
        // HTML, SVG or MathML). Return false just in case.
        return false;
    };
    /**
   * _forceRemove
   *
   * @param  {Node} node a DOM node
   */ var _forceRemove = function _forceRemove(node) {
        $2567b26e29cb976a$var$arrayPush(DOMPurify.removed, {
            element: node
        });
        try {
            // eslint-disable-next-line unicorn/prefer-dom-node-remove
            node.parentNode.removeChild(node);
        } catch (_) {
            try {
                node.outerHTML = emptyHTML;
            } catch (_1) {
                node.remove();
            }
        }
    };
    /**
   * _removeAttribute
   *
   * @param  {String} name an Attribute name
   * @param  {Node} node a DOM node
   */ var _removeAttribute = function _removeAttribute(name, node) {
        try {
            $2567b26e29cb976a$var$arrayPush(DOMPurify.removed, {
                attribute: node.getAttributeNode(name),
                from: node
            });
        } catch (_) {
            $2567b26e29cb976a$var$arrayPush(DOMPurify.removed, {
                attribute: null,
                from: node
            });
        }
        node.removeAttribute(name);
        // We void attribute values for unremovable "is"" attributes
        if (name === "is" && !ALLOWED_ATTR[name]) {
            if (RETURN_DOM || RETURN_DOM_FRAGMENT) try {
                _forceRemove(node);
            } catch (_1) {}
            else try {
                node.setAttribute(name, "");
            } catch (_2) {}
        }
    };
    /**
   * _initDocument
   *
   * @param  {String} dirty a string of dirty markup
   * @return {Document} a DOM, filled with the dirty markup
   */ var _initDocument = function _initDocument(dirty) {
        /* Create a HTML document */ var doc = void 0;
        var leadingWhitespace = void 0;
        if (FORCE_BODY) dirty = "<remove></remove>" + dirty;
        else {
            /* If FORCE_BODY isn't used, leading whitespace needs to be preserved manually */ var matches = $2567b26e29cb976a$var$stringMatch(dirty, /^[\r\n\t ]+/);
            leadingWhitespace = matches && matches[0];
        }
        var dirtyPayload = trustedTypesPolicy ? trustedTypesPolicy.createHTML(dirty) : dirty;
        /*
     * Use the DOMParser API by default, fallback later if needs be
     * DOMParser not work for svg when has multiple root element.
     */ if (NAMESPACE === HTML_NAMESPACE) try {
            doc = new DOMParser().parseFromString(dirtyPayload, "text/html");
        } catch (_) {}
        /* Use createHTMLDocument in case DOMParser is not available */ if (!doc || !doc.documentElement) {
            doc = implementation.createDocument(NAMESPACE, "template", null);
            try {
                doc.documentElement.innerHTML = IS_EMPTY_INPUT ? "" : dirtyPayload;
            } catch (_1) {
            // Syntax error if dirtyPayload is invalid xml
            }
        }
        var body = doc.body || doc.documentElement;
        if (dirty && leadingWhitespace) body.insertBefore(document.createTextNode(leadingWhitespace), body.childNodes[0] || null);
        /* Work on whole document or just its body */ if (NAMESPACE === HTML_NAMESPACE) return getElementsByTagName.call(doc, WHOLE_DOCUMENT ? "html" : "body")[0];
        return WHOLE_DOCUMENT ? doc.documentElement : body;
    };
    /**
   * _createIterator
   *
   * @param  {Document} root document/fragment to create iterator for
   * @return {Iterator} iterator instance
   */ var _createIterator = function _createIterator(root) {
        return createNodeIterator.call(root.ownerDocument || root, root, NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT, null, false);
    };
    /**
   * _isClobbered
   *
   * @param  {Node} elm element to check for clobbering attacks
   * @return {Boolean} true if clobbered, false if safe
   */ var _isClobbered = function _isClobbered(elm) {
        if (elm instanceof Text || elm instanceof Comment) return false;
        if (typeof elm.nodeName !== "string" || typeof elm.textContent !== "string" || typeof elm.removeChild !== "function" || !(elm.attributes instanceof NamedNodeMap) || typeof elm.removeAttribute !== "function" || typeof elm.setAttribute !== "function" || typeof elm.namespaceURI !== "string" || typeof elm.insertBefore !== "function") return true;
        return false;
    };
    /**
   * _isNode
   *
   * @param  {Node} obj object to check whether it's a DOM node
   * @return {Boolean} true is object is a DOM node
   */ var _isNode = function _isNode(object) {
        return (typeof Node === "undefined" ? "undefined" : $2567b26e29cb976a$var$_typeof(Node)) === "object" ? object instanceof Node : object && (typeof object === "undefined" ? "undefined" : $2567b26e29cb976a$var$_typeof(object)) === "object" && typeof object.nodeType === "number" && typeof object.nodeName === "string";
    };
    /**
   * _executeHook
   * Execute user configurable hooks
   *
   * @param  {String} entryPoint  Name of the hook's entry point
   * @param  {Node} currentNode node to work on with the hook
   * @param  {Object} data additional hook parameters
   */ var _executeHook = function _executeHook(entryPoint, currentNode, data) {
        if (!hooks[entryPoint]) return;
        $2567b26e29cb976a$var$arrayForEach(hooks[entryPoint], function(hook) {
            hook.call(DOMPurify, currentNode, data, CONFIG);
        });
    };
    /**
   * _sanitizeElements
   *
   * @protect nodeName
   * @protect textContent
   * @protect removeChild
   *
   * @param   {Node} currentNode to check for permission to exist
   * @return  {Boolean} true if node was killed, false if left alive
   */ var _sanitizeElements = function _sanitizeElements(currentNode) {
        var content = void 0;
        /* Execute a hook if present */ _executeHook("beforeSanitizeElements", currentNode, null);
        /* Check if element is clobbered or can clobber */ if (_isClobbered(currentNode)) {
            _forceRemove(currentNode);
            return true;
        }
        /* Check if tagname contains Unicode */ if ($2567b26e29cb976a$var$stringMatch(currentNode.nodeName, /[\u0080-\uFFFF]/)) {
            _forceRemove(currentNode);
            return true;
        }
        /* Now let's check the element's type and name */ var tagName = $2567b26e29cb976a$var$stringToLowerCase(currentNode.nodeName);
        /* Execute a hook if present */ _executeHook("uponSanitizeElement", currentNode, {
            tagName: tagName,
            allowedTags: ALLOWED_TAGS
        });
        /* Detect mXSS attempts abusing namespace confusion */ if (!_isNode(currentNode.firstElementChild) && (!_isNode(currentNode.content) || !_isNode(currentNode.content.firstElementChild)) && $2567b26e29cb976a$var$regExpTest(/<[/\w]/g, currentNode.innerHTML) && $2567b26e29cb976a$var$regExpTest(/<[/\w]/g, currentNode.textContent)) {
            _forceRemove(currentNode);
            return true;
        }
        /* Mitigate a problem with templates inside select */ if (tagName === "select" && $2567b26e29cb976a$var$regExpTest(/<template/i, currentNode.innerHTML)) {
            _forceRemove(currentNode);
            return true;
        }
        /* Remove element if anything forbids its presence */ if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {
            /* Keep content except for bad-listed elements */ if (KEEP_CONTENT && !FORBID_CONTENTS[tagName]) {
                var parentNode = getParentNode(currentNode) || currentNode.parentNode;
                var childNodes = getChildNodes(currentNode) || currentNode.childNodes;
                if (childNodes && parentNode) {
                    var childCount = childNodes.length;
                    for(var i = childCount - 1; i >= 0; --i)parentNode.insertBefore(cloneNode(childNodes[i], true), getNextSibling(currentNode));
                }
            }
            _forceRemove(currentNode);
            return true;
        }
        /* Check whether element has a valid namespace */ if (currentNode instanceof Element && !_checkValidNamespace(currentNode)) {
            _forceRemove(currentNode);
            return true;
        }
        if ((tagName === "noscript" || tagName === "noembed") && $2567b26e29cb976a$var$regExpTest(/<\/no(script|embed)/i, currentNode.innerHTML)) {
            _forceRemove(currentNode);
            return true;
        }
        /* Sanitize element content to be template-safe */ if (SAFE_FOR_TEMPLATES && currentNode.nodeType === 3) {
            /* Get the element's text content */ content = currentNode.textContent;
            content = $2567b26e29cb976a$var$stringReplace(content, MUSTACHE_EXPR$$1, " ");
            content = $2567b26e29cb976a$var$stringReplace(content, ERB_EXPR$$1, " ");
            if (currentNode.textContent !== content) {
                $2567b26e29cb976a$var$arrayPush(DOMPurify.removed, {
                    element: currentNode.cloneNode()
                });
                currentNode.textContent = content;
            }
        }
        /* Execute a hook if present */ _executeHook("afterSanitizeElements", currentNode, null);
        return false;
    };
    /**
   * _isValidAttribute
   *
   * @param  {string} lcTag Lowercase tag name of containing element.
   * @param  {string} lcName Lowercase attribute name.
   * @param  {string} value Attribute value.
   * @return {Boolean} Returns true if `value` is valid, otherwise false.
   */ // eslint-disable-next-line complexity
    var _isValidAttribute = function _isValidAttribute(lcTag, lcName, value) {
        /* Make sure attribute cannot clobber */ if (SANITIZE_DOM && (lcName === "id" || lcName === "name") && (value in document || value in formElement)) return false;
        /* Allow valid data-* attributes: At least one character after "-"
        (https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes)
        XML-compatible (https://html.spec.whatwg.org/multipage/infrastructure.html#xml-compatible and http://www.w3.org/TR/xml/#d0e804)
        We don't need to check the value; it's always URI safe. */ if (ALLOW_DATA_ATTR && !FORBID_ATTR[lcName] && $2567b26e29cb976a$var$regExpTest(DATA_ATTR$$1, lcName)) ;
        else if (ALLOW_ARIA_ATTR && $2567b26e29cb976a$var$regExpTest(ARIA_ATTR$$1, lcName)) ;
        else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) return false;
        else if (URI_SAFE_ATTRIBUTES[lcName]) ;
        else if ($2567b26e29cb976a$var$regExpTest(IS_ALLOWED_URI$$1, $2567b26e29cb976a$var$stringReplace(value, ATTR_WHITESPACE$$1, ""))) ;
        else if ((lcName === "src" || lcName === "xlink:href" || lcName === "href") && lcTag !== "script" && $2567b26e29cb976a$var$stringIndexOf(value, "data:") === 0 && DATA_URI_TAGS[lcTag]) ;
        else if (ALLOW_UNKNOWN_PROTOCOLS && !$2567b26e29cb976a$var$regExpTest(IS_SCRIPT_OR_DATA$$1, $2567b26e29cb976a$var$stringReplace(value, ATTR_WHITESPACE$$1, ""))) ;
        else if (!value) ;
        else return false;
        return true;
    };
    /**
   * _sanitizeAttributes
   *
   * @protect attributes
   * @protect nodeName
   * @protect removeAttribute
   * @protect setAttribute
   *
   * @param  {Node} currentNode to sanitize
   */ var _sanitizeAttributes = function _sanitizeAttributes(currentNode) {
        var attr = void 0;
        var value = void 0;
        var lcName = void 0;
        var l = void 0;
        /* Execute a hook if present */ _executeHook("beforeSanitizeAttributes", currentNode, null);
        var attributes = currentNode.attributes;
        /* Check if we have attributes; if not we might have a text node */ if (!attributes) return;
        var hookEvent = {
            attrName: "",
            attrValue: "",
            keepAttr: true,
            allowedAttributes: ALLOWED_ATTR
        };
        l = attributes.length;
        /* Go backwards over all attributes; safely remove bad ones */ while(l--){
            attr = attributes[l];
            var _attr = attr, name = _attr.name, namespaceURI = _attr.namespaceURI;
            value = $2567b26e29cb976a$var$stringTrim(attr.value);
            lcName = $2567b26e29cb976a$var$stringToLowerCase(name);
            /* Execute a hook if present */ hookEvent.attrName = lcName;
            hookEvent.attrValue = value;
            hookEvent.keepAttr = true;
            hookEvent.forceKeepAttr = undefined; // Allows developers to see this is a property they can set
            _executeHook("uponSanitizeAttribute", currentNode, hookEvent);
            value = hookEvent.attrValue;
            /* Did the hooks approve of the attribute? */ if (hookEvent.forceKeepAttr) continue;
            /* Remove attribute */ _removeAttribute(name, currentNode);
            /* Did the hooks approve of the attribute? */ if (!hookEvent.keepAttr) continue;
            /* Work around a security issue in jQuery 3.0 */ if ($2567b26e29cb976a$var$regExpTest(/\/>/i, value)) {
                _removeAttribute(name, currentNode);
                continue;
            }
            /* Sanitize attribute content to be template-safe */ if (SAFE_FOR_TEMPLATES) {
                value = $2567b26e29cb976a$var$stringReplace(value, MUSTACHE_EXPR$$1, " ");
                value = $2567b26e29cb976a$var$stringReplace(value, ERB_EXPR$$1, " ");
            }
            /* Is `value` valid for this attribute? */ var lcTag = currentNode.nodeName.toLowerCase();
            if (!_isValidAttribute(lcTag, lcName, value)) continue;
            /* Handle invalid data-* attribute set by try-catching it */ try {
                if (namespaceURI) currentNode.setAttributeNS(namespaceURI, name, value);
                else /* Fallback to setAttribute() for browser-unrecognized namespaces e.g. "x-schema". */ currentNode.setAttribute(name, value);
                $2567b26e29cb976a$var$arrayPop(DOMPurify.removed);
            } catch (_) {}
        }
        /* Execute a hook if present */ _executeHook("afterSanitizeAttributes", currentNode, null);
    };
    /**
   * _sanitizeShadowDOM
   *
   * @param  {DocumentFragment} fragment to iterate over recursively
   */ var _sanitizeShadowDOM = function _sanitizeShadowDOM(fragment) {
        var shadowNode = void 0;
        var shadowIterator = _createIterator(fragment);
        /* Execute a hook if present */ _executeHook("beforeSanitizeShadowDOM", fragment, null);
        while(shadowNode = shadowIterator.nextNode()){
            /* Execute a hook if present */ _executeHook("uponSanitizeShadowNode", shadowNode, null);
            /* Sanitize tags and elements */ if (_sanitizeElements(shadowNode)) continue;
            /* Deep shadow DOM detected */ if (shadowNode.content instanceof DocumentFragment) _sanitizeShadowDOM(shadowNode.content);
            /* Check attributes, sanitize if necessary */ _sanitizeAttributes(shadowNode);
        }
        /* Execute a hook if present */ _executeHook("afterSanitizeShadowDOM", fragment, null);
    };
    /**
   * Sanitize
   * Public method providing core sanitation functionality
   *
   * @param {String|Node} dirty string or DOM node
   * @param {Object} configuration object
   */ // eslint-disable-next-line complexity
    DOMPurify.sanitize = function(dirty, cfg) {
        var body = void 0;
        var importedNode = void 0;
        var currentNode = void 0;
        var oldNode = void 0;
        var returnNode = void 0;
        /* Make sure we have a string to sanitize.
      DO NOT return early, as this will return the wrong type if
      the user has requested a DOM object rather than a string */ IS_EMPTY_INPUT = !dirty;
        if (IS_EMPTY_INPUT) dirty = "<!-->";
        /* Stringify, in case dirty is an object */ if (typeof dirty !== "string" && !_isNode(dirty)) {
            // eslint-disable-next-line no-negated-condition
            if (typeof dirty.toString !== "function") throw $2567b26e29cb976a$var$typeErrorCreate("toString is not a function");
            else {
                dirty = dirty.toString();
                if (typeof dirty !== "string") throw $2567b26e29cb976a$var$typeErrorCreate("dirty is not a string, aborting");
            }
        }
        /* Check we can run. Otherwise fall back or ignore */ if (!DOMPurify.isSupported) {
            if ($2567b26e29cb976a$var$_typeof(window1.toStaticHTML) === "object" || typeof window1.toStaticHTML === "function") {
                if (typeof dirty === "string") return window1.toStaticHTML(dirty);
                if (_isNode(dirty)) return window1.toStaticHTML(dirty.outerHTML);
            }
            return dirty;
        }
        /* Assign config vars */ if (!SET_CONFIG) _parseConfig(cfg);
        /* Clean up removed elements */ DOMPurify.removed = [];
        /* Check if dirty is correctly typed for IN_PLACE */ if (typeof dirty === "string") IN_PLACE = false;
        if (IN_PLACE) ;
        else if (dirty instanceof Node) {
            /* If dirty is a DOM element, append to an empty document to avoid
         elements being stripped by the parser */ body = _initDocument("<!---->");
            importedNode = body.ownerDocument.importNode(dirty, true);
            if (importedNode.nodeType === 1 && importedNode.nodeName === "BODY") /* Node is already a body, use as is */ body = importedNode;
            else if (importedNode.nodeName === "HTML") body = importedNode;
            else // eslint-disable-next-line unicorn/prefer-dom-node-append
            body.appendChild(importedNode);
        } else {
            /* Exit directly if we have nothing to do */ if (!RETURN_DOM && !SAFE_FOR_TEMPLATES && !WHOLE_DOCUMENT && // eslint-disable-next-line unicorn/prefer-includes
            dirty.indexOf("<") === -1) return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(dirty) : dirty;
            /* Initialize the document to work on */ body = _initDocument(dirty);
            /* Check we have a DOM node from the data */ if (!body) return RETURN_DOM ? null : emptyHTML;
        }
        /* Remove first element node (ours) if FORCE_BODY is set */ if (body && FORCE_BODY) _forceRemove(body.firstChild);
        /* Get node iterator */ var nodeIterator = _createIterator(IN_PLACE ? dirty : body);
        /* Now start iterating over the created document */ while(currentNode = nodeIterator.nextNode()){
            /* Fix IE's strange behavior with manipulated textNodes #89 */ if (currentNode.nodeType === 3 && currentNode === oldNode) continue;
            /* Sanitize tags and elements */ if (_sanitizeElements(currentNode)) continue;
            /* Shadow DOM detected, sanitize it */ if (currentNode.content instanceof DocumentFragment) _sanitizeShadowDOM(currentNode.content);
            /* Check attributes, sanitize if necessary */ _sanitizeAttributes(currentNode);
            oldNode = currentNode;
        }
        oldNode = null;
        /* If we sanitized `dirty` in-place, return it. */ if (IN_PLACE) return dirty;
        /* Return sanitized string or DOM */ if (RETURN_DOM) {
            if (RETURN_DOM_FRAGMENT) {
                returnNode = createDocumentFragment.call(body.ownerDocument);
                while(body.firstChild)// eslint-disable-next-line unicorn/prefer-dom-node-append
                returnNode.appendChild(body.firstChild);
            } else returnNode = body;
            if (RETURN_DOM_IMPORT) /*
          AdoptNode() is not used because internal state is not reset
          (e.g. the past names map of a HTMLFormElement), this is safe
          in theory but we would rather not risk another attack vector.
          The state that is cloned by importNode() is explicitly defined
          by the specs.
        */ returnNode = importNode.call(originalDocument, returnNode, true);
            return returnNode;
        }
        var serializedHTML = WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;
        /* Sanitize final string template-safe */ if (SAFE_FOR_TEMPLATES) {
            serializedHTML = $2567b26e29cb976a$var$stringReplace(serializedHTML, MUSTACHE_EXPR$$1, " ");
            serializedHTML = $2567b26e29cb976a$var$stringReplace(serializedHTML, ERB_EXPR$$1, " ");
        }
        return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(serializedHTML) : serializedHTML;
    };
    /**
   * Public method to set the configuration once
   * setConfig
   *
   * @param {Object} cfg configuration object
   */ DOMPurify.setConfig = function(cfg) {
        _parseConfig(cfg);
        SET_CONFIG = true;
    };
    /**
   * Public method to remove the configuration
   * clearConfig
   *
   */ DOMPurify.clearConfig = function() {
        CONFIG = null;
        SET_CONFIG = false;
    };
    /**
   * Public method to check if an attribute value is valid.
   * Uses last set config, if any. Otherwise, uses config defaults.
   * isValidAttribute
   *
   * @param  {string} tag Tag name of containing element.
   * @param  {string} attr Attribute name.
   * @param  {string} value Attribute value.
   * @return {Boolean} Returns true if `value` is valid. Otherwise, returns false.
   */ DOMPurify.isValidAttribute = function(tag, attr, value) {
        /* Initialize shared config vars if necessary. */ if (!CONFIG) _parseConfig({});
        var lcTag = $2567b26e29cb976a$var$stringToLowerCase(tag);
        var lcName = $2567b26e29cb976a$var$stringToLowerCase(attr);
        return _isValidAttribute(lcTag, lcName, value);
    };
    /**
   * AddHook
   * Public method to add DOMPurify hooks
   *
   * @param {String} entryPoint entry point for the hook to add
   * @param {Function} hookFunction function to execute
   */ DOMPurify.addHook = function(entryPoint, hookFunction) {
        if (typeof hookFunction !== "function") return;
        hooks[entryPoint] = hooks[entryPoint] || [];
        $2567b26e29cb976a$var$arrayPush(hooks[entryPoint], hookFunction);
    };
    /**
   * RemoveHook
   * Public method to remove a DOMPurify hook at a given entryPoint
   * (pops it from the stack of hooks if more are present)
   *
   * @param {String} entryPoint entry point for the hook to remove
   */ DOMPurify.removeHook = function(entryPoint) {
        if (hooks[entryPoint]) $2567b26e29cb976a$var$arrayPop(hooks[entryPoint]);
    };
    /**
   * RemoveHooks
   * Public method to remove all DOMPurify hooks at a given entryPoint
   *
   * @param  {String} entryPoint entry point for the hooks to remove
   */ DOMPurify.removeHooks = function(entryPoint) {
        if (hooks[entryPoint]) hooks[entryPoint] = [];
    };
    /**
   * RemoveAllHooks
   * Public method to remove all DOMPurify hooks
   *
   */ DOMPurify.removeAllHooks = function() {
        hooks = {};
    };
    return DOMPurify;
}
var $2567b26e29cb976a$var$purify = $2567b26e29cb976a$var$createDOMPurify();
var // ESM-comment-begin
// define(function () { return purify; });
// ESM-comment-end
// ESM-uncomment-begin
$2567b26e29cb976a$export$2e2bcd8739ae039 = $2567b26e29cb976a$var$purify;
const $2567b26e29cb976a$export$83d89fbfd8236492 = $2567b26e29cb976a$var$purify.version;
const $2567b26e29cb976a$export$48c17662a6902497 = $2567b26e29cb976a$var$purify.isSupported;
const $2567b26e29cb976a$export$83d2e9e3e4ee39ed = $2567b26e29cb976a$var$purify.sanitize;
const $2567b26e29cb976a$export$940a7873bb071df8 = $2567b26e29cb976a$var$purify.setConfig;
const $2567b26e29cb976a$export$fddf4455c1a80feb = $2567b26e29cb976a$var$purify.clearConfig;
const $2567b26e29cb976a$export$ffe9bb2f80eb16c6 = $2567b26e29cb976a$var$purify.isValidAttribute;
const $2567b26e29cb976a$export$f99777bb87ac6904 = $2567b26e29cb976a$var$purify.addHook;
const $2567b26e29cb976a$export$4840506845da1500 = $2567b26e29cb976a$var$purify.removeHook;
const $2567b26e29cb976a$export$37b326390107f1c9 = $2567b26e29cb976a$var$purify.removeHooks;
const $2567b26e29cb976a$export$2d6b8bcac4994499 = $2567b26e29cb976a$var$purify.removeAllHooks; // ESM-uncomment-end



var $5abWm = parcelRequire("5abWm");

var $cTUN0 = parcelRequire("cTUN0");

var $jzr1I = parcelRequire("jzr1I");

var $7Kngw = parcelRequire("7Kngw");

var $eFOsn = parcelRequire("eFOsn");

var $gnEXx = parcelRequire("gnEXx");

var $g0782 = parcelRequire("g0782");

var $fSvkC = parcelRequire("fSvkC");

var $chTln = parcelRequire("chTln");

var $16r9O = parcelRequire("16r9O");

var $jInpn = parcelRequire("jInpn");

var $atiRx = parcelRequire("atiRx");
var $9149932b835918da$exports = {};

$parcel$export($9149932b835918da$exports, "marked", function () { return $9149932b835918da$export$db8f131360c543a5; }, function (v) { return $9149932b835918da$export$db8f131360c543a5 = v; });
$parcel$export($9149932b835918da$exports, "Parser", function () { return $9149932b835918da$export$7acfa6ed01010e37; }, function (v) { return $9149932b835918da$export$7acfa6ed01010e37 = v; });
$parcel$export($9149932b835918da$exports, "parser", function () { return $9149932b835918da$export$8f49e4af10703ce3; }, function (v) { return $9149932b835918da$export$8f49e4af10703ce3 = v; });
$parcel$export($9149932b835918da$exports, "Renderer", function () { return $9149932b835918da$export$88530751e3977073; }, function (v) { return $9149932b835918da$export$88530751e3977073 = v; });
$parcel$export($9149932b835918da$exports, "TextRenderer", function () { return $9149932b835918da$export$75ebcd2c8ed5b901; }, function (v) { return $9149932b835918da$export$75ebcd2c8ed5b901 = v; });
$parcel$export($9149932b835918da$exports, "Lexer", function () { return $9149932b835918da$export$6168dc8908a6c652; }, function (v) { return $9149932b835918da$export$6168dc8908a6c652 = v; });
$parcel$export($9149932b835918da$exports, "lexer", function () { return $9149932b835918da$export$43feed32102720d2; }, function (v) { return $9149932b835918da$export$43feed32102720d2 = v; });
$parcel$export($9149932b835918da$exports, "Tokenizer", function () { return $9149932b835918da$export$55e8b082af4aa63e; }, function (v) { return $9149932b835918da$export$55e8b082af4aa63e = v; });
$parcel$export($9149932b835918da$exports, "Slugger", function () { return $9149932b835918da$export$a2039dba1f9639d; }, function (v) { return $9149932b835918da$export$a2039dba1f9639d = v; });
$parcel$export($9149932b835918da$exports, "parse", function () { return $9149932b835918da$export$98e6a39c04603d36; }, function (v) { return $9149932b835918da$export$98e6a39c04603d36 = v; });
/**
 * marked - a markdown parser
 * Copyright (c) 2011-2021, Christopher Jeffrey. (MIT Licensed)
 * https://github.com/markedjs/marked
 */ /**
 * DO NOT EDIT THIS FILE
 * The code in this file is generated from files in ./src/
 */ // ESM-uncomment-begin
let $9149932b835918da$var$__marked_exports;
(function() {
    function define(factory) {
        $9149932b835918da$var$__marked_exports = factory();
    }
    define.amd = true;
    // ESM-uncomment-end
    (function(global, factory) {
        $9149932b835918da$exports = factory();
    })(this, function() {
        "use strict";
        function _defineProperties(target, props) {
            for(var i = 0; i < props.length; i++){
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        function _createClass(Constructor, protoProps, staticProps) {
            if (protoProps) _defineProperties(Constructor.prototype, protoProps);
            if (staticProps) _defineProperties(Constructor, staticProps);
            return Constructor;
        }
        function _unsupportedIterableToArray(o, minLen) {
            if (!o) return;
            if (typeof o === "string") return _arrayLikeToArray(o, minLen);
            var n = Object.prototype.toString.call(o).slice(8, -1);
            if (n === "Object" && o.constructor) n = o.constructor.name;
            if (n === "Map" || n === "Set") return Array.from(o);
            if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
        }
        function _arrayLikeToArray(arr, len) {
            if (len == null || len > arr.length) len = arr.length;
            for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
            return arr2;
        }
        function _createForOfIteratorHelperLoose(o, allowArrayLike) {
            var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
            if (it) return (it = it.call(o)).next.bind(it);
            if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
                if (it) o = it;
                var i = 0;
                return function() {
                    if (i >= o.length) return {
                        done: true
                    };
                    return {
                        done: false,
                        value: o[i++]
                    };
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var defaults$5 = {
            exports: {}
        };
        function getDefaults$1() {
            return {
                baseUrl: null,
                breaks: false,
                extensions: null,
                gfm: true,
                headerIds: true,
                headerPrefix: "",
                highlight: null,
                langPrefix: "language-",
                mangle: true,
                pedantic: false,
                renderer: null,
                sanitize: false,
                sanitizer: null,
                silent: false,
                smartLists: false,
                smartypants: false,
                tokenizer: null,
                walkTokens: null,
                xhtml: false
            };
        }
        function changeDefaults$1(newDefaults) {
            defaults$5.exports.defaults = newDefaults;
        }
        defaults$5.exports = {
            defaults: getDefaults$1(),
            getDefaults: getDefaults$1,
            changeDefaults: changeDefaults$1
        };
        /**
   * Helpers
   */ var escapeTest = /[&<>"']/;
        var escapeReplace = /[&<>"']/g;
        var escapeTestNoEncode = /[<>"']|&(?!#?\w+;)/;
        var escapeReplaceNoEncode = /[<>"']|&(?!#?\w+;)/g;
        var escapeReplacements = {
            "&": "&amp;",
            "<": "&lt;",
            ">": "&gt;",
            '"': "&quot;",
            "'": "&#39;"
        };
        var getEscapeReplacement = function getEscapeReplacement(ch) {
            return escapeReplacements[ch];
        };
        function escape$2(html, encode) {
            if (encode) {
                if (escapeTest.test(html)) return html.replace(escapeReplace, getEscapeReplacement);
            } else {
                if (escapeTestNoEncode.test(html)) return html.replace(escapeReplaceNoEncode, getEscapeReplacement);
            }
            return html;
        }
        var unescapeTest = /&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/ig;
        function unescape$1(html) {
            // explicitly match decimal, hex, and named HTML entities
            return html.replace(unescapeTest, function(_, n) {
                n = n.toLowerCase();
                if (n === "colon") return ":";
                if (n.charAt(0) === "#") return n.charAt(1) === "x" ? String.fromCharCode(parseInt(n.substring(2), 16)) : String.fromCharCode(+n.substring(1));
                return "";
            });
        }
        var caret = /(^|[^\[])\^/g;
        function edit$1(regex, opt) {
            regex = regex.source || regex;
            opt = opt || "";
            var obj = {
                replace: function replace(name, val) {
                    val = val.source || val;
                    val = val.replace(caret, "$1");
                    regex = regex.replace(name, val);
                    return obj;
                },
                getRegex: function getRegex() {
                    return new RegExp(regex, opt);
                }
            };
            return obj;
        }
        var nonWordAndColonTest = /[^\w:]/g;
        var originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;
        function cleanUrl$1(sanitize, base, href) {
            if (sanitize) {
                var prot;
                try {
                    prot = decodeURIComponent(unescape$1(href)).replace(nonWordAndColonTest, "").toLowerCase();
                } catch (e) {
                    return null;
                }
                if (prot.indexOf("javascript:") === 0 || prot.indexOf("vbscript:") === 0 || prot.indexOf("data:") === 0) return null;
            }
            if (base && !originIndependentUrl.test(href)) href = resolveUrl(base, href);
            try {
                href = encodeURI(href).replace(/%25/g, "%");
            } catch (e1) {
                return null;
            }
            return href;
        }
        var baseUrls = {};
        var justDomain = /^[^:]+:\/*[^/]*$/;
        var protocol = /^([^:]+:)[\s\S]*$/;
        var domain = /^([^:]+:\/*[^/]*)[\s\S]*$/;
        function resolveUrl(base, href) {
            if (!baseUrls[" " + base]) {
                // we can ignore everything in base after the last slash of its path component,
                // but we might need to add _that_
                // https://tools.ietf.org/html/rfc3986#section-3
                if (justDomain.test(base)) baseUrls[" " + base] = base + "/";
                else baseUrls[" " + base] = rtrim$1(base, "/", true);
            }
            base = baseUrls[" " + base];
            var relativeBase = base.indexOf(":") === -1;
            if (href.substring(0, 2) === "//") {
                if (relativeBase) return href;
                return base.replace(protocol, "$1") + href;
            } else if (href.charAt(0) === "/") {
                if (relativeBase) return href;
                return base.replace(domain, "$1") + href;
            } else return base + href;
        }
        var noopTest$1 = {
            exec: function noopTest() {}
        };
        function merge$2(obj) {
            var i = 1, target, key;
            for(; i < arguments.length; i++){
                target = arguments[i];
                for(key in target)if (Object.prototype.hasOwnProperty.call(target, key)) obj[key] = target[key];
            }
            return obj;
        }
        function splitCells$1(tableRow, count) {
            // ensure that every cell-delimiting pipe has a space
            // before it to distinguish it from an escaped pipe
            var row = tableRow.replace(/\|/g, function(match, offset, str) {
                var escaped = false, curr = offset;
                while(--curr >= 0 && str[curr] === "\\")escaped = !escaped;
                if (escaped) // odd number of slashes means | is escaped
                // so we leave it alone
                return "|";
                else // add space before unescaped |
                return " |";
            }), cells = row.split(/ \|/);
            var i = 0; // First/last cell in a row cannot be empty if it has no leading/trailing pipe
            if (!cells[0].trim()) cells.shift();
            if (!cells[cells.length - 1].trim()) cells.pop();
            if (cells.length > count) cells.splice(count);
            else while(cells.length < count)cells.push("");
            for(; i < cells.length; i++)// leading or trailing whitespace is ignored per the gfm spec
            cells[i] = cells[i].trim().replace(/\\\|/g, "|");
            return cells;
        } // Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').
        // /c*$/ is vulnerable to REDOS.
        // invert: Remove suffix of non-c chars instead. Default falsey.
        function rtrim$1(str, c, invert) {
            var l = str.length;
            if (l === 0) return "";
             // Length of suffix matching the invert condition.
            var suffLen = 0; // Step left until we fail to match the invert condition.
            while(suffLen < l){
                var currChar = str.charAt(l - suffLen - 1);
                if (currChar === c && !invert) suffLen++;
                else if (currChar !== c && invert) suffLen++;
                else break;
            }
            return str.substr(0, l - suffLen);
        }
        function findClosingBracket$1(str, b) {
            if (str.indexOf(b[1]) === -1) return -1;
            var l = str.length;
            var level = 0, i = 0;
            for(; i < l; i++){
                if (str[i] === "\\") i++;
                else if (str[i] === b[0]) level++;
                else if (str[i] === b[1]) {
                    level--;
                    if (level < 0) return i;
                }
            }
            return -1;
        }
        function checkSanitizeDeprecation$1(opt) {
            if (opt && opt.sanitize && !opt.silent) console.warn("marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options");
        } // copied from https://stackoverflow.com/a/5450113/806777
        function repeatString$1(pattern, count) {
            if (count < 1) return "";
            var result = "";
            while(count > 1){
                if (count & 1) result += pattern;
                count >>= 1;
                pattern += pattern;
            }
            return result + pattern;
        }
        var helpers = {
            escape: escape$2,
            unescape: unescape$1,
            edit: edit$1,
            cleanUrl: cleanUrl$1,
            resolveUrl: resolveUrl,
            noopTest: noopTest$1,
            merge: merge$2,
            splitCells: splitCells$1,
            rtrim: rtrim$1,
            findClosingBracket: findClosingBracket$1,
            checkSanitizeDeprecation: checkSanitizeDeprecation$1,
            repeatString: repeatString$1
        };
        var defaults$4 = defaults$5.exports.defaults;
        var rtrim = helpers.rtrim, splitCells = helpers.splitCells, _escape = helpers.escape, findClosingBracket = helpers.findClosingBracket;
        function outputLink(cap, link, raw, lexer) {
            var href = link.href;
            var title = link.title ? _escape(link.title) : null;
            var text = cap[1].replace(/\\([\[\]])/g, "$1");
            if (cap[0].charAt(0) !== "!") {
                lexer.state.inLink = true;
                var token = {
                    type: "link",
                    raw: raw,
                    href: href,
                    title: title,
                    text: text,
                    tokens: lexer.inlineTokens(text, [])
                };
                lexer.state.inLink = false;
                return token;
            } else return {
                type: "image",
                raw: raw,
                href: href,
                title: title,
                text: _escape(text)
            };
        }
        function indentCodeCompensation(raw, text) {
            var matchIndentToCode = raw.match(/^(\s+)(?:```)/);
            if (matchIndentToCode === null) return text;
            var indentToCode = matchIndentToCode[1];
            return text.split("\n").map(function(node) {
                var matchIndentInNode = node.match(/^\s+/);
                if (matchIndentInNode === null) return node;
                var indentInNode = matchIndentInNode[0];
                if (indentInNode.length >= indentToCode.length) return node.slice(indentToCode.length);
                return node;
            }).join("\n");
        }
        /**
   * Tokenizer
   */ var Tokenizer_1 = /*#__PURE__*/ function() {
            function Tokenizer(options) {
                this.options = options || defaults$4;
            }
            var _proto = Tokenizer.prototype;
            _proto.space = function space(src) {
                var cap = this.rules.block.newline.exec(src);
                if (cap) {
                    if (cap[0].length > 1) return {
                        type: "space",
                        raw: cap[0]
                    };
                    return {
                        raw: "\n"
                    };
                }
            };
            _proto.code = function code(src) {
                var cap = this.rules.block.code.exec(src);
                if (cap) {
                    var text = cap[0].replace(/^ {1,4}/gm, "");
                    return {
                        type: "code",
                        raw: cap[0],
                        codeBlockStyle: "indented",
                        text: !this.options.pedantic ? rtrim(text, "\n") : text
                    };
                }
            };
            _proto.fences = function fences(src) {
                var cap = this.rules.block.fences.exec(src);
                if (cap) {
                    var raw = cap[0];
                    var text = indentCodeCompensation(raw, cap[3] || "");
                    return {
                        type: "code",
                        raw: raw,
                        lang: cap[2] ? cap[2].trim() : cap[2],
                        text: text
                    };
                }
            };
            _proto.heading = function heading(src) {
                var cap = this.rules.block.heading.exec(src);
                if (cap) {
                    var text = cap[2].trim(); // remove trailing #s
                    if (/#$/.test(text)) {
                        var trimmed = rtrim(text, "#");
                        if (this.options.pedantic) text = trimmed.trim();
                        else if (!trimmed || / $/.test(trimmed)) // CommonMark requires space before trailing #s
                        text = trimmed.trim();
                    }
                    var token = {
                        type: "heading",
                        raw: cap[0],
                        depth: cap[1].length,
                        text: text,
                        tokens: []
                    };
                    this.lexer.inline(token.text, token.tokens);
                    return token;
                }
            };
            _proto.hr = function hr(src) {
                var cap = this.rules.block.hr.exec(src);
                if (cap) return {
                    type: "hr",
                    raw: cap[0]
                };
            };
            _proto.blockquote = function blockquote(src) {
                var cap = this.rules.block.blockquote.exec(src);
                if (cap) {
                    var text = cap[0].replace(/^ *> ?/gm, "");
                    return {
                        type: "blockquote",
                        raw: cap[0],
                        tokens: this.lexer.blockTokens(text, []),
                        text: text
                    };
                }
            };
            _proto.list = function list(src) {
                var cap = this.rules.block.list.exec(src);
                if (cap) {
                    var raw, istask, ischecked, indent, i, blankLine, endsWithBlankLine, line, lines, itemContents;
                    var bull = cap[1].trim();
                    var isordered = bull.length > 1;
                    var list = {
                        type: "list",
                        raw: "",
                        ordered: isordered,
                        start: isordered ? +bull.slice(0, -1) : "",
                        loose: false,
                        items: []
                    };
                    bull = isordered ? "\\d{1,9}\\" + bull.slice(-1) : "\\" + bull;
                    if (this.options.pedantic) bull = isordered ? bull : "[*+-]";
                     // Get next list item
                    var itemRegex = new RegExp("^( {0,3}" + bull + ")((?: [^\\n]*| *)(?:\\n[^\\n]*)*(?:\\n|$))"); // Get each top-level item
                    while(src){
                        if (this.rules.block.hr.test(src)) break;
                        if (!(cap = itemRegex.exec(src))) break;
                        lines = cap[2].split("\n");
                        if (this.options.pedantic) {
                            indent = 2;
                            itemContents = lines[0].trimLeft();
                        } else {
                            indent = cap[2].search(/[^ ]/); // Find first non-space char
                            indent = cap[1].length + (indent > 4 ? 1 : indent); // intented code blocks after 4 spaces; indent is always 1
                            itemContents = lines[0].slice(indent - cap[1].length);
                        }
                        blankLine = false;
                        raw = cap[0];
                        if (!lines[0] && /^ *$/.test(lines[1])) {
                            // items begin with at most one blank line
                            raw = cap[1] + lines.slice(0, 2).join("\n") + "\n";
                            list.loose = true;
                            lines = [];
                        }
                        var nextBulletRegex = new RegExp("^ {0," + Math.min(3, indent - 1) + "}(?:[*+-]|\\d{1,9}[.)])");
                        for(i = 1; i < lines.length; i++){
                            line = lines[i];
                            if (this.options.pedantic) // Re-align to follow commonmark nesting rules
                            line = line.replace(/^ {1,4}(?=( {4})*[^ ])/g, "  ");
                             // End list item if found start of new bullet
                            if (nextBulletRegex.test(line)) {
                                raw = cap[1] + lines.slice(0, i).join("\n") + "\n";
                                break;
                            } // Until we encounter a blank line, item contents do not need indentation
                            if (!blankLine) {
                                if (!line.trim()) // Check if current line is empty
                                blankLine = true;
                                 // Dedent if possible
                                if (line.search(/[^ ]/) >= indent) itemContents += "\n" + line.slice(indent);
                                else itemContents += "\n" + line;
                                continue;
                            } // Dedent this line
                            if (line.search(/[^ ]/) >= indent || !line.trim()) {
                                itemContents += "\n" + line.slice(indent);
                                continue;
                            } else {
                                // Line was not properly indented; end of this item
                                raw = cap[1] + lines.slice(0, i).join("\n") + "\n";
                                break;
                            }
                        }
                        if (!list.loose) {
                            // If the previous item ended with a blank line, the list is loose
                            if (endsWithBlankLine) list.loose = true;
                            else if (/\n *\n *$/.test(raw)) endsWithBlankLine = true;
                        } // Check for task list items
                        if (this.options.gfm) {
                            istask = /^\[[ xX]\] /.exec(itemContents);
                            if (istask) {
                                ischecked = istask[0] !== "[ ] ";
                                itemContents = itemContents.replace(/^\[[ xX]\] +/, "");
                            }
                        }
                        list.items.push({
                            type: "list_item",
                            raw: raw,
                            task: !!istask,
                            checked: ischecked,
                            loose: false,
                            text: itemContents
                        });
                        list.raw += raw;
                        src = src.slice(raw.length);
                    } // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic
                    list.items[list.items.length - 1].raw = raw.trimRight();
                    list.items[list.items.length - 1].text = itemContents.trimRight();
                    list.raw = list.raw.trimRight();
                    var l = list.items.length; // Item child tokens handled here at end because we needed to have the final item to trim it first
                    for(i = 0; i < l; i++){
                        this.lexer.state.top = false;
                        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);
                        if (list.items[i].tokens.some(function(t) {
                            return t.type === "space";
                        })) {
                            list.loose = true;
                            list.items[i].loose = true;
                        }
                    }
                    return list;
                }
            };
            _proto.html = function html(src) {
                var cap = this.rules.block.html.exec(src);
                if (cap) {
                    var token = {
                        type: "html",
                        raw: cap[0],
                        pre: !this.options.sanitizer && (cap[1] === "pre" || cap[1] === "script" || cap[1] === "style"),
                        text: cap[0]
                    };
                    if (this.options.sanitize) {
                        token.type = "paragraph";
                        token.text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : _escape(cap[0]);
                        token.tokens = [];
                        this.lexer.inline(token.text, token.tokens);
                    }
                    return token;
                }
            };
            _proto.def = function def(src) {
                var cap = this.rules.block.def.exec(src);
                if (cap) {
                    if (cap[3]) cap[3] = cap[3].substring(1, cap[3].length - 1);
                    var tag = cap[1].toLowerCase().replace(/\s+/g, " ");
                    return {
                        type: "def",
                        tag: tag,
                        raw: cap[0],
                        href: cap[2],
                        title: cap[3]
                    };
                }
            };
            _proto.table = function table(src) {
                var cap = this.rules.block.table.exec(src);
                if (cap) {
                    var item = {
                        type: "table",
                        header: splitCells(cap[1]).map(function(c) {
                            return {
                                text: c
                            };
                        }),
                        align: cap[2].replace(/^ *|\| *$/g, "").split(/ *\| */),
                        rows: cap[3] ? cap[3].replace(/\n$/, "").split("\n") : []
                    };
                    if (item.header.length === item.align.length) {
                        item.raw = cap[0];
                        var l = item.align.length;
                        var i, j, k, row;
                        for(i = 0; i < l; i++){
                            if (/^ *-+: *$/.test(item.align[i])) item.align[i] = "right";
                            else if (/^ *:-+: *$/.test(item.align[i])) item.align[i] = "center";
                            else if (/^ *:-+ *$/.test(item.align[i])) item.align[i] = "left";
                            else item.align[i] = null;
                        }
                        l = item.rows.length;
                        for(i = 0; i < l; i++)item.rows[i] = splitCells(item.rows[i], item.header.length).map(function(c) {
                            return {
                                text: c
                            };
                        });
                         // parse child tokens inside headers and cells
                        // header child tokens
                        l = item.header.length;
                        for(j = 0; j < l; j++){
                            item.header[j].tokens = [];
                            this.lexer.inlineTokens(item.header[j].text, item.header[j].tokens);
                        } // cell child tokens
                        l = item.rows.length;
                        for(j = 0; j < l; j++){
                            row = item.rows[j];
                            for(k = 0; k < row.length; k++){
                                row[k].tokens = [];
                                this.lexer.inlineTokens(row[k].text, row[k].tokens);
                            }
                        }
                        return item;
                    }
                }
            };
            _proto.lheading = function lheading(src) {
                var cap = this.rules.block.lheading.exec(src);
                if (cap) {
                    var token = {
                        type: "heading",
                        raw: cap[0],
                        depth: cap[2].charAt(0) === "=" ? 1 : 2,
                        text: cap[1],
                        tokens: []
                    };
                    this.lexer.inline(token.text, token.tokens);
                    return token;
                }
            };
            _proto.paragraph = function paragraph(src) {
                var cap = this.rules.block.paragraph.exec(src);
                if (cap) {
                    var token = {
                        type: "paragraph",
                        raw: cap[0],
                        text: cap[1].charAt(cap[1].length - 1) === "\n" ? cap[1].slice(0, -1) : cap[1],
                        tokens: []
                    };
                    this.lexer.inline(token.text, token.tokens);
                    return token;
                }
            };
            _proto.text = function text(src) {
                var cap = this.rules.block.text.exec(src);
                if (cap) {
                    var token = {
                        type: "text",
                        raw: cap[0],
                        text: cap[0],
                        tokens: []
                    };
                    this.lexer.inline(token.text, token.tokens);
                    return token;
                }
            };
            _proto.escape = function escape(src) {
                var cap = this.rules.inline.escape.exec(src);
                if (cap) return {
                    type: "escape",
                    raw: cap[0],
                    text: _escape(cap[1])
                };
            };
            _proto.tag = function tag(src) {
                var cap = this.rules.inline.tag.exec(src);
                if (cap) {
                    if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) this.lexer.state.inLink = true;
                    else if (this.lexer.state.inLink && /^<\/a>/i.test(cap[0])) this.lexer.state.inLink = false;
                    if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\s|>)/i.test(cap[0])) this.lexer.state.inRawBlock = true;
                    else if (this.lexer.state.inRawBlock && /^<\/(pre|code|kbd|script)(\s|>)/i.test(cap[0])) this.lexer.state.inRawBlock = false;
                    return {
                        type: this.options.sanitize ? "text" : "html",
                        raw: cap[0],
                        inLink: this.lexer.state.inLink,
                        inRawBlock: this.lexer.state.inRawBlock,
                        text: this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : _escape(cap[0]) : cap[0]
                    };
                }
            };
            _proto.link = function link(src) {
                var cap = this.rules.inline.link.exec(src);
                if (cap) {
                    var trimmedUrl = cap[2].trim();
                    if (!this.options.pedantic && /^</.test(trimmedUrl)) {
                        // commonmark requires matching angle brackets
                        if (!/>$/.test(trimmedUrl)) return;
                         // ending angle bracket cannot be escaped
                        var rtrimSlash = rtrim(trimmedUrl.slice(0, -1), "\\");
                        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) return;
                    } else {
                        // find closing parenthesis
                        var lastParenIndex = findClosingBracket(cap[2], "()");
                        if (lastParenIndex > -1) {
                            var start = cap[0].indexOf("!") === 0 ? 5 : 4;
                            var linkLen = start + cap[1].length + lastParenIndex;
                            cap[2] = cap[2].substring(0, lastParenIndex);
                            cap[0] = cap[0].substring(0, linkLen).trim();
                            cap[3] = "";
                        }
                    }
                    var href = cap[2];
                    var title = "";
                    if (this.options.pedantic) {
                        // split pedantic href and title
                        var link = /^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(href);
                        if (link) {
                            href = link[1];
                            title = link[3];
                        }
                    } else title = cap[3] ? cap[3].slice(1, -1) : "";
                    href = href.trim();
                    if (/^</.test(href)) {
                        if (this.options.pedantic && !/>$/.test(trimmedUrl)) // pedantic allows starting angle bracket without ending angle bracket
                        href = href.slice(1);
                        else href = href.slice(1, -1);
                    }
                    return outputLink(cap, {
                        href: href ? href.replace(this.rules.inline._escapes, "$1") : href,
                        title: title ? title.replace(this.rules.inline._escapes, "$1") : title
                    }, cap[0], this.lexer);
                }
            };
            _proto.reflink = function reflink(src, links) {
                var cap;
                if ((cap = this.rules.inline.reflink.exec(src)) || (cap = this.rules.inline.nolink.exec(src))) {
                    var link = (cap[2] || cap[1]).replace(/\s+/g, " ");
                    link = links[link.toLowerCase()];
                    if (!link || !link.href) {
                        var text = cap[0].charAt(0);
                        return {
                            type: "text",
                            raw: text,
                            text: text
                        };
                    }
                    return outputLink(cap, link, cap[0], this.lexer);
                }
            };
            _proto.emStrong = function emStrong(src, maskedSrc, prevChar) {
                if (prevChar === void 0) prevChar = "";
                var match = this.rules.inline.emStrong.lDelim.exec(src);
                if (!match) return; // _ can't be between two alphanumerics. \p{L}\p{N} includes non-english alphabet/numbers as well
                if (match[3] && prevChar.match(/(?:[0-9A-Za-z\xAA\xB2\xB3\xB5\xB9\xBA\xBC-\xBE\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u0660-\u0669\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07C0-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08C7\u0904-\u0939\u093D\u0950\u0958-\u0961\u0966-\u096F\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09E6-\u09F1\u09F4-\u09F9\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A66-\u0A6F\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AE6-\u0AEF\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B66-\u0B6F\u0B71-\u0B77\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0BE6-\u0BF2\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C66-\u0C6F\u0C78-\u0C7E\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CE6-\u0CEF\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D58-\u0D61\u0D66-\u0D78\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DE6-\u0DEF\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F20-\u0F33\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F-\u1049\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u1090-\u1099\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1369-\u137C\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A16\u1A20-\u1A54\u1A80-\u1A89\u1A90-\u1A99\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B50-\u1B59\u1B83-\u1BA0\u1BAE-\u1BE5\u1C00-\u1C23\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2070\u2071\u2074-\u2079\u207F-\u2089\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2150-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2CFD\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u3192-\u3195\u31A0-\u31BF\u31F0-\u31FF\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\u3400-\u4DBF\u4E00-\u9FFC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7CA\uA7F5-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA830-\uA835\uA840-\uA873\uA882-\uA8B3\uA8D0-\uA8D9\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA900-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF-\uA9D9\uA9E0-\uA9E4\uA9E6-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA50-\uAA59\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD07-\uDD33\uDD40-\uDD78\uDD8A\uDD8B\uDE80-\uDE9C\uDEA0-\uDED0\uDEE1-\uDEFB\uDF00-\uDF23\uDF2D-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC58-\uDC76\uDC79-\uDC9E\uDCA7-\uDCAF\uDCE0-\uDCF2\uDCF4\uDCF5\uDCFB-\uDD1B\uDD20-\uDD39\uDD80-\uDDB7\uDDBC-\uDDCF\uDDD2-\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE40-\uDE48\uDE60-\uDE7E\uDE80-\uDE9F\uDEC0-\uDEC7\uDEC9-\uDEE4\uDEEB-\uDEEF\uDF00-\uDF35\uDF40-\uDF55\uDF58-\uDF72\uDF78-\uDF91\uDFA9-\uDFAF]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDCFA-\uDD23\uDD30-\uDD39\uDE60-\uDE7E\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF27\uDF30-\uDF45\uDF51-\uDF54\uDFB0-\uDFCB\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC52-\uDC6F\uDC83-\uDCAF\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD03-\uDD26\uDD36-\uDD3F\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDD0-\uDDDA\uDDDC\uDDE1-\uDDF4\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDEF0-\uDEF9\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC50-\uDC59\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE50-\uDE59\uDE80-\uDEAA\uDEB8\uDEC0-\uDEC9\uDF00-\uDF1A\uDF30-\uDF3B]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCF2\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDD50-\uDD59\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC50-\uDC6C\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD50-\uDD59\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDDA0-\uDDA9\uDEE0-\uDEF2\uDFB0\uDFC0-\uDFD4]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF50-\uDF59\uDF5B-\uDF61\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE96\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82C[\uDC00-\uDD1E\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD834[\uDEE0-\uDEF3\uDF60-\uDF78]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD838[\uDD00-\uDD2C\uDD37-\uDD3D\uDD40-\uDD49\uDD4E\uDEC0-\uDEEB\uDEF0-\uDEF9]|\uD83A[\uDC00-\uDCC4\uDCC7-\uDCCF\uDD00-\uDD43\uDD4B\uDD50-\uDD59]|\uD83B[\uDC71-\uDCAB\uDCAD-\uDCAF\uDCB1-\uDCB4\uDD01-\uDD2D\uDD2F-\uDD3D\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD83C[\uDD00-\uDD0C]|\uD83E[\uDFF0-\uDFF9]|\uD869[\uDC00-\uDEDD\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A])/)) return;
                var nextChar = match[1] || match[2] || "";
                if (!nextChar || nextChar && (prevChar === "" || this.rules.inline.punctuation.exec(prevChar))) {
                    var lLength = match[0].length - 1;
                    var rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;
                    var endReg = match[0][0] === "*" ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;
                    endReg.lastIndex = 0; // Clip maskedSrc to same section of string as src (move to lexer?)
                    maskedSrc = maskedSrc.slice(-1 * src.length + lLength);
                    while((match = endReg.exec(maskedSrc)) != null){
                        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];
                        if (!rDelim) continue; // skip single * in __abc*abc__
                        rLength = rDelim.length;
                        if (match[3] || match[4]) {
                            // found another Left Delim
                            delimTotal += rLength;
                            continue;
                        } else if (match[5] || match[6]) // either Left or Right Delim
                        {
                            if (lLength % 3 && !((lLength + rLength) % 3)) {
                                midDelimTotal += rLength;
                                continue; // CommonMark Emphasis Rules 9-10
                            }
                        }
                        delimTotal -= rLength;
                        if (delimTotal > 0) continue; // Haven't found enough closing delimiters
                        // Remove extra characters. *a*** -> *a*
                        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal); // Create `em` if smallest delimiter has odd char count. *a***
                        if (Math.min(lLength, rLength) % 2) {
                            var _text = src.slice(1, lLength + match.index + rLength);
                            return {
                                type: "em",
                                raw: src.slice(0, lLength + match.index + rLength + 1),
                                text: _text,
                                tokens: this.lexer.inlineTokens(_text, [])
                            };
                        } // Create 'strong' if smallest delimiter has even char count. **a***
                        var text = src.slice(2, lLength + match.index + rLength - 1);
                        return {
                            type: "strong",
                            raw: src.slice(0, lLength + match.index + rLength + 1),
                            text: text,
                            tokens: this.lexer.inlineTokens(text, [])
                        };
                    }
                }
            };
            _proto.codespan = function codespan(src) {
                var cap = this.rules.inline.code.exec(src);
                if (cap) {
                    var text = cap[2].replace(/\n/g, " ");
                    var hasNonSpaceChars = /[^ ]/.test(text);
                    var hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);
                    if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) text = text.substring(1, text.length - 1);
                    text = _escape(text, true);
                    return {
                        type: "codespan",
                        raw: cap[0],
                        text: text
                    };
                }
            };
            _proto.br = function br(src) {
                var cap = this.rules.inline.br.exec(src);
                if (cap) return {
                    type: "br",
                    raw: cap[0]
                };
            };
            _proto.del = function del(src) {
                var cap = this.rules.inline.del.exec(src);
                if (cap) return {
                    type: "del",
                    raw: cap[0],
                    text: cap[2],
                    tokens: this.lexer.inlineTokens(cap[2], [])
                };
            };
            _proto.autolink = function autolink(src, mangle) {
                var cap = this.rules.inline.autolink.exec(src);
                if (cap) {
                    var text, href;
                    if (cap[2] === "@") {
                        text = _escape(this.options.mangle ? mangle(cap[1]) : cap[1]);
                        href = "mailto:" + text;
                    } else {
                        text = _escape(cap[1]);
                        href = text;
                    }
                    return {
                        type: "link",
                        raw: cap[0],
                        text: text,
                        href: href,
                        tokens: [
                            {
                                type: "text",
                                raw: text,
                                text: text
                            }
                        ]
                    };
                }
            };
            _proto.url = function url(src, mangle) {
                var cap;
                if (cap = this.rules.inline.url.exec(src)) {
                    var text, href;
                    if (cap[2] === "@") {
                        text = _escape(this.options.mangle ? mangle(cap[0]) : cap[0]);
                        href = "mailto:" + text;
                    } else {
                        // do extended autolink path validation
                        var prevCapZero;
                        do {
                            prevCapZero = cap[0];
                            cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];
                        }while (prevCapZero !== cap[0]);
                        text = _escape(cap[0]);
                        if (cap[1] === "www.") href = "http://" + text;
                        else href = text;
                    }
                    return {
                        type: "link",
                        raw: cap[0],
                        text: text,
                        href: href,
                        tokens: [
                            {
                                type: "text",
                                raw: text,
                                text: text
                            }
                        ]
                    };
                }
            };
            _proto.inlineText = function inlineText(src, smartypants) {
                var cap = this.rules.inline.text.exec(src);
                if (cap) {
                    var text;
                    if (this.lexer.state.inRawBlock) text = this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : _escape(cap[0]) : cap[0];
                    else text = _escape(this.options.smartypants ? smartypants(cap[0]) : cap[0]);
                    return {
                        type: "text",
                        raw: cap[0],
                        text: text
                    };
                }
            };
            return Tokenizer;
        }();
        var noopTest = helpers.noopTest, edit = helpers.edit, merge$1 = helpers.merge;
        /**
   * Block-Level Grammar
   */ var block$1 = {
            newline: /^(?: *(?:\n|$))+/,
            code: /^( {4}[^\n]+(?:\n(?: *(?:\n|$))*)?)+/,
            fences: /^ {0,3}(`{3,}(?=[^`\n]*\n)|~{3,})([^\n]*)\n(?:|([\s\S]*?)\n)(?: {0,3}\1[~`]* *(?=\n|$)|$)/,
            hr: /^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\* *){3,})(?:\n+|$)/,
            heading: /^ {0,3}(#{1,6})(?=\s|$)(.*)(?:\n+|$)/,
            blockquote: /^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/,
            list: /^( {0,3}bull)( [^\n]+?)?(?:\n|$)/,
            html: "^ {0,3}(?:<(script|pre|style|textarea)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)|comment[^\\n]*(\\n+|$)|<\\?[\\s\\S]*?(?:\\?>\\n*|$)|<![A-Z][\\s\\S]*?(?:>\\n*|$)|<!\\[CDATA\\[[\\s\\S]*?(?:\\]\\]>\\n*|$)|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:(?:\\n *)+\\n|$)|<(?!script|pre|style|textarea)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$)|</(?!script|pre|style|textarea)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$))",
            def: /^ {0,3}\[(label)\]: *\n? *<?([^\s>]+)>?(?:(?: +\n? *| *\n *)(title))? *(?:\n+|$)/,
            table: noopTest,
            lheading: /^([^\n]+)\n {0,3}(=+|-+) *(?:\n+|$)/,
            // regex template, placeholders will be replaced according to different paragraph
            // interruption rules of commonmark and the original markdown spec:
            _paragraph: /^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html| +\n)[^\n]+)*)/,
            text: /^[^\n]+/
        };
        block$1._label = /(?!\s*\])(?:\\[\[\]]|[^\[\]])+/;
        block$1._title = /(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/;
        block$1.def = edit(block$1.def).replace("label", block$1._label).replace("title", block$1._title).getRegex();
        block$1.bullet = /(?:[*+-]|\d{1,9}[.)])/;
        block$1.listItemStart = edit(/^( *)(bull) */).replace("bull", block$1.bullet).getRegex();
        block$1.list = edit(block$1.list).replace(/bull/g, block$1.bullet).replace("hr", "\\n+(?=\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$))").replace("def", "\\n+(?=" + block$1.def.source + ")").getRegex();
        block$1._tag = "address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul";
        block$1._comment = /<!--(?!-?>)[\s\S]*?(?:-->|$)/;
        block$1.html = edit(block$1.html, "i").replace("comment", block$1._comment).replace("tag", block$1._tag).replace("attribute", / +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex();
        block$1.paragraph = edit(block$1._paragraph).replace("hr", block$1.hr).replace("heading", " {0,3}#{1,6} ").replace("|lheading", "") // setex headings don't interrupt commonmark paragraphs
        .replace("blockquote", " {0,3}>").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ") // only lists starting from 1 can interrupt
        .replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", block$1._tag) // pars can be interrupted by type (6) html blocks
        .getRegex();
        block$1.blockquote = edit(block$1.blockquote).replace("paragraph", block$1.paragraph).getRegex();
        /**
   * Normal Block Grammar
   */ block$1.normal = merge$1({}, block$1);
        /**
   * GFM Block Grammar
   */ block$1.gfm = merge$1({}, block$1.normal, {
            table: "^ *([^\\n ].*\\|.*)\\n {0,3}(?:\\| *)?(:?-+:? *(?:\\| *:?-+:? *)*)\\|?(?:\\n((?:(?! *\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)" // Cells
        });
        block$1.gfm.table = edit(block$1.gfm.table).replace("hr", block$1.hr).replace("heading", " {0,3}#{1,6} ").replace("blockquote", " {0,3}>").replace("code", " {4}[^\\n]").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ") // only lists starting from 1 can interrupt
        .replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", block$1._tag) // tables can be interrupted by type (6) html blocks
        .getRegex();
        /**
   * Pedantic grammar (original John Gruber's loose markdown specification)
   */ block$1.pedantic = merge$1({}, block$1.normal, {
            html: edit("^ *(?:comment *(?:\\n|\\s*$)|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)|<tag(?:\"[^\"]*\"|'[^']*'|\\s[^'\"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))").replace("comment", block$1._comment).replace(/tag/g, "(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:|[^\\w\\s@]*@)\\b").getRegex(),
            def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,
            heading: /^(#{1,6})(.*)(?:\n+|$)/,
            fences: noopTest,
            // fences not supported
            paragraph: edit(block$1.normal._paragraph).replace("hr", block$1.hr).replace("heading", " *#{1,6} *[^\n]").replace("lheading", block$1.lheading).replace("blockquote", " {0,3}>").replace("|fences", "").replace("|list", "").replace("|html", "").getRegex()
        });
        /**
   * Inline-Level Grammar
   */ var inline$1 = {
            escape: /^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/,
            autolink: /^<(scheme:[^\s\x00-\x1f<>]*|email)>/,
            url: noopTest,
            tag: "^comment|^</[a-zA-Z][\\w:-]*\\s*>|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>|^<\\?[\\s\\S]*?\\?>|^<![a-zA-Z]+\\s[\\s\\S]*?>|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>",
            // CDATA section
            link: /^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/,
            reflink: /^!?\[(label)\]\[(?!\s*\])((?:\\[\[\]]?|[^\[\]\\])+)\]/,
            nolink: /^!?\[(?!\s*\])((?:\[[^\[\]]*\]|\\[\[\]]|[^\[\]])*)\](?:\[\])?/,
            reflinkSearch: "reflink|nolink(?!\\()",
            emStrong: {
                lDelim: /^(?:\*+(?:([punct_])|[^\s*]))|^_+(?:([punct*])|([^\s_]))/,
                //        (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.
                //        () Skip other delimiter (1) #***                   (2) a***#, a***                   (3) #***a, ***a                 (4) ***#              (5) #***#                 (6) a***a
                rDelimAst: /\_\_[^_*]*?\*[^_*]*?\_\_|[punct_](\*+)(?=[\s]|$)|[^punct*_\s](\*+)(?=[punct_\s]|$)|[punct_\s](\*+)(?=[^punct*_\s])|[\s](\*+)(?=[punct_])|[punct_](\*+)(?=[punct_])|[^punct*_\s](\*+)(?=[^punct*_\s])/,
                rDelimUnd: /\*\*[^_*]*?\_[^_*]*?\*\*|[punct*](\_+)(?=[\s]|$)|[^punct*_\s](\_+)(?=[punct*\s]|$)|[punct*\s](\_+)(?=[^punct*_\s])|[\s](\_+)(?=[punct*])|[punct*](\_+)(?=[punct*])/ // ^- Not allowed for _
            },
            code: /^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/,
            br: /^( {2,}|\\)\n(?!\s*$)/,
            del: noopTest,
            text: /^(`+|[^`])(?:(?= {2,}\n)|[\s\S]*?(?:(?=[\\<!\[`*_]|\b_|$)|[^ ](?= {2,}\n)))/,
            punctuation: /^([\spunctuation])/
        }; // list of punctuation marks from CommonMark spec
        // without * and _ to handle the different emphasis markers * and _
        inline$1._punctuation = "!\"#$%&'()+\\-.,/:;<=>?@\\[\\]`^{|}~";
        inline$1.punctuation = edit(inline$1.punctuation).replace(/punctuation/g, inline$1._punctuation).getRegex(); // sequences em should skip over [title](link), `code`, <html>
        inline$1.blockSkip = /\[[^\]]*?\]\([^\)]*?\)|`[^`]*?`|<[^>]*?>/g;
        inline$1.escapedEmSt = /\\\*|\\_/g;
        inline$1._comment = edit(block$1._comment).replace("(?:-->|$)", "-->").getRegex();
        inline$1.emStrong.lDelim = edit(inline$1.emStrong.lDelim).replace(/punct/g, inline$1._punctuation).getRegex();
        inline$1.emStrong.rDelimAst = edit(inline$1.emStrong.rDelimAst, "g").replace(/punct/g, inline$1._punctuation).getRegex();
        inline$1.emStrong.rDelimUnd = edit(inline$1.emStrong.rDelimUnd, "g").replace(/punct/g, inline$1._punctuation).getRegex();
        inline$1._escapes = /\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/g;
        inline$1._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;
        inline$1._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;
        inline$1.autolink = edit(inline$1.autolink).replace("scheme", inline$1._scheme).replace("email", inline$1._email).getRegex();
        inline$1._attribute = /\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/;
        inline$1.tag = edit(inline$1.tag).replace("comment", inline$1._comment).replace("attribute", inline$1._attribute).getRegex();
        inline$1._label = /(?:\[(?:\\.|[^\[\]\\])*\]|\\.|`[^`]*`|[^\[\]\\`])*?/;
        inline$1._href = /<(?:\\.|[^\n<>\\])+>|[^\s\x00-\x1f]*/;
        inline$1._title = /"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/;
        inline$1.link = edit(inline$1.link).replace("label", inline$1._label).replace("href", inline$1._href).replace("title", inline$1._title).getRegex();
        inline$1.reflink = edit(inline$1.reflink).replace("label", inline$1._label).getRegex();
        inline$1.reflinkSearch = edit(inline$1.reflinkSearch, "g").replace("reflink", inline$1.reflink).replace("nolink", inline$1.nolink).getRegex();
        /**
   * Normal Inline Grammar
   */ inline$1.normal = merge$1({}, inline$1);
        /**
   * Pedantic Inline Grammar
   */ inline$1.pedantic = merge$1({}, inline$1.normal, {
            strong: {
                start: /^__|\*\*/,
                middle: /^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,
                endAst: /\*\*(?!\*)/g,
                endUnd: /__(?!_)/g
            },
            em: {
                start: /^_|\*/,
                middle: /^()\*(?=\S)([\s\S]*?\S)\*(?!\*)|^_(?=\S)([\s\S]*?\S)_(?!_)/,
                endAst: /\*(?!\*)/g,
                endUnd: /_(?!_)/g
            },
            link: edit(/^!?\[(label)\]\((.*?)\)/).replace("label", inline$1._label).getRegex(),
            reflink: edit(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace("label", inline$1._label).getRegex()
        });
        /**
   * GFM Inline Grammar
   */ inline$1.gfm = merge$1({}, inline$1.normal, {
            escape: edit(inline$1.escape).replace("])", "~|])").getRegex(),
            _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,
            url: /^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/,
            _backpedal: /(?:[^?!.,:;*_~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,
            del: /^(~~?)(?=[^\s~])([\s\S]*?[^\s~])\1(?=[^~]|$)/,
            text: /^([`~]+|[^`~])(?:(?= {2,}\n)|(?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)|[\s\S]*?(?:(?=[\\<!\[`*~_]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)))/
        });
        inline$1.gfm.url = edit(inline$1.gfm.url, "i").replace("email", inline$1.gfm._extended_email).getRegex();
        /**
   * GFM + Line Breaks Inline Grammar
   */ inline$1.breaks = merge$1({}, inline$1.gfm, {
            br: edit(inline$1.br).replace("{2,}", "*").getRegex(),
            text: edit(inline$1.gfm.text).replace("\\b_", "\\b_| {2,}\\n").replace(/\{2,\}/g, "*").getRegex()
        });
        var rules = {
            block: block$1,
            inline: inline$1
        };
        var Tokenizer$1 = Tokenizer_1;
        var defaults$3 = defaults$5.exports.defaults;
        var block = rules.block, inline = rules.inline;
        var repeatString = helpers.repeatString;
        /**
   * smartypants text replacement
   */ function smartypants(text) {
            return text // em-dashes
            .replace(/---/g, "—") // en-dashes
            .replace(/--/g, "–") // opening singles
            .replace(/(^|[-\u2014/(\[{"\s])'/g, "$1‘") // closing singles & apostrophes
            .replace(/'/g, "’") // opening doubles
            .replace(/(^|[-\u2014/(\[{\u2018\s])"/g, "$1“") // closing doubles
            .replace(/"/g, "”") // ellipses
            .replace(/\.{3}/g, "…");
        }
        /**
   * mangle email addresses
   */ function mangle(text) {
            var out = "", i, ch;
            var l = text.length;
            for(i = 0; i < l; i++){
                ch = text.charCodeAt(i);
                if (Math.random() > 0.5) ch = "x" + ch.toString(16);
                out += "&#" + ch + ";";
            }
            return out;
        }
        /**
   * Block Lexer
   */ var Lexer_1 = /*#__PURE__*/ function() {
            function Lexer(options) {
                this.tokens = [];
                this.tokens.links = Object.create(null);
                this.options = options || defaults$3;
                this.options.tokenizer = this.options.tokenizer || new Tokenizer$1();
                this.tokenizer = this.options.tokenizer;
                this.tokenizer.options = this.options;
                this.tokenizer.lexer = this;
                this.inlineQueue = [];
                this.state = {
                    inLink: false,
                    inRawBlock: false,
                    top: true
                };
                var rules = {
                    block: block.normal,
                    inline: inline.normal
                };
                if (this.options.pedantic) {
                    rules.block = block.pedantic;
                    rules.inline = inline.pedantic;
                } else if (this.options.gfm) {
                    rules.block = block.gfm;
                    if (this.options.breaks) rules.inline = inline.breaks;
                    else rules.inline = inline.gfm;
                }
                this.tokenizer.rules = rules;
            }
            /**
     * Expose Rules
     */ /**
     * Static Lex Method
     */ Lexer.lex = function lex(src, options) {
                var lexer = new Lexer(options);
                return lexer.lex(src);
            } /**
     * Static Lex Inline Method
     */ ;
            Lexer.lexInline = function lexInline(src, options) {
                var lexer = new Lexer(options);
                return lexer.inlineTokens(src);
            } /**
     * Preprocessing
     */ ;
            var _proto = Lexer.prototype;
            _proto.lex = function lex(src) {
                src = src.replace(/\r\n|\r/g, "\n").replace(/\t/g, "    ");
                this.blockTokens(src, this.tokens);
                var next;
                while(next = this.inlineQueue.shift())this.inlineTokens(next.src, next.tokens);
                return this.tokens;
            } /**
     * Lexing
     */ ;
            _proto.blockTokens = function blockTokens(src, tokens) {
                var _this = this;
                if (tokens === void 0) tokens = [];
                if (this.options.pedantic) src = src.replace(/^ +$/gm, "");
                var token, lastToken, cutSrc, lastParagraphClipped;
                while(src){
                    if (this.options.extensions && this.options.extensions.block && this.options.extensions.block.some(function(extTokenizer) {
                        if (token = extTokenizer.call({
                            lexer: _this
                        }, src, tokens)) {
                            src = src.substring(token.raw.length);
                            tokens.push(token);
                            return true;
                        }
                        return false;
                    })) continue;
                     // newline
                    if (token = this.tokenizer.space(src)) {
                        src = src.substring(token.raw.length);
                        if (token.type) tokens.push(token);
                        continue;
                    } // code
                    if (token = this.tokenizer.code(src)) {
                        src = src.substring(token.raw.length);
                        lastToken = tokens[tokens.length - 1]; // An indented code block cannot interrupt a paragraph.
                        if (lastToken && (lastToken.type === "paragraph" || lastToken.type === "text")) {
                            lastToken.raw += "\n" + token.raw;
                            lastToken.text += "\n" + token.text;
                            this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
                        } else tokens.push(token);
                        continue;
                    } // fences
                    if (token = this.tokenizer.fences(src)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    } // heading
                    if (token = this.tokenizer.heading(src)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    } // hr
                    if (token = this.tokenizer.hr(src)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    } // blockquote
                    if (token = this.tokenizer.blockquote(src)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    } // list
                    if (token = this.tokenizer.list(src)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    } // html
                    if (token = this.tokenizer.html(src)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    } // def
                    if (token = this.tokenizer.def(src)) {
                        src = src.substring(token.raw.length);
                        lastToken = tokens[tokens.length - 1];
                        if (lastToken && (lastToken.type === "paragraph" || lastToken.type === "text")) {
                            lastToken.raw += "\n" + token.raw;
                            lastToken.text += "\n" + token.raw;
                            this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
                        } else if (!this.tokens.links[token.tag]) this.tokens.links[token.tag] = {
                            href: token.href,
                            title: token.title
                        };
                        continue;
                    } // table (gfm)
                    if (token = this.tokenizer.table(src)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    } // lheading
                    if (token = this.tokenizer.lheading(src)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    } // top-level paragraph
                    // prevent paragraph consuming extensions by clipping 'src' to extension start
                    cutSrc = src;
                    if (this.options.extensions && this.options.extensions.startBlock) (function() {
                        var startIndex = Infinity;
                        var tempSrc = src.slice(1);
                        var tempStart = void 0;
                        _this.options.extensions.startBlock.forEach(function(getStartIndex) {
                            tempStart = getStartIndex.call({
                                lexer: this
                            }, tempSrc);
                            if (typeof tempStart === "number" && tempStart >= 0) startIndex = Math.min(startIndex, tempStart);
                        });
                        if (startIndex < Infinity && startIndex >= 0) cutSrc = src.substring(0, startIndex + 1);
                    })();
                    if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {
                        lastToken = tokens[tokens.length - 1];
                        if (lastParagraphClipped && lastToken.type === "paragraph") {
                            lastToken.raw += "\n" + token.raw;
                            lastToken.text += "\n" + token.text;
                            this.inlineQueue.pop();
                            this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
                        } else tokens.push(token);
                        lastParagraphClipped = cutSrc.length !== src.length;
                        src = src.substring(token.raw.length);
                        continue;
                    } // text
                    if (token = this.tokenizer.text(src)) {
                        src = src.substring(token.raw.length);
                        lastToken = tokens[tokens.length - 1];
                        if (lastToken && lastToken.type === "text") {
                            lastToken.raw += "\n" + token.raw;
                            lastToken.text += "\n" + token.text;
                            this.inlineQueue.pop();
                            this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
                        } else tokens.push(token);
                        continue;
                    }
                    if (src) {
                        var errMsg = "Infinite loop on byte: " + src.charCodeAt(0);
                        if (this.options.silent) {
                            console.error(errMsg);
                            break;
                        } else throw new Error(errMsg);
                    }
                }
                this.state.top = true;
                return tokens;
            };
            _proto.inline = function inline(src, tokens) {
                this.inlineQueue.push({
                    src: src,
                    tokens: tokens
                });
            } /**
     * Lexing/Compiling
     */ ;
            _proto.inlineTokens = function inlineTokens(src, tokens) {
                var _this2 = this;
                if (tokens === void 0) tokens = [];
                var token, lastToken, cutSrc; // String with links masked to avoid interference with em and strong
                var maskedSrc = src;
                var match;
                var keepPrevChar, prevChar; // Mask out reflinks
                if (this.tokens.links) {
                    var links = Object.keys(this.tokens.links);
                    if (links.length > 0) {
                        while((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null)if (links.includes(match[0].slice(match[0].lastIndexOf("[") + 1, -1))) maskedSrc = maskedSrc.slice(0, match.index) + "[" + repeatString("a", match[0].length - 2) + "]" + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);
                    }
                } // Mask out other blocks
                while((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null)maskedSrc = maskedSrc.slice(0, match.index) + "[" + repeatString("a", match[0].length - 2) + "]" + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);
                 // Mask out escaped em & strong delimiters
                while((match = this.tokenizer.rules.inline.escapedEmSt.exec(maskedSrc)) != null)maskedSrc = maskedSrc.slice(0, match.index) + "++" + maskedSrc.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);
                while(src){
                    if (!keepPrevChar) prevChar = "";
                    keepPrevChar = false; // extensions
                    if (this.options.extensions && this.options.extensions.inline && this.options.extensions.inline.some(function(extTokenizer) {
                        if (token = extTokenizer.call({
                            lexer: _this2
                        }, src, tokens)) {
                            src = src.substring(token.raw.length);
                            tokens.push(token);
                            return true;
                        }
                        return false;
                    })) continue;
                     // escape
                    if (token = this.tokenizer.escape(src)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    } // tag
                    if (token = this.tokenizer.tag(src)) {
                        src = src.substring(token.raw.length);
                        lastToken = tokens[tokens.length - 1];
                        if (lastToken && token.type === "text" && lastToken.type === "text") {
                            lastToken.raw += token.raw;
                            lastToken.text += token.text;
                        } else tokens.push(token);
                        continue;
                    } // link
                    if (token = this.tokenizer.link(src)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    } // reflink, nolink
                    if (token = this.tokenizer.reflink(src, this.tokens.links)) {
                        src = src.substring(token.raw.length);
                        lastToken = tokens[tokens.length - 1];
                        if (lastToken && token.type === "text" && lastToken.type === "text") {
                            lastToken.raw += token.raw;
                            lastToken.text += token.text;
                        } else tokens.push(token);
                        continue;
                    } // em & strong
                    if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    } // code
                    if (token = this.tokenizer.codespan(src)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    } // br
                    if (token = this.tokenizer.br(src)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    } // del (gfm)
                    if (token = this.tokenizer.del(src)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    } // autolink
                    if (token = this.tokenizer.autolink(src, mangle)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    } // url (gfm)
                    if (!this.state.inLink && (token = this.tokenizer.url(src, mangle))) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    } // text
                    // prevent inlineText consuming extensions by clipping 'src' to extension start
                    cutSrc = src;
                    if (this.options.extensions && this.options.extensions.startInline) (function() {
                        var startIndex = Infinity;
                        var tempSrc = src.slice(1);
                        var tempStart = void 0;
                        _this2.options.extensions.startInline.forEach(function(getStartIndex) {
                            tempStart = getStartIndex.call({
                                lexer: this
                            }, tempSrc);
                            if (typeof tempStart === "number" && tempStart >= 0) startIndex = Math.min(startIndex, tempStart);
                        });
                        if (startIndex < Infinity && startIndex >= 0) cutSrc = src.substring(0, startIndex + 1);
                    })();
                    if (token = this.tokenizer.inlineText(cutSrc, smartypants)) {
                        src = src.substring(token.raw.length);
                        if (token.raw.slice(-1) !== "_") // Track prevChar before string of ____ started
                        prevChar = token.raw.slice(-1);
                        keepPrevChar = true;
                        lastToken = tokens[tokens.length - 1];
                        if (lastToken && lastToken.type === "text") {
                            lastToken.raw += token.raw;
                            lastToken.text += token.text;
                        } else tokens.push(token);
                        continue;
                    }
                    if (src) {
                        var errMsg = "Infinite loop on byte: " + src.charCodeAt(0);
                        if (this.options.silent) {
                            console.error(errMsg);
                            break;
                        } else throw new Error(errMsg);
                    }
                }
                return tokens;
            };
            _createClass(Lexer, null, [
                {
                    key: "rules",
                    get: function get() {
                        return {
                            block: block,
                            inline: inline
                        };
                    }
                }
            ]);
            return Lexer;
        }();
        var defaults$2 = defaults$5.exports.defaults;
        var cleanUrl = helpers.cleanUrl, escape$1 = helpers.escape;
        /**
   * Renderer
   */ var Renderer_1 = /*#__PURE__*/ function() {
            function Renderer(options) {
                this.options = options || defaults$2;
            }
            var _proto = Renderer.prototype;
            _proto.code = function code(_code, infostring, escaped) {
                var lang = (infostring || "").match(/\S*/)[0];
                if (this.options.highlight) {
                    var out = this.options.highlight(_code, lang);
                    if (out != null && out !== _code) {
                        escaped = true;
                        _code = out;
                    }
                }
                _code = _code.replace(/\n$/, "") + "\n";
                if (!lang) return "<pre><code>" + (escaped ? _code : escape$1(_code, true)) + "</code></pre>\n";
                return '<pre><code class="' + this.options.langPrefix + escape$1(lang, true) + '">' + (escaped ? _code : escape$1(_code, true)) + "</code></pre>\n";
            };
            _proto.blockquote = function blockquote(quote) {
                return "<blockquote>\n" + quote + "</blockquote>\n";
            };
            _proto.html = function html(_html) {
                return _html;
            };
            _proto.heading = function heading(text, level, raw, slugger) {
                if (this.options.headerIds) return "<h" + level + ' id="' + this.options.headerPrefix + slugger.slug(raw) + '">' + text + "</h" + level + ">\n";
                 // ignore IDs
                return "<h" + level + ">" + text + "</h" + level + ">\n";
            };
            _proto.hr = function hr() {
                return this.options.xhtml ? "<hr/>\n" : "<hr>\n";
            };
            _proto.list = function list(body, ordered, start) {
                var type = ordered ? "ol" : "ul", startatt = ordered && start !== 1 ? ' start="' + start + '"' : "";
                return "<" + type + startatt + ">\n" + body + "</" + type + ">\n";
            };
            _proto.listitem = function listitem(text) {
                return "<li>" + text + "</li>\n";
            };
            _proto.checkbox = function checkbox(checked) {
                return "<input " + (checked ? 'checked="" ' : "") + 'disabled="" type="checkbox"' + (this.options.xhtml ? " /" : "") + "> ";
            };
            _proto.paragraph = function paragraph(text) {
                return "<p>" + text + "</p>\n";
            };
            _proto.table = function table(header, body) {
                if (body) body = "<tbody>" + body + "</tbody>";
                return "<table>\n<thead>\n" + header + "</thead>\n" + body + "</table>\n";
            };
            _proto.tablerow = function tablerow(content) {
                return "<tr>\n" + content + "</tr>\n";
            };
            _proto.tablecell = function tablecell(content, flags) {
                var type = flags.header ? "th" : "td";
                var tag = flags.align ? "<" + type + ' align="' + flags.align + '">' : "<" + type + ">";
                return tag + content + "</" + type + ">\n";
            } // span level renderer
            ;
            _proto.strong = function strong(text) {
                return "<strong>" + text + "</strong>";
            };
            _proto.em = function em(text) {
                return "<em>" + text + "</em>";
            };
            _proto.codespan = function codespan(text) {
                return "<code>" + text + "</code>";
            };
            _proto.br = function br() {
                return this.options.xhtml ? "<br/>" : "<br>";
            };
            _proto.del = function del(text) {
                return "<del>" + text + "</del>";
            };
            _proto.link = function link(href, title, text) {
                href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);
                if (href === null) return text;
                var out = '<a href="' + escape$1(href) + '"';
                if (title) out += ' title="' + title + '"';
                out += ">" + text + "</a>";
                return out;
            };
            _proto.image = function image(href, title, text) {
                href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);
                if (href === null) return text;
                var out = '<img src="' + href + '" alt="' + text + '"';
                if (title) out += ' title="' + title + '"';
                out += this.options.xhtml ? "/>" : ">";
                return out;
            };
            _proto.text = function text(_text) {
                return _text;
            };
            return Renderer;
        }();
        /**
   * TextRenderer
   * returns only the textual part of the token
   */ var TextRenderer_1 = /*#__PURE__*/ function() {
            function TextRenderer() {}
            var _proto = TextRenderer.prototype;
            // no need for block level renderers
            _proto.strong = function strong(text) {
                return text;
            };
            _proto.em = function em(text) {
                return text;
            };
            _proto.codespan = function codespan(text) {
                return text;
            };
            _proto.del = function del(text) {
                return text;
            };
            _proto.html = function html(text) {
                return text;
            };
            _proto.text = function text(_text) {
                return _text;
            };
            _proto.link = function link(href, title, text) {
                return "" + text;
            };
            _proto.image = function image(href, title, text) {
                return "" + text;
            };
            _proto.br = function br() {
                return "";
            };
            return TextRenderer;
        }();
        /**
   * Slugger generates header id
   */ var Slugger_1 = /*#__PURE__*/ function() {
            function Slugger() {
                this.seen = {};
            }
            var _proto = Slugger.prototype;
            _proto.serialize = function serialize(value) {
                return value.toLowerCase().trim() // remove html tags
                .replace(/<[!\/a-z].*?>/ig, "") // remove unwanted chars
                .replace(/[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,./:;<=>?@[\]^`{|}~]/g, "").replace(/\s/g, "-");
            } /**
     * Finds the next safe (unique) slug to use
     */ ;
            _proto.getNextSafeSlug = function getNextSafeSlug(originalSlug, isDryRun) {
                var slug = originalSlug;
                var occurenceAccumulator = 0;
                if (this.seen.hasOwnProperty(slug)) {
                    occurenceAccumulator = this.seen[originalSlug];
                    do {
                        occurenceAccumulator++;
                        slug = originalSlug + "-" + occurenceAccumulator;
                    }while (this.seen.hasOwnProperty(slug));
                }
                if (!isDryRun) {
                    this.seen[originalSlug] = occurenceAccumulator;
                    this.seen[slug] = 0;
                }
                return slug;
            } /**
     * Convert string to unique id
     * @param {object} options
     * @param {boolean} options.dryrun Generates the next unique slug without updating the internal accumulator.
     */ ;
            _proto.slug = function slug(value, options) {
                if (options === void 0) options = {};
                var slug = this.serialize(value);
                return this.getNextSafeSlug(slug, options.dryrun);
            };
            return Slugger;
        }();
        var Renderer$1 = Renderer_1;
        var TextRenderer$1 = TextRenderer_1;
        var Slugger$1 = Slugger_1;
        var defaults$1 = defaults$5.exports.defaults;
        var unescape = helpers.unescape;
        /**
   * Parsing & Compiling
   */ var Parser_1 = /*#__PURE__*/ function() {
            function Parser(options) {
                this.options = options || defaults$1;
                this.options.renderer = this.options.renderer || new Renderer$1();
                this.renderer = this.options.renderer;
                this.renderer.options = this.options;
                this.textRenderer = new TextRenderer$1();
                this.slugger = new Slugger$1();
            }
            /**
     * Static Parse Method
     */ Parser.parse = function parse(tokens, options) {
                var parser = new Parser(options);
                return parser.parse(tokens);
            } /**
     * Static Parse Inline Method
     */ ;
            Parser.parseInline = function parseInline(tokens, options) {
                var parser = new Parser(options);
                return parser.parseInline(tokens);
            } /**
     * Parse Loop
     */ ;
            var _proto = Parser.prototype;
            _proto.parse = function parse(tokens, top) {
                if (top === void 0) top = true;
                var out = "", i, j, k, l2, l3, row, cell, header, body, token, ordered, start, loose, itemBody, item, checked, task, checkbox, ret;
                var l = tokens.length;
                for(i = 0; i < l; i++){
                    token = tokens[i]; // Run any renderer extensions
                    if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {
                        ret = this.options.extensions.renderers[token.type].call({
                            parser: this
                        }, token);
                        if (ret !== false || ![
                            "space",
                            "hr",
                            "heading",
                            "code",
                            "table",
                            "blockquote",
                            "list",
                            "html",
                            "paragraph",
                            "text"
                        ].includes(token.type)) {
                            out += ret || "";
                            continue;
                        }
                    }
                    switch(token.type){
                        case "space":
                            continue;
                        case "hr":
                            out += this.renderer.hr();
                            continue;
                        case "heading":
                            out += this.renderer.heading(this.parseInline(token.tokens), token.depth, unescape(this.parseInline(token.tokens, this.textRenderer)), this.slugger);
                            continue;
                        case "code":
                            out += this.renderer.code(token.text, token.lang, token.escaped);
                            continue;
                        case "table":
                            header = ""; // header
                            cell = "";
                            l2 = token.header.length;
                            for(j = 0; j < l2; j++)cell += this.renderer.tablecell(this.parseInline(token.header[j].tokens), {
                                header: true,
                                align: token.align[j]
                            });
                            header += this.renderer.tablerow(cell);
                            body = "";
                            l2 = token.rows.length;
                            for(j = 0; j < l2; j++){
                                row = token.rows[j];
                                cell = "";
                                l3 = row.length;
                                for(k = 0; k < l3; k++)cell += this.renderer.tablecell(this.parseInline(row[k].tokens), {
                                    header: false,
                                    align: token.align[k]
                                });
                                body += this.renderer.tablerow(cell);
                            }
                            out += this.renderer.table(header, body);
                            continue;
                        case "blockquote":
                            body = this.parse(token.tokens);
                            out += this.renderer.blockquote(body);
                            continue;
                        case "list":
                            ordered = token.ordered;
                            start = token.start;
                            loose = token.loose;
                            l2 = token.items.length;
                            body = "";
                            for(j = 0; j < l2; j++){
                                item = token.items[j];
                                checked = item.checked;
                                task = item.task;
                                itemBody = "";
                                if (item.task) {
                                    checkbox = this.renderer.checkbox(checked);
                                    if (loose) {
                                        if (item.tokens.length > 0 && item.tokens[0].type === "paragraph") {
                                            item.tokens[0].text = checkbox + " " + item.tokens[0].text;
                                            if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === "text") item.tokens[0].tokens[0].text = checkbox + " " + item.tokens[0].tokens[0].text;
                                        } else item.tokens.unshift({
                                            type: "text",
                                            text: checkbox
                                        });
                                    } else itemBody += checkbox;
                                }
                                itemBody += this.parse(item.tokens, loose);
                                body += this.renderer.listitem(itemBody, task, checked);
                            }
                            out += this.renderer.list(body, ordered, start);
                            continue;
                        case "html":
                            // TODO parse inline content if parameter markdown=1
                            out += this.renderer.html(token.text);
                            continue;
                        case "paragraph":
                            out += this.renderer.paragraph(this.parseInline(token.tokens));
                            continue;
                        case "text":
                            body = token.tokens ? this.parseInline(token.tokens) : token.text;
                            while(i + 1 < l && tokens[i + 1].type === "text"){
                                token = tokens[++i];
                                body += "\n" + (token.tokens ? this.parseInline(token.tokens) : token.text);
                            }
                            out += top ? this.renderer.paragraph(body) : body;
                            continue;
                        default:
                            var errMsg = 'Token with "' + token.type + '" type was not found.';
                            if (this.options.silent) {
                                console.error(errMsg);
                                return;
                            } else throw new Error(errMsg);
                    }
                }
                return out;
            } /**
     * Parse Inline Tokens
     */ ;
            _proto.parseInline = function parseInline(tokens, renderer) {
                renderer = renderer || this.renderer;
                var out = "", i, token, ret;
                var l = tokens.length;
                for(i = 0; i < l; i++){
                    token = tokens[i]; // Run any renderer extensions
                    if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {
                        ret = this.options.extensions.renderers[token.type].call({
                            parser: this
                        }, token);
                        if (ret !== false || ![
                            "escape",
                            "html",
                            "link",
                            "image",
                            "strong",
                            "em",
                            "codespan",
                            "br",
                            "del",
                            "text"
                        ].includes(token.type)) {
                            out += ret || "";
                            continue;
                        }
                    }
                    switch(token.type){
                        case "escape":
                            out += renderer.text(token.text);
                            break;
                        case "html":
                            out += renderer.html(token.text);
                            break;
                        case "link":
                            out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));
                            break;
                        case "image":
                            out += renderer.image(token.href, token.title, token.text);
                            break;
                        case "strong":
                            out += renderer.strong(this.parseInline(token.tokens, renderer));
                            break;
                        case "em":
                            out += renderer.em(this.parseInline(token.tokens, renderer));
                            break;
                        case "codespan":
                            out += renderer.codespan(token.text);
                            break;
                        case "br":
                            out += renderer.br();
                            break;
                        case "del":
                            out += renderer.del(this.parseInline(token.tokens, renderer));
                            break;
                        case "text":
                            out += renderer.text(token.text);
                            break;
                        default:
                            var errMsg = 'Token with "' + token.type + '" type was not found.';
                            if (this.options.silent) {
                                console.error(errMsg);
                                return;
                            } else throw new Error(errMsg);
                    }
                }
                return out;
            };
            return Parser;
        }();
        var Lexer = Lexer_1;
        var Parser = Parser_1;
        var Tokenizer = Tokenizer_1;
        var Renderer = Renderer_1;
        var TextRenderer = TextRenderer_1;
        var Slugger = Slugger_1;
        var merge = helpers.merge, checkSanitizeDeprecation = helpers.checkSanitizeDeprecation, escape = helpers.escape;
        var getDefaults = defaults$5.exports.getDefaults, changeDefaults = defaults$5.exports.changeDefaults, defaults = defaults$5.exports.defaults;
        /**
   * Marked
   */ function marked(src, opt, callback) {
            // throw error in case of non string input
            if (typeof src === "undefined" || src === null) throw new Error("marked(): input parameter is undefined or null");
            if (typeof src !== "string") throw new Error("marked(): input parameter is of type " + Object.prototype.toString.call(src) + ", string expected");
            if (typeof opt === "function") {
                callback = opt;
                opt = null;
            }
            opt = merge({}, marked.defaults, opt || {});
            checkSanitizeDeprecation(opt);
            if (callback) {
                var highlight = opt.highlight;
                var tokens;
                try {
                    tokens = Lexer.lex(src, opt);
                } catch (e) {
                    return callback(e);
                }
                var done = function done(err) {
                    var out;
                    if (!err) try {
                        if (opt.walkTokens) marked.walkTokens(tokens, opt.walkTokens);
                        out = Parser.parse(tokens, opt);
                    } catch (e) {
                        err = e;
                    }
                    opt.highlight = highlight;
                    return err ? callback(err) : callback(null, out);
                };
                if (!highlight || highlight.length < 3) return done();
                delete opt.highlight;
                if (!tokens.length) return done();
                var pending = 0;
                marked.walkTokens(tokens, function(token) {
                    if (token.type === "code") {
                        pending++;
                        setTimeout(function() {
                            highlight(token.text, token.lang, function(err, code) {
                                if (err) return done(err);
                                if (code != null && code !== token.text) {
                                    token.text = code;
                                    token.escaped = true;
                                }
                                pending--;
                                if (pending === 0) done();
                            });
                        }, 0);
                    }
                });
                if (pending === 0) done();
                return;
            }
            try {
                var _tokens = Lexer.lex(src, opt);
                if (opt.walkTokens) marked.walkTokens(_tokens, opt.walkTokens);
                return Parser.parse(_tokens, opt);
            } catch (e1) {
                e1.message += "\nPlease report this to https://github.com/markedjs/marked.";
                if (opt.silent) return "<p>An error occurred:</p><pre>" + escape(e1.message + "", true) + "</pre>";
                throw e1;
            }
        }
        /**
   * Options
   */ marked.options = marked.setOptions = function(opt) {
            merge(marked.defaults, opt);
            changeDefaults(marked.defaults);
            return marked;
        };
        marked.getDefaults = getDefaults;
        marked.defaults = defaults;
        /**
   * Use Extension
   */ marked.use = function() {
            var _this = this;
            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
            var opts = merge.apply(void 0, [
                {}
            ].concat(args));
            var extensions = marked.defaults.extensions || {
                renderers: {},
                childTokens: {}
            };
            var hasExtensions;
            args.forEach(function(pack) {
                // ==-- Parse "addon" extensions --== //
                if (pack.extensions) {
                    hasExtensions = true;
                    pack.extensions.forEach(function(ext) {
                        if (!ext.name) throw new Error("extension name required");
                        if (ext.renderer) {
                            // Renderer extensions
                            var prevRenderer = extensions.renderers ? extensions.renderers[ext.name] : null;
                            if (prevRenderer) // Replace extension with func to run new extension but fall back if false
                            extensions.renderers[ext.name] = function() {
                                for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++)args[_key2] = arguments[_key2];
                                var ret = ext.renderer.apply(this, args);
                                if (ret === false) ret = prevRenderer.apply(this, args);
                                return ret;
                            };
                            else extensions.renderers[ext.name] = ext.renderer;
                        }
                        if (ext.tokenizer) {
                            // Tokenizer Extensions
                            if (!ext.level || ext.level !== "block" && ext.level !== "inline") throw new Error("extension level must be 'block' or 'inline'");
                            if (extensions[ext.level]) extensions[ext.level].unshift(ext.tokenizer);
                            else extensions[ext.level] = [
                                ext.tokenizer
                            ];
                            if (ext.start) {
                                // Function to check for start of token
                                if (ext.level === "block") {
                                    if (extensions.startBlock) extensions.startBlock.push(ext.start);
                                    else extensions.startBlock = [
                                        ext.start
                                    ];
                                } else if (ext.level === "inline") {
                                    if (extensions.startInline) extensions.startInline.push(ext.start);
                                    else extensions.startInline = [
                                        ext.start
                                    ];
                                }
                            }
                        }
                        if (ext.childTokens) // Child tokens to be visited by walkTokens
                        extensions.childTokens[ext.name] = ext.childTokens;
                    });
                } // ==-- Parse "overwrite" extensions --== //
                if (pack.renderer) (function() {
                    var renderer = marked.defaults.renderer || new Renderer();
                    var _loop = function _loop(prop) {
                        var prevRenderer = renderer[prop]; // Replace renderer with func to run extension, but fall back if false
                        renderer[prop] = function() {
                            for(var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++)args[_key3] = arguments[_key3];
                            var ret = pack.renderer[prop].apply(renderer, args);
                            if (ret === false) ret = prevRenderer.apply(renderer, args);
                            return ret;
                        };
                    };
                    for(var prop in pack.renderer)_loop(prop);
                    opts.renderer = renderer;
                })();
                if (pack.tokenizer) (function() {
                    var tokenizer = marked.defaults.tokenizer || new Tokenizer();
                    var _loop2 = function _loop2(prop) {
                        var prevTokenizer = tokenizer[prop]; // Replace tokenizer with func to run extension, but fall back if false
                        tokenizer[prop] = function() {
                            for(var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++)args[_key4] = arguments[_key4];
                            var ret = pack.tokenizer[prop].apply(tokenizer, args);
                            if (ret === false) ret = prevTokenizer.apply(tokenizer, args);
                            return ret;
                        };
                    };
                    for(var prop in pack.tokenizer)_loop2(prop);
                    opts.tokenizer = tokenizer;
                })();
                 // ==-- Parse WalkTokens extensions --== //
                if (pack.walkTokens) {
                    var walkTokens = marked.defaults.walkTokens;
                    opts.walkTokens = function(token) {
                        pack.walkTokens.call(_this, token);
                        if (walkTokens) walkTokens(token);
                    };
                }
                if (hasExtensions) opts.extensions = extensions;
                marked.setOptions(opts);
            });
        };
        /**
   * Run callback for every token
   */ marked.walkTokens = function(tokens, callback) {
            var _loop3 = function _loop3() {
                var token = _step.value;
                callback(token);
                switch(token.type){
                    case "table":
                        for(var _iterator2 = _createForOfIteratorHelperLoose(token.header), _step2; !(_step2 = _iterator2()).done;){
                            var cell = _step2.value;
                            marked.walkTokens(cell.tokens, callback);
                        }
                        for(var _iterator3 = _createForOfIteratorHelperLoose(token.rows), _step3; !(_step3 = _iterator3()).done;){
                            var row = _step3.value;
                            for(var _iterator4 = _createForOfIteratorHelperLoose(row), _step4; !(_step4 = _iterator4()).done;){
                                var _cell = _step4.value;
                                marked.walkTokens(_cell.tokens, callback);
                            }
                        }
                        break;
                    case "list":
                        marked.walkTokens(token.items, callback);
                        break;
                    default:
                        if (marked.defaults.extensions && marked.defaults.extensions.childTokens && marked.defaults.extensions.childTokens[token.type]) // Walk any extensions
                        marked.defaults.extensions.childTokens[token.type].forEach(function(childTokens) {
                            marked.walkTokens(token[childTokens], callback);
                        });
                        else if (token.tokens) marked.walkTokens(token.tokens, callback);
                }
            };
            for(var _iterator = _createForOfIteratorHelperLoose(tokens), _step; !(_step = _iterator()).done;)_loop3();
        };
        /**
   * Parse Inline
   */ marked.parseInline = function(src, opt) {
            // throw error in case of non string input
            if (typeof src === "undefined" || src === null) throw new Error("marked.parseInline(): input parameter is undefined or null");
            if (typeof src !== "string") throw new Error("marked.parseInline(): input parameter is of type " + Object.prototype.toString.call(src) + ", string expected");
            opt = merge({}, marked.defaults, opt || {});
            checkSanitizeDeprecation(opt);
            try {
                var tokens = Lexer.lexInline(src, opt);
                if (opt.walkTokens) marked.walkTokens(tokens, opt.walkTokens);
                return Parser.parseInline(tokens, opt);
            } catch (e) {
                e.message += "\nPlease report this to https://github.com/markedjs/marked.";
                if (opt.silent) return "<p>An error occurred:</p><pre>" + escape(e.message + "", true) + "</pre>";
                throw e;
            }
        };
        /**
   * Expose
   */ marked.Parser = Parser;
        marked.parser = Parser.parse;
        marked.Renderer = Renderer;
        marked.TextRenderer = TextRenderer;
        marked.Lexer = Lexer;
        marked.lexer = Lexer.lex;
        marked.Tokenizer = Tokenizer;
        marked.Slugger = Slugger;
        marked.parse = marked;
        var marked_1 = marked;
        return marked_1;
    });
// ESM-uncomment-begin
})();
var $9149932b835918da$export$db8f131360c543a5 = $9149932b835918da$var$__marked_exports || $9149932b835918da$exports;
var $9149932b835918da$export$7acfa6ed01010e37 = ($9149932b835918da$var$__marked_exports || $9149932b835918da$exports).Parser;
var $9149932b835918da$export$8f49e4af10703ce3 = ($9149932b835918da$var$__marked_exports || $9149932b835918da$exports).parser;
var $9149932b835918da$export$88530751e3977073 = ($9149932b835918da$var$__marked_exports || $9149932b835918da$exports).Renderer;
var $9149932b835918da$export$75ebcd2c8ed5b901 = ($9149932b835918da$var$__marked_exports || $9149932b835918da$exports).TextRenderer;
var $9149932b835918da$export$6168dc8908a6c652 = ($9149932b835918da$var$__marked_exports || $9149932b835918da$exports).Lexer;
var $9149932b835918da$export$43feed32102720d2 = ($9149932b835918da$var$__marked_exports || $9149932b835918da$exports).lexer;
var $9149932b835918da$export$55e8b082af4aa63e = ($9149932b835918da$var$__marked_exports || $9149932b835918da$exports).Tokenizer;
var $9149932b835918da$export$a2039dba1f9639d = ($9149932b835918da$var$__marked_exports || $9149932b835918da$exports).Slugger;
var $9149932b835918da$export$98e6a39c04603d36 = ($9149932b835918da$var$__marked_exports || $9149932b835918da$exports).parse; // ESM-uncomment-end



var $jMoJ0 = parcelRequire("jMoJ0");

var $fDjBp = parcelRequire("fDjBp");

var $25SUP = parcelRequire("25SUP");

var $aMhG1 = parcelRequire("aMhG1");

var $9TEeL = parcelRequire("9TEeL");

var $7K96x = parcelRequire("7K96x");
function $c31bc01aa14a0e76$export$bd27f0c8b4b4eabc(markdown, options = {}, markedOptions = {}) {
    var _a;
    const disposables = new (0, $atiRx.DisposableStore)();
    let isDisposed = false;
    const cts = disposables.add(new (0, $gnEXx.CancellationTokenSource)());
    const element = (0, $cTUN0.createElement)(options);
    const _uriMassage = function(part) {
        let data;
        try {
            data = (0, $jMoJ0.parse)(decodeURIComponent(part));
        } catch (e) {
        // ignore
        }
        if (!data) return part;
        data = (0, $25SUP.cloneAndChange)(data, (value)=>{
            if (markdown.uris && markdown.uris[value]) return (0, $7K96x.URI).revive(markdown.uris[value]);
            else return undefined;
        });
        return encodeURIComponent(JSON.stringify(data));
    };
    const _href = function(href, isDomUri) {
        const data = markdown.uris && markdown.uris[href];
        let uri = (0, $7K96x.URI).revive(data);
        if (isDomUri) {
            if (href.startsWith((0, $fDjBp.Schemas).data + ":")) return href;
            if (!uri) uri = (0, $7K96x.URI).parse(href);
            // this URI will end up as "src"-attribute of a dom node
            // and because of that special rewriting needs to be done
            // so that the URI uses a protocol that's understood by
            // browsers (like http or https)
            return (0, $fDjBp.FileAccess).asBrowserUri(uri).toString(true);
        }
        if (!uri) return href;
        if ((0, $7K96x.URI).parse(href).toString() === uri.toString()) return href; // no transformation performed
        if (uri.query) uri = uri.with({
            query: _uriMassage(uri.query)
        });
        return uri.toString();
    };
    // signal to code-block render that the
    // element has been created
    let signalInnerHTML;
    const withInnerHTML = new Promise((c)=>signalInnerHTML = c);
    const renderer = new $9149932b835918da$exports.Renderer();
    renderer.image = (href, title, text)=>{
        let dimensions = [];
        let attributes = [];
        if (href) {
            ({ href: href , dimensions: dimensions  } = (0, $chTln.parseHrefAndDimensions)(href));
            attributes.push(`src="${href}"`);
        }
        if (text) attributes.push(`alt="${text}"`);
        if (title) attributes.push(`title="${title}"`);
        if (dimensions.length) attributes = attributes.concat(dimensions);
        return "<img " + attributes.join(" ") + ">";
    };
    renderer.link = (href, title, text)=>{
        // Remove markdown escapes. Workaround for https://github.com/chjj/marked/issues/829
        if (href === text) text = (0, $chTln.removeMarkdownEscapes)(text);
        href = _href(href, false);
        if (options.baseUrl) {
            const hasScheme = /^\w[\w\d+.-]*:/.test(href);
            if (!hasScheme) href = (0, $aMhG1.resolvePath)(options.baseUrl, href).toString();
        }
        title = (0, $chTln.removeMarkdownEscapes)(title);
        href = (0, $chTln.removeMarkdownEscapes)(href);
        if (!href || href.match(/^data:|javascript:/i) || href.match(/^command:/i) && !markdown.isTrusted || href.match(/^command:(\/\/\/)?_workbench\.downloadResource/i)) // drop the link
        return text;
        else {
            // HTML Encode href
            href = href.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#39;");
            return `<a href="#" data-href="${href}" title="${title || href}">${text}</a>`;
        }
    };
    renderer.paragraph = (text)=>{
        return `<p>${text}</p>`;
    };
    if (options.codeBlockRenderer) renderer.code = (code, lang)=>{
        const value = options.codeBlockRenderer(lang, code);
        // when code-block rendering is async we return sync
        // but update the node with the real result later.
        const id = (0, $jInpn.defaultGenerator).nextId();
        (0, $eFOsn.raceCancellation)(Promise.all([
            value,
            withInnerHTML
        ]), cts.token).then((values)=>{
            var _a;
            if (!isDisposed && values) {
                const span = element.querySelector(`div[data-code="${id}"]`);
                if (span) $jOYcd.reset(span, values[0]);
                (_a = options.asyncRenderCallback) === null || _a === void 0 || _a.call(options);
            }
        }).catch(()=>{
        // ignore
        });
        return `<div class="code" data-code="${id}">${(0, $9TEeL.escape)(code)}</div>`;
    };
    if (options.actionHandler) {
        const onClick = options.actionHandler.disposables.add(new (0, $5abWm.DomEmitter)(element, "click"));
        const onAuxClick = options.actionHandler.disposables.add(new (0, $5abWm.DomEmitter)(element, "auxclick"));
        options.actionHandler.disposables.add((0, $fSvkC.Event).any(onClick.event, onAuxClick.event)((e)=>{
            const mouseEvent = new (0, $jzr1I.StandardMouseEvent)(e);
            if (!mouseEvent.leftButton && !mouseEvent.middleButton) return;
            let target = mouseEvent.target;
            if (target.tagName !== "A") {
                target = target.parentElement;
                if (!target || target.tagName !== "A") return;
            }
            try {
                const href = target.dataset["href"];
                if (href) options.actionHandler.callback(href, mouseEvent);
            } catch (err) {
                (0, $g0782.onUnexpectedError)(err);
            } finally{
                mouseEvent.preventDefault();
            }
        }));
    }
    if (!markdown.supportHtml) {
        // TODO: Can we deprecated this in favor of 'supportHtml'?
        // Use our own sanitizer so that we can let through only spans.
        // Otherwise, we'd be letting all html be rendered.
        // If we want to allow markdown permitted tags, then we can delete sanitizer and sanitize.
        // We always pass the output through dompurify after this so that we don't rely on
        // marked for sanitization.
        markedOptions.sanitizer = (html)=>{
            const match = markdown.isTrusted ? html.match(/^(<span[^>]+>)|(<\/\s*span>)$/) : undefined;
            return match ? html : "";
        };
        markedOptions.sanitize = true;
        markedOptions.silent = true;
    }
    markedOptions.renderer = renderer;
    // values that are too long will freeze the UI
    let value = (_a = markdown.value) !== null && _a !== void 0 ? _a : "";
    if (value.length > 100000) value = `${value.substr(0, 100000)}…`;
    // escape theme icons
    if (markdown.supportThemeIcons) value = (0, $16r9O.markdownEscapeEscapedIcons)(value);
    let renderedMarkdown = $9149932b835918da$exports.parse(value, markedOptions);
    // Rewrite theme icons
    if (markdown.supportThemeIcons) {
        const elements = (0, $7Kngw.renderLabelWithIcons)(renderedMarkdown);
        renderedMarkdown = elements.map((e)=>typeof e === "string" ? e : e.outerHTML).join("");
    }
    const htmlParser = new DOMParser();
    const markdownHtmlDoc = htmlParser.parseFromString($c31bc01aa14a0e76$var$sanitizeRenderedMarkdown(markdown, renderedMarkdown), "text/html");
    markdownHtmlDoc.body.querySelectorAll("img").forEach((img)=>{
        if (img.src) {
            let href = _href(img.src, true);
            try {
                const hrefAsUri = (0, $7K96x.URI).parse(href);
                if (options.baseUrl && hrefAsUri.scheme === (0, $fDjBp.Schemas).file) href = (0, $aMhG1.resolvePath)(options.baseUrl, href).toString();
            } catch (err) {}
            img.src = href;
        }
    });
    element.innerHTML = $c31bc01aa14a0e76$var$sanitizeRenderedMarkdown(markdown, markdownHtmlDoc.body.innerHTML);
    // signal that async code blocks can be now be inserted
    signalInnerHTML();
    // signal size changes for image tags
    if (options.asyncRenderCallback) for (const img of element.getElementsByTagName("img")){
        const listener = disposables.add($jOYcd.addDisposableListener(img, "load", ()=>{
            listener.dispose();
            options.asyncRenderCallback();
        }));
    }
    return {
        element: element,
        dispose: ()=>{
            isDisposed = true;
            cts.cancel();
            disposables.dispose();
        }
    };
}
function $c31bc01aa14a0e76$var$sanitizeRenderedMarkdown(options, renderedMarkdown) {
    const { config: config , allowedSchemes: allowedSchemes  } = $c31bc01aa14a0e76$var$getSanitizerOptions(options);
    $2567b26e29cb976a$export$f99777bb87ac6904("uponSanitizeAttribute", (element, e)=>{
        if (e.attrName === "style" || e.attrName === "class") {
            if (element.tagName === "SPAN") {
                if (e.attrName === "style") {
                    e.keepAttr = /^(color\:#[0-9a-fA-F]+;)?(background-color\:#[0-9a-fA-F]+;)?$/.test(e.attrValue);
                    return;
                } else if (e.attrName === "class") {
                    e.keepAttr = /^codicon codicon-[a-z\-]+( codicon-modifier-[a-z\-]+)?$/.test(e.attrValue);
                    return;
                }
            }
            e.keepAttr = false;
            return;
        }
    });
    // build an anchor to map URLs to
    const anchor = document.createElement("a");
    // https://github.com/cure53/DOMPurify/blob/main/demos/hooks-scheme-allowlist.html
    $2567b26e29cb976a$export$f99777bb87ac6904("afterSanitizeAttributes", (node)=>{
        // check all href/src attributes for validity
        for (const attr of [
            "href",
            "src"
        ])if (node.hasAttribute(attr)) {
            anchor.href = node.getAttribute(attr);
            if (!allowedSchemes.includes(anchor.protocol.replace(/:$/, ""))) node.removeAttribute(attr);
        }
    });
    try {
        return $2567b26e29cb976a$export$83d2e9e3e4ee39ed(renderedMarkdown, Object.assign(Object.assign({}, config), {
            RETURN_TRUSTED_TYPE: true
        }));
    } finally{
        $2567b26e29cb976a$export$4840506845da1500("uponSanitizeAttribute");
        $2567b26e29cb976a$export$4840506845da1500("afterSanitizeAttributes");
    }
}
function $c31bc01aa14a0e76$var$getSanitizerOptions(options) {
    const allowedSchemes = [
        (0, $fDjBp.Schemas).http,
        (0, $fDjBp.Schemas).https,
        (0, $fDjBp.Schemas).mailto,
        (0, $fDjBp.Schemas).data,
        (0, $fDjBp.Schemas).file,
        (0, $fDjBp.Schemas).vscodeFileResource,
        (0, $fDjBp.Schemas).vscodeRemote,
        (0, $fDjBp.Schemas).vscodeRemoteResource, 
    ];
    if (options.isTrusted) allowedSchemes.push((0, $fDjBp.Schemas).command);
    return {
        config: {
            // allowedTags should included everything that markdown renders to.
            // Since we have our own sanitize function for marked, it's possible we missed some tag so let dompurify make sure.
            // HTML tags that can result from markdown are from reading https://spec.commonmark.org/0.29/
            // HTML table tags that can result from markdown are from https://github.github.com/gfm/#tables-extension-
            ALLOWED_TAGS: [
                "ul",
                "li",
                "p",
                "b",
                "i",
                "code",
                "blockquote",
                "ol",
                "h1",
                "h2",
                "h3",
                "h4",
                "h5",
                "h6",
                "hr",
                "em",
                "pre",
                "table",
                "thead",
                "tbody",
                "tr",
                "th",
                "td",
                "div",
                "del",
                "a",
                "strong",
                "br",
                "img",
                "span"
            ],
            ALLOWED_ATTR: [
                "href",
                "data-href",
                "target",
                "title",
                "src",
                "alt",
                "class",
                "style",
                "data-code",
                "width",
                "height",
                "align"
            ],
            ALLOW_UNKNOWN_PROTOCOLS: true
        },
        allowedSchemes: allowedSchemes
    };
}



var $9KRmt = parcelRequire("9KRmt");

var $6o4cZ = parcelRequire("6o4cZ");

var $g0782 = parcelRequire("g0782");

var $aA9GD = parcelRequire("aA9GD");

var $fSvkC = parcelRequire("fSvkC");

var $atiRx = parcelRequire("atiRx");

var $eKhCe = parcelRequire("eKhCe");

var $g3gmC = parcelRequire("g3gmC");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $ead540c899f453a8$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ead540c899f453a8$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var $ead540c899f453a8$var$__awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var $ead540c899f453a8$var$_a;
/**
 * Markdown renderer that can render codeblocks with the editor mechanics. This
 * renderer should always be preferred.
 */ let $ead540c899f453a8$export$22c2c977437cf477 = class MarkdownRenderer {
    dispose() {
        this._onDidRenderAsync.dispose();
    }
    render(markdown, options, markedOptions) {
        if (!markdown) {
            const element = document.createElement("span");
            return {
                element: element,
                dispose: ()=>{}
            };
        }
        const disposables = new (0, $atiRx.DisposableStore)();
        const rendered = disposables.add((0, $c31bc01aa14a0e76$export$bd27f0c8b4b4eabc)(markdown, Object.assign(Object.assign({}, this._getRenderOptions(markdown, disposables)), options), markedOptions));
        return {
            element: rendered.element,
            dispose: ()=>disposables.dispose()
        };
    }
    _getRenderOptions(markdown, disposeables) {
        return {
            baseUrl: this._options.baseUrl,
            codeBlockRenderer: (languageAlias, value)=>$ead540c899f453a8$var$__awaiter(this, void 0, void 0, function*() {
                    var _a, _b, _c, _d;
                    // In markdown,
                    // it is possible that we stumble upon language aliases (e.g.js instead of javascript)
                    // it is possible no alias is given in which case we fall back to the current editor lang
                    let languageId;
                    if (languageAlias) languageId = this._modeService.getModeIdForLanguageName(languageAlias);
                    else if (this._options.editor) languageId = (_a = this._options.editor.getModel()) === null || _a === void 0 ? void 0 : _a.getLanguageId();
                    if (!languageId) languageId = "plaintext";
                    this._modeService.triggerMode(languageId);
                    const tokenization = (_b = yield (0, $eKhCe.TokenizationRegistry).getPromise(languageId)) !== null && _b !== void 0 ? _b : undefined;
                    const element = document.createElement("span");
                    element.innerHTML = (_d = (_c = MarkdownRenderer._ttpTokenizer) === null || _c === void 0 ? void 0 : _c.createHTML(value, this._modeService.languageIdCodec, tokenization)) !== null && _d !== void 0 ? _d : (0, $aA9GD.tokenizeToString)(value, this._modeService.languageIdCodec, tokenization);
                    // use "good" font
                    if (this._options.editor) {
                        const fontInfo = this._options.editor.getOption(43 /* fontInfo */ );
                        (0, $g3gmC.Configuration).applyFontInfoSlow(element, fontInfo);
                    } else if (this._options.codeBlockFontFamily) element.style.fontFamily = this._options.codeBlockFontFamily;
                    return element;
                }),
            asyncRenderCallback: ()=>this._onDidRenderAsync.fire(),
            actionHandler: {
                callback: (content)=>this._openerService.open(content, {
                        fromUserGesture: true,
                        allowContributedOpeners: true,
                        allowCommands: markdown.isTrusted
                    }).catch((0, $g0782.onUnexpectedError)),
                disposables: disposeables
            }
        };
    }
    constructor(_options, _modeService, _openerService){
        this._options = _options;
        this._modeService = _modeService;
        this._openerService = _openerService;
        this._onDidRenderAsync = new (0, $fSvkC.Emitter)();
        this.onDidRenderAsync = this._onDidRenderAsync.event;
    }
};
$ead540c899f453a8$export$22c2c977437cf477._ttpTokenizer = ($ead540c899f453a8$var$_a = window.trustedTypes) === null || $ead540c899f453a8$var$_a === void 0 ? void 0 : $ead540c899f453a8$var$_a.createPolicy("tokenizeToString", {
    createHTML (value, languageIdCodec, tokenizer) {
        return (0, $aA9GD.tokenizeToString)(value, languageIdCodec, tokenizer);
    }
});
$ead540c899f453a8$export$22c2c977437cf477 = $ead540c899f453a8$var$__decorate([
    $ead540c899f453a8$var$__param(1, (0, $6o4cZ.IModeService)),
    $ead540c899f453a8$var$__param(2, (0, $9KRmt.IOpenerService))
], $ead540c899f453a8$export$22c2c977437cf477);



var $8qXsZ = parcelRequire("8qXsZ");

var $3HpR4 = parcelRequire("3HpR4");

var $eKhCe = parcelRequire("eKhCe");

var $6o4cZ = parcelRequire("6o4cZ");
var $f7ecd6cf4e283a7b$exports = {};

$parcel$export($f7ecd6cf4e283a7b$exports, "getHover", function () { return $f7ecd6cf4e283a7b$export$6e0a32f513b2f3d3; }, function (v) { return $f7ecd6cf4e283a7b$export$6e0a32f513b2f3d3 = v; });

var $eFOsn = parcelRequire("eFOsn");

var $gnEXx = parcelRequire("gnEXx");

var $g0782 = parcelRequire("g0782");

var $gGOeQ = parcelRequire("gGOeQ");

var $eKhCe = parcelRequire("eKhCe");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $f7ecd6cf4e283a7b$var$__awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class $f7ecd6cf4e283a7b$export$b4cb00c725d0d256 {
    constructor(provider, hover, ordinal){
        this.provider = provider;
        this.hover = hover;
        this.ordinal = ordinal;
    }
}
function $f7ecd6cf4e283a7b$var$executeProvider(provider, ordinal, model, position, token) {
    return $f7ecd6cf4e283a7b$var$__awaiter(this, void 0, void 0, function*() {
        try {
            const result = yield Promise.resolve(provider.provideHover(model, position, token));
            if (result && $f7ecd6cf4e283a7b$var$isValid(result)) return new $f7ecd6cf4e283a7b$export$b4cb00c725d0d256(provider, result, ordinal);
        } catch (err) {
            (0, $g0782.onUnexpectedExternalError)(err);
        }
        return undefined;
    });
}
function $f7ecd6cf4e283a7b$export$6e0a32f513b2f3d3(model, position, token) {
    const providers = (0, $eKhCe.HoverProviderRegistry).ordered(model);
    const promises = providers.map((provider, index)=>$f7ecd6cf4e283a7b$var$executeProvider(provider, index, model, position, token));
    return (0, $eFOsn.AsyncIterableObject).fromPromises(promises).coalesce();
}
function $f7ecd6cf4e283a7b$export$8471e987413ee246(model, position, token) {
    return $f7ecd6cf4e283a7b$export$6e0a32f513b2f3d3(model, position, token).map((item)=>item.hover).toPromise();
}
(0, $gGOeQ.registerModelAndPositionCommand)("_executeHoverProvider", (model, position)=>$f7ecd6cf4e283a7b$export$8471e987413ee246(model, position, (0, $gnEXx.CancellationToken).None));
function $f7ecd6cf4e283a7b$var$isValid(result) {
    const hasRange = typeof result.range !== "undefined";
    const hasHtmlContent = typeof result.contents !== "undefined" && result.contents && result.contents.length > 0;
    return hasRange && hasHtmlContent;
}



var $58WHl = parcelRequire("58WHl");

var $9BIBz = parcelRequire("9BIBz");

var $9KRmt = parcelRequire("9KRmt");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $4c95ce6e2b4515d4$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $4c95ce6e2b4515d4$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
const $4c95ce6e2b4515d4$var$$ = $jOYcd.$;
class $4c95ce6e2b4515d4$export$de5210377542b3f9 {
    isValidForHoverAnchor(anchor) {
        return anchor.type === 1 /* Range */  && this.range.startColumn <= anchor.range.startColumn && this.range.endColumn >= anchor.range.endColumn;
    }
    constructor(owner, range, contents, ordinal){
        this.owner = owner;
        this.range = range;
        this.contents = contents;
        this.ordinal = ordinal;
    }
}
let $4c95ce6e2b4515d4$export$db7233c4b0ae81a2 = class MarkdownHoverParticipant {
    createLoadingMessage(anchor) {
        return new $4c95ce6e2b4515d4$export$de5210377542b3f9(this, anchor.range, [
            new (0, $chTln.MarkdownString)().appendText($58WHl.localize("modesContentHover.loading", "Loading..."))
        ], 2000);
    }
    computeSync(anchor, lineDecorations) {
        if (!this._editor.hasModel() || anchor.type !== 1 /* Range */ ) return [];
        const model = this._editor.getModel();
        const lineNumber = anchor.range.startLineNumber;
        const maxColumn = model.getLineMaxColumn(lineNumber);
        const result = [];
        let index = 1000;
        const lineLength = model.getLineLength(lineNumber);
        const languageId = model.getLanguageIdAtPosition(anchor.range.startLineNumber, anchor.range.startColumn);
        const maxTokenizationLineLength = this._configurationService.getValue("editor.maxTokenizationLineLength", {
            overrideIdentifier: languageId
        });
        if (typeof maxTokenizationLineLength === "number" && lineLength >= maxTokenizationLineLength) result.push(new $4c95ce6e2b4515d4$export$de5210377542b3f9(this, anchor.range, [
            {
                value: $58WHl.localize("too many characters", "Tokenization is skipped for long lines for performance reasons. This can be configured via `editor.maxTokenizationLineLength`.")
            }
        ], index++));
        for (const d of lineDecorations){
            const startColumn = d.range.startLineNumber === lineNumber ? d.range.startColumn : 1;
            const endColumn = d.range.endLineNumber === lineNumber ? d.range.endColumn : maxColumn;
            const hoverMessage = d.options.hoverMessage;
            if (!hoverMessage || (0, $chTln.isEmptyMarkdownString)(hoverMessage)) continue;
            const range = new (0, $3HpR4.Range)(anchor.range.startLineNumber, startColumn, anchor.range.startLineNumber, endColumn);
            result.push(new $4c95ce6e2b4515d4$export$de5210377542b3f9(this, range, (0, $4xCD7.asArray)(hoverMessage), index++));
        }
        return result;
    }
    computeAsync(anchor, lineDecorations, token) {
        if (!this._editor.hasModel() || anchor.type !== 1 /* Range */ ) return (0, $eFOsn.AsyncIterableObject).EMPTY;
        const model = this._editor.getModel();
        if (!(0, $eKhCe.HoverProviderRegistry).has(model)) return (0, $eFOsn.AsyncIterableObject).EMPTY;
        const position = new (0, $8qXsZ.Position)(anchor.range.startLineNumber, anchor.range.startColumn);
        return (0, $f7ecd6cf4e283a7b$exports.getHover)(model, position, token).filter((item)=>!(0, $chTln.isEmptyMarkdownString)(item.hover.contents)).map((item)=>{
            const rng = item.hover.range ? (0, $3HpR4.Range).lift(item.hover.range) : anchor.range;
            return new $4c95ce6e2b4515d4$export$de5210377542b3f9(this, rng, item.hover.contents, item.ordinal);
        });
    }
    renderHoverParts(hoverParts, fragment, statusBar) {
        return $4c95ce6e2b4515d4$export$d74d68ef545bd110(hoverParts, fragment, this._editor, this._hover, this._modeService, this._openerService);
    }
    constructor(_editor, _hover, _modeService, _openerService, _configurationService){
        this._editor = _editor;
        this._hover = _hover;
        this._modeService = _modeService;
        this._openerService = _openerService;
        this._configurationService = _configurationService;
    }
};
$4c95ce6e2b4515d4$export$db7233c4b0ae81a2 = $4c95ce6e2b4515d4$var$__decorate([
    $4c95ce6e2b4515d4$var$__param(2, (0, $6o4cZ.IModeService)),
    $4c95ce6e2b4515d4$var$__param(3, (0, $9KRmt.IOpenerService)),
    $4c95ce6e2b4515d4$var$__param(4, (0, $9BIBz.IConfigurationService))
], $4c95ce6e2b4515d4$export$db7233c4b0ae81a2);
function $4c95ce6e2b4515d4$export$d74d68ef545bd110(hoverParts, fragment, editor, hover, modeService, openerService) {
    // Sort hover parts to keep them stable since they might come in async, out-of-order
    hoverParts.sort((a, b)=>a.ordinal - b.ordinal);
    const disposables = new (0, $atiRx.DisposableStore)();
    for (const hoverPart of hoverParts)for (const contents of hoverPart.contents){
        if ((0, $chTln.isEmptyMarkdownString)(contents)) continue;
        const markdownHoverElement = $4c95ce6e2b4515d4$var$$("div.hover-row.markdown-hover");
        const hoverContentsElement = $jOYcd.append(markdownHoverElement, $4c95ce6e2b4515d4$var$$("div.hover-contents"));
        const renderer = disposables.add(new (0, $ead540c899f453a8$exports.MarkdownRenderer)({
            editor: editor
        }, modeService, openerService));
        disposables.add(renderer.onDidRenderAsync(()=>{
            hoverContentsElement.className = "hover-contents code-hover-contents";
            hover.onContentsChanged();
        }));
        const renderedContents = disposables.add(renderer.render(contents));
        hoverContentsElement.appendChild(renderedContents.element);
        fragment.appendChild(markdownHoverElement);
    }
    return disposables;
}


var $d4aad6bd92374522$exports = {};

$parcel$export($d4aad6bd92374522$exports, "MarkerHoverParticipant", function () { return $d4aad6bd92374522$export$32a9787b1b5ca518; }, function (v) { return $d4aad6bd92374522$export$32a9787b1b5ca518 = v; });

var $jOYcd = parcelRequire("jOYcd");

var $4xCD7 = parcelRequire("4xCD7");

var $eFOsn = parcelRequire("eFOsn");

var $g0782 = parcelRequire("g0782");

var $atiRx = parcelRequire("atiRx");

var $aMhG1 = parcelRequire("aMhG1");

var $3HpR4 = parcelRequire("3HpR4");

var $cZLuO = parcelRequire("cZLuO");



var $37a85696d0573112$exports = {};

$parcel$export($37a85696d0573112$exports, "MarkerController", function () { return $37a85696d0573112$export$97b58da131ee49b9; }, function (v) { return $37a85696d0573112$export$97b58da131ee49b9 = v; });
$parcel$export($37a85696d0573112$exports, "NextMarkerAction", function () { return $37a85696d0573112$export$d0f8fc22ad9db3b2; }, function (v) { return $37a85696d0573112$export$d0f8fc22ad9db3b2 = v; });

var $8HDYc = parcelRequire("8HDYc");

var $atiRx = parcelRequire("atiRx");

var $gGOeQ = parcelRequire("gGOeQ");

var $aXAVz = parcelRequire("aXAVz");

var $8qXsZ = parcelRequire("8qXsZ");

var $3HpR4 = parcelRequire("3HpR4");

var $bdLce = parcelRequire("bdLce");
var $0d736e6880f780ae$exports = {};

$parcel$export($0d736e6880f780ae$exports, "IMarkerNavigationService", function () { return $0d736e6880f780ae$export$f7ebd4a56ff523fe; }, function (v) { return $0d736e6880f780ae$export$f7ebd4a56ff523fe = v; });

var $4xCD7 = parcelRequire("4xCD7");

var $fSvkC = parcelRequire("fSvkC");

var $atiRx = parcelRequire("atiRx");

var $2JXtA = parcelRequire("2JXtA");

var $9TEeL = parcelRequire("9TEeL");

var $7K96x = parcelRequire("7K96x");

var $3HpR4 = parcelRequire("3HpR4");

var $6pFSu = parcelRequire("6pFSu");

var $iZW67 = parcelRequire("iZW67");

var $bnsNn = parcelRequire("bnsNn");

var $9BIBz = parcelRequire("9BIBz");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $0d736e6880f780ae$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $0d736e6880f780ae$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
class $0d736e6880f780ae$export$184d3b30ff671af4 {
    constructor(marker, index, total){
        this.marker = marker;
        this.index = index;
        this.total = total;
    }
}
let $0d736e6880f780ae$export$b1f920f775feb297 = class MarkerList {
    dispose() {
        this._dispoables.dispose();
        this._onDidChange.dispose();
    }
    matches(uri) {
        if (!this._resourceFilter && !uri) return true;
        if (!this._resourceFilter || !uri) return false;
        return this._resourceFilter(uri);
    }
    get selected() {
        const marker = this._markers[this._nextIdx];
        return marker && new $0d736e6880f780ae$export$184d3b30ff671af4(marker, this._nextIdx + 1, this._markers.length);
    }
    _initIdx(model, position, fwd) {
        let found = false;
        let idx = this._markers.findIndex((marker)=>marker.resource.toString() === model.uri.toString());
        if (idx < 0) {
            idx = (0, $4xCD7.binarySearch)(this._markers, {
                resource: model.uri
            }, (a, b)=>(0, $9TEeL.compare)(a.resource.toString(), b.resource.toString()));
            if (idx < 0) idx = ~idx;
        }
        for(let i = idx; i < this._markers.length; i++){
            let range = (0, $3HpR4.Range).lift(this._markers[i]);
            if (range.isEmpty()) {
                const word = model.getWordAtPosition(range.getStartPosition());
                if (word) range = new (0, $3HpR4.Range)(range.startLineNumber, word.startColumn, range.startLineNumber, word.endColumn);
            }
            if (position && (range.containsPosition(position) || position.isBeforeOrEqual(range.getStartPosition()))) {
                this._nextIdx = i;
                found = true;
                break;
            }
            if (this._markers[i].resource.toString() !== model.uri.toString()) break;
        }
        if (!found) // after the last change
        this._nextIdx = fwd ? 0 : this._markers.length - 1;
        if (this._nextIdx < 0) this._nextIdx = this._markers.length - 1;
    }
    resetIndex() {
        this._nextIdx = -1;
    }
    move(fwd, model, position) {
        if (this._markers.length === 0) return false;
        let oldIdx = this._nextIdx;
        if (this._nextIdx === -1) this._initIdx(model, position, fwd);
        else if (fwd) this._nextIdx = (this._nextIdx + 1) % this._markers.length;
        else if (!fwd) this._nextIdx = (this._nextIdx - 1 + this._markers.length) % this._markers.length;
        if (oldIdx !== this._nextIdx) return true;
        return false;
    }
    find(uri, position) {
        let idx = this._markers.findIndex((marker)=>marker.resource.toString() === uri.toString());
        if (idx < 0) return undefined;
        for(; idx < this._markers.length; idx++){
            if ((0, $3HpR4.Range).containsPosition(this._markers[idx], position)) return new $0d736e6880f780ae$export$184d3b30ff671af4(this._markers[idx], idx + 1, this._markers.length);
        }
        return undefined;
    }
    constructor(resourceFilter, _markerService, _configService){
        this._markerService = _markerService;
        this._configService = _configService;
        this._onDidChange = new (0, $fSvkC.Emitter)();
        this.onDidChange = this._onDidChange.event;
        this._dispoables = new (0, $atiRx.DisposableStore)();
        this._markers = [];
        this._nextIdx = -1;
        if ((0, $7K96x.URI).isUri(resourceFilter)) this._resourceFilter = (uri)=>uri.toString() === resourceFilter.toString();
        else if (resourceFilter) this._resourceFilter = resourceFilter;
        const compareOrder = this._configService.getValue("problems.sortOrder");
        const compareMarker = (a, b)=>{
            let res = (0, $9TEeL.compare)(a.resource.toString(), b.resource.toString());
            if (compareOrder === "position") res = (0, $3HpR4.Range).compareRangesUsingStarts(a, b) || (0, $bnsNn.MarkerSeverity).compare(a.severity, b.severity);
            else res = (0, $bnsNn.MarkerSeverity).compare(a.severity, b.severity) || (0, $3HpR4.Range).compareRangesUsingStarts(a, b);
            return res;
        };
        const updateMarker = ()=>{
            this._markers = this._markerService.read({
                resource: (0, $7K96x.URI).isUri(resourceFilter) ? resourceFilter : undefined,
                severities: (0, $bnsNn.MarkerSeverity).Error | (0, $bnsNn.MarkerSeverity).Warning | (0, $bnsNn.MarkerSeverity).Info
            });
            if (typeof resourceFilter === "function") this._markers = this._markers.filter((m)=>this._resourceFilter(m.resource));
            this._markers.sort(compareMarker);
        };
        updateMarker();
        this._dispoables.add(_markerService.onMarkerChanged((uris)=>{
            if (!this._resourceFilter || uris.some((uri)=>this._resourceFilter(uri))) {
                updateMarker();
                this._nextIdx = -1;
                this._onDidChange.fire();
            }
        }));
    }
};
$0d736e6880f780ae$export$b1f920f775feb297 = $0d736e6880f780ae$var$__decorate([
    $0d736e6880f780ae$var$__param(1, (0, $bnsNn.IMarkerService)),
    $0d736e6880f780ae$var$__param(2, (0, $9BIBz.IConfigurationService))
], $0d736e6880f780ae$export$b1f920f775feb297);
const $0d736e6880f780ae$export$f7ebd4a56ff523fe = (0, $iZW67.createDecorator)("IMarkerNavigationService");
let $0d736e6880f780ae$var$MarkerNavigationService = class MarkerNavigationService {
    getMarkerList(resource) {
        for (let provider of this._provider){
            const result = provider.getMarkerList(resource);
            if (result) return result;
        }
        // default
        return new $0d736e6880f780ae$export$b1f920f775feb297(resource, this._markerService, this._configService);
    }
    constructor(_markerService, _configService){
        this._markerService = _markerService;
        this._configService = _configService;
        this._provider = new (0, $2JXtA.LinkedList)();
    }
};
$0d736e6880f780ae$var$MarkerNavigationService = $0d736e6880f780ae$var$__decorate([
    $0d736e6880f780ae$var$__param(0, (0, $bnsNn.IMarkerService)),
    $0d736e6880f780ae$var$__param(1, (0, $9BIBz.IConfigurationService))
], $0d736e6880f780ae$var$MarkerNavigationService);
(0, $6pFSu.registerSingleton)($0d736e6880f780ae$export$f7ebd4a56ff523fe, $0d736e6880f780ae$var$MarkerNavigationService, true);



var $58WHl = parcelRequire("58WHl");

var $2IxgH = parcelRequire("2IxgH");

var $bRtox = parcelRequire("bRtox");

var $iZW67 = parcelRequire("iZW67");

var $iValS = parcelRequire("iValS");
var $e36040ce7d7fa2c6$exports = {};

$parcel$export($e36040ce7d7fa2c6$exports, "MarkerNavigationWidget", function () { return $e36040ce7d7fa2c6$export$8ebf142680ed82d6; }, function (v) { return $e36040ce7d7fa2c6$export$8ebf142680ed82d6 = v; });

var $jOYcd = parcelRequire("jOYcd");

var $cffC6 = parcelRequire("cffC6");

var $4xCD7 = parcelRequire("4xCD7");

var $6yffc = parcelRequire("6yffc");

var $fSvkC = parcelRequire("fSvkC");


var $atiRx = parcelRequire("atiRx");

var $aMhG1 = parcelRequire("aMhG1");

var $9TEeL = parcelRequire("9TEeL");


var $3HpR4 = parcelRequire("3HpR4");


var $58WHl = parcelRequire("58WHl");


var $2IxgH = parcelRequire("2IxgH");

var $bRtox = parcelRequire("bRtox");

var $iZW67 = parcelRequire("iZW67");

var $4znCf = parcelRequire("4znCf");

var $bnsNn = parcelRequire("bnsNn");

var $9KRmt = parcelRequire("9KRmt");

var $8HDYc = parcelRequire("8HDYc");

var $c6Gjt = parcelRequire("c6Gjt");

var $3XYy8 = parcelRequire("3XYy8");

var $fUTzO = parcelRequire("fUTzO");
var $d5b3b878844e7352$export$cbca5336efb65586;
(function(SeverityIcon) {
    function className(severity) {
        switch(severity){
            case (0, $c6Gjt.default).Ignore:
                return "severity-ignore " + (0, $8HDYc.Codicon).info.classNames;
            case (0, $c6Gjt.default).Info:
                return (0, $8HDYc.Codicon).info.classNames;
            case (0, $c6Gjt.default).Warning:
                return (0, $8HDYc.Codicon).warning.classNames;
            case (0, $c6Gjt.default).Error:
                return (0, $8HDYc.Codicon).error.classNames;
            default:
                return "";
        }
    }
    SeverityIcon.className = className;
})($d5b3b878844e7352$export$cbca5336efb65586 || ($d5b3b878844e7352$export$cbca5336efb65586 = {}));
(0, $fUTzO.registerThemingParticipant)((theme, collector)=>{
    const errorIconForeground = theme.getColor((0, $3XYy8.problemsErrorIconForeground));
    if (errorIconForeground) {
        const errorCodiconSelector = (0, $8HDYc.Codicon).error.cssSelector;
        collector.addRule(`
			.monaco-editor .zone-widget ${errorCodiconSelector},
			.markers-panel .marker-icon${errorCodiconSelector},
			.text-search-provider-messages .providerMessage ${errorCodiconSelector},
			.extensions-viewlet > .extensions ${errorCodiconSelector} {
				color: ${errorIconForeground};
			}
		`);
    }
    const warningIconForeground = theme.getColor((0, $3XYy8.problemsWarningIconForeground));
    if (warningIconForeground) {
        const warningCodiconSelector = (0, $8HDYc.Codicon).warning.cssSelector;
        collector.addRule(`
			.monaco-editor .zone-widget ${warningCodiconSelector},
			.markers-panel .marker-icon${warningCodiconSelector},
			.extensions-viewlet > .extensions ${warningCodiconSelector},
			.extension-editor ${warningCodiconSelector},
			.text-search-provider-messages .providerMessage ${warningCodiconSelector},
			.preferences-editor ${warningCodiconSelector} {
				color: ${warningIconForeground};
			}
		`);
    }
    const infoIconForeground = theme.getColor((0, $3XYy8.problemsInfoIconForeground));
    if (infoIconForeground) {
        const infoCodiconSelector = (0, $8HDYc.Codicon).info.cssSelector;
        collector.addRule(`
			.monaco-editor .zone-widget ${infoCodiconSelector},
			.markers-panel .marker-icon${infoCodiconSelector},
			.extensions-viewlet > .extensions ${infoCodiconSelector},
			.text-search-provider-messages .providerMessage ${infoCodiconSelector},
			.extension-editor ${infoCodiconSelector} {
				color: ${infoIconForeground};
			}
		`);
    }
});



var $3XYy8 = parcelRequire("3XYy8");

var $fUTzO = parcelRequire("fUTzO");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $e36040ce7d7fa2c6$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $e36040ce7d7fa2c6$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
class $e36040ce7d7fa2c6$var$MessageWidget {
    dispose() {
        (0, $atiRx.dispose)(this._disposables);
    }
    update(marker) {
        const { source: source , message: message , relatedInformation: relatedInformation , code: code  } = marker;
        let sourceAndCodeLength = ((source === null || source === void 0 ? void 0 : source.length) || 0) + 2;
        if (code) {
            if (typeof code === "string") sourceAndCodeLength += code.length;
            else sourceAndCodeLength += code.value.length;
        }
        const lines = (0, $9TEeL.splitLines)(message);
        this._lines = lines.length;
        this._longestLineLength = 0;
        for (const line of lines)this._longestLineLength = Math.max(line.length + sourceAndCodeLength, this._longestLineLength);
        $jOYcd.clearNode(this._messageBlock);
        this._messageBlock.setAttribute("aria-label", this.getAriaLabel(marker));
        this._editor.applyFontInfo(this._messageBlock);
        let lastLineElement = this._messageBlock;
        for (const line1 of lines){
            lastLineElement = document.createElement("div");
            lastLineElement.innerText = line1;
            if (line1 === "") lastLineElement.style.height = this._messageBlock.style.lineHeight;
            this._messageBlock.appendChild(lastLineElement);
        }
        if (source || code) {
            const detailsElement = document.createElement("span");
            detailsElement.classList.add("details");
            lastLineElement.appendChild(detailsElement);
            if (source) {
                const sourceElement = document.createElement("span");
                sourceElement.innerText = source;
                sourceElement.classList.add("source");
                detailsElement.appendChild(sourceElement);
            }
            if (code) {
                if (typeof code === "string") {
                    const codeElement = document.createElement("span");
                    codeElement.innerText = `(${code})`;
                    codeElement.classList.add("code");
                    detailsElement.appendChild(codeElement);
                } else {
                    this._codeLink = $jOYcd.$("a.code-link");
                    this._codeLink.setAttribute("href", `${code.target.toString()}`);
                    this._codeLink.onclick = (e)=>{
                        this._openerService.open(code.target, {
                            allowCommands: true
                        });
                        e.preventDefault();
                        e.stopPropagation();
                    };
                    const codeElement1 = $jOYcd.append(this._codeLink, $jOYcd.$("span"));
                    codeElement1.innerText = code.value;
                    detailsElement.appendChild(this._codeLink);
                }
            }
        }
        $jOYcd.clearNode(this._relatedBlock);
        this._editor.applyFontInfo(this._relatedBlock);
        if ((0, $4xCD7.isNonEmptyArray)(relatedInformation)) {
            const relatedInformationNode = this._relatedBlock.appendChild(document.createElement("div"));
            relatedInformationNode.style.paddingTop = `${Math.floor(this._editor.getOption(58 /* lineHeight */ ) * 0.66)}px`;
            this._lines += 1;
            for (const related of relatedInformation){
                let container = document.createElement("div");
                let relatedResource = document.createElement("a");
                relatedResource.classList.add("filename");
                relatedResource.innerText = `${(0, $41d3b2f5b9c576d9$export$c8ab9bf6b3a1df37)(related.resource)}(${related.startLineNumber}, ${related.startColumn}): `;
                relatedResource.title = this._labelService.getUriLabel(related.resource);
                this._relatedDiagnostics.set(relatedResource, related);
                let relatedMessage = document.createElement("span");
                relatedMessage.innerText = related.message;
                container.appendChild(relatedResource);
                container.appendChild(relatedMessage);
                this._lines += 1;
                relatedInformationNode.appendChild(container);
            }
        }
        const fontInfo = this._editor.getOption(43 /* fontInfo */ );
        const scrollWidth = Math.ceil(fontInfo.typicalFullwidthCharacterWidth * this._longestLineLength * 0.75);
        const scrollHeight = fontInfo.lineHeight * this._lines;
        this._scrollable.setScrollDimensions({
            scrollWidth: scrollWidth,
            scrollHeight: scrollHeight
        });
    }
    layout(height, width) {
        this._scrollable.getDomNode().style.height = `${height}px`;
        this._scrollable.getDomNode().style.width = `${width}px`;
        this._scrollable.setScrollDimensions({
            width: width,
            height: height
        });
    }
    getHeightInLines() {
        return Math.min(17, this._lines);
    }
    getAriaLabel(marker) {
        let severityLabel = "";
        switch(marker.severity){
            case (0, $bnsNn.MarkerSeverity).Error:
                severityLabel = $58WHl.localize("Error", "Error");
                break;
            case (0, $bnsNn.MarkerSeverity).Warning:
                severityLabel = $58WHl.localize("Warning", "Warning");
                break;
            case (0, $bnsNn.MarkerSeverity).Info:
                severityLabel = $58WHl.localize("Info", "Info");
                break;
            case (0, $bnsNn.MarkerSeverity).Hint:
                severityLabel = $58WHl.localize("Hint", "Hint");
                break;
        }
        let ariaLabel = $58WHl.localize("marker aria", "{0} at {1}. ", severityLabel, marker.startLineNumber + ":" + marker.startColumn);
        const model = this._editor.getModel();
        if (model && marker.startLineNumber <= model.getLineCount() && marker.startLineNumber >= 1) {
            const lineContent = model.getLineContent(marker.startLineNumber);
            ariaLabel = `${lineContent}, ${ariaLabel}`;
        }
        return ariaLabel;
    }
    constructor(parent, editor, onRelatedInformation, _openerService, _labelService){
        this._openerService = _openerService;
        this._labelService = _labelService;
        this._lines = 0;
        this._longestLineLength = 0;
        this._relatedDiagnostics = new WeakMap();
        this._disposables = new (0, $atiRx.DisposableStore)();
        this._editor = editor;
        const domNode = document.createElement("div");
        domNode.className = "descriptioncontainer";
        this._messageBlock = document.createElement("div");
        this._messageBlock.classList.add("message");
        this._messageBlock.setAttribute("aria-live", "assertive");
        this._messageBlock.setAttribute("role", "alert");
        domNode.appendChild(this._messageBlock);
        this._relatedBlock = document.createElement("div");
        domNode.appendChild(this._relatedBlock);
        this._disposables.add($jOYcd.addStandardDisposableListener(this._relatedBlock, "click", (event)=>{
            event.preventDefault();
            const related = this._relatedDiagnostics.get(event.target);
            if (related) onRelatedInformation(related);
        }));
        this._scrollable = new (0, $cffC6.ScrollableElement)(domNode, {
            horizontal: 1 /* Auto */ ,
            vertical: 1 /* Auto */ ,
            useShadows: false,
            horizontalScrollbarSize: 6,
            verticalScrollbarSize: 6
        });
        parent.appendChild(this._scrollable.getDomNode());
        this._disposables.add(this._scrollable.onScroll((e)=>{
            domNode.style.left = `-${e.scrollLeft}px`;
            domNode.style.top = `-${e.scrollTop}px`;
        }));
        this._disposables.add(this._scrollable);
    }
}
let $e36040ce7d7fa2c6$export$8ebf142680ed82d6 = class MarkerNavigationWidget extends (0, $0607d5721260c302$exports.PeekViewWidget) {
    _applyTheme(theme) {
        this._backgroundColor = theme.getColor($e36040ce7d7fa2c6$export$7a6daa92fa461be6);
        let colorId = $e36040ce7d7fa2c6$export$ff384e915c6b89ec;
        let headerBackground = $e36040ce7d7fa2c6$export$1c5169d3ea37732e;
        if (this._severity === (0, $bnsNn.MarkerSeverity).Warning) {
            colorId = $e36040ce7d7fa2c6$export$f7008352a1446be1;
            headerBackground = $e36040ce7d7fa2c6$export$fff85971e2f6d6a2;
        } else if (this._severity === (0, $bnsNn.MarkerSeverity).Info) {
            colorId = $e36040ce7d7fa2c6$export$d670a0e9c7d1cc5;
            headerBackground = $e36040ce7d7fa2c6$export$fb5ac90b8038d767;
        }
        const frameColor = theme.getColor(colorId);
        const headerBg = theme.getColor(headerBackground);
        this.style({
            arrowColor: frameColor,
            frameColor: frameColor,
            headerBackgroundColor: headerBg,
            primaryHeadingColor: theme.getColor((0, $0607d5721260c302$exports.peekViewTitleForeground)),
            secondaryHeadingColor: theme.getColor((0, $0607d5721260c302$exports.peekViewTitleInfoForeground))
        }); // style() will trigger _applyStyles
    }
    _applyStyles() {
        if (this._parentContainer) this._parentContainer.style.backgroundColor = this._backgroundColor ? this._backgroundColor.toString() : "";
        super._applyStyles();
    }
    dispose() {
        this._callOnDispose.dispose();
        super.dispose();
    }
    _fillHead(container) {
        super._fillHead(container);
        this._disposables.add(this._actionbarWidget.actionRunner.onBeforeRun((e)=>this.editor.focus()));
        const actions = [];
        const menu = this._menuService.createMenu(MarkerNavigationWidget.TitleMenu, this._contextKeyService);
        (0, $ec16e17bf8793314$exports.createAndFillInActionBarActions)(menu, undefined, actions);
        this._actionbarWidget.push(actions, {
            label: false,
            icon: true,
            index: 0
        });
        menu.dispose();
    }
    _fillTitleIcon(container) {
        this._icon = $jOYcd.append(container, $jOYcd.$(""));
    }
    _fillBody(container) {
        this._parentContainer = container;
        container.classList.add("marker-widget");
        this._parentContainer.tabIndex = 0;
        this._parentContainer.setAttribute("role", "tooltip");
        this._container = document.createElement("div");
        container.appendChild(this._container);
        this._message = new $e36040ce7d7fa2c6$var$MessageWidget(this._container, this.editor, (related)=>this._onDidSelectRelatedInformation.fire(related), this._openerService, this._labelService);
        this._disposables.add(this._message);
    }
    show() {
        throw new Error("call showAtMarker");
    }
    showAtMarker(marker, markerIdx, markerCount) {
        // update:
        // * title
        // * message
        this._container.classList.remove("stale");
        this._message.update(marker);
        // update frame color (only applied on 'show')
        this._severity = marker.severity;
        this._applyTheme(this._themeService.getColorTheme());
        // show
        let range = (0, $3HpR4.Range).lift(marker);
        const editorPosition = this.editor.getPosition();
        let position = editorPosition && range.containsPosition(editorPosition) ? editorPosition : range.getStartPosition();
        super.show(position, this.computeRequiredHeight());
        const model = this.editor.getModel();
        if (model) {
            const detail = markerCount > 1 ? $58WHl.localize("problems", "{0} of {1} problems", markerIdx, markerCount) : $58WHl.localize("change", "{0} of {1} problem", markerIdx, markerCount);
            this.setTitle((0, $aMhG1.basename)(model.uri), detail);
        }
        this._icon.className = `codicon ${(0, $d5b3b878844e7352$export$cbca5336efb65586).className((0, $bnsNn.MarkerSeverity).toSeverity(this._severity))}`;
        this.editor.revealPositionNearTop(position, 0 /* Smooth */ );
        this.editor.focus();
    }
    updateMarker(marker) {
        this._container.classList.remove("stale");
        this._message.update(marker);
    }
    showStale() {
        this._container.classList.add("stale");
        this._relayout();
    }
    _doLayoutBody(heightInPixel, widthInPixel) {
        super._doLayoutBody(heightInPixel, widthInPixel);
        this._heightInPixel = heightInPixel;
        this._message.layout(heightInPixel, widthInPixel);
        this._container.style.height = `${heightInPixel}px`;
    }
    _onWidth(widthInPixel) {
        this._message.layout(this._heightInPixel, widthInPixel);
    }
    _relayout() {
        super._relayout(this.computeRequiredHeight());
    }
    computeRequiredHeight() {
        return 3 + this._message.getHeightInLines();
    }
    constructor(editor, _themeService, _openerService, _menuService, instantiationService, _contextKeyService, _labelService){
        super(editor, {
            showArrow: true,
            showFrame: true,
            isAccessible: true,
            frameWidth: 1
        }, instantiationService);
        this._themeService = _themeService;
        this._openerService = _openerService;
        this._menuService = _menuService;
        this._contextKeyService = _contextKeyService;
        this._labelService = _labelService;
        this._callOnDispose = new (0, $atiRx.DisposableStore)();
        this._onDidSelectRelatedInformation = new (0, $fSvkC.Emitter)();
        this.onDidSelectRelatedInformation = this._onDidSelectRelatedInformation.event;
        this._severity = (0, $bnsNn.MarkerSeverity).Warning;
        this._backgroundColor = (0, $6yffc.Color).white;
        this._applyTheme(_themeService.getColorTheme());
        this._callOnDispose.add(_themeService.onDidColorThemeChange(this._applyTheme.bind(this)));
        this.create();
    }
};
$e36040ce7d7fa2c6$export$8ebf142680ed82d6.TitleMenu = new (0, $2IxgH.MenuId)("gotoErrorTitleMenu");
$e36040ce7d7fa2c6$export$8ebf142680ed82d6 = $e36040ce7d7fa2c6$var$__decorate([
    $e36040ce7d7fa2c6$var$__param(1, (0, $fUTzO.IThemeService)),
    $e36040ce7d7fa2c6$var$__param(2, (0, $9KRmt.IOpenerService)),
    $e36040ce7d7fa2c6$var$__param(3, (0, $2IxgH.IMenuService)),
    $e36040ce7d7fa2c6$var$__param(4, (0, $iZW67.IInstantiationService)),
    $e36040ce7d7fa2c6$var$__param(5, (0, $bRtox.IContextKeyService)),
    $e36040ce7d7fa2c6$var$__param(6, (0, $4znCf.ILabelService))
], $e36040ce7d7fa2c6$export$8ebf142680ed82d6);
// theming
let $e36040ce7d7fa2c6$var$errorDefault = (0, $3XYy8.oneOf)((0, $3XYy8.editorErrorForeground), (0, $3XYy8.editorErrorBorder));
let $e36040ce7d7fa2c6$var$warningDefault = (0, $3XYy8.oneOf)((0, $3XYy8.editorWarningForeground), (0, $3XYy8.editorWarningBorder));
let $e36040ce7d7fa2c6$var$infoDefault = (0, $3XYy8.oneOf)((0, $3XYy8.editorInfoForeground), (0, $3XYy8.editorInfoBorder));
const $e36040ce7d7fa2c6$export$ff384e915c6b89ec = (0, $3XYy8.registerColor)("editorMarkerNavigationError.background", {
    dark: $e36040ce7d7fa2c6$var$errorDefault,
    light: $e36040ce7d7fa2c6$var$errorDefault,
    hc: (0, $3XYy8.contrastBorder)
}, $58WHl.localize("editorMarkerNavigationError", "Editor marker navigation widget error color."));
const $e36040ce7d7fa2c6$export$1c5169d3ea37732e = (0, $3XYy8.registerColor)("editorMarkerNavigationError.headerBackground", {
    dark: (0, $3XYy8.transparent)($e36040ce7d7fa2c6$export$ff384e915c6b89ec, .1),
    light: (0, $3XYy8.transparent)($e36040ce7d7fa2c6$export$ff384e915c6b89ec, .1),
    hc: null
}, $58WHl.localize("editorMarkerNavigationErrorHeaderBackground", "Editor marker navigation widget error heading background."));
const $e36040ce7d7fa2c6$export$f7008352a1446be1 = (0, $3XYy8.registerColor)("editorMarkerNavigationWarning.background", {
    dark: $e36040ce7d7fa2c6$var$warningDefault,
    light: $e36040ce7d7fa2c6$var$warningDefault,
    hc: (0, $3XYy8.contrastBorder)
}, $58WHl.localize("editorMarkerNavigationWarning", "Editor marker navigation widget warning color."));
const $e36040ce7d7fa2c6$export$fff85971e2f6d6a2 = (0, $3XYy8.registerColor)("editorMarkerNavigationWarning.headerBackground", {
    dark: (0, $3XYy8.transparent)($e36040ce7d7fa2c6$export$f7008352a1446be1, .1),
    light: (0, $3XYy8.transparent)($e36040ce7d7fa2c6$export$f7008352a1446be1, .1),
    hc: "#0C141F"
}, $58WHl.localize("editorMarkerNavigationWarningBackground", "Editor marker navigation widget warning heading background."));
const $e36040ce7d7fa2c6$export$d670a0e9c7d1cc5 = (0, $3XYy8.registerColor)("editorMarkerNavigationInfo.background", {
    dark: $e36040ce7d7fa2c6$var$infoDefault,
    light: $e36040ce7d7fa2c6$var$infoDefault,
    hc: (0, $3XYy8.contrastBorder)
}, $58WHl.localize("editorMarkerNavigationInfo", "Editor marker navigation widget info color."));
const $e36040ce7d7fa2c6$export$fb5ac90b8038d767 = (0, $3XYy8.registerColor)("editorMarkerNavigationInfo.headerBackground", {
    dark: (0, $3XYy8.transparent)($e36040ce7d7fa2c6$export$d670a0e9c7d1cc5, .1),
    light: (0, $3XYy8.transparent)($e36040ce7d7fa2c6$export$d670a0e9c7d1cc5, .1),
    hc: null
}, $58WHl.localize("editorMarkerNavigationInfoHeaderBackground", "Editor marker navigation widget info heading background."));
const $e36040ce7d7fa2c6$export$7a6daa92fa461be6 = (0, $3XYy8.registerColor)("editorMarkerNavigation.background", {
    dark: (0, $3XYy8.editorBackground),
    light: (0, $3XYy8.editorBackground),
    hc: (0, $3XYy8.editorBackground)
}, $58WHl.localize("editorMarkerNavigationBackground", "Editor marker navigation widget background."));


/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $37a85696d0573112$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $37a85696d0573112$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var $37a85696d0573112$var$__awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
let $37a85696d0573112$export$97b58da131ee49b9 = class MarkerController {
    static get(editor) {
        return editor.getContribution(MarkerController.ID);
    }
    dispose() {
        this._cleanUp();
        this._sessionDispoables.dispose();
    }
    _cleanUp() {
        this._widgetVisible.reset();
        this._sessionDispoables.clear();
        this._widget = undefined;
        this._model = undefined;
    }
    _getOrCreateModel(uri) {
        if (this._model && this._model.matches(uri)) return this._model;
        let reusePosition = false;
        if (this._model) {
            reusePosition = true;
            this._cleanUp();
        }
        this._model = this._markerNavigationService.getMarkerList(uri);
        if (reusePosition) this._model.move(true, this._editor.getModel(), this._editor.getPosition());
        this._widget = this._instantiationService.createInstance((0, $e36040ce7d7fa2c6$exports.MarkerNavigationWidget), this._editor);
        this._widget.onDidClose(()=>this.close(), this, this._sessionDispoables);
        this._widgetVisible.set(true);
        this._sessionDispoables.add(this._model);
        this._sessionDispoables.add(this._widget);
        // follow cursor
        this._sessionDispoables.add(this._editor.onDidChangeCursorPosition((e)=>{
            var _a, _b, _c;
            if (!((_a = this._model) === null || _a === void 0 ? void 0 : _a.selected) || !(0, $3HpR4.Range).containsPosition((_b = this._model) === null || _b === void 0 ? void 0 : _b.selected.marker, e.position)) (_c = this._model) === null || _c === void 0 || _c.resetIndex();
        }));
        // update markers
        this._sessionDispoables.add(this._model.onDidChange(()=>{
            if (!this._widget || !this._widget.position || !this._model) return;
            const info = this._model.find(this._editor.getModel().uri, this._widget.position);
            if (info) this._widget.updateMarker(info.marker);
            else this._widget.showStale();
        }));
        // open related
        this._sessionDispoables.add(this._widget.onDidSelectRelatedInformation((related)=>{
            this._editorService.openCodeEditor({
                resource: related.resource,
                options: {
                    pinned: true,
                    revealIfOpened: true,
                    selection: (0, $3HpR4.Range).lift(related).collapseToStart()
                }
            }, this._editor);
            this.close(false);
        }));
        this._sessionDispoables.add(this._editor.onDidChangeModel(()=>this._cleanUp()));
        return this._model;
    }
    close(focusEditor = true) {
        this._cleanUp();
        if (focusEditor) this._editor.focus();
    }
    showAtMarker(marker) {
        if (this._editor.hasModel()) {
            const model = this._getOrCreateModel(this._editor.getModel().uri);
            model.resetIndex();
            model.move(true, this._editor.getModel(), new (0, $8qXsZ.Position)(marker.startLineNumber, marker.startColumn));
            if (model.selected) this._widget.showAtMarker(model.selected.marker, model.selected.index, model.selected.total);
        }
    }
    nagivate(next, multiFile) {
        return $37a85696d0573112$var$__awaiter(this, void 0, void 0, function*() {
            if (this._editor.hasModel()) {
                const model = this._getOrCreateModel(multiFile ? undefined : this._editor.getModel().uri);
                model.move(next, this._editor.getModel(), this._editor.getPosition());
                if (!model.selected) return;
                if (model.selected.marker.resource.toString() !== this._editor.getModel().uri.toString()) {
                    // show in different editor
                    this._cleanUp();
                    const otherEditor = yield this._editorService.openCodeEditor({
                        resource: model.selected.marker.resource,
                        options: {
                            pinned: false,
                            revealIfOpened: true,
                            selectionRevealType: 2 /* NearTop */ ,
                            selection: model.selected.marker
                        }
                    }, this._editor);
                    if (otherEditor) {
                        MarkerController.get(otherEditor).close();
                        MarkerController.get(otherEditor).nagivate(next, multiFile);
                    }
                } else // show in this editor
                this._widget.showAtMarker(model.selected.marker, model.selected.index, model.selected.total);
            }
        });
    }
    constructor(editor, _markerNavigationService, _contextKeyService, _editorService, _instantiationService){
        this._markerNavigationService = _markerNavigationService;
        this._contextKeyService = _contextKeyService;
        this._editorService = _editorService;
        this._instantiationService = _instantiationService;
        this._sessionDispoables = new (0, $atiRx.DisposableStore)();
        this._editor = editor;
        this._widgetVisible = $37a85696d0573112$var$CONTEXT_MARKERS_NAVIGATION_VISIBLE.bindTo(this._contextKeyService);
    }
};
$37a85696d0573112$export$97b58da131ee49b9.ID = "editor.contrib.markerController";
$37a85696d0573112$export$97b58da131ee49b9 = $37a85696d0573112$var$__decorate([
    $37a85696d0573112$var$__param(1, (0, $0d736e6880f780ae$exports.IMarkerNavigationService)),
    $37a85696d0573112$var$__param(2, (0, $bRtox.IContextKeyService)),
    $37a85696d0573112$var$__param(3, (0, $aXAVz.ICodeEditorService)),
    $37a85696d0573112$var$__param(4, (0, $iZW67.IInstantiationService))
], $37a85696d0573112$export$97b58da131ee49b9);
class $37a85696d0573112$var$MarkerNavigationAction extends (0, $gGOeQ.EditorAction) {
    run(_accessor, editor) {
        return $37a85696d0573112$var$__awaiter(this, void 0, void 0, function*() {
            if (editor.hasModel()) $37a85696d0573112$export$97b58da131ee49b9.get(editor).nagivate(this._next, this._multiFile);
        });
    }
    constructor(_next, _multiFile, opts){
        super(opts);
        this._next = _next;
        this._multiFile = _multiFile;
    }
}
class $37a85696d0573112$export$d0f8fc22ad9db3b2 extends $37a85696d0573112$var$MarkerNavigationAction {
    constructor(){
        super(true, false, {
            id: $37a85696d0573112$export$d0f8fc22ad9db3b2.ID,
            label: $37a85696d0573112$export$d0f8fc22ad9db3b2.LABEL,
            alias: "Go to Next Problem (Error, Warning, Info)",
            precondition: undefined,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).focus,
                primary: 578 /* F8 */ ,
                weight: 100 /* EditorContrib */ 
            },
            menuOpts: {
                menuId: (0, $e36040ce7d7fa2c6$exports.MarkerNavigationWidget).TitleMenu,
                title: $37a85696d0573112$export$d0f8fc22ad9db3b2.LABEL,
                icon: (0, $iValS.registerIcon)("marker-navigation-next", (0, $8HDYc.Codicon).arrowDown, $58WHl.localize("nextMarkerIcon", "Icon for goto next marker.")),
                group: "navigation",
                order: 1
            }
        });
    }
}
$37a85696d0573112$export$d0f8fc22ad9db3b2.ID = "editor.action.marker.next";
$37a85696d0573112$export$d0f8fc22ad9db3b2.LABEL = $58WHl.localize("markerAction.next.label", "Go to Next Problem (Error, Warning, Info)");
class $37a85696d0573112$var$PrevMarkerAction extends $37a85696d0573112$var$MarkerNavigationAction {
    constructor(){
        super(false, false, {
            id: $37a85696d0573112$var$PrevMarkerAction.ID,
            label: $37a85696d0573112$var$PrevMarkerAction.LABEL,
            alias: "Go to Previous Problem (Error, Warning, Info)",
            precondition: undefined,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).focus,
                primary: 1602 /* F8 */ ,
                weight: 100 /* EditorContrib */ 
            },
            menuOpts: {
                menuId: (0, $e36040ce7d7fa2c6$exports.MarkerNavigationWidget).TitleMenu,
                title: $37a85696d0573112$export$d0f8fc22ad9db3b2.LABEL,
                icon: (0, $iValS.registerIcon)("marker-navigation-previous", (0, $8HDYc.Codicon).arrowUp, $58WHl.localize("previousMarkerIcon", "Icon for goto previous marker.")),
                group: "navigation",
                order: 2
            }
        });
    }
}
$37a85696d0573112$var$PrevMarkerAction.ID = "editor.action.marker.prev";
$37a85696d0573112$var$PrevMarkerAction.LABEL = $58WHl.localize("markerAction.previous.label", "Go to Previous Problem (Error, Warning, Info)");
class $37a85696d0573112$var$NextMarkerInFilesAction extends $37a85696d0573112$var$MarkerNavigationAction {
    constructor(){
        super(true, true, {
            id: "editor.action.marker.nextInFiles",
            label: $58WHl.localize("markerAction.nextInFiles.label", "Go to Next Problem in Files (Error, Warning, Info)"),
            alias: "Go to Next Problem in Files (Error, Warning, Info)",
            precondition: undefined,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).focus,
                primary: 66 /* F8 */ ,
                weight: 100 /* EditorContrib */ 
            },
            menuOpts: {
                menuId: (0, $2IxgH.MenuId).MenubarGoMenu,
                title: $58WHl.localize({
                    key: "miGotoNextProblem",
                    comment: [
                        "&& denotes a mnemonic"
                    ]
                }, "Next &&Problem"),
                group: "6_problem_nav",
                order: 1
            }
        });
    }
}
class $37a85696d0573112$var$PrevMarkerInFilesAction extends $37a85696d0573112$var$MarkerNavigationAction {
    constructor(){
        super(false, true, {
            id: "editor.action.marker.prevInFiles",
            label: $58WHl.localize("markerAction.previousInFiles.label", "Go to Previous Problem in Files (Error, Warning, Info)"),
            alias: "Go to Previous Problem in Files (Error, Warning, Info)",
            precondition: undefined,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).focus,
                primary: 1090 /* F8 */ ,
                weight: 100 /* EditorContrib */ 
            },
            menuOpts: {
                menuId: (0, $2IxgH.MenuId).MenubarGoMenu,
                title: $58WHl.localize({
                    key: "miGotoPreviousProblem",
                    comment: [
                        "&& denotes a mnemonic"
                    ]
                }, "Previous &&Problem"),
                group: "6_problem_nav",
                order: 2
            }
        });
    }
}
(0, $gGOeQ.registerEditorContribution)($37a85696d0573112$export$97b58da131ee49b9.ID, $37a85696d0573112$export$97b58da131ee49b9);
(0, $gGOeQ.registerEditorAction)($37a85696d0573112$export$d0f8fc22ad9db3b2);
(0, $gGOeQ.registerEditorAction)($37a85696d0573112$var$PrevMarkerAction);
(0, $gGOeQ.registerEditorAction)($37a85696d0573112$var$NextMarkerInFilesAction);
(0, $gGOeQ.registerEditorAction)($37a85696d0573112$var$PrevMarkerInFilesAction);
const $37a85696d0573112$var$CONTEXT_MARKERS_NAVIGATION_VISIBLE = new (0, $bRtox.RawContextKey)("markersNavigationVisible", false);
const $37a85696d0573112$var$MarkerCommand = (0, $gGOeQ.EditorCommand).bindToContribution($37a85696d0573112$export$97b58da131ee49b9.get);
(0, $gGOeQ.registerEditorCommand)(new $37a85696d0573112$var$MarkerCommand({
    id: "closeMarkersNavigation",
    precondition: $37a85696d0573112$var$CONTEXT_MARKERS_NAVIGATION_VISIBLE,
    handler: (x)=>x.close(),
    kbOpts: {
        weight: 150,
        kbExpr: (0, $bdLce.EditorContextKeys).focus,
        primary: 9 /* Escape */ ,
        secondary: [
            1033 /* Escape */ 
        ]
    }
}));



var $58WHl = parcelRequire("58WHl");

var $bnsNn = parcelRequire("bnsNn");

var $9KRmt = parcelRequire("9KRmt");

var $9xODy = parcelRequire("9xODy");

var $3XYy8 = parcelRequire("3XYy8");

var $fUTzO = parcelRequire("fUTzO");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $d4aad6bd92374522$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $d4aad6bd92374522$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
const $d4aad6bd92374522$var$$ = $jOYcd.$;
class $d4aad6bd92374522$export$c0c5b6dfb6f41d44 {
    isValidForHoverAnchor(anchor) {
        return anchor.type === 1 /* Range */  && this.range.startColumn <= anchor.range.startColumn && this.range.endColumn >= anchor.range.endColumn;
    }
    constructor(owner, range, marker){
        this.owner = owner;
        this.range = range;
        this.marker = marker;
    }
}
const $d4aad6bd92374522$var$markerCodeActionTrigger = {
    type: 1 /* Invoke */ ,
    filter: {
        include: (0, $76aa5b67436f3853$export$c72b5966cfff6b4d).QuickFix
    }
};
let $d4aad6bd92374522$export$32a9787b1b5ca518 = class MarkerHoverParticipant {
    computeSync(anchor, lineDecorations) {
        if (!this._editor.hasModel() || anchor.type !== 1 /* Range */ ) return [];
        const model = this._editor.getModel();
        const lineNumber = anchor.range.startLineNumber;
        const maxColumn = model.getLineMaxColumn(lineNumber);
        const result = [];
        for (const d of lineDecorations){
            const startColumn = d.range.startLineNumber === lineNumber ? d.range.startColumn : 1;
            const endColumn = d.range.endLineNumber === lineNumber ? d.range.endColumn : maxColumn;
            const marker = this._markerDecorationsService.getMarker(model.uri, d);
            if (!marker) continue;
            const range = new (0, $3HpR4.Range)(anchor.range.startLineNumber, startColumn, anchor.range.startLineNumber, endColumn);
            result.push(new $d4aad6bd92374522$export$c0c5b6dfb6f41d44(this, range, marker));
        }
        return result;
    }
    renderHoverParts(hoverParts, fragment, statusBar) {
        if (!hoverParts.length) return (0, $atiRx.Disposable).None;
        const disposables = new (0, $atiRx.DisposableStore)();
        hoverParts.forEach((msg)=>fragment.appendChild(this.renderMarkerHover(msg, disposables)));
        const markerHoverForStatusbar = hoverParts.length === 1 ? hoverParts[0] : hoverParts.sort((a, b)=>(0, $bnsNn.MarkerSeverity).compare(a.marker.severity, b.marker.severity))[0];
        this.renderMarkerStatusbar(markerHoverForStatusbar, statusBar, disposables);
        return disposables;
    }
    renderMarkerHover(markerHover, disposables) {
        const hoverElement = $d4aad6bd92374522$var$$("div.hover-row");
        const markerElement = $jOYcd.append(hoverElement, $d4aad6bd92374522$var$$("div.marker.hover-contents"));
        const { source: source , message: message , code: code , relatedInformation: relatedInformation  } = markerHover.marker;
        this._editor.applyFontInfo(markerElement);
        const messageElement = $jOYcd.append(markerElement, $d4aad6bd92374522$var$$("span"));
        messageElement.style.whiteSpace = "pre-wrap";
        messageElement.innerText = message;
        if (source || code) {
            // Code has link
            if (code && typeof code !== "string") {
                const sourceAndCodeElement = $d4aad6bd92374522$var$$("span");
                if (source) {
                    const sourceElement = $jOYcd.append(sourceAndCodeElement, $d4aad6bd92374522$var$$("span"));
                    sourceElement.innerText = source;
                }
                const codeLink = $jOYcd.append(sourceAndCodeElement, $d4aad6bd92374522$var$$("a.code-link"));
                codeLink.setAttribute("href", code.target.toString());
                disposables.add($jOYcd.addDisposableListener(codeLink, "click", (e)=>{
                    this._openerService.open(code.target, {
                        allowCommands: true
                    });
                    e.preventDefault();
                    e.stopPropagation();
                }));
                const codeElement = $jOYcd.append(codeLink, $d4aad6bd92374522$var$$("span"));
                codeElement.innerText = code.value;
                const detailsElement = $jOYcd.append(markerElement, sourceAndCodeElement);
                detailsElement.style.opacity = "0.6";
                detailsElement.style.paddingLeft = "6px";
            } else {
                const detailsElement1 = $jOYcd.append(markerElement, $d4aad6bd92374522$var$$("span"));
                detailsElement1.style.opacity = "0.6";
                detailsElement1.style.paddingLeft = "6px";
                detailsElement1.innerText = source && code ? `${source}(${code})` : source ? source : `(${code})`;
            }
        }
        if ((0, $4xCD7.isNonEmptyArray)(relatedInformation)) for (const { message: message1 , resource: resource , startLineNumber: startLineNumber , startColumn: startColumn  } of relatedInformation){
            const relatedInfoContainer = $jOYcd.append(markerElement, $d4aad6bd92374522$var$$("div"));
            relatedInfoContainer.style.marginTop = "8px";
            const a = $jOYcd.append(relatedInfoContainer, $d4aad6bd92374522$var$$("a"));
            a.innerText = `${(0, $aMhG1.basename)(resource)}(${startLineNumber}, ${startColumn}): `;
            a.style.cursor = "pointer";
            disposables.add($jOYcd.addDisposableListener(a, "click", (e)=>{
                e.stopPropagation();
                e.preventDefault();
                if (this._openerService) this._openerService.open(resource, {
                    fromUserGesture: true,
                    editorOptions: {
                        selection: {
                            startLineNumber: startLineNumber,
                            startColumn: startColumn
                        }
                    }
                }).catch((0, $g0782.onUnexpectedError));
            }));
            const messageElement1 = $jOYcd.append(relatedInfoContainer, $d4aad6bd92374522$var$$("span"));
            messageElement1.innerText = message1;
            this._editor.applyFontInfo(messageElement1);
        }
        return hoverElement;
    }
    renderMarkerStatusbar(markerHover, statusBar, disposables) {
        if (markerHover.marker.severity === (0, $bnsNn.MarkerSeverity).Error || markerHover.marker.severity === (0, $bnsNn.MarkerSeverity).Warning || markerHover.marker.severity === (0, $bnsNn.MarkerSeverity).Info) statusBar.addAction({
            label: $58WHl.localize("view problem", "View Problem"),
            commandId: (0, $37a85696d0573112$exports.NextMarkerAction).ID,
            run: ()=>{
                this._hover.hide();
                (0, $37a85696d0573112$exports.MarkerController).get(this._editor).showAtMarker(markerHover.marker);
                this._editor.focus();
            }
        });
        if (!this._editor.getOption(80 /* readOnly */ )) {
            const quickfixPlaceholderElement = statusBar.append($d4aad6bd92374522$var$$("div"));
            if (this.recentMarkerCodeActionsInfo) {
                if ((0, $bnsNn.IMarkerData).makeKey(this.recentMarkerCodeActionsInfo.marker) === (0, $bnsNn.IMarkerData).makeKey(markerHover.marker)) {
                    if (!this.recentMarkerCodeActionsInfo.hasCodeActions) quickfixPlaceholderElement.textContent = $58WHl.localize("noQuickFixes", "No quick fixes available");
                } else this.recentMarkerCodeActionsInfo = undefined;
            }
            const updatePlaceholderDisposable = this.recentMarkerCodeActionsInfo && !this.recentMarkerCodeActionsInfo.hasCodeActions ? (0, $atiRx.Disposable).None : disposables.add((0, $eFOsn.disposableTimeout)(()=>quickfixPlaceholderElement.textContent = $58WHl.localize("checkingForQuickFixes", "Checking for quick fixes..."), 200));
            if (!quickfixPlaceholderElement.textContent) // Have some content in here to avoid flickering
            quickfixPlaceholderElement.textContent = String.fromCharCode(0xA0); // &nbsp;
            const codeActionsPromise = this.getCodeActions(markerHover.marker);
            disposables.add((0, $atiRx.toDisposable)(()=>codeActionsPromise.cancel()));
            codeActionsPromise.then((actions)=>{
                updatePlaceholderDisposable.dispose();
                this.recentMarkerCodeActionsInfo = {
                    marker: markerHover.marker,
                    hasCodeActions: actions.validActions.length > 0
                };
                if (!this.recentMarkerCodeActionsInfo.hasCodeActions) {
                    actions.dispose();
                    quickfixPlaceholderElement.textContent = $58WHl.localize("noQuickFixes", "No quick fixes available");
                    return;
                }
                quickfixPlaceholderElement.style.display = "none";
                let showing = false;
                disposables.add((0, $atiRx.toDisposable)(()=>{
                    if (!showing) actions.dispose();
                }));
                statusBar.addAction({
                    label: $58WHl.localize("quick fixes", "Quick Fix..."),
                    commandId: (0, $c1488eff038c387a$exports.QuickFixAction).Id,
                    run: (target)=>{
                        showing = true;
                        const controller = (0, $c1488eff038c387a$exports.QuickFixController).get(this._editor);
                        const elementPosition = $jOYcd.getDomNodePagePosition(target);
                        // Hide the hover pre-emptively, otherwise the editor can close the code actions
                        // context menu as well when using keyboard navigation
                        this._hover.hide();
                        controller.showCodeActions($d4aad6bd92374522$var$markerCodeActionTrigger, actions, {
                            x: elementPosition.left + 6,
                            y: elementPosition.top + elementPosition.height + 6
                        });
                    }
                });
            }, (0, $g0782.onUnexpectedError));
        }
    }
    getCodeActions(marker) {
        return (0, $eFOsn.createCancelablePromise)((cancellationToken)=>{
            return (0, $3c8987ef19ae5b59$exports.getCodeActions)(this._editor.getModel(), new (0, $3HpR4.Range)(marker.startLineNumber, marker.startColumn, marker.endLineNumber, marker.endColumn), $d4aad6bd92374522$var$markerCodeActionTrigger, (0, $9xODy.Progress).None, cancellationToken);
        });
    }
    constructor(_editor, _hover, _markerDecorationsService, _openerService){
        this._editor = _editor;
        this._hover = _hover;
        this._markerDecorationsService = _markerDecorationsService;
        this._openerService = _openerService;
        this.recentMarkerCodeActionsInfo = undefined;
    }
};
$d4aad6bd92374522$export$32a9787b1b5ca518 = $d4aad6bd92374522$var$__decorate([
    $d4aad6bd92374522$var$__param(2, (0, $cZLuO.IMarkerDecorationsService)),
    $d4aad6bd92374522$var$__param(3, (0, $9KRmt.IOpenerService))
], $d4aad6bd92374522$export$32a9787b1b5ca518);
(0, $fUTzO.registerThemingParticipant)((theme, collector)=>{
    const linkFg = theme.getColor((0, $3XYy8.textLinkForeground));
    if (linkFg) collector.addRule(`.monaco-hover .hover-contents a.code-link span { color: ${linkFg}; }`);
    const activeLinkFg = theme.getColor((0, $3XYy8.textLinkActiveForeground));
    if (activeLinkFg) collector.addRule(`.monaco-hover .hover-contents a.code-link span:hover { color: ${activeLinkFg}; }`);
});


var $c19e865ca7e97982$exports = {};

$parcel$export($c19e865ca7e97982$exports, "InlineCompletionsHoverParticipant", function () { return $c19e865ca7e97982$export$85c63d130bb225cb; }, function (v) { return $c19e865ca7e97982$export$85c63d130bb225cb = v; });

var $jOYcd = parcelRequire("jOYcd");

var $chTln = parcelRequire("chTln");

var $atiRx = parcelRequire("atiRx");


var $3HpR4 = parcelRequire("3HpR4");

var $6o4cZ = parcelRequire("6o4cZ");

var $42a160c6ab5a90c1$exports = {};

$parcel$export($42a160c6ab5a90c1$exports, "GhostTextController", function () { return $42a160c6ab5a90c1$export$ffa5b9ac8848b7ee; }, function (v) { return $42a160c6ab5a90c1$export$ffa5b9ac8848b7ee = v; });
$parcel$export($42a160c6ab5a90c1$exports, "commitInlineSuggestionAction", function () { return $42a160c6ab5a90c1$export$6bdad8075dfe5c6b; }, function (v) { return $42a160c6ab5a90c1$export$6bdad8075dfe5c6b = v; });
$parcel$export($42a160c6ab5a90c1$exports, "ShowNextInlineSuggestionAction", function () { return $42a160c6ab5a90c1$export$57edbf9569cc9779; }, function (v) { return $42a160c6ab5a90c1$export$57edbf9569cc9779 = v; });
$parcel$export($42a160c6ab5a90c1$exports, "ShowPreviousInlineSuggestionAction", function () { return $42a160c6ab5a90c1$export$deb45c643cbebb10; }, function (v) { return $42a160c6ab5a90c1$export$deb45c643cbebb10 = v; });

var $atiRx = parcelRequire("atiRx");

var $9TEeL = parcelRequire("9TEeL");

var $gGOeQ = parcelRequire("gGOeQ");

var $kmS7I = parcelRequire("kmS7I");

var $bdLce = parcelRequire("bdLce");
const $ee3f75cf777da8d1$export$f1235a78c589a102 = "editor.action.inlineSuggest.commit";


var $084689ea4a49b85d$exports = {};

$parcel$export($084689ea4a49b85d$exports, "GhostTextModel", function () { return $084689ea4a49b85d$export$c35e2fb758843dde; }, function (v) { return $084689ea4a49b85d$export$c35e2fb758843dde = v; });

var $fSvkC = parcelRequire("fSvkC");

var $atiRx = parcelRequire("atiRx");

var $8qXsZ = parcelRequire("8qXsZ");

var $eKhCe = parcelRequire("eKhCe");
var $a25fac58e5e8c708$exports = {};

$parcel$export($a25fac58e5e8c708$exports, "InlineCompletionsModel", function () { return $a25fac58e5e8c708$export$5323521c789f2485; }, function (v) { return $a25fac58e5e8c708$export$5323521c789f2485 = v; });
$parcel$export($a25fac58e5e8c708$exports, "provideInlineCompletions", function () { return $a25fac58e5e8c708$export$eb35bd557f596021; }, function (v) { return $a25fac58e5e8c708$export$eb35bd557f596021 = v; });
$parcel$export($a25fac58e5e8c708$exports, "UpdateOperation", function () { return $a25fac58e5e8c708$export$fcd951c1cbced25; }, function (v) { return $a25fac58e5e8c708$export$fcd951c1cbced25 = v; });
$parcel$export($a25fac58e5e8c708$exports, "SynchronizedInlineCompletionsCache", function () { return $a25fac58e5e8c708$export$f1e185e738fbe6; }, function (v) { return $a25fac58e5e8c708$export$f1e185e738fbe6 = v; });
$parcel$export($a25fac58e5e8c708$exports, "minimizeInlineCompletion", function () { return $a25fac58e5e8c708$export$5a88d2c8f5e7fefc; }, function (v) { return $a25fac58e5e8c708$export$5a88d2c8f5e7fefc = v; });

var $eFOsn = parcelRequire("eFOsn");

var $gnEXx = parcelRequire("gnEXx");

var $g0782 = parcelRequire("g0782");

var $fSvkC = parcelRequire("fSvkC");

var $atiRx = parcelRequire("atiRx");

var $9TEeL = parcelRequire("9TEeL");

var $5vVxj = parcelRequire("5vVxj");

var $13fPA = parcelRequire("13fPA");

var $3HpR4 = parcelRequire("3HpR4");

var $eKhCe = parcelRequire("eKhCe");

var $fSvkC = parcelRequire("fSvkC");

var $atiRx = parcelRequire("atiRx");

var $3HpR4 = parcelRequire("3HpR4");
class $405490c6ad93fdb6$export$9415a6e27591b584 {
    renderForScreenReader(lineText) {
        if (this.parts.length === 0) return "";
        const lastPart = this.parts[this.parts.length - 1];
        const cappedLineText = lineText.substr(0, lastPart.column - 1);
        const text = $405490c6ad93fdb6$var$applyEdits(cappedLineText, this.parts.map((p)=>({
                range: {
                    startLineNumber: 1,
                    endLineNumber: 1,
                    startColumn: p.column,
                    endColumn: p.column
                },
                text: p.lines.join("\n")
            })));
        return text.substring(this.parts[0].column - 1);
    }
    constructor(lineNumber, parts, additionalReservedLineCount = 0){
        this.lineNumber = lineNumber;
        this.parts = parts;
        this.additionalReservedLineCount = additionalReservedLineCount;
    }
}
class $405490c6ad93fdb6$var$PositionOffsetTransformer {
    getOffset(position) {
        return this.lineStartOffsetByLineIdx[position.lineNumber - 1] + position.column - 1;
    }
    constructor(text){
        this.lineStartOffsetByLineIdx = [];
        this.lineStartOffsetByLineIdx.push(0);
        for(let i = 0; i < text.length; i++)if (text.charAt(i) === "\n") this.lineStartOffsetByLineIdx.push(i + 1);
    }
}
function $405490c6ad93fdb6$var$applyEdits(text, edits) {
    const transformer = new $405490c6ad93fdb6$var$PositionOffsetTransformer(text);
    const offsetEdits = edits.map((e)=>{
        const range = (0, $3HpR4.Range).lift(e.range);
        return {
            startOffset: transformer.getOffset(range.getStartPosition()),
            endOffset: transformer.getOffset(range.getEndPosition()),
            text: e.text
        };
    });
    offsetEdits.sort((a, b)=>b.startOffset - a.startOffset);
    for (const edit of offsetEdits)text = text.substring(0, edit.startOffset) + edit.text + text.substring(edit.endOffset);
    return text;
}
class $405490c6ad93fdb6$export$cd17cedf46fe2f2 {
    constructor(column, lines, /**
     * Indicates if this part is a preview of an inline suggestion when a suggestion is previewed.
    */ preview){
        this.column = column;
        this.lines = lines;
        this.preview = preview;
    }
}
class $405490c6ad93fdb6$export$e69a41b67268cb2a extends (0, $atiRx.Disposable) {
    setExpanded(expanded) {
        this._expanded = true;
        this.onDidChangeEmitter.fire();
    }
    constructor(editor){
        super();
        this.editor = editor;
        this._expanded = undefined;
        this.onDidChangeEmitter = new (0, $fSvkC.Emitter)();
        this.onDidChange = this.onDidChangeEmitter.event;
        this._register(editor.onDidChangeConfiguration((e)=>{
            if (e.hasChanged(105 /* suggest */ ) && this._expanded === undefined) this.onDidChangeEmitter.fire();
        }));
    }
}



var $fAXtX = parcelRequire("fAXtX");


var $2ETMk = parcelRequire("2ETMk");

var $9TEeL = parcelRequire("9TEeL");

var $3HpR4 = parcelRequire("3HpR4");

function $36c04cd9279ee2b6$export$11e165236064256b(a, b) {
    if (a === b) return true;
    if (!a || !b) return false;
    return a.range.equalsRange(b.range) && a.text === b.text && a.command === b.command;
}
function $36c04cd9279ee2b6$export$31cc5495dc7f07c1(inlineCompletion, textModel, mode, cursorPosition, previewSuffixLength = 0) {
    if (inlineCompletion.range.startLineNumber !== inlineCompletion.range.endLineNumber) // Only single line replacements are supported.
    return undefined;
    const sourceLine = textModel.getLineContent(inlineCompletion.range.startLineNumber);
    const sourceIndentationLength = $9TEeL.getLeadingWhitespace(sourceLine).length;
    const suggestionTouchesIndentation = inlineCompletion.range.startColumn - 1 <= sourceIndentationLength;
    if (suggestionTouchesIndentation) {
        // source:      ··········[······abc]
        //                         ^^^^^^^^^ inlineCompletion.range
        //              ^^^^^^^^^^ ^^^^^^ sourceIndentationLength
        //                         ^^^^^^ replacedIndentation.length
        //                               ^^^ rangeThatDoesNotReplaceIndentation
        // inlineCompletion.text: '··foo'
        //                         ^^ suggestionAddedIndentationLength
        const suggestionAddedIndentationLength = $9TEeL.getLeadingWhitespace(inlineCompletion.text).length;
        const replacedIndentation = sourceLine.substring(inlineCompletion.range.startColumn - 1, sourceIndentationLength);
        const rangeThatDoesNotReplaceIndentation = (0, $3HpR4.Range).fromPositions(inlineCompletion.range.getStartPosition().delta(0, replacedIndentation.length), inlineCompletion.range.getEndPosition());
        const suggestionWithoutIndentationChange = inlineCompletion.text.startsWith(replacedIndentation) ? inlineCompletion.text.substring(replacedIndentation.length) : inlineCompletion.text.substring(suggestionAddedIndentationLength);
        inlineCompletion = {
            range: rangeThatDoesNotReplaceIndentation,
            text: suggestionWithoutIndentationChange,
            command: inlineCompletion.command
        };
    }
    // This is a single line string
    const valueToBeReplaced = textModel.getValueInRange(inlineCompletion.range);
    const changes = $36c04cd9279ee2b6$var$cachingDiff(valueToBeReplaced, inlineCompletion.text);
    if (!changes) // No ghost text in case the diff would be too slow to compute
    return undefined;
    const lineNumber = inlineCompletion.range.startLineNumber;
    const parts = new Array();
    if (mode === "prefix") {
        const filteredChanges = changes.filter((c)=>c.originalLength === 0);
        if (filteredChanges.length > 1 || filteredChanges.length === 1 && filteredChanges[0].originalStart !== valueToBeReplaced.length) // Prefixes only have a single change.
        return undefined;
    }
    const previewStartInCompletionText = inlineCompletion.text.length - previewSuffixLength;
    for (const c of changes){
        const insertColumn = inlineCompletion.range.startColumn + c.originalStart + c.originalLength;
        if (mode === "subwordSmart" && cursorPosition && cursorPosition.lineNumber === inlineCompletion.range.startLineNumber && insertColumn < cursorPosition.column) // No ghost text before cursor
        return undefined;
        if (c.originalLength > 0) return undefined;
        if (c.modifiedLength === 0) continue;
        const modifiedEnd = c.modifiedStart + c.modifiedLength;
        const nonPreviewTextEnd = Math.max(c.modifiedStart, Math.min(modifiedEnd, previewStartInCompletionText));
        const nonPreviewText = inlineCompletion.text.substring(c.modifiedStart, nonPreviewTextEnd);
        const italicText = inlineCompletion.text.substring(nonPreviewTextEnd, Math.max(c.modifiedStart, modifiedEnd));
        if (nonPreviewText.length > 0) {
            const lines = $9TEeL.splitLines(nonPreviewText);
            parts.push(new (0, $405490c6ad93fdb6$export$cd17cedf46fe2f2)(insertColumn, lines, false));
        }
        if (italicText.length > 0) {
            const lines1 = $9TEeL.splitLines(italicText);
            parts.push(new (0, $405490c6ad93fdb6$export$cd17cedf46fe2f2)(insertColumn, lines1, true));
        }
    }
    return new (0, $405490c6ad93fdb6$export$9415a6e27591b584)(lineNumber, parts, 0);
}
let $36c04cd9279ee2b6$var$lastRequest = undefined;
function $36c04cd9279ee2b6$var$cachingDiff(originalValue, newValue) {
    if (($36c04cd9279ee2b6$var$lastRequest === null || $36c04cd9279ee2b6$var$lastRequest === void 0 ? void 0 : $36c04cd9279ee2b6$var$lastRequest.originalValue) === originalValue && ($36c04cd9279ee2b6$var$lastRequest === null || $36c04cd9279ee2b6$var$lastRequest === void 0 ? void 0 : $36c04cd9279ee2b6$var$lastRequest.newValue) === newValue) return $36c04cd9279ee2b6$var$lastRequest === null || $36c04cd9279ee2b6$var$lastRequest === void 0 ? void 0 : $36c04cd9279ee2b6$var$lastRequest.changes;
    else {
        const changes = $36c04cd9279ee2b6$var$smartDiff(originalValue, newValue);
        $36c04cd9279ee2b6$var$lastRequest = {
            originalValue: originalValue,
            newValue: newValue,
            changes: changes
        };
        return changes;
    }
}
/**
 * When matching `if ()` with `if (f() = 1) { g(); }`,
 * align it like this:        `if (       )`
 * Not like this:			  `if (  )`
 * Also not like this:		  `if (             )`.
 *
 * The parenthesis are preprocessed to ensure that they match correctly.
 */ function $36c04cd9279ee2b6$var$smartDiff(originalValue, newValue) {
    if (originalValue.length > 5000 || newValue.length > 5000) // We don't want to work on strings that are too big
    return undefined;
    function getMaxCharCode(val) {
        let maxCharCode = 0;
        for(let i = 0, len = val.length; i < len; i++){
            const charCode = val.charCodeAt(i);
            if (charCode > maxCharCode) maxCharCode = charCode;
        }
        return maxCharCode;
    }
    const maxCharCode = Math.max(getMaxCharCode(originalValue), getMaxCharCode(newValue));
    function getUniqueCharCode(id) {
        if (id < 0) throw new Error("unexpected");
        return maxCharCode + id + 1;
    }
    function getElements(source) {
        let level = 0;
        let group = 0;
        const characters = new Int32Array(source.length);
        for(let i = 0, len = source.length; i < len; i++){
            const id = group * 100 + level;
            // TODO support more brackets
            if (source[i] === "(") {
                characters[i] = getUniqueCharCode(2 * id);
                level++;
            } else if (source[i] === ")") {
                characters[i] = getUniqueCharCode(2 * id + 1);
                if (level === 1) group++;
                level = Math.max(level - 1, 0);
            } else characters[i] = source.charCodeAt(i);
        }
        return characters;
    }
    const elements1 = getElements(originalValue);
    const elements2 = getElements(newValue);
    return new (0, $2ETMk.LcsDiff)({
        getElements: ()=>elements1
    }, {
        getElements: ()=>elements2
    }).ComputeDiff(false).changes;
}


/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $a25fac58e5e8c708$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $a25fac58e5e8c708$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var $a25fac58e5e8c708$var$__awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
let $a25fac58e5e8c708$export$5323521c789f2485 = class InlineCompletionsModel extends (0, $atiRx.Disposable) {
    handleUserInput() {
        if (this.session && !this.session.isValid) this.hide();
        setTimeout(()=>{
            if (this.disposed) return;
            // Wait for the cursor update that happens in the same iteration loop iteration
            this.startSessionIfTriggered();
        }, 0);
    }
    get session() {
        return this.completionSession.value;
    }
    get ghostText() {
        var _a;
        return (_a = this.session) === null || _a === void 0 ? void 0 : _a.ghostText;
    }
    get minReservedLineCount() {
        return this.session ? this.session.minReservedLineCount : 0;
    }
    setExpanded(expanded) {
        var _a;
        (_a = this.session) === null || _a === void 0 || _a.setExpanded(expanded);
    }
    setActive(active) {
        var _a;
        this.active = active;
        if (active) (_a = this.session) === null || _a === void 0 || _a.scheduleAutomaticUpdate();
    }
    startSessionIfTriggered() {
        const suggestOptions = this.editor.getOption(54 /* inlineSuggest */ );
        if (!suggestOptions.enabled) return;
        if (this.session && this.session.isValid) return;
        this.trigger((0, $eKhCe.InlineCompletionTriggerKind).Automatic);
    }
    trigger(triggerKind) {
        if (this.completionSession.value) {
            if (triggerKind === (0, $eKhCe.InlineCompletionTriggerKind).Explicit) this.completionSession.value.ensureUpdateWithExplicitContext();
            return;
        }
        this.completionSession.value = new $a25fac58e5e8c708$export$c96bdfbf87b8494b(this.editor, this.editor.getPosition(), ()=>this.active, this.commandService, this.cache, triggerKind);
        this.completionSession.value.takeOwnership(this.completionSession.value.onDidChange(()=>{
            this.onDidChangeEmitter.fire();
        }));
    }
    hide() {
        this.completionSession.clear();
        this.onDidChangeEmitter.fire();
    }
    commitCurrentSuggestion() {
        var _a;
        // Don't dispose the session, so that after committing, more suggestions are shown.
        (_a = this.session) === null || _a === void 0 || _a.commitCurrentCompletion();
    }
    showNext() {
        var _a;
        (_a = this.session) === null || _a === void 0 || _a.showNextInlineCompletion();
    }
    showPrevious() {
        var _a;
        (_a = this.session) === null || _a === void 0 || _a.showPreviousInlineCompletion();
    }
    hasMultipleInlineCompletions() {
        var _a;
        return $a25fac58e5e8c708$var$__awaiter(this, void 0, void 0, function*() {
            const result = yield (_a = this.session) === null || _a === void 0 ? void 0 : _a.hasMultipleInlineCompletions();
            return result !== undefined ? result : false;
        });
    }
    constructor(editor, cache, commandService){
        super();
        this.editor = editor;
        this.cache = cache;
        this.commandService = commandService;
        this.onDidChangeEmitter = new (0, $fSvkC.Emitter)();
        this.onDidChange = this.onDidChangeEmitter.event;
        this.completionSession = this._register(new (0, $atiRx.MutableDisposable)());
        this.active = false;
        this.disposed = false;
        this._register(commandService.onDidExecuteCommand((e)=>{
            // These commands don't trigger onDidType.
            const commands = new Set([
                (0, $5vVxj.CoreEditingCommands).Tab.id,
                (0, $5vVxj.CoreEditingCommands).DeleteLeft.id,
                (0, $5vVxj.CoreEditingCommands).DeleteRight.id,
                (0, $ee3f75cf777da8d1$export$f1235a78c589a102),
                "acceptSelectedSuggestion"
            ]);
            if (commands.has(e.commandId) && editor.hasTextFocus()) this.handleUserInput();
        }));
        this._register(this.editor.onDidType((e)=>{
            this.handleUserInput();
        }));
        this._register(this.editor.onDidChangeCursorPosition((e)=>{
            if (this.session && !this.session.isValid) this.hide();
        }));
        this._register((0, $atiRx.toDisposable)(()=>{
            this.disposed = true;
        }));
        this._register(this.editor.onDidBlurEditorWidget(()=>{
            this.hide();
        }));
    }
};
$a25fac58e5e8c708$export$5323521c789f2485 = $a25fac58e5e8c708$var$__decorate([
    $a25fac58e5e8c708$var$__param(2, (0, $fAXtX.ICommandService))
], $a25fac58e5e8c708$export$5323521c789f2485);
class $a25fac58e5e8c708$export$c96bdfbf87b8494b extends (0, $405490c6ad93fdb6$export$e69a41b67268cb2a) {
    fixAndGetIndexOfCurrentSelection() {
        if (!this.currentlySelectedCompletionId || !this.cache.value) return 0;
        if (this.cache.value.completions.length === 0) // don't reset the selection in this case
        return 0;
        const idx = this.cache.value.completions.findIndex((v)=>v.semanticId === this.currentlySelectedCompletionId);
        if (idx === -1) {
            // Reset the selection so that the selection does not jump back when it appears again
            this.currentlySelectedCompletionId = undefined;
            return 0;
        }
        return idx;
    }
    get currentCachedCompletion() {
        if (!this.cache.value) return undefined;
        return this.cache.value.completions[this.fixAndGetIndexOfCurrentSelection()];
    }
    showNextInlineCompletion() {
        var _a;
        return $a25fac58e5e8c708$var$__awaiter(this, void 0, void 0, function*() {
            yield this.ensureUpdateWithExplicitContext();
            const completions = ((_a = this.cache.value) === null || _a === void 0 ? void 0 : _a.completions) || [];
            if (completions.length > 0) {
                const newIdx = (this.fixAndGetIndexOfCurrentSelection() + 1) % completions.length;
                this.currentlySelectedCompletionId = completions[newIdx].semanticId;
            } else this.currentlySelectedCompletionId = undefined;
            this.onDidChangeEmitter.fire();
        });
    }
    showPreviousInlineCompletion() {
        var _a;
        return $a25fac58e5e8c708$var$__awaiter(this, void 0, void 0, function*() {
            yield this.ensureUpdateWithExplicitContext();
            const completions = ((_a = this.cache.value) === null || _a === void 0 ? void 0 : _a.completions) || [];
            if (completions.length > 0) {
                const newIdx = (this.fixAndGetIndexOfCurrentSelection() + completions.length - 1) % completions.length;
                this.currentlySelectedCompletionId = completions[newIdx].semanticId;
            } else this.currentlySelectedCompletionId = undefined;
            this.onDidChangeEmitter.fire();
        });
    }
    ensureUpdateWithExplicitContext() {
        var _a;
        return $a25fac58e5e8c708$var$__awaiter(this, void 0, void 0, function*() {
            if (this.updateOperation.value) {
                // Restart or wait for current update operation
                if (this.updateOperation.value.triggerKind === (0, $eKhCe.InlineCompletionTriggerKind).Explicit) yield this.updateOperation.value.promise;
                else yield this.update((0, $eKhCe.InlineCompletionTriggerKind).Explicit);
            } else if (((_a = this.cache.value) === null || _a === void 0 ? void 0 : _a.triggerKind) !== (0, $eKhCe.InlineCompletionTriggerKind).Explicit) // Refresh cache
            yield this.update((0, $eKhCe.InlineCompletionTriggerKind).Explicit);
        });
    }
    hasMultipleInlineCompletions() {
        var _a;
        return $a25fac58e5e8c708$var$__awaiter(this, void 0, void 0, function*() {
            yield this.ensureUpdateWithExplicitContext();
            return (((_a = this.cache.value) === null || _a === void 0 ? void 0 : _a.completions.length) || 0) > 1;
        });
    }
    //#endregion
    get ghostText() {
        const currentCompletion = this.currentCompletion;
        const mode = this.editor.getOptions().get(54 /* inlineSuggest */ ).mode;
        return currentCompletion ? (0, $36c04cd9279ee2b6$export$31cc5495dc7f07c1)(currentCompletion, this.editor.getModel(), mode, this.editor.getPosition()) : undefined;
    }
    get currentCompletion() {
        const completion = this.currentCachedCompletion;
        if (!completion) return undefined;
        return completion.toLiveInlineCompletion();
    }
    get isValid() {
        return this.editor.getPosition().lineNumber === this.triggerPosition.lineNumber;
    }
    scheduleAutomaticUpdate() {
        // Since updateSoon debounces, starvation can happen.
        // To prevent stale cache, we clear the current update operation.
        this.updateOperation.clear();
        this.updateSoon.schedule();
    }
    update(triggerKind) {
        return $a25fac58e5e8c708$var$__awaiter(this, void 0, void 0, function*() {
            if (!this.shouldUpdate()) return;
            const position = this.editor.getPosition();
            const promise = (0, $eFOsn.createCancelablePromise)((token)=>$a25fac58e5e8c708$var$__awaiter(this, void 0, void 0, function*() {
                    let result;
                    try {
                        result = yield $a25fac58e5e8c708$export$eb35bd557f596021(position, this.editor.getModel(), {
                            triggerKind: triggerKind,
                            selectedSuggestionInfo: undefined
                        }, token);
                    } catch (e) {
                        (0, $g0782.onUnexpectedError)(e);
                        return;
                    }
                    if (token.isCancellationRequested) return;
                    this.cache.setValue(this.editor, result, triggerKind);
                    this.onDidChangeEmitter.fire();
                }));
            const operation = new $a25fac58e5e8c708$export$fcd951c1cbced25(promise, triggerKind);
            this.updateOperation.value = operation;
            yield promise;
            if (this.updateOperation.value === operation) this.updateOperation.clear();
        });
    }
    takeOwnership(disposable) {
        this._register(disposable);
    }
    commitCurrentCompletion() {
        if (!this.ghostText) // No ghost text was shown for this completion.
        // Thus, we don't want to commit anything.
        return;
        const completion = this.currentCompletion;
        if (completion) this.commit(completion);
    }
    commit(completion) {
        // Mark the cache as stale, but don't dispose it yet,
        // otherwise command args might get disposed.
        const cache = this.cache.clearAndLeak();
        this.editor.executeEdits("inlineSuggestion.accept", [
            (0, $13fPA.EditOperation).replaceMove(completion.range, completion.text)
        ]);
        if (completion.command) this.commandService.executeCommand(completion.command.id, ...completion.command.arguments || []).finally(()=>{
            cache === null || cache === void 0 || cache.dispose();
        }).then(undefined, (0, $g0782.onUnexpectedExternalError));
        else cache === null || cache === void 0 || cache.dispose();
        this.onDidChangeEmitter.fire();
    }
    constructor(editor, triggerPosition, shouldUpdate, commandService, cache, initialTriggerKind){
        super(editor);
        this.triggerPosition = triggerPosition;
        this.shouldUpdate = shouldUpdate;
        this.commandService = commandService;
        this.cache = cache;
        this.initialTriggerKind = initialTriggerKind;
        this.minReservedLineCount = 0;
        this.updateOperation = this._register(new (0, $atiRx.MutableDisposable)());
        this.updateSoon = this._register(new (0, $eFOsn.RunOnceScheduler)(()=>{
            let triggerKind = this.initialTriggerKind;
            // All subsequent triggers are automatic.
            this.initialTriggerKind = (0, $eKhCe.InlineCompletionTriggerKind).Automatic;
            return this.update(triggerKind);
        }, 50));
        //#region Selection
        // We use a semantic id to track the selection even if the cache changes.
        this.currentlySelectedCompletionId = undefined;
        let lastCompletionItem = undefined;
        this._register(this.onDidChange(()=>{
            const currentCompletion = this.currentCompletion;
            if (currentCompletion && currentCompletion.sourceInlineCompletion !== lastCompletionItem) {
                lastCompletionItem = currentCompletion.sourceInlineCompletion;
                const provider = currentCompletion.sourceProvider;
                if (provider.handleItemDidShow) provider.handleItemDidShow(currentCompletion.sourceInlineCompletions, lastCompletionItem);
            }
        }));
        this._register((0, $atiRx.toDisposable)(()=>{
            this.cache.clear();
        }));
        this._register(this.editor.onDidChangeCursorPosition((e)=>{
            if (this.cache.value) this.onDidChangeEmitter.fire();
        }));
        this._register(this.editor.onDidChangeModelContent((e)=>{
            this.scheduleAutomaticUpdate();
        }));
        this._register((0, $eKhCe.InlineCompletionsProviderRegistry).onDidChange(()=>{
            this.updateSoon.schedule();
        }));
        this.scheduleAutomaticUpdate();
    }
}
class $a25fac58e5e8c708$export$fcd951c1cbced25 {
    dispose() {
        this.promise.cancel();
    }
    constructor(promise, triggerKind){
        this.promise = promise;
        this.triggerKind = triggerKind;
    }
}
class $a25fac58e5e8c708$export$f1e185e738fbe6 extends (0, $atiRx.Disposable) {
    constructor(editor, completionsSource, onChange, triggerKind){
        super();
        this.triggerKind = triggerKind;
        const decorationIds = editor.deltaDecorations([], completionsSource.items.map((i)=>({
                range: i.range,
                options: {
                    description: "inline-completion-tracking-range"
                }
            })));
        this._register((0, $atiRx.toDisposable)(()=>{
            editor.deltaDecorations(decorationIds, []);
        }));
        this.completions = completionsSource.items.map((c, idx)=>new $a25fac58e5e8c708$var$CachedInlineCompletion(c, decorationIds[idx]));
        this._register(editor.onDidChangeModelContent(()=>{
            let hasChanged = false;
            const model = editor.getModel();
            for (const c of this.completions){
                const newRange = model.getDecorationRange(c.decorationId);
                if (!newRange) {
                    (0, $g0782.onUnexpectedError)(new Error("Decoration has no range"));
                    continue;
                }
                if (!c.synchronizedRange.equalsRange(newRange)) {
                    hasChanged = true;
                    c.synchronizedRange = newRange;
                }
            }
            if (hasChanged) onChange();
        }));
        this._register(completionsSource);
    }
}
class $a25fac58e5e8c708$var$CachedInlineCompletion {
    toLiveInlineCompletion() {
        return {
            text: this.inlineCompletion.text,
            range: this.synchronizedRange,
            command: this.inlineCompletion.command,
            sourceProvider: this.inlineCompletion.sourceProvider,
            sourceInlineCompletions: this.inlineCompletion.sourceInlineCompletions,
            sourceInlineCompletion: this.inlineCompletion.sourceInlineCompletion
        };
    }
    constructor(inlineCompletion, decorationId){
        this.inlineCompletion = inlineCompletion;
        this.decorationId = decorationId;
        this.semanticId = JSON.stringify({
            text: this.inlineCompletion.text,
            startLine: this.inlineCompletion.range.startLineNumber,
            startColumn: this.inlineCompletion.range.startColumn,
            command: this.inlineCompletion.command
        });
        this.synchronizedRange = inlineCompletion.range;
    }
}
function $a25fac58e5e8c708$var$getDefaultRange(position, model) {
    const word = model.getWordAtPosition(position);
    const maxColumn = model.getLineMaxColumn(position.lineNumber);
    // By default, always replace up until the end of the current line.
    // This default might be subject to change!
    return word ? new (0, $3HpR4.Range)(position.lineNumber, word.startColumn, position.lineNumber, maxColumn) : (0, $3HpR4.Range).fromPositions(position, position.with(undefined, maxColumn));
}
function $a25fac58e5e8c708$export$eb35bd557f596021(position, model, context, token = (0, $gnEXx.CancellationToken).None) {
    return $a25fac58e5e8c708$var$__awaiter(this, void 0, void 0, function*() {
        const defaultReplaceRange = $a25fac58e5e8c708$var$getDefaultRange(position, model);
        const providers = (0, $eKhCe.InlineCompletionsProviderRegistry).all(model);
        const results = yield Promise.all(providers.map((provider)=>$a25fac58e5e8c708$var$__awaiter(this, void 0, void 0, function*() {
                const completions = yield provider.provideInlineCompletions(model, position, context, token);
                return {
                    completions: completions,
                    provider: provider,
                    dispose: ()=>{
                        if (completions) provider.freeInlineCompletions(completions);
                    }
                };
            })));
        const itemsByHash = new Map();
        for (const result of results){
            const completions = result.completions;
            if (completions) for (const item of completions.items.map((item)=>({
                    text: item.text,
                    range: item.range ? (0, $3HpR4.Range).lift(item.range) : defaultReplaceRange,
                    command: item.command,
                    sourceProvider: result.provider,
                    sourceInlineCompletions: completions,
                    sourceInlineCompletion: item
                }))){
                if (item.range.startLineNumber !== item.range.endLineNumber) continue;
                itemsByHash.set(JSON.stringify({
                    text: item.text,
                    range: item.range
                }), item);
            }
        }
        return {
            items: [
                ...itemsByHash.values()
            ],
            dispose: ()=>{
                for (const result of results)result.dispose();
            }
        };
    });
}
function $a25fac58e5e8c708$export$5a88d2c8f5e7fefc(model, inlineCompletion) {
    if (!inlineCompletion) return inlineCompletion;
    const valueToReplace = model.getValueInRange(inlineCompletion.range);
    const commonPrefixLen = (0, $9TEeL.commonPrefixLength)(valueToReplace, inlineCompletion.text);
    const startOffset = model.getOffsetAt(inlineCompletion.range.getStartPosition()) + commonPrefixLen;
    const start = model.getPositionAt(startOffset);
    const remainingValueToReplace = valueToReplace.substr(commonPrefixLen);
    const commonSuffixLen = (0, $9TEeL.commonSuffixLength)(remainingValueToReplace, inlineCompletion.text);
    const end = model.getPositionAt(Math.max(startOffset, model.getOffsetAt(inlineCompletion.range.getEndPosition()) - commonSuffixLen));
    return {
        range: (0, $3HpR4.Range).fromPositions(start, end),
        text: inlineCompletion.text.substr(commonPrefixLen, inlineCompletion.text.length - commonPrefixLen - commonSuffixLen)
    };
}


var $ec51719bdf97267f$exports = {};

$parcel$export($ec51719bdf97267f$exports, "SuggestWidgetPreviewModel", function () { return $ec51719bdf97267f$export$ebdca630db4b64a2; }, function (v) { return $ec51719bdf97267f$export$ebdca630db4b64a2 = v; });

var $eFOsn = parcelRequire("eFOsn");

var $g0782 = parcelRequire("g0782");

var $atiRx = parcelRequire("atiRx");

var $eKhCe = parcelRequire("eKhCe");




var $eFOsn = parcelRequire("eFOsn");

var $fSvkC = parcelRequire("fSvkC");

var $atiRx = parcelRequire("atiRx");

var $8qXsZ = parcelRequire("8qXsZ");

var $3HpR4 = parcelRequire("3HpR4");
class $03fe7e83485db5e8$export$2da42535f3a161df {
    static isDigitCharacter(ch) {
        return ch >= 48 /* Digit0 */  && ch <= 57 /* Digit9 */ ;
    }
    static isVariableCharacter(ch) {
        return ch === 95 /* Underline */  || ch >= 97 /* a */  && ch <= 122 /* z */  || ch >= 65 /* A */  && ch <= 90 /* Z */ ;
    }
    text(value) {
        this.value = value;
        this.pos = 0;
    }
    tokenText(token) {
        return this.value.substr(token.pos, token.len);
    }
    next() {
        if (this.pos >= this.value.length) return {
            type: 14 /* EOF */ ,
            pos: this.pos,
            len: 0
        };
        let pos = this.pos;
        let len = 0;
        let ch = this.value.charCodeAt(pos);
        let type;
        // static types
        type = $03fe7e83485db5e8$export$2da42535f3a161df._table[ch];
        if (typeof type === "number") {
            this.pos += 1;
            return {
                type: type,
                pos: pos,
                len: 1
            };
        }
        // number
        if ($03fe7e83485db5e8$export$2da42535f3a161df.isDigitCharacter(ch)) {
            type = 8 /* Int */ ;
            do {
                len += 1;
                ch = this.value.charCodeAt(pos + len);
            }while ($03fe7e83485db5e8$export$2da42535f3a161df.isDigitCharacter(ch));
            this.pos += len;
            return {
                type: type,
                pos: pos,
                len: len
            };
        }
        // variable name
        if ($03fe7e83485db5e8$export$2da42535f3a161df.isVariableCharacter(ch)) {
            type = 9 /* VariableName */ ;
            do ch = this.value.charCodeAt(pos + ++len);
            while ($03fe7e83485db5e8$export$2da42535f3a161df.isVariableCharacter(ch) || $03fe7e83485db5e8$export$2da42535f3a161df.isDigitCharacter(ch));
            this.pos += len;
            return {
                type: type,
                pos: pos,
                len: len
            };
        }
        // format
        type = 10 /* Format */ ;
        do {
            len += 1;
            ch = this.value.charCodeAt(pos + len);
        }while (!isNaN(ch) && typeof $03fe7e83485db5e8$export$2da42535f3a161df._table[ch] === "undefined" // not static token
         && !$03fe7e83485db5e8$export$2da42535f3a161df.isDigitCharacter(ch) // not number
         && !$03fe7e83485db5e8$export$2da42535f3a161df.isVariableCharacter(ch) // not variable
        );
        this.pos += len;
        return {
            type: type,
            pos: pos,
            len: len
        };
    }
    constructor(){
        this.value = "";
        this.pos = 0;
    }
}
$03fe7e83485db5e8$export$2da42535f3a161df._table = {
    [36 /* DollarSign */ ]: 0 /* Dollar */ ,
    [58 /* Colon */ ]: 1 /* Colon */ ,
    [44 /* Comma */ ]: 2 /* Comma */ ,
    [123 /* OpenCurlyBrace */ ]: 3 /* CurlyOpen */ ,
    [125 /* CloseCurlyBrace */ ]: 4 /* CurlyClose */ ,
    [92 /* Backslash */ ]: 5 /* Backslash */ ,
    [47 /* Slash */ ]: 6 /* Forwardslash */ ,
    [124 /* Pipe */ ]: 7 /* Pipe */ ,
    [43 /* Plus */ ]: 11 /* Plus */ ,
    [45 /* Dash */ ]: 12 /* Dash */ ,
    [63 /* QuestionMark */ ]: 13 /* QuestionMark */ 
};
class $03fe7e83485db5e8$export$e98856a975cab58e {
    appendChild(child) {
        if (child instanceof $03fe7e83485db5e8$export$5f1af8db9871e1d6 && this._children[this._children.length - 1] instanceof $03fe7e83485db5e8$export$5f1af8db9871e1d6) // this and previous child are text -> merge them
        this._children[this._children.length - 1].value += child.value;
        else {
            // normal adoption of child
            child.parent = this;
            this._children.push(child);
        }
        return this;
    }
    replace(child, others) {
        const { parent: parent  } = child;
        const idx = parent.children.indexOf(child);
        const newChildren = parent.children.slice(0);
        newChildren.splice(idx, 1, ...others);
        parent._children = newChildren;
        (function _fixParent(children, parent) {
            for (const child of children){
                child.parent = parent;
                _fixParent(child.children, child);
            }
        })(others, parent);
    }
    get children() {
        return this._children;
    }
    get snippet() {
        let candidate = this;
        while(true){
            if (!candidate) return undefined;
            if (candidate instanceof $03fe7e83485db5e8$export$263a781ea79d9666) return candidate;
            candidate = candidate.parent;
        }
    }
    toString() {
        return this.children.reduce((prev, cur)=>prev + cur.toString(), "");
    }
    len() {
        return 0;
    }
    constructor(){
        this._children = [];
    }
}
class $03fe7e83485db5e8$export$5f1af8db9871e1d6 extends $03fe7e83485db5e8$export$e98856a975cab58e {
    toString() {
        return this.value;
    }
    len() {
        return this.value.length;
    }
    clone() {
        return new $03fe7e83485db5e8$export$5f1af8db9871e1d6(this.value);
    }
    constructor(value){
        super();
        this.value = value;
    }
}
class $03fe7e83485db5e8$export$bdd004e571fcb996 extends $03fe7e83485db5e8$export$e98856a975cab58e {
}
class $03fe7e83485db5e8$export$84712d0562a614b8 extends $03fe7e83485db5e8$export$bdd004e571fcb996 {
    static compareByIndex(a, b) {
        if (a.index === b.index) return 0;
        else if (a.isFinalTabstop) return 1;
        else if (b.isFinalTabstop) return -1;
        else if (a.index < b.index) return -1;
        else if (a.index > b.index) return 1;
        else return 0;
    }
    get isFinalTabstop() {
        return this.index === 0;
    }
    get choice() {
        return this._children.length === 1 && this._children[0] instanceof $03fe7e83485db5e8$export$32a7462f6a06cbd5 ? this._children[0] : undefined;
    }
    clone() {
        let ret = new $03fe7e83485db5e8$export$84712d0562a614b8(this.index);
        if (this.transform) ret.transform = this.transform.clone();
        ret._children = this.children.map((child)=>child.clone());
        return ret;
    }
    constructor(index){
        super();
        this.index = index;
    }
}
class $03fe7e83485db5e8$export$32a7462f6a06cbd5 extends $03fe7e83485db5e8$export$e98856a975cab58e {
    appendChild(marker) {
        if (marker instanceof $03fe7e83485db5e8$export$5f1af8db9871e1d6) {
            marker.parent = this;
            this.options.push(marker);
        }
        return this;
    }
    toString() {
        return this.options[0].value;
    }
    len() {
        return this.options[0].len();
    }
    clone() {
        let ret = new $03fe7e83485db5e8$export$32a7462f6a06cbd5();
        this.options.forEach(ret.appendChild, ret);
        return ret;
    }
    constructor(){
        super(...arguments);
        this.options = [];
    }
}
class $03fe7e83485db5e8$export$563a914cafbdc389 extends $03fe7e83485db5e8$export$e98856a975cab58e {
    resolve(value) {
        const _this = this;
        let didMatch = false;
        let ret = value.replace(this.regexp, function() {
            didMatch = true;
            return _this._replace(Array.prototype.slice.call(arguments, 0, -2));
        });
        // when the regex didn't match and when the transform has
        // else branches, then run those
        if (!didMatch && this._children.some((child)=>child instanceof $03fe7e83485db5e8$export$917965fbd9eed82f && Boolean(child.elseValue))) ret = this._replace([]);
        return ret;
    }
    _replace(groups) {
        let ret = "";
        for (const marker of this._children)if (marker instanceof $03fe7e83485db5e8$export$917965fbd9eed82f) {
            let value = groups[marker.index] || "";
            value = marker.resolve(value);
            ret += value;
        } else ret += marker.toString();
        return ret;
    }
    toString() {
        return "";
    }
    clone() {
        let ret = new $03fe7e83485db5e8$export$563a914cafbdc389();
        ret.regexp = new RegExp(this.regexp.source, "" + (this.regexp.ignoreCase ? "i" : "") + (this.regexp.global ? "g" : ""));
        ret._children = this.children.map((child)=>child.clone());
        return ret;
    }
    constructor(){
        super(...arguments);
        this.regexp = new RegExp("");
    }
}
class $03fe7e83485db5e8$export$917965fbd9eed82f extends $03fe7e83485db5e8$export$e98856a975cab58e {
    resolve(value) {
        if (this.shorthandName === "upcase") return !value ? "" : value.toLocaleUpperCase();
        else if (this.shorthandName === "downcase") return !value ? "" : value.toLocaleLowerCase();
        else if (this.shorthandName === "capitalize") return !value ? "" : value[0].toLocaleUpperCase() + value.substr(1);
        else if (this.shorthandName === "pascalcase") return !value ? "" : this._toPascalCase(value);
        else if (this.shorthandName === "camelcase") return !value ? "" : this._toCamelCase(value);
        else if (Boolean(value) && typeof this.ifValue === "string") return this.ifValue;
        else if (!Boolean(value) && typeof this.elseValue === "string") return this.elseValue;
        else return value || "";
    }
    _toPascalCase(value) {
        const match = value.match(/[a-z0-9]+/gi);
        if (!match) return value;
        return match.map((word)=>{
            return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase();
        }).join("");
    }
    _toCamelCase(value) {
        const match = value.match(/[a-z0-9]+/gi);
        if (!match) return value;
        return match.map((word, index)=>{
            if (index === 0) return word.toLowerCase();
            else return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase();
        }).join("");
    }
    clone() {
        let ret = new $03fe7e83485db5e8$export$917965fbd9eed82f(this.index, this.shorthandName, this.ifValue, this.elseValue);
        return ret;
    }
    constructor(index, shorthandName, ifValue, elseValue){
        super();
        this.index = index;
        this.shorthandName = shorthandName;
        this.ifValue = ifValue;
        this.elseValue = elseValue;
    }
}
class $03fe7e83485db5e8$export$c867a5c9595a1350 extends $03fe7e83485db5e8$export$bdd004e571fcb996 {
    resolve(resolver) {
        let value = resolver.resolve(this);
        if (this.transform) value = this.transform.resolve(value || "");
        if (value !== undefined) {
            this._children = [
                new $03fe7e83485db5e8$export$5f1af8db9871e1d6(value)
            ];
            return true;
        }
        return false;
    }
    clone() {
        const ret = new $03fe7e83485db5e8$export$c867a5c9595a1350(this.name);
        if (this.transform) ret.transform = this.transform.clone();
        ret._children = this.children.map((child)=>child.clone());
        return ret;
    }
    constructor(name){
        super();
        this.name = name;
    }
}
function $03fe7e83485db5e8$var$walk(marker, visitor) {
    const stack = [
        ...marker
    ];
    while(stack.length > 0){
        const marker1 = stack.shift();
        const recurse = visitor(marker1);
        if (!recurse) break;
        stack.unshift(...marker1.children);
    }
}
class $03fe7e83485db5e8$export$263a781ea79d9666 extends $03fe7e83485db5e8$export$e98856a975cab58e {
    get placeholderInfo() {
        if (!this._placeholders) {
            // fill in placeholders
            let all = [];
            let last;
            this.walk(function(candidate) {
                if (candidate instanceof $03fe7e83485db5e8$export$84712d0562a614b8) {
                    all.push(candidate);
                    last = !last || last.index < candidate.index ? candidate : last;
                }
                return true;
            });
            this._placeholders = {
                all: all,
                last: last
            };
        }
        return this._placeholders;
    }
    get placeholders() {
        const { all: all  } = this.placeholderInfo;
        return all;
    }
    offset(marker) {
        let pos = 0;
        let found = false;
        this.walk((candidate)=>{
            if (candidate === marker) {
                found = true;
                return false;
            }
            pos += candidate.len();
            return true;
        });
        if (!found) return -1;
        return pos;
    }
    fullLen(marker) {
        let ret = 0;
        $03fe7e83485db5e8$var$walk([
            marker
        ], (marker)=>{
            ret += marker.len();
            return true;
        });
        return ret;
    }
    enclosingPlaceholders(placeholder) {
        let ret = [];
        let { parent: parent  } = placeholder;
        while(parent){
            if (parent instanceof $03fe7e83485db5e8$export$84712d0562a614b8) ret.push(parent);
            parent = parent.parent;
        }
        return ret;
    }
    resolveVariables(resolver) {
        this.walk((candidate)=>{
            if (candidate instanceof $03fe7e83485db5e8$export$c867a5c9595a1350) {
                if (candidate.resolve(resolver)) this._placeholders = undefined;
            }
            return true;
        });
        return this;
    }
    appendChild(child) {
        this._placeholders = undefined;
        return super.appendChild(child);
    }
    replace(child, others) {
        this._placeholders = undefined;
        return super.replace(child, others);
    }
    clone() {
        let ret = new $03fe7e83485db5e8$export$263a781ea79d9666();
        this._children = this.children.map((child)=>child.clone());
        return ret;
    }
    walk(visitor) {
        $03fe7e83485db5e8$var$walk(this.children, visitor);
    }
}
class $03fe7e83485db5e8$export$e073bfe8583e8fbf {
    static escape(value) {
        return value.replace(/\$|}|\\/g, "\\$&");
    }
    static guessNeedsClipboard(template) {
        return /\${?CLIPBOARD/.test(template);
    }
    parse(value, insertFinalTabstop, enforceFinalTabstop) {
        this._scanner.text(value);
        this._token = this._scanner.next();
        const snippet = new $03fe7e83485db5e8$export$263a781ea79d9666();
        while(this._parse(snippet));
        // fill in values for placeholders. the first placeholder of an index
        // that has a value defines the value for all placeholders with that index
        const placeholderDefaultValues = new Map();
        const incompletePlaceholders = [];
        let placeholderCount = 0;
        snippet.walk((marker)=>{
            if (marker instanceof $03fe7e83485db5e8$export$84712d0562a614b8) {
                placeholderCount += 1;
                if (marker.isFinalTabstop) placeholderDefaultValues.set(0, undefined);
                else if (!placeholderDefaultValues.has(marker.index) && marker.children.length > 0) placeholderDefaultValues.set(marker.index, marker.children);
                else incompletePlaceholders.push(marker);
            }
            return true;
        });
        for (const placeholder of incompletePlaceholders){
            const defaultValues = placeholderDefaultValues.get(placeholder.index);
            if (defaultValues) {
                const clone = new $03fe7e83485db5e8$export$84712d0562a614b8(placeholder.index);
                clone.transform = placeholder.transform;
                for (const child of defaultValues)clone.appendChild(child.clone());
                snippet.replace(placeholder, [
                    clone
                ]);
            }
        }
        if (!enforceFinalTabstop) enforceFinalTabstop = placeholderCount > 0 && insertFinalTabstop;
        if (!placeholderDefaultValues.has(0) && enforceFinalTabstop) // the snippet uses placeholders but has no
        // final tabstop defined -> insert at the end
        snippet.appendChild(new $03fe7e83485db5e8$export$84712d0562a614b8(0));
        return snippet;
    }
    _accept(type, value) {
        if (type === undefined || this._token.type === type) {
            let ret = !value ? true : this._scanner.tokenText(this._token);
            this._token = this._scanner.next();
            return ret;
        }
        return false;
    }
    _backTo(token) {
        this._scanner.pos = token.pos + token.len;
        this._token = token;
        return false;
    }
    _until(type) {
        const start = this._token;
        while(this._token.type !== type){
            if (this._token.type === 14 /* EOF */ ) return false;
            else if (this._token.type === 5 /* Backslash */ ) {
                const nextToken = this._scanner.next();
                if (nextToken.type !== 0 /* Dollar */  && nextToken.type !== 4 /* CurlyClose */  && nextToken.type !== 5 /* Backslash */ ) return false;
            }
            this._token = this._scanner.next();
        }
        const value = this._scanner.value.substring(start.pos, this._token.pos).replace(/\\(\$|}|\\)/g, "$1");
        this._token = this._scanner.next();
        return value;
    }
    _parse(marker) {
        return this._parseEscaped(marker) || this._parseTabstopOrVariableName(marker) || this._parseComplexPlaceholder(marker) || this._parseComplexVariable(marker) || this._parseAnything(marker);
    }
    // \$, \\, \} -> just text
    _parseEscaped(marker) {
        let value;
        if (value = this._accept(5 /* Backslash */ , true)) {
            // saw a backslash, append escaped token or that backslash
            value = this._accept(0 /* Dollar */ , true) || this._accept(4 /* CurlyClose */ , true) || this._accept(5 /* Backslash */ , true) || value;
            marker.appendChild(new $03fe7e83485db5e8$export$5f1af8db9871e1d6(value));
            return true;
        }
        return false;
    }
    // $foo -> variable, $1 -> tabstop
    _parseTabstopOrVariableName(parent) {
        let value;
        const token = this._token;
        const match = this._accept(0 /* Dollar */ ) && (value = this._accept(9 /* VariableName */ , true) || this._accept(8 /* Int */ , true));
        if (!match) return this._backTo(token);
        parent.appendChild(/^\d+$/.test(value) ? new $03fe7e83485db5e8$export$84712d0562a614b8(Number(value)) : new $03fe7e83485db5e8$export$c867a5c9595a1350(value));
        return true;
    }
    // ${1:<children>}, ${1} -> placeholder
    _parseComplexPlaceholder(parent) {
        let index;
        const token = this._token;
        const match = this._accept(0 /* Dollar */ ) && this._accept(3 /* CurlyOpen */ ) && (index = this._accept(8 /* Int */ , true));
        if (!match) return this._backTo(token);
        const placeholder = new $03fe7e83485db5e8$export$84712d0562a614b8(Number(index));
        if (this._accept(1 /* Colon */ )) // ${1:<children>}
        while(true){
            // ...} -> done
            if (this._accept(4 /* CurlyClose */ )) {
                parent.appendChild(placeholder);
                return true;
            }
            if (this._parse(placeholder)) continue;
            // fallback
            parent.appendChild(new $03fe7e83485db5e8$export$5f1af8db9871e1d6("${" + index + ":"));
            placeholder.children.forEach(parent.appendChild, parent);
            return true;
        }
        else if (placeholder.index > 0 && this._accept(7 /* Pipe */ )) {
            // ${1|one,two,three|}
            const choice = new $03fe7e83485db5e8$export$32a7462f6a06cbd5();
            while(true){
                if (this._parseChoiceElement(choice)) {
                    if (this._accept(2 /* Comma */ )) continue;
                    if (this._accept(7 /* Pipe */ )) {
                        placeholder.appendChild(choice);
                        if (this._accept(4 /* CurlyClose */ )) {
                            // ..|} -> done
                            parent.appendChild(placeholder);
                            return true;
                        }
                    }
                }
                this._backTo(token);
                return false;
            }
        } else if (this._accept(6 /* Forwardslash */ )) {
            // ${1/<regex>/<format>/<options>}
            if (this._parseTransform(placeholder)) {
                parent.appendChild(placeholder);
                return true;
            }
            this._backTo(token);
            return false;
        } else if (this._accept(4 /* CurlyClose */ )) {
            // ${1}
            parent.appendChild(placeholder);
            return true;
        } else // ${1 <- missing curly or colon
        return this._backTo(token);
    }
    _parseChoiceElement(parent) {
        const token = this._token;
        const values = [];
        while(true){
            if (this._token.type === 2 /* Comma */  || this._token.type === 7 /* Pipe */ ) break;
            let value;
            if (value = this._accept(5 /* Backslash */ , true)) // \, \|, or \\
            value = this._accept(2 /* Comma */ , true) || this._accept(7 /* Pipe */ , true) || this._accept(5 /* Backslash */ , true) || value;
            else value = this._accept(undefined, true);
            if (!value) {
                // EOF
                this._backTo(token);
                return false;
            }
            values.push(value);
        }
        if (values.length === 0) {
            this._backTo(token);
            return false;
        }
        parent.appendChild(new $03fe7e83485db5e8$export$5f1af8db9871e1d6(values.join("")));
        return true;
    }
    // ${foo:<children>}, ${foo} -> variable
    _parseComplexVariable(parent) {
        let name;
        const token = this._token;
        const match = this._accept(0 /* Dollar */ ) && this._accept(3 /* CurlyOpen */ ) && (name = this._accept(9 /* VariableName */ , true));
        if (!match) return this._backTo(token);
        const variable = new $03fe7e83485db5e8$export$c867a5c9595a1350(name);
        if (this._accept(1 /* Colon */ )) // ${foo:<children>}
        while(true){
            // ...} -> done
            if (this._accept(4 /* CurlyClose */ )) {
                parent.appendChild(variable);
                return true;
            }
            if (this._parse(variable)) continue;
            // fallback
            parent.appendChild(new $03fe7e83485db5e8$export$5f1af8db9871e1d6("${" + name + ":"));
            variable.children.forEach(parent.appendChild, parent);
            return true;
        }
        else if (this._accept(6 /* Forwardslash */ )) {
            // ${foo/<regex>/<format>/<options>}
            if (this._parseTransform(variable)) {
                parent.appendChild(variable);
                return true;
            }
            this._backTo(token);
            return false;
        } else if (this._accept(4 /* CurlyClose */ )) {
            // ${foo}
            parent.appendChild(variable);
            return true;
        } else // ${foo <- missing curly or colon
        return this._backTo(token);
    }
    _parseTransform(parent) {
        // ...<regex>/<format>/<options>}
        let transform = new $03fe7e83485db5e8$export$563a914cafbdc389();
        let regexValue = "";
        let regexOptions = "";
        // (1) /regex
        while(true){
            if (this._accept(6 /* Forwardslash */ )) break;
            let escaped;
            if (escaped = this._accept(5 /* Backslash */ , true)) {
                escaped = this._accept(6 /* Forwardslash */ , true) || escaped;
                regexValue += escaped;
                continue;
            }
            if (this._token.type !== 14 /* EOF */ ) {
                regexValue += this._accept(undefined, true);
                continue;
            }
            return false;
        }
        // (2) /format
        while(true){
            if (this._accept(6 /* Forwardslash */ )) break;
            let escaped1;
            if (escaped1 = this._accept(5 /* Backslash */ , true)) {
                escaped1 = this._accept(5 /* Backslash */ , true) || this._accept(6 /* Forwardslash */ , true) || escaped1;
                transform.appendChild(new $03fe7e83485db5e8$export$5f1af8db9871e1d6(escaped1));
                continue;
            }
            if (this._parseFormatString(transform) || this._parseAnything(transform)) continue;
            return false;
        }
        // (3) /option
        while(true){
            if (this._accept(4 /* CurlyClose */ )) break;
            if (this._token.type !== 14 /* EOF */ ) {
                regexOptions += this._accept(undefined, true);
                continue;
            }
            return false;
        }
        try {
            transform.regexp = new RegExp(regexValue, regexOptions);
        } catch (e) {
            // invalid regexp
            return false;
        }
        parent.transform = transform;
        return true;
    }
    _parseFormatString(parent) {
        const token = this._token;
        if (!this._accept(0 /* Dollar */ )) return false;
        let complex = false;
        if (this._accept(3 /* CurlyOpen */ )) complex = true;
        let index = this._accept(8 /* Int */ , true);
        if (!index) {
            this._backTo(token);
            return false;
        } else if (!complex) {
            // $1
            parent.appendChild(new $03fe7e83485db5e8$export$917965fbd9eed82f(Number(index)));
            return true;
        } else if (this._accept(4 /* CurlyClose */ )) {
            // ${1}
            parent.appendChild(new $03fe7e83485db5e8$export$917965fbd9eed82f(Number(index)));
            return true;
        } else if (!this._accept(1 /* Colon */ )) {
            this._backTo(token);
            return false;
        }
        if (this._accept(6 /* Forwardslash */ )) {
            // ${1:/upcase}
            let shorthand = this._accept(9 /* VariableName */ , true);
            if (!shorthand || !this._accept(4 /* CurlyClose */ )) {
                this._backTo(token);
                return false;
            } else {
                parent.appendChild(new $03fe7e83485db5e8$export$917965fbd9eed82f(Number(index), shorthand));
                return true;
            }
        } else if (this._accept(11 /* Plus */ )) {
            // ${1:+<if>}
            let ifValue = this._until(4 /* CurlyClose */ );
            if (ifValue) {
                parent.appendChild(new $03fe7e83485db5e8$export$917965fbd9eed82f(Number(index), undefined, ifValue, undefined));
                return true;
            }
        } else if (this._accept(12 /* Dash */ )) {
            // ${2:-<else>}
            let elseValue = this._until(4 /* CurlyClose */ );
            if (elseValue) {
                parent.appendChild(new $03fe7e83485db5e8$export$917965fbd9eed82f(Number(index), undefined, undefined, elseValue));
                return true;
            }
        } else if (this._accept(13 /* QuestionMark */ )) {
            // ${2:?<if>:<else>}
            let ifValue1 = this._until(1 /* Colon */ );
            if (ifValue1) {
                let elseValue1 = this._until(4 /* CurlyClose */ );
                if (elseValue1) {
                    parent.appendChild(new $03fe7e83485db5e8$export$917965fbd9eed82f(Number(index), undefined, ifValue1, elseValue1));
                    return true;
                }
            }
        } else {
            // ${1:<else>}
            let elseValue2 = this._until(4 /* CurlyClose */ );
            if (elseValue2) {
                parent.appendChild(new $03fe7e83485db5e8$export$917965fbd9eed82f(Number(index), undefined, undefined, elseValue2));
                return true;
            }
        }
        this._backTo(token);
        return false;
    }
    _parseAnything(marker) {
        if (this._token.type !== 14 /* EOF */ ) {
            marker.appendChild(new $03fe7e83485db5e8$export$5f1af8db9871e1d6(this._scanner.tokenText(this._token)));
            this._accept(undefined);
            return true;
        }
        return false;
    }
    constructor(){
        this._scanner = new $03fe7e83485db5e8$export$2da42535f3a161df();
        this._token = {
            type: 14 /* EOF */ ,
            pos: 0,
            len: 0
        };
    }
}



var $4xCD7 = parcelRequire("4xCD7");

var $atiRx = parcelRequire("atiRx");

var $9TEeL = parcelRequire("9TEeL");


var $13fPA = parcelRequire("13fPA");

var $3HpR4 = parcelRequire("3HpR4");

var $cz0c7 = parcelRequire("cz0c7");

var $g88WD = parcelRequire("g88WD");

var $4znCf = parcelRequire("4znCf");

var $i92hI = parcelRequire("i92hI");



var $fjPby = parcelRequire("fjPby");

var $aMhG1 = parcelRequire("aMhG1");

var $9TEeL = parcelRequire("9TEeL");
// prep-work
const $9412c4d53ec4abad$var$_data = new Uint8Array(16);
const $9412c4d53ec4abad$var$_hex = [];
for(let i = 0; i < 256; i++)$9412c4d53ec4abad$var$_hex.push(i.toString(16).padStart(2, "0"));
// todo@jrieken - with node@15 crypto#getRandomBytes is available everywhere, https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues#browser_compatibility
let $9412c4d53ec4abad$var$_fillRandomValues;
if (typeof crypto === "object" && typeof crypto.getRandomValues === "function") // browser
$9412c4d53ec4abad$var$_fillRandomValues = crypto.getRandomValues.bind(crypto);
else $9412c4d53ec4abad$var$_fillRandomValues = function(bucket) {
    for(let i = 0; i < bucket.length; i++)bucket[i] = Math.floor(Math.random() * 256);
    return bucket;
};
function $9412c4d53ec4abad$export$1c3aefb711c3a4cc() {
    // get data
    $9412c4d53ec4abad$var$_fillRandomValues($9412c4d53ec4abad$var$_data);
    // set version bits
    $9412c4d53ec4abad$var$_data[6] = $9412c4d53ec4abad$var$_data[6] & 0x0f | 0x40;
    $9412c4d53ec4abad$var$_data[8] = $9412c4d53ec4abad$var$_data[8] & 0x3f | 0x80;
    // print as string
    let i = 0;
    let result = "";
    result += $9412c4d53ec4abad$var$_hex[$9412c4d53ec4abad$var$_data[i++]];
    result += $9412c4d53ec4abad$var$_hex[$9412c4d53ec4abad$var$_data[i++]];
    result += $9412c4d53ec4abad$var$_hex[$9412c4d53ec4abad$var$_data[i++]];
    result += $9412c4d53ec4abad$var$_hex[$9412c4d53ec4abad$var$_data[i++]];
    result += "-";
    result += $9412c4d53ec4abad$var$_hex[$9412c4d53ec4abad$var$_data[i++]];
    result += $9412c4d53ec4abad$var$_hex[$9412c4d53ec4abad$var$_data[i++]];
    result += "-";
    result += $9412c4d53ec4abad$var$_hex[$9412c4d53ec4abad$var$_data[i++]];
    result += $9412c4d53ec4abad$var$_hex[$9412c4d53ec4abad$var$_data[i++]];
    result += "-";
    result += $9412c4d53ec4abad$var$_hex[$9412c4d53ec4abad$var$_data[i++]];
    result += $9412c4d53ec4abad$var$_hex[$9412c4d53ec4abad$var$_data[i++]];
    result += "-";
    result += $9412c4d53ec4abad$var$_hex[$9412c4d53ec4abad$var$_data[i++]];
    result += $9412c4d53ec4abad$var$_hex[$9412c4d53ec4abad$var$_data[i++]];
    result += $9412c4d53ec4abad$var$_hex[$9412c4d53ec4abad$var$_data[i++]];
    result += $9412c4d53ec4abad$var$_hex[$9412c4d53ec4abad$var$_data[i++]];
    result += $9412c4d53ec4abad$var$_hex[$9412c4d53ec4abad$var$_data[i++]];
    result += $9412c4d53ec4abad$var$_hex[$9412c4d53ec4abad$var$_data[i++]];
    return result;
}



var $9wt9e = parcelRequire("9wt9e");


var $58WHl = parcelRequire("58WHl");

var $7K96x = parcelRequire("7K96x");
const $b1d78f1443321690$export$3b0eb959891056fe = "code-workspace";
function $b1d78f1443321690$export$8ab0cbf30ebc0326(obj) {
    const singleFolderIdentifier = obj;
    return typeof (singleFolderIdentifier === null || singleFolderIdentifier === void 0 ? void 0 : singleFolderIdentifier.id) === "string" && (0, $7K96x.URI).isUri(singleFolderIdentifier.uri);
}
function $b1d78f1443321690$export$bb743eb0d71b555b(workspace) {
    // Multi root
    if (workspace.configuration) return {
        id: workspace.id,
        configPath: workspace.configuration
    };
    // Single folder
    if (workspace.folders.length === 1) return {
        id: workspace.id,
        uri: workspace.folders[0].uri
    };
    // Empty workspace
    return undefined;
} //#endregion


class $031634883e560858$export$e3a7bd665cf54cee {
    resolve(variable) {
        for (const delegate of this._delegates){
            let value = delegate.resolve(variable);
            if (value !== undefined) return value;
        }
        return undefined;
    }
    constructor(_delegates){
        this._delegates = _delegates;
    //
    }
}
class $031634883e560858$export$d2ecf5fbc0b88e32 {
    resolve(variable) {
        const { name: name  } = variable;
        if (name === "SELECTION" || name === "TM_SELECTED_TEXT") {
            let value = this._model.getValueInRange(this._selection) || undefined;
            let isMultiline = this._selection.startLineNumber !== this._selection.endLineNumber;
            // If there was no selected text, try to get last overtyped text
            if (!value && this._overtypingCapturer) {
                const info = this._overtypingCapturer.getLastOvertypedInfo(this._selectionIdx);
                if (info) {
                    value = info.value;
                    isMultiline = info.multiline;
                }
            }
            if (value && isMultiline && variable.snippet) {
                // Selection is a multiline string which we indentation we now
                // need to adjust. We compare the indentation of this variable
                // with the indentation at the editor position and add potential
                // extra indentation to the value
                const line = this._model.getLineContent(this._selection.startLineNumber);
                const lineLeadingWhitespace = (0, $9TEeL.getLeadingWhitespace)(line, 0, this._selection.startColumn - 1);
                let varLeadingWhitespace = lineLeadingWhitespace;
                variable.snippet.walk((marker)=>{
                    if (marker === variable) return false;
                    if (marker instanceof (0, $03fe7e83485db5e8$export$5f1af8db9871e1d6)) varLeadingWhitespace = (0, $9TEeL.getLeadingWhitespace)((0, $9TEeL.splitLines)(marker.value).pop());
                    return true;
                });
                const whitespaceCommonLength = (0, $9TEeL.commonPrefixLength)(varLeadingWhitespace, lineLeadingWhitespace);
                value = value.replace(/(\r\n|\r|\n)(.*)/g, (m, newline, rest)=>`${newline}${varLeadingWhitespace.substr(whitespaceCommonLength)}${rest}`);
            }
            return value;
        } else if (name === "TM_CURRENT_LINE") return this._model.getLineContent(this._selection.positionLineNumber);
        else if (name === "TM_CURRENT_WORD") {
            const info1 = this._model.getWordAtPosition({
                lineNumber: this._selection.positionLineNumber,
                column: this._selection.positionColumn
            });
            return info1 && info1.word || undefined;
        } else if (name === "TM_LINE_INDEX") return String(this._selection.positionLineNumber - 1);
        else if (name === "TM_LINE_NUMBER") return String(this._selection.positionLineNumber);
        return undefined;
    }
    constructor(_model, _selection, _selectionIdx, _overtypingCapturer){
        this._model = _model;
        this._selection = _selection;
        this._selectionIdx = _selectionIdx;
        this._overtypingCapturer = _overtypingCapturer;
    //
    }
}
class $031634883e560858$export$23aa3af8f3bd9e57 {
    resolve(variable) {
        const { name: name  } = variable;
        if (name === "TM_FILENAME") return $fjPby.basename(this._model.uri.fsPath);
        else if (name === "TM_FILENAME_BASE") {
            const name1 = $fjPby.basename(this._model.uri.fsPath);
            const idx = name1.lastIndexOf(".");
            if (idx <= 0) return name1;
            else return name1.slice(0, idx);
        } else if (name === "TM_DIRECTORY") {
            if ($fjPby.dirname(this._model.uri.fsPath) === ".") return "";
            return this._labelService.getUriLabel((0, $aMhG1.dirname)(this._model.uri));
        } else if (name === "TM_FILEPATH") return this._labelService.getUriLabel(this._model.uri);
        else if (name === "RELATIVE_FILEPATH") return this._labelService.getUriLabel(this._model.uri, {
            relative: true,
            noPrefix: true
        });
        return undefined;
    }
    constructor(_labelService, _model){
        this._labelService = _labelService;
        this._model = _model;
    //
    }
}
class $031634883e560858$export$51fb631a281a1cb7 {
    resolve(variable) {
        if (variable.name !== "CLIPBOARD") return undefined;
        const clipboardText = this._readClipboardText();
        if (!clipboardText) return undefined;
        // `spread` is assigning each cursor a line of the clipboard
        // text whenever there the line count equals the cursor count
        // and when enabled
        if (this._spread) {
            const lines = clipboardText.split(/\r\n|\n|\r/).filter((s)=>!(0, $9TEeL.isFalsyOrWhitespace)(s));
            if (lines.length === this._selectionCount) return lines[this._selectionIdx];
        }
        return clipboardText;
    }
    constructor(_readClipboardText, _selectionIdx, _selectionCount, _spread){
        this._readClipboardText = _readClipboardText;
        this._selectionIdx = _selectionIdx;
        this._selectionCount = _selectionCount;
        this._spread = _spread;
    //
    }
}
class $031634883e560858$export$93486f5d6db748c0 {
    resolve(variable) {
        const { name: name  } = variable;
        const langId = this._model.getLanguageIdAtPosition(this._selection.selectionStartLineNumber, this._selection.selectionStartColumn);
        const config = (0, $9wt9e.LanguageConfigurationRegistry).getComments(langId);
        if (!config) return undefined;
        if (name === "LINE_COMMENT") return config.lineCommentToken || undefined;
        else if (name === "BLOCK_COMMENT_START") return config.blockCommentStartToken || undefined;
        else if (name === "BLOCK_COMMENT_END") return config.blockCommentEndToken || undefined;
        return undefined;
    }
    constructor(_model, _selection){
        this._model = _model;
        this._selection = _selection;
    //
    }
}
class $031634883e560858$export$3c8bf74f3a7220f9 {
    resolve(variable) {
        const { name: name  } = variable;
        if (name === "CURRENT_YEAR") return String(this._date.getFullYear());
        else if (name === "CURRENT_YEAR_SHORT") return String(this._date.getFullYear()).slice(-2);
        else if (name === "CURRENT_MONTH") return String(this._date.getMonth().valueOf() + 1).padStart(2, "0");
        else if (name === "CURRENT_DATE") return String(this._date.getDate().valueOf()).padStart(2, "0");
        else if (name === "CURRENT_HOUR") return String(this._date.getHours().valueOf()).padStart(2, "0");
        else if (name === "CURRENT_MINUTE") return String(this._date.getMinutes().valueOf()).padStart(2, "0");
        else if (name === "CURRENT_SECOND") return String(this._date.getSeconds().valueOf()).padStart(2, "0");
        else if (name === "CURRENT_DAY_NAME") return $031634883e560858$export$3c8bf74f3a7220f9.dayNames[this._date.getDay()];
        else if (name === "CURRENT_DAY_NAME_SHORT") return $031634883e560858$export$3c8bf74f3a7220f9.dayNamesShort[this._date.getDay()];
        else if (name === "CURRENT_MONTH_NAME") return $031634883e560858$export$3c8bf74f3a7220f9.monthNames[this._date.getMonth()];
        else if (name === "CURRENT_MONTH_NAME_SHORT") return $031634883e560858$export$3c8bf74f3a7220f9.monthNamesShort[this._date.getMonth()];
        else if (name === "CURRENT_SECONDS_UNIX") return String(Math.floor(this._date.getTime() / 1000));
        return undefined;
    }
    constructor(){
        this._date = new Date();
    }
}
$031634883e560858$export$3c8bf74f3a7220f9.dayNames = [
    $58WHl.localize("Sunday", "Sunday"),
    $58WHl.localize("Monday", "Monday"),
    $58WHl.localize("Tuesday", "Tuesday"),
    $58WHl.localize("Wednesday", "Wednesday"),
    $58WHl.localize("Thursday", "Thursday"),
    $58WHl.localize("Friday", "Friday"),
    $58WHl.localize("Saturday", "Saturday")
];
$031634883e560858$export$3c8bf74f3a7220f9.dayNamesShort = [
    $58WHl.localize("SundayShort", "Sun"),
    $58WHl.localize("MondayShort", "Mon"),
    $58WHl.localize("TuesdayShort", "Tue"),
    $58WHl.localize("WednesdayShort", "Wed"),
    $58WHl.localize("ThursdayShort", "Thu"),
    $58WHl.localize("FridayShort", "Fri"),
    $58WHl.localize("SaturdayShort", "Sat")
];
$031634883e560858$export$3c8bf74f3a7220f9.monthNames = [
    $58WHl.localize("January", "January"),
    $58WHl.localize("February", "February"),
    $58WHl.localize("March", "March"),
    $58WHl.localize("April", "April"),
    $58WHl.localize("May", "May"),
    $58WHl.localize("June", "June"),
    $58WHl.localize("July", "July"),
    $58WHl.localize("August", "August"),
    $58WHl.localize("September", "September"),
    $58WHl.localize("October", "October"),
    $58WHl.localize("November", "November"),
    $58WHl.localize("December", "December")
];
$031634883e560858$export$3c8bf74f3a7220f9.monthNamesShort = [
    $58WHl.localize("JanuaryShort", "Jan"),
    $58WHl.localize("FebruaryShort", "Feb"),
    $58WHl.localize("MarchShort", "Mar"),
    $58WHl.localize("AprilShort", "Apr"),
    $58WHl.localize("MayShort", "May"),
    $58WHl.localize("JuneShort", "Jun"),
    $58WHl.localize("JulyShort", "Jul"),
    $58WHl.localize("AugustShort", "Aug"),
    $58WHl.localize("SeptemberShort", "Sep"),
    $58WHl.localize("OctoberShort", "Oct"),
    $58WHl.localize("NovemberShort", "Nov"),
    $58WHl.localize("DecemberShort", "Dec")
];
class $031634883e560858$export$f1d01458dc99b68c {
    resolve(variable) {
        if (!this._workspaceService) return undefined;
        const workspaceIdentifier = (0, $b1d78f1443321690$export$bb743eb0d71b555b)(this._workspaceService.getWorkspace());
        if (!workspaceIdentifier) return undefined;
        if (variable.name === "WORKSPACE_NAME") return this._resolveWorkspaceName(workspaceIdentifier);
        else if (variable.name === "WORKSPACE_FOLDER") return this._resoveWorkspacePath(workspaceIdentifier);
        return undefined;
    }
    _resolveWorkspaceName(workspaceIdentifier) {
        if ((0, $b1d78f1443321690$export$8ab0cbf30ebc0326)(workspaceIdentifier)) return $fjPby.basename(workspaceIdentifier.uri.path);
        let filename = $fjPby.basename(workspaceIdentifier.configPath.path);
        if (filename.endsWith((0, $b1d78f1443321690$export$3b0eb959891056fe))) filename = filename.substr(0, filename.length - (0, $b1d78f1443321690$export$3b0eb959891056fe).length - 1);
        return filename;
    }
    _resoveWorkspacePath(workspaceIdentifier) {
        if ((0, $b1d78f1443321690$export$8ab0cbf30ebc0326)(workspaceIdentifier)) return (0, $41d3b2f5b9c576d9$export$86de3c9238cdb7b7)(workspaceIdentifier.uri.fsPath);
        let filename = $fjPby.basename(workspaceIdentifier.configPath.path);
        let folderpath = workspaceIdentifier.configPath.fsPath;
        if (folderpath.endsWith(filename)) folderpath = folderpath.substr(0, folderpath.length - filename.length - 1);
        return folderpath ? (0, $41d3b2f5b9c576d9$export$86de3c9238cdb7b7)(folderpath) : "/";
    }
    constructor(_workspaceService){
        this._workspaceService = _workspaceService;
    //
    }
}
class $031634883e560858$export$35234542a316122e {
    resolve(variable) {
        const { name: name  } = variable;
        if (name === "RANDOM") return Math.random().toString().slice(-6);
        else if (name === "RANDOM_HEX") return Math.random().toString(16).slice(-6);
        else if (name === "UUID") return (0, $9412c4d53ec4abad$export$1c3aefb711c3a4cc)();
        return undefined;
    }
}


class $28b804470d6f3919$export$c14aba13900af0fa {
    dispose() {
        if (this._placeholderDecorations) this._editor.deltaDecorations([
            ...this._placeholderDecorations.values()
        ], []);
        this._placeholderGroups.length = 0;
    }
    _initDecorations() {
        if (this._placeholderDecorations) // already initialized
        return;
        this._placeholderDecorations = new Map();
        const model = this._editor.getModel();
        this._editor.changeDecorations((accessor)=>{
            // create a decoration for each placeholder
            for (const placeholder of this._snippet.placeholders){
                const placeholderOffset = this._snippet.offset(placeholder);
                const placeholderLen = this._snippet.fullLen(placeholder);
                const range = (0, $3HpR4.Range).fromPositions(model.getPositionAt(this._offset + placeholderOffset), model.getPositionAt(this._offset + placeholderOffset + placeholderLen));
                const options = placeholder.isFinalTabstop ? $28b804470d6f3919$export$c14aba13900af0fa._decor.inactiveFinal : $28b804470d6f3919$export$c14aba13900af0fa._decor.inactive;
                const handle = accessor.addDecoration(range, options);
                this._placeholderDecorations.set(placeholder, handle);
            }
        });
    }
    move(fwd) {
        if (!this._editor.hasModel()) return [];
        this._initDecorations();
        // Transform placeholder text if necessary
        if (this._placeholderGroupsIdx >= 0) {
            let operations = [];
            for (const placeholder of this._placeholderGroups[this._placeholderGroupsIdx])// Check if the placeholder has a transformation
            if (placeholder.transform) {
                const id = this._placeholderDecorations.get(placeholder);
                const range = this._editor.getModel().getDecorationRange(id);
                const currentValue = this._editor.getModel().getValueInRange(range);
                const transformedValueLines = placeholder.transform.resolve(currentValue).split(/\r\n|\r|\n/);
                // fix indentation for transformed lines
                for(let i = 1; i < transformedValueLines.length; i++)transformedValueLines[i] = this._editor.getModel().normalizeIndentation(this._snippetLineLeadingWhitespace + transformedValueLines[i]);
                operations.push((0, $13fPA.EditOperation).replace(range, transformedValueLines.join(this._editor.getModel().getEOL())));
            }
            if (operations.length > 0) this._editor.executeEdits("snippet.placeholderTransform", operations);
        }
        let couldSkipThisPlaceholder = false;
        if (fwd === true && this._placeholderGroupsIdx < this._placeholderGroups.length - 1) {
            this._placeholderGroupsIdx += 1;
            couldSkipThisPlaceholder = true;
        } else if (fwd === false && this._placeholderGroupsIdx > 0) {
            this._placeholderGroupsIdx -= 1;
            couldSkipThisPlaceholder = true;
        }
        const newSelections = this._editor.getModel().changeDecorations((accessor)=>{
            const activePlaceholders = new Set();
            // change stickiness to always grow when typing at its edges
            // because these decorations represent the currently active
            // tabstop.
            // Special case #1: reaching the final tabstop
            // Special case #2: placeholders enclosing active placeholders
            const selections = [];
            for (const placeholder of this._placeholderGroups[this._placeholderGroupsIdx]){
                const id = this._placeholderDecorations.get(placeholder);
                const range = this._editor.getModel().getDecorationRange(id);
                selections.push(new (0, $cz0c7.Selection)(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn));
                // consider to skip this placeholder index when the decoration
                // range is empty but when the placeholder wasn't. that's a strong
                // hint that the placeholder has been deleted. (all placeholder must match this)
                couldSkipThisPlaceholder = couldSkipThisPlaceholder && this._hasPlaceholderBeenCollapsed(placeholder);
                accessor.changeDecorationOptions(id, placeholder.isFinalTabstop ? $28b804470d6f3919$export$c14aba13900af0fa._decor.activeFinal : $28b804470d6f3919$export$c14aba13900af0fa._decor.active);
                activePlaceholders.add(placeholder);
                for (const enclosingPlaceholder of this._snippet.enclosingPlaceholders(placeholder)){
                    const id1 = this._placeholderDecorations.get(enclosingPlaceholder);
                    accessor.changeDecorationOptions(id1, enclosingPlaceholder.isFinalTabstop ? $28b804470d6f3919$export$c14aba13900af0fa._decor.activeFinal : $28b804470d6f3919$export$c14aba13900af0fa._decor.active);
                    activePlaceholders.add(enclosingPlaceholder);
                }
            }
            // change stickness to never grow when typing at its edges
            // so that in-active tabstops never grow
            for (const [placeholder1, id2] of this._placeholderDecorations)if (!activePlaceholders.has(placeholder1)) accessor.changeDecorationOptions(id2, placeholder1.isFinalTabstop ? $28b804470d6f3919$export$c14aba13900af0fa._decor.inactiveFinal : $28b804470d6f3919$export$c14aba13900af0fa._decor.inactive);
            return selections;
        });
        return !couldSkipThisPlaceholder ? newSelections !== null && newSelections !== void 0 ? newSelections : [] : this.move(fwd);
    }
    _hasPlaceholderBeenCollapsed(placeholder) {
        // A placeholder is empty when it wasn't empty when authored but
        // when its tracking decoration is empty. This also applies to all
        // potential parent placeholders
        let marker = placeholder;
        while(marker){
            if (marker instanceof (0, $03fe7e83485db5e8$export$84712d0562a614b8)) {
                const id = this._placeholderDecorations.get(marker);
                const range = this._editor.getModel().getDecorationRange(id);
                if (range.isEmpty() && marker.toString().length > 0) return true;
            }
            marker = marker.parent;
        }
        return false;
    }
    get isAtFirstPlaceholder() {
        return this._placeholderGroupsIdx <= 0 || this._placeholderGroups.length === 0;
    }
    get isAtLastPlaceholder() {
        return this._placeholderGroupsIdx === this._placeholderGroups.length - 1;
    }
    get hasPlaceholder() {
        return this._snippet.placeholders.length > 0;
    }
    computePossibleSelections() {
        const result = new Map();
        for (const placeholdersWithEqualIndex of this._placeholderGroups){
            let ranges;
            for (const placeholder of placeholdersWithEqualIndex){
                if (placeholder.isFinalTabstop) break;
                if (!ranges) {
                    ranges = [];
                    result.set(placeholder.index, ranges);
                }
                const id = this._placeholderDecorations.get(placeholder);
                const range = this._editor.getModel().getDecorationRange(id);
                if (!range) {
                    // one of the placeholder lost its decoration and
                    // therefore we bail out and pretend the placeholder
                    // (with its mirrors) doesn't exist anymore.
                    result.delete(placeholder.index);
                    break;
                }
                ranges.push(range);
            }
        }
        return result;
    }
    get choice() {
        return this._placeholderGroups[this._placeholderGroupsIdx][0].choice;
    }
    merge(others) {
        const model = this._editor.getModel();
        this._nestingLevel *= 10;
        this._editor.changeDecorations((accessor)=>{
            // For each active placeholder take one snippet and merge it
            // in that the placeholder (can be many for `$1foo$1foo`). Because
            // everything is sorted by editor selection we can simply remove
            // elements from the beginning of the array
            for (const placeholder of this._placeholderGroups[this._placeholderGroupsIdx]){
                const nested = others.shift();
                console.assert(!nested._placeholderDecorations);
                // Massage placeholder-indicies of the nested snippet to be
                // sorted right after the insertion point. This ensures we move
                // through the placeholders in the correct order
                const indexLastPlaceholder = nested._snippet.placeholderInfo.last.index;
                for (const nestedPlaceholder of nested._snippet.placeholderInfo.all)if (nestedPlaceholder.isFinalTabstop) nestedPlaceholder.index = placeholder.index + (indexLastPlaceholder + 1) / this._nestingLevel;
                else nestedPlaceholder.index = placeholder.index + nestedPlaceholder.index / this._nestingLevel;
                this._snippet.replace(placeholder, nested._snippet.children);
                // Remove the placeholder at which position are inserting
                // the snippet and also remove its decoration.
                const id = this._placeholderDecorations.get(placeholder);
                accessor.removeDecoration(id);
                this._placeholderDecorations.delete(placeholder);
                // For each *new* placeholder we create decoration to monitor
                // how and if it grows/shrinks.
                for (const placeholder1 of nested._snippet.placeholders){
                    const placeholderOffset = nested._snippet.offset(placeholder1);
                    const placeholderLen = nested._snippet.fullLen(placeholder1);
                    const range = (0, $3HpR4.Range).fromPositions(model.getPositionAt(nested._offset + placeholderOffset), model.getPositionAt(nested._offset + placeholderOffset + placeholderLen));
                    const handle = accessor.addDecoration(range, $28b804470d6f3919$export$c14aba13900af0fa._decor.inactive);
                    this._placeholderDecorations.set(placeholder1, handle);
                }
            }
            // Last, re-create the placeholder groups by sorting placeholders by their index.
            this._placeholderGroups = (0, $4xCD7.groupBy)(this._snippet.placeholders, (0, $03fe7e83485db5e8$export$84712d0562a614b8).compareByIndex);
        });
    }
    constructor(_editor, _snippet, _offset, _snippetLineLeadingWhitespace){
        this._editor = _editor;
        this._snippet = _snippet;
        this._offset = _offset;
        this._snippetLineLeadingWhitespace = _snippetLineLeadingWhitespace;
        this._nestingLevel = 1;
        this._placeholderGroups = (0, $4xCD7.groupBy)(_snippet.placeholders, (0, $03fe7e83485db5e8$export$84712d0562a614b8).compareByIndex);
        this._placeholderGroupsIdx = -1;
    }
}
$28b804470d6f3919$export$c14aba13900af0fa._decor = {
    active: (0, $g88WD.ModelDecorationOptions).register({
        description: "snippet-placeholder-1",
        stickiness: 0 /* AlwaysGrowsWhenTypingAtEdges */ ,
        className: "snippet-placeholder"
    }),
    inactive: (0, $g88WD.ModelDecorationOptions).register({
        description: "snippet-placeholder-2",
        stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ ,
        className: "snippet-placeholder"
    }),
    activeFinal: (0, $g88WD.ModelDecorationOptions).register({
        description: "snippet-placeholder-3",
        stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ ,
        className: "finish-snippet-placeholder"
    }),
    inactiveFinal: (0, $g88WD.ModelDecorationOptions).register({
        description: "snippet-placeholder-4",
        stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ ,
        className: "finish-snippet-placeholder"
    })
};
const $28b804470d6f3919$var$_defaultOptions = {
    overwriteBefore: 0,
    overwriteAfter: 0,
    adjustWhitespace: true,
    clipboardText: undefined,
    overtypingCapturer: undefined
};
class $28b804470d6f3919$export$d334bb6e0f563f7 {
    static adjustWhitespace(model, position, snippet, adjustIndentation, adjustNewlines) {
        const line = model.getLineContent(position.lineNumber);
        const lineLeadingWhitespace = (0, $9TEeL.getLeadingWhitespace)(line, 0, position.column - 1);
        // the snippet as inserted
        let snippetTextString;
        snippet.walk((marker)=>{
            // all text elements that are not inside choice
            if (!(marker instanceof (0, $03fe7e83485db5e8$export$5f1af8db9871e1d6)) || marker.parent instanceof (0, $03fe7e83485db5e8$export$32a7462f6a06cbd5)) return true;
            const lines = marker.value.split(/\r\n|\r|\n/);
            if (adjustIndentation) {
                // adjust indentation of snippet test
                // -the snippet-start doesn't get extra-indented (lineLeadingWhitespace), only normalized
                // -all N+1 lines get extra-indented and normalized
                // -the text start get extra-indented and normalized when following a linebreak
                const offset = snippet.offset(marker);
                if (offset === 0) // snippet start
                lines[0] = model.normalizeIndentation(lines[0]);
                else {
                    // check if text start is after a linebreak
                    snippetTextString = snippetTextString !== null && snippetTextString !== void 0 ? snippetTextString : snippet.toString();
                    let prevChar = snippetTextString.charCodeAt(offset - 1);
                    if (prevChar === 10 /* LineFeed */  || prevChar === 13 /* CarriageReturn */ ) lines[0] = model.normalizeIndentation(lineLeadingWhitespace + lines[0]);
                }
                for(let i = 1; i < lines.length; i++)lines[i] = model.normalizeIndentation(lineLeadingWhitespace + lines[i]);
            }
            const newValue = lines.join(model.getEOL());
            if (newValue !== marker.value) {
                marker.parent.replace(marker, [
                    new (0, $03fe7e83485db5e8$export$5f1af8db9871e1d6)(newValue)
                ]);
                snippetTextString = undefined;
            }
            return true;
        });
        return lineLeadingWhitespace;
    }
    static adjustSelection(model, selection, overwriteBefore, overwriteAfter) {
        if (overwriteBefore !== 0 || overwriteAfter !== 0) {
            // overwrite[Before|After] is compute using the position, not the whole
            // selection. therefore we adjust the selection around that position
            const { positionLineNumber: positionLineNumber , positionColumn: positionColumn  } = selection;
            const positionColumnBefore = positionColumn - overwriteBefore;
            const positionColumnAfter = positionColumn + overwriteAfter;
            const range = model.validateRange({
                startLineNumber: positionLineNumber,
                startColumn: positionColumnBefore,
                endLineNumber: positionLineNumber,
                endColumn: positionColumnAfter
            });
            selection = (0, $cz0c7.Selection).createWithDirection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn, selection.getDirection());
        }
        return selection;
    }
    static createEditsAndSnippets(editor, template, overwriteBefore, overwriteAfter, enforceFinalTabstop, adjustWhitespace, clipboardText, overtypingCapturer) {
        const edits = [];
        const snippets = [];
        if (!editor.hasModel()) return {
            edits: edits,
            snippets: snippets
        };
        const model = editor.getModel();
        const workspaceService = editor.invokeWithinContext((accessor)=>accessor.get((0, $i92hI.IWorkspaceContextService)));
        const modelBasedVariableResolver = editor.invokeWithinContext((accessor)=>new (0, $031634883e560858$export$23aa3af8f3bd9e57)(accessor.get((0, $4znCf.ILabelService)), model));
        const readClipboardText = ()=>clipboardText;
        let delta = 0;
        // know what text the overwrite[Before|After] extensions
        // of the primary curser have selected because only when
        // secondary selections extend to the same text we can grow them
        let firstBeforeText = model.getValueInRange($28b804470d6f3919$export$d334bb6e0f563f7.adjustSelection(model, editor.getSelection(), overwriteBefore, 0));
        let firstAfterText = model.getValueInRange($28b804470d6f3919$export$d334bb6e0f563f7.adjustSelection(model, editor.getSelection(), 0, overwriteAfter));
        // remember the first non-whitespace column to decide if
        // `keepWhitespace` should be overruled for secondary selections
        let firstLineFirstNonWhitespace = model.getLineFirstNonWhitespaceColumn(editor.getSelection().positionLineNumber);
        // sort selections by their start position but remeber
        // the original index. that allows you to create correct
        // offset-based selection logic without changing the
        // primary selection
        const indexedSelections = editor.getSelections().map((selection, idx)=>({
                selection: selection,
                idx: idx
            })).sort((a, b)=>(0, $3HpR4.Range).compareRangesUsingStarts(a.selection, b.selection));
        for (const { selection: selection , idx: idx  } of indexedSelections){
            // extend selection with the `overwriteBefore` and `overwriteAfter` and then
            // compare if this matches the extensions of the primary selection
            let extensionBefore = $28b804470d6f3919$export$d334bb6e0f563f7.adjustSelection(model, selection, overwriteBefore, 0);
            let extensionAfter = $28b804470d6f3919$export$d334bb6e0f563f7.adjustSelection(model, selection, 0, overwriteAfter);
            if (firstBeforeText !== model.getValueInRange(extensionBefore)) extensionBefore = selection;
            if (firstAfterText !== model.getValueInRange(extensionAfter)) extensionAfter = selection;
            // merge the before and after selection into one
            const snippetSelection = selection.setStartPosition(extensionBefore.startLineNumber, extensionBefore.startColumn).setEndPosition(extensionAfter.endLineNumber, extensionAfter.endColumn);
            const snippet = new (0, $03fe7e83485db5e8$export$e073bfe8583e8fbf)().parse(template, true, enforceFinalTabstop);
            // adjust the template string to match the indentation and
            // whitespace rules of this insert location (can be different for each cursor)
            // happens when being asked for (default) or when this is a secondary
            // cursor and the leading whitespace is different
            const start = snippetSelection.getStartPosition();
            const snippetLineLeadingWhitespace = $28b804470d6f3919$export$d334bb6e0f563f7.adjustWhitespace(model, start, snippet, adjustWhitespace || idx > 0 && firstLineFirstNonWhitespace !== model.getLineFirstNonWhitespaceColumn(selection.positionLineNumber), true);
            snippet.resolveVariables(new (0, $031634883e560858$export$e3a7bd665cf54cee)([
                modelBasedVariableResolver,
                new (0, $031634883e560858$export$51fb631a281a1cb7)(readClipboardText, idx, indexedSelections.length, editor.getOption(70 /* multiCursorPaste */ ) === "spread"),
                new (0, $031634883e560858$export$d2ecf5fbc0b88e32)(model, selection, idx, overtypingCapturer),
                new (0, $031634883e560858$export$93486f5d6db748c0)(model, selection),
                new (0, $031634883e560858$export$3c8bf74f3a7220f9),
                new (0, $031634883e560858$export$f1d01458dc99b68c)(workspaceService),
                new (0, $031634883e560858$export$35234542a316122e), 
            ]));
            const offset = model.getOffsetAt(start) + delta;
            delta += snippet.toString().length - model.getValueLengthInRange(snippetSelection);
            // store snippets with the index of their originating selection.
            // that ensures the primiary cursor stays primary despite not being
            // the one with lowest start position
            edits[idx] = (0, $13fPA.EditOperation).replace(snippetSelection, snippet.toString());
            edits[idx].identifier = {
                major: idx,
                minor: 0
            }; // mark the edit so only our undo edits will be used to generate end cursors
            snippets[idx] = new $28b804470d6f3919$export$c14aba13900af0fa(editor, snippet, offset, snippetLineLeadingWhitespace);
        }
        return {
            edits: edits,
            snippets: snippets
        };
    }
    dispose() {
        (0, $atiRx.dispose)(this._snippets);
    }
    _logInfo() {
        return `template="${this._template}", merged_templates="${this._templateMerges.join(" -> ")}"`;
    }
    insert() {
        if (!this._editor.hasModel()) return;
        // make insert edit and start with first selections
        const { edits: edits , snippets: snippets  } = $28b804470d6f3919$export$d334bb6e0f563f7.createEditsAndSnippets(this._editor, this._template, this._options.overwriteBefore, this._options.overwriteAfter, false, this._options.adjustWhitespace, this._options.clipboardText, this._options.overtypingCapturer);
        this._snippets = snippets;
        this._editor.executeEdits("snippet", edits, (undoEdits)=>{
            if (this._snippets[0].hasPlaceholder) return this._move(true);
            else return undoEdits.filter((edit)=>!!edit.identifier) // only use our undo edits
            .map((edit)=>(0, $cz0c7.Selection).fromPositions(edit.range.getEndPosition()));
        });
        this._editor.revealRange(this._editor.getSelections()[0]);
    }
    merge(template, options = $28b804470d6f3919$var$_defaultOptions) {
        if (!this._editor.hasModel()) return;
        this._templateMerges.push([
            this._snippets[0]._nestingLevel,
            this._snippets[0]._placeholderGroupsIdx,
            template
        ]);
        const { edits: edits , snippets: snippets  } = $28b804470d6f3919$export$d334bb6e0f563f7.createEditsAndSnippets(this._editor, template, options.overwriteBefore, options.overwriteAfter, true, options.adjustWhitespace, options.clipboardText, options.overtypingCapturer);
        this._editor.executeEdits("snippet", edits, (undoEdits)=>{
            for (const snippet of this._snippets)snippet.merge(snippets);
            console.assert(snippets.length === 0);
            if (this._snippets[0].hasPlaceholder) return this._move(undefined);
            else return undoEdits.filter((edit)=>!!edit.identifier) // only use our undo edits
            .map((edit)=>(0, $cz0c7.Selection).fromPositions(edit.range.getEndPosition()));
        });
    }
    next() {
        const newSelections = this._move(true);
        this._editor.setSelections(newSelections);
        this._editor.revealPositionInCenterIfOutsideViewport(newSelections[0].getPosition());
    }
    prev() {
        const newSelections = this._move(false);
        this._editor.setSelections(newSelections);
        this._editor.revealPositionInCenterIfOutsideViewport(newSelections[0].getPosition());
    }
    _move(fwd) {
        const selections = [];
        for (const snippet of this._snippets){
            const oneSelection = snippet.move(fwd);
            selections.push(...oneSelection);
        }
        return selections;
    }
    get isAtFirstPlaceholder() {
        return this._snippets[0].isAtFirstPlaceholder;
    }
    get isAtLastPlaceholder() {
        return this._snippets[0].isAtLastPlaceholder;
    }
    get hasPlaceholder() {
        return this._snippets[0].hasPlaceholder;
    }
    get choice() {
        return this._snippets[0].choice;
    }
    isSelectionWithinPlaceholders() {
        if (!this.hasPlaceholder) return false;
        const selections = this._editor.getSelections();
        if (selections.length < this._snippets.length) // this means we started snippet mode with N
        // selections and have M (N > M) selections.
        // So one snippet is without selection -> cancel
        return false;
        let allPossibleSelections = new Map();
        for (const snippet of this._snippets){
            const possibleSelections = snippet.computePossibleSelections();
            // for the first snippet find the placeholder (and its ranges)
            // that contain at least one selection. for all remaining snippets
            // the same placeholder (and their ranges) must be used.
            if (allPossibleSelections.size === 0) for (const [index, ranges] of possibleSelections){
                ranges.sort((0, $3HpR4.Range).compareRangesUsingStarts);
                for (const selection of selections)if (ranges[0].containsRange(selection)) {
                    allPossibleSelections.set(index, []);
                    break;
                }
            }
            if (allPossibleSelections.size === 0) // return false if we couldn't associate a selection to
            // this (the first) snippet
            return false;
            // add selections from 'this' snippet so that we know all
            // selections for this placeholder
            allPossibleSelections.forEach((array, index)=>{
                array.push(...possibleSelections.get(index));
            });
        }
        // sort selections (and later placeholder-ranges). then walk both
        // arrays and make sure the placeholder-ranges contain the corresponding
        // selection
        selections.sort((0, $3HpR4.Range).compareRangesUsingStarts);
        for (let [index1, ranges1] of allPossibleSelections){
            if (ranges1.length !== selections.length) {
                allPossibleSelections.delete(index1);
                continue;
            }
            ranges1.sort((0, $3HpR4.Range).compareRangesUsingStarts);
            for(let i = 0; i < ranges1.length; i++)if (!ranges1[i].containsRange(selections[i])) {
                allPossibleSelections.delete(index1);
                continue;
            }
        }
        // from all possible selections we have deleted those
        // that don't match with the current selection. if we don't
        // have any left, we don't have a selection anymore
        return allPossibleSelections.size > 0;
    }
    constructor(editor, template, options = $28b804470d6f3919$var$_defaultOptions){
        this._templateMerges = [];
        this._snippets = [];
        this._editor = editor;
        this._template = template;
        this._options = options;
    }
}


var $8be883bd38612905$exports = {};

$parcel$export($8be883bd38612905$exports, "SuggestController", function () { return $8be883bd38612905$export$54e1189006f2eb3a; }, function (v) { return $8be883bd38612905$export$54e1189006f2eb3a = v; });

var $cVmYb = parcelRequire("cVmYb");

var $4xCD7 = parcelRequire("4xCD7");

var $eFOsn = parcelRequire("eFOsn");

var $gnEXx = parcelRequire("gnEXx");

var $g0782 = parcelRequire("g0782");

var $fSvkC = parcelRequire("fSvkC");

var $i3lQA = parcelRequire("i3lQA");

var $atiRx = parcelRequire("atiRx");

var $1d81R = parcelRequire("1d81R");

var $k8jZF = parcelRequire("k8jZF");

var $3ICxR = parcelRequire("3ICxR");

var $iVwSq = parcelRequire("iVwSq");

var $gGOeQ = parcelRequire("gGOeQ");

var $13fPA = parcelRequire("13fPA");

var $8qXsZ = parcelRequire("8qXsZ");

var $3HpR4 = parcelRequire("3HpR4");

var $bdLce = parcelRequire("bdLce");
var $aab61a900846093a$exports = {};

$parcel$export($aab61a900846093a$exports, "SnippetController2", function () { return $aab61a900846093a$export$d27b4f7e5ea418b0; }, function (v) { return $aab61a900846093a$export$d27b4f7e5ea418b0 = v; });

var $atiRx = parcelRequire("atiRx");

var $gGOeQ = parcelRequire("gGOeQ");

var $3HpR4 = parcelRequire("3HpR4");

var $cz0c7 = parcelRequire("cz0c7");

var $bdLce = parcelRequire("bdLce");
var $abf46e0ea17ab20d$exports = {};

$parcel$export($abf46e0ea17ab20d$exports, "Context", function () { return $abf46e0ea17ab20d$export$841858b892ce1f4c; }, function (v) { return $abf46e0ea17ab20d$export$841858b892ce1f4c = v; });
$parcel$export($abf46e0ea17ab20d$exports, "suggestWidgetStatusbarMenu", function () { return $abf46e0ea17ab20d$export$c2ae6207654f3cab; }, function (v) { return $abf46e0ea17ab20d$export$c2ae6207654f3cab = v; });
$parcel$export($abf46e0ea17ab20d$exports, "CompletionOptions", function () { return $abf46e0ea17ab20d$export$6e9613987176d8af; }, function (v) { return $abf46e0ea17ab20d$export$6e9613987176d8af = v; });
$parcel$export($abf46e0ea17ab20d$exports, "getSnippetSuggestSupport", function () { return $abf46e0ea17ab20d$export$72a35c372a05fbe1; }, function (v) { return $abf46e0ea17ab20d$export$72a35c372a05fbe1 = v; });
$parcel$export($abf46e0ea17ab20d$exports, "provideSuggestionItems", function () { return $abf46e0ea17ab20d$export$c34b3fef967c72b0; }, function (v) { return $abf46e0ea17ab20d$export$c34b3fef967c72b0 = v; });
$parcel$export($abf46e0ea17ab20d$exports, "getSuggestionComparator", function () { return $abf46e0ea17ab20d$export$2537afb96e75f997; }, function (v) { return $abf46e0ea17ab20d$export$2537afb96e75f997 = v; });
$parcel$export($abf46e0ea17ab20d$exports, "showSimpleSuggestions", function () { return $abf46e0ea17ab20d$export$88d43510c0fc4cc4; }, function (v) { return $abf46e0ea17ab20d$export$88d43510c0fc4cc4 = v; });

var $gnEXx = parcelRequire("gnEXx");

var $g0782 = parcelRequire("g0782");

var $c8WLW = parcelRequire("c8WLW");

var $atiRx = parcelRequire("atiRx");

var $k8jZF = parcelRequire("k8jZF");

var $3ICxR = parcelRequire("3ICxR");

var $7K96x = parcelRequire("7K96x");

var $8qXsZ = parcelRequire("8qXsZ");

var $3HpR4 = parcelRequire("3HpR4");

var $eKhCe = parcelRequire("eKhCe");

var $iwSMU = parcelRequire("iwSMU");


var $58WHl = parcelRequire("58WHl");

var $2IxgH = parcelRequire("2IxgH");

var $fAXtX = parcelRequire("fAXtX");

var $bRtox = parcelRequire("bRtox");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $abf46e0ea17ab20d$var$__awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const $abf46e0ea17ab20d$export$841858b892ce1f4c = {
    Visible: new (0, $bRtox.RawContextKey)("suggestWidgetVisible", false, (0, $58WHl.localize)("suggestWidgetVisible", "Whether suggestion are visible")),
    DetailsVisible: new (0, $bRtox.RawContextKey)("suggestWidgetDetailsVisible", false, (0, $58WHl.localize)("suggestWidgetDetailsVisible", "Whether suggestion details are visible")),
    MultipleSuggestions: new (0, $bRtox.RawContextKey)("suggestWidgetMultipleSuggestions", false, (0, $58WHl.localize)("suggestWidgetMultipleSuggestions", "Whether there are multiple suggestions to pick from")),
    MakesTextEdit: new (0, $bRtox.RawContextKey)("suggestionMakesTextEdit", true, (0, $58WHl.localize)("suggestionMakesTextEdit", "Whether inserting the current suggestion yields in a change or has everything already been typed")),
    AcceptSuggestionsOnEnter: new (0, $bRtox.RawContextKey)("acceptSuggestionOnEnter", true, (0, $58WHl.localize)("acceptSuggestionOnEnter", "Whether suggestions are inserted when pressing Enter")),
    HasInsertAndReplaceRange: new (0, $bRtox.RawContextKey)("suggestionHasInsertAndReplaceRange", false, (0, $58WHl.localize)("suggestionHasInsertAndReplaceRange", "Whether the current suggestion has insert and replace behaviour")),
    InsertMode: new (0, $bRtox.RawContextKey)("suggestionInsertMode", undefined, {
        type: "string",
        description: (0, $58WHl.localize)("suggestionInsertMode", "Whether the default behaviour is to insert or replace")
    }),
    CanResolve: new (0, $bRtox.RawContextKey)("suggestionCanResolve", false, (0, $58WHl.localize)("suggestionCanResolve", "Whether the current suggestion supports to resolve further details"))
};
const $abf46e0ea17ab20d$export$c2ae6207654f3cab = new (0, $2IxgH.MenuId)("suggestWidgetStatusBar");
class $abf46e0ea17ab20d$export$c290c60b00019a8b {
    // ---- resolving
    get isResolved() {
        return !!this._isResolved;
    }
    resolve(token) {
        return $abf46e0ea17ab20d$var$__awaiter(this, void 0, void 0, function*() {
            if (!this._resolveCache) {
                const sub = token.onCancellationRequested(()=>{
                    this._resolveCache = undefined;
                    this._isResolved = false;
                });
                this._resolveCache = Promise.resolve(this.provider.resolveCompletionItem(this.completion, token)).then((value)=>{
                    Object.assign(this.completion, value);
                    this._isResolved = true;
                    sub.dispose();
                }, (err)=>{
                    if ((0, $g0782.isPromiseCanceledError)(err)) {
                        // the IPC queue will reject the request with the
                        // cancellation error -> reset cached
                        this._resolveCache = undefined;
                        this._isResolved = false;
                    }
                });
            }
            return this._resolveCache;
        });
    }
    constructor(position, completion, container, provider){
        this.position = position;
        this.completion = completion;
        this.container = container;
        this.provider = provider;
        // validation
        this.isInvalid = false;
        // sorting, filtering
        this.score = (0, $c8WLW.FuzzyScore).Default;
        this.distance = 0;
        this.textLabel = typeof completion.label === "string" ? completion.label : completion.label.label;
        // ensure lower-variants (perf)
        this.labelLow = this.textLabel.toLowerCase();
        // validate label
        this.isInvalid = !this.textLabel;
        this.sortTextLow = completion.sortText && completion.sortText.toLowerCase();
        this.filterTextLow = completion.filterText && completion.filterText.toLowerCase();
        // normalize ranges
        if ((0, $3HpR4.Range).isIRange(completion.range)) {
            this.editStart = new (0, $8qXsZ.Position)(completion.range.startLineNumber, completion.range.startColumn);
            this.editInsertEnd = new (0, $8qXsZ.Position)(completion.range.endLineNumber, completion.range.endColumn);
            this.editReplaceEnd = new (0, $8qXsZ.Position)(completion.range.endLineNumber, completion.range.endColumn);
            // validate range
            this.isInvalid = this.isInvalid || (0, $3HpR4.Range).spansMultipleLines(completion.range) || completion.range.startLineNumber !== position.lineNumber;
        } else {
            this.editStart = new (0, $8qXsZ.Position)(completion.range.insert.startLineNumber, completion.range.insert.startColumn);
            this.editInsertEnd = new (0, $8qXsZ.Position)(completion.range.insert.endLineNumber, completion.range.insert.endColumn);
            this.editReplaceEnd = new (0, $8qXsZ.Position)(completion.range.replace.endLineNumber, completion.range.replace.endColumn);
            // validate ranges
            this.isInvalid = this.isInvalid || (0, $3HpR4.Range).spansMultipleLines(completion.range.insert) || (0, $3HpR4.Range).spansMultipleLines(completion.range.replace) || completion.range.insert.startLineNumber !== position.lineNumber || completion.range.replace.startLineNumber !== position.lineNumber || completion.range.insert.startColumn !== completion.range.replace.startColumn;
        }
        // create the suggestion resolver
        if (typeof provider.resolveCompletionItem !== "function") {
            this._resolveCache = Promise.resolve();
            this._isResolved = true;
        }
    }
}
class $abf46e0ea17ab20d$export$6e9613987176d8af {
    constructor(snippetSortOrder = 2 /* Bottom */ , kindFilter = new Set(), providerFilter = new Set(), showDeprecated = true){
        this.snippetSortOrder = snippetSortOrder;
        this.kindFilter = kindFilter;
        this.providerFilter = providerFilter;
        this.showDeprecated = showDeprecated;
    }
}
$abf46e0ea17ab20d$export$6e9613987176d8af.default = new $abf46e0ea17ab20d$export$6e9613987176d8af();
let $abf46e0ea17ab20d$var$_snippetSuggestSupport;
function $abf46e0ea17ab20d$export$72a35c372a05fbe1() {
    return $abf46e0ea17ab20d$var$_snippetSuggestSupport;
}
class $abf46e0ea17ab20d$export$5bba491290954073 {
    constructor(items, needsClipboard, durations, disposable){
        this.items = items;
        this.needsClipboard = needsClipboard;
        this.durations = durations;
        this.disposable = disposable;
    }
}
function $abf46e0ea17ab20d$export$c34b3fef967c72b0(model, position, options = $abf46e0ea17ab20d$export$6e9613987176d8af.default, context = {
    triggerKind: 0 /* Invoke */ 
}, token = (0, $gnEXx.CancellationToken).None) {
    return $abf46e0ea17ab20d$var$__awaiter(this, void 0, void 0, function*() {
        const sw = new (0, $k8jZF.StopWatch)(true);
        position = position.clone();
        const word = model.getWordAtPosition(position);
        const defaultReplaceRange = word ? new (0, $3HpR4.Range)(position.lineNumber, word.startColumn, position.lineNumber, word.endColumn) : (0, $3HpR4.Range).fromPositions(position);
        const defaultRange = {
            replace: defaultReplaceRange,
            insert: defaultReplaceRange.setEndPosition(position.lineNumber, position.column)
        };
        const result = [];
        const disposables = new (0, $atiRx.DisposableStore)();
        const durations = [];
        let needsClipboard = false;
        const onCompletionList = (provider, container, sw)=>{
            var _a, _b, _c;
            if (!container) return;
            for (let suggestion of container.suggestions)if (!options.kindFilter.has(suggestion.kind)) {
                // skip if not showing deprecated suggestions
                if (!options.showDeprecated && ((_a = suggestion === null || suggestion === void 0 ? void 0 : suggestion.tags) === null || _a === void 0 ? void 0 : _a.includes(1 /* Deprecated */ ))) continue;
                // fill in default range when missing
                if (!suggestion.range) suggestion.range = defaultRange;
                // fill in default sortText when missing
                if (!suggestion.sortText) suggestion.sortText = typeof suggestion.label === "string" ? suggestion.label : suggestion.label.label;
                if (!needsClipboard && suggestion.insertTextRules && suggestion.insertTextRules & 4 /* InsertAsSnippet */ ) needsClipboard = (0, $03fe7e83485db5e8$export$e073bfe8583e8fbf).guessNeedsClipboard(suggestion.insertText);
                result.push(new $abf46e0ea17ab20d$export$c290c60b00019a8b(position, suggestion, container, provider));
            }
            if ((0, $atiRx.isDisposable)(container)) disposables.add(container);
            durations.push({
                providerName: (_b = provider._debugDisplayName) !== null && _b !== void 0 ? _b : "unkown_provider",
                elapsedProvider: (_c = container.duration) !== null && _c !== void 0 ? _c : -1,
                elapsedOverall: sw.elapsed()
            });
        };
        // ask for snippets in parallel to asking "real" providers. Only do something if configured to
        // do so - no snippet filter, no special-providers-only request
        const snippetCompletions = (()=>$abf46e0ea17ab20d$var$__awaiter(this, void 0, void 0, function*() {
                if (!$abf46e0ea17ab20d$var$_snippetSuggestSupport || options.kindFilter.has(27 /* Snippet */ )) return;
                if (options.providerFilter.size > 0 && !options.providerFilter.has($abf46e0ea17ab20d$var$_snippetSuggestSupport)) return;
                const sw = new (0, $k8jZF.StopWatch)(true);
                const list = yield $abf46e0ea17ab20d$var$_snippetSuggestSupport.provideCompletionItems(model, position, context, token);
                onCompletionList($abf46e0ea17ab20d$var$_snippetSuggestSupport, list, sw);
            }))();
        // add suggestions from contributed providers - providers are ordered in groups of
        // equal score and once a group produces a result the process stops
        // get provider groups, always add snippet suggestion provider
        for (let providerGroup of $eKhCe.CompletionProviderRegistry.orderedGroups(model)){
            // for each support in the group ask for suggestions
            let lenBefore = result.length;
            yield Promise.all(providerGroup.map((provider)=>$abf46e0ea17ab20d$var$__awaiter(this, void 0, void 0, function*() {
                    if (options.providerFilter.size > 0 && !options.providerFilter.has(provider)) return;
                    try {
                        const sw = new (0, $k8jZF.StopWatch)(true);
                        const list = yield provider.provideCompletionItems(model, position, context, token);
                        onCompletionList(provider, list, sw);
                    } catch (err) {
                        (0, $g0782.onUnexpectedExternalError)(err);
                    }
                })));
            if (lenBefore !== result.length || token.isCancellationRequested) break;
        }
        yield snippetCompletions;
        if (token.isCancellationRequested) {
            disposables.dispose();
            return Promise.reject((0, $g0782.canceled)());
        }
        return new $abf46e0ea17ab20d$export$5bba491290954073(result.sort($abf46e0ea17ab20d$export$2537afb96e75f997(options.snippetSortOrder)), needsClipboard, {
            entries: durations,
            elapsed: sw.elapsed()
        }, disposables);
    });
}
function $abf46e0ea17ab20d$var$defaultComparator(a, b) {
    // check with 'sortText'
    if (a.sortTextLow && b.sortTextLow) {
        if (a.sortTextLow < b.sortTextLow) return -1;
        else if (a.sortTextLow > b.sortTextLow) return 1;
    }
    // check with 'label'
    if (a.completion.label < b.completion.label) return -1;
    else if (a.completion.label > b.completion.label) return 1;
    // check with 'type'
    return a.completion.kind - b.completion.kind;
}
function $abf46e0ea17ab20d$var$snippetUpComparator(a, b) {
    if (a.completion.kind !== b.completion.kind) {
        if (a.completion.kind === 27 /* Snippet */ ) return -1;
        else if (b.completion.kind === 27 /* Snippet */ ) return 1;
    }
    return $abf46e0ea17ab20d$var$defaultComparator(a, b);
}
function $abf46e0ea17ab20d$var$snippetDownComparator(a, b) {
    if (a.completion.kind !== b.completion.kind) {
        if (a.completion.kind === 27 /* Snippet */ ) return 1;
        else if (b.completion.kind === 27 /* Snippet */ ) return -1;
    }
    return $abf46e0ea17ab20d$var$defaultComparator(a, b);
}
const $abf46e0ea17ab20d$var$_snippetComparators = new Map();
$abf46e0ea17ab20d$var$_snippetComparators.set(0 /* Top */ , $abf46e0ea17ab20d$var$snippetUpComparator);
$abf46e0ea17ab20d$var$_snippetComparators.set(2 /* Bottom */ , $abf46e0ea17ab20d$var$snippetDownComparator);
$abf46e0ea17ab20d$var$_snippetComparators.set(1 /* Inline */ , $abf46e0ea17ab20d$var$defaultComparator);
function $abf46e0ea17ab20d$export$2537afb96e75f997(snippetConfig) {
    return $abf46e0ea17ab20d$var$_snippetComparators.get(snippetConfig);
}
(0, $fAXtX.CommandsRegistry).registerCommand("_executeCompletionItemProvider", (accessor, ...args)=>$abf46e0ea17ab20d$var$__awaiter(void 0, void 0, void 0, function*() {
        const [uri, position, triggerCharacter, maxItemsToResolve] = args;
        (0, $3ICxR.assertType)((0, $7K96x.URI).isUri(uri));
        (0, $3ICxR.assertType)((0, $8qXsZ.Position).isIPosition(position));
        (0, $3ICxR.assertType)(typeof triggerCharacter === "string" || !triggerCharacter);
        (0, $3ICxR.assertType)(typeof maxItemsToResolve === "number" || !maxItemsToResolve);
        const ref = yield accessor.get((0, $iwSMU.ITextModelService)).createModelReference(uri);
        try {
            const result = {
                incomplete: false,
                suggestions: []
            };
            const resolving = [];
            const completions = yield $abf46e0ea17ab20d$export$c34b3fef967c72b0(ref.object.textEditorModel, (0, $8qXsZ.Position).lift(position), undefined, {
                triggerCharacter: triggerCharacter,
                triggerKind: triggerCharacter ? 1 /* TriggerCharacter */  : 0 /* Invoke */ 
            });
            for (const item of completions.items){
                if (resolving.length < (maxItemsToResolve !== null && maxItemsToResolve !== void 0 ? maxItemsToResolve : 0)) resolving.push(item.resolve((0, $gnEXx.CancellationToken).None));
                result.incomplete = result.incomplete || item.container.incomplete;
                result.suggestions.push(item.completion);
            }
            try {
                yield Promise.all(resolving);
                return result;
            } finally{
                setTimeout(()=>completions.disposable.dispose(), 100);
            }
        } finally{
            ref.dispose();
        }
    }));
const $abf46e0ea17ab20d$var$_provider = new class {
    provideCompletionItems() {
        let suggestions = this.onlyOnceSuggestions.slice(0);
        let result = {
            suggestions: suggestions
        };
        this.onlyOnceSuggestions.length = 0;
        return result;
    }
    constructor(){
        this.onlyOnceSuggestions = [];
    }
};
$eKhCe.CompletionProviderRegistry.register("*", $abf46e0ea17ab20d$var$_provider);
function $abf46e0ea17ab20d$export$88d43510c0fc4cc4(editor, suggestions) {
    setTimeout(()=>{
        $abf46e0ea17ab20d$var$_provider.onlyOnceSuggestions.push(...suggestions);
        editor.getContribution("editor.contrib.suggestController").triggerSuggest(new Set().add($abf46e0ea17ab20d$var$_provider));
    }, 0);
}



var $58WHl = parcelRequire("58WHl");

var $bRtox = parcelRequire("bRtox");

var $h720z = parcelRequire("h720z");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $aab61a900846093a$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $aab61a900846093a$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
const $aab61a900846093a$var$_defaultOptions = {
    overwriteBefore: 0,
    overwriteAfter: 0,
    undoStopBefore: true,
    undoStopAfter: true,
    adjustWhitespace: true,
    clipboardText: undefined,
    overtypingCapturer: undefined
};
let $aab61a900846093a$export$d27b4f7e5ea418b0 = class SnippetController2 {
    static get(editor) {
        return editor.getContribution(SnippetController2.ID);
    }
    dispose() {
        var _a;
        this._inSnippet.reset();
        this._hasPrevTabstop.reset();
        this._hasNextTabstop.reset();
        (_a = this._session) === null || _a === void 0 || _a.dispose();
        this._snippetListener.dispose();
    }
    insert(template, opts) {
        // this is here to find out more about the yet-not-understood
        // error that sometimes happens when we fail to inserted a nested
        // snippet
        try {
            this._doInsert(template, typeof opts === "undefined" ? $aab61a900846093a$var$_defaultOptions : Object.assign(Object.assign({}, $aab61a900846093a$var$_defaultOptions), opts));
        } catch (e) {
            this.cancel();
            this._logService.error(e);
            this._logService.error("snippet_error");
            this._logService.error("insert_template=", template);
            this._logService.error("existing_template=", this._session ? this._session._logInfo() : "<no_session>");
        }
    }
    _doInsert(template, opts) {
        if (!this._editor.hasModel()) return;
        // don't listen while inserting the snippet
        // as that is the inflight state causing cancelation
        this._snippetListener.clear();
        if (opts.undoStopBefore) this._editor.getModel().pushStackElement();
        if (!this._session) {
            this._modelVersionId = this._editor.getModel().getAlternativeVersionId();
            this._session = new (0, $28b804470d6f3919$export$d334bb6e0f563f7)(this._editor, template, opts);
            this._session.insert();
        } else this._session.merge(template, opts);
        if (opts.undoStopAfter) this._editor.getModel().pushStackElement();
        this._updateState();
        this._snippetListener.add(this._editor.onDidChangeModelContent((e)=>e.isFlush && this.cancel()));
        this._snippetListener.add(this._editor.onDidChangeModel(()=>this.cancel()));
        this._snippetListener.add(this._editor.onDidChangeCursorSelection(()=>this._updateState()));
    }
    _updateState() {
        if (!this._session || !this._editor.hasModel()) // canceled in the meanwhile
        return;
        if (this._modelVersionId === this._editor.getModel().getAlternativeVersionId()) // undo until the 'before' state happened
        // and makes use cancel snippet mode
        return this.cancel();
        if (!this._session.hasPlaceholder) // don't listen for selection changes and don't
        // update context keys when the snippet is plain text
        return this.cancel();
        if (this._session.isAtLastPlaceholder || !this._session.isSelectionWithinPlaceholders()) return this.cancel();
        this._inSnippet.set(true);
        this._hasPrevTabstop.set(!this._session.isAtFirstPlaceholder);
        this._hasNextTabstop.set(!this._session.isAtLastPlaceholder);
        this._handleChoice();
    }
    _handleChoice() {
        if (!this._session || !this._editor.hasModel()) {
            this._currentChoice = undefined;
            return;
        }
        const { choice: choice  } = this._session;
        if (!choice) {
            this._currentChoice = undefined;
            return;
        }
        if (this._currentChoice !== choice) {
            this._currentChoice = choice;
            this._editor.setSelections(this._editor.getSelections().map((s)=>(0, $cz0c7.Selection).fromPositions(s.getStartPosition())));
            const [first] = choice.options;
            (0, $abf46e0ea17ab20d$exports.showSimpleSuggestions)(this._editor, choice.options.map((option, i)=>{
                // let before = choice.options.slice(0, i);
                // let after = choice.options.slice(i);
                return {
                    kind: 13 /* Value */ ,
                    label: option.value,
                    insertText: option.value,
                    // insertText: `\${1|${after.concat(before).join(',')}|}$0`,
                    // snippetType: 'textmate',
                    sortText: "a".repeat(i + 1),
                    range: (0, $3HpR4.Range).fromPositions(this._editor.getPosition(), this._editor.getPosition().delta(0, first.value.length))
                };
            }));
        }
    }
    finish() {
        while(this._inSnippet.get())this.next();
    }
    cancel(resetSelection = false) {
        var _a;
        this._inSnippet.reset();
        this._hasPrevTabstop.reset();
        this._hasNextTabstop.reset();
        this._snippetListener.clear();
        (_a = this._session) === null || _a === void 0 || _a.dispose();
        this._session = undefined;
        this._modelVersionId = -1;
        if (resetSelection) // reset selection to the primary cursor when being asked
        // for. this happens when explicitly cancelling snippet mode,
        // e.g. when pressing ESC
        this._editor.setSelections([
            this._editor.getSelection()
        ]);
    }
    prev() {
        if (this._session) this._session.prev();
        this._updateState();
    }
    next() {
        if (this._session) this._session.next();
        this._updateState();
    }
    isInSnippet() {
        return Boolean(this._inSnippet.get());
    }
    constructor(_editor, _logService, contextKeyService){
        this._editor = _editor;
        this._logService = _logService;
        this._snippetListener = new (0, $atiRx.DisposableStore)();
        this._modelVersionId = -1;
        this._inSnippet = SnippetController2.InSnippetMode.bindTo(contextKeyService);
        this._hasNextTabstop = SnippetController2.HasNextTabstop.bindTo(contextKeyService);
        this._hasPrevTabstop = SnippetController2.HasPrevTabstop.bindTo(contextKeyService);
    }
};
$aab61a900846093a$export$d27b4f7e5ea418b0.ID = "snippetController2";
$aab61a900846093a$export$d27b4f7e5ea418b0.InSnippetMode = new (0, $bRtox.RawContextKey)("inSnippetMode", false, (0, $58WHl.localize)("inSnippetMode", "Whether the editor in current in snippet mode"));
$aab61a900846093a$export$d27b4f7e5ea418b0.HasNextTabstop = new (0, $bRtox.RawContextKey)("hasNextTabstop", false, (0, $58WHl.localize)("hasNextTabstop", "Whether there is a next tab stop when in snippet mode"));
$aab61a900846093a$export$d27b4f7e5ea418b0.HasPrevTabstop = new (0, $bRtox.RawContextKey)("hasPrevTabstop", false, (0, $58WHl.localize)("hasPrevTabstop", "Whether there is a previous tab stop when in snippet mode"));
$aab61a900846093a$export$d27b4f7e5ea418b0 = $aab61a900846093a$var$__decorate([
    $aab61a900846093a$var$__param(1, (0, $h720z.ILogService)),
    $aab61a900846093a$var$__param(2, (0, $bRtox.IContextKeyService))
], $aab61a900846093a$export$d27b4f7e5ea418b0);
(0, $gGOeQ.registerEditorContribution)($aab61a900846093a$export$d27b4f7e5ea418b0.ID, $aab61a900846093a$export$d27b4f7e5ea418b0);
const $aab61a900846093a$var$CommandCtor = (0, $gGOeQ.EditorCommand).bindToContribution($aab61a900846093a$export$d27b4f7e5ea418b0.get);
(0, $gGOeQ.registerEditorCommand)(new $aab61a900846093a$var$CommandCtor({
    id: "jumpToNextSnippetPlaceholder",
    precondition: (0, $bRtox.ContextKeyExpr).and($aab61a900846093a$export$d27b4f7e5ea418b0.InSnippetMode, $aab61a900846093a$export$d27b4f7e5ea418b0.HasNextTabstop),
    handler: (ctrl)=>ctrl.next(),
    kbOpts: {
        weight: 130,
        kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
        primary: 2 /* Tab */ 
    }
}));
(0, $gGOeQ.registerEditorCommand)(new $aab61a900846093a$var$CommandCtor({
    id: "jumpToPrevSnippetPlaceholder",
    precondition: (0, $bRtox.ContextKeyExpr).and($aab61a900846093a$export$d27b4f7e5ea418b0.InSnippetMode, $aab61a900846093a$export$d27b4f7e5ea418b0.HasPrevTabstop),
    handler: (ctrl)=>ctrl.prev(),
    kbOpts: {
        weight: 130,
        kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
        primary: 1026 /* Tab */ 
    }
}));
(0, $gGOeQ.registerEditorCommand)(new $aab61a900846093a$var$CommandCtor({
    id: "leaveSnippet",
    precondition: $aab61a900846093a$export$d27b4f7e5ea418b0.InSnippetMode,
    handler: (ctrl)=>ctrl.cancel(true),
    kbOpts: {
        weight: 130,
        kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
        primary: 9 /* Escape */ ,
        secondary: [
            1033 /* Escape */ 
        ]
    }
}));
(0, $gGOeQ.registerEditorCommand)(new $aab61a900846093a$var$CommandCtor({
    id: "acceptSnippet",
    precondition: $aab61a900846093a$export$d27b4f7e5ea418b0.InSnippetMode,
    handler: (ctrl)=>ctrl.finish()
}));



var $b47923b9d6636815$exports = {};

$parcel$export($b47923b9d6636815$exports, "ISuggestMemoryService", function () { return $b47923b9d6636815$export$d66aa79ce7d9c867; }, function (v) { return $b47923b9d6636815$export$d66aa79ce7d9c867 = v; });

var $eFOsn = parcelRequire("eFOsn");

var $atiRx = parcelRequire("atiRx");

var $4HO2P = parcelRequire("4HO2P");

var $eKhCe = parcelRequire("eKhCe");

var $9BIBz = parcelRequire("9BIBz");

var $6pFSu = parcelRequire("6pFSu");

var $iZW67 = parcelRequire("iZW67");

var $6XVdL = parcelRequire("6XVdL");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $b47923b9d6636815$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $b47923b9d6636815$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
class $b47923b9d6636815$export$29d4d7bc03c348a5 {
    select(model, pos, items) {
        if (items.length === 0) return 0;
        let topScore = items[0].score[0];
        for(let i = 0; i < items.length; i++){
            const { score: score , completion: suggestion  } = items[i];
            if (score[0] !== topScore) break;
            if (suggestion.preselect) // stop when seeing an auto-select-item
            return i;
        }
        return 0;
    }
    constructor(name){
        this.name = name;
    }
}
class $b47923b9d6636815$export$f425102ee8def711 extends $b47923b9d6636815$export$29d4d7bc03c348a5 {
    memorize(model, pos, item) {
    // no-op
    }
    toJSON() {
        return undefined;
    }
    fromJSON() {
    //
    }
    constructor(){
        super("first");
    }
}
class $b47923b9d6636815$export$ebb88911201cb1d1 extends $b47923b9d6636815$export$29d4d7bc03c348a5 {
    memorize(model, pos, item) {
        const key = `${model.getLanguageId()}/${item.textLabel}`;
        this._cache.set(key, {
            touch: this._seq++,
            type: item.completion.kind,
            insertText: item.completion.insertText
        });
    }
    select(model, pos, items) {
        if (items.length === 0) return 0;
        const lineSuffix = model.getLineContent(pos.lineNumber).substr(pos.column - 10, pos.column - 1);
        if (/\s$/.test(lineSuffix)) return super.select(model, pos, items);
        let topScore = items[0].score[0];
        let indexPreselect = -1;
        let indexRecency = -1;
        let seq = -1;
        for(let i = 0; i < items.length; i++){
            if (items[i].score[0] !== topScore) break;
            const key = `${model.getLanguageId()}/${items[i].textLabel}`;
            const item = this._cache.peek(key);
            if (item && item.touch > seq && item.type === items[i].completion.kind && item.insertText === items[i].completion.insertText) {
                seq = item.touch;
                indexRecency = i;
            }
            if (items[i].completion.preselect && indexPreselect === -1) // stop when seeing an auto-select-item
            return indexPreselect = i;
        }
        if (indexRecency !== -1) return indexRecency;
        else if (indexPreselect !== -1) return indexPreselect;
        else return 0;
    }
    toJSON() {
        return this._cache.toJSON();
    }
    fromJSON(data) {
        this._cache.clear();
        let seq = 0;
        for (const [key, value] of data){
            value.touch = seq;
            value.type = typeof value.type === "number" ? value.type : (0, $eKhCe.completionKindFromString)(value.type);
            this._cache.set(key, value);
        }
        this._seq = this._cache.size;
    }
    constructor(){
        super("recentlyUsed");
        this._cache = new (0, $4HO2P.LRUCache)(300, 0.66);
        this._seq = 0;
    }
}
class $b47923b9d6636815$export$9b0af8db2fb435e5 extends $b47923b9d6636815$export$29d4d7bc03c348a5 {
    memorize(model, pos, item) {
        const { word: word  } = model.getWordUntilPosition(pos);
        const key = `${model.getLanguageId()}/${word}`;
        this._trie.set(key, {
            type: item.completion.kind,
            insertText: item.completion.insertText,
            touch: this._seq++
        });
    }
    select(model, pos, items) {
        let { word: word  } = model.getWordUntilPosition(pos);
        if (!word) return super.select(model, pos, items);
        let key = `${model.getLanguageId()}/${word}`;
        let item = this._trie.get(key);
        if (!item) item = this._trie.findSubstr(key);
        if (item) for(let i = 0; i < items.length; i++){
            let { kind: kind , insertText: insertText  } = items[i].completion;
            if (kind === item.type && insertText === item.insertText) return i;
        }
        return super.select(model, pos, items);
    }
    toJSON() {
        let entries = [];
        this._trie.forEach((value, key)=>entries.push([
                key,
                value
            ]));
        // sort by last recently used (touch), then
        // take the top 200 item and normalize their
        // touch
        entries.sort((a, b)=>-(a[1].touch - b[1].touch)).forEach((value, i)=>value[1].touch = i);
        return entries.slice(0, 200);
    }
    fromJSON(data) {
        this._trie.clear();
        if (data.length > 0) {
            this._seq = data[0][1].touch + 1;
            for (const [key, value] of data){
                value.type = typeof value.type === "number" ? value.type : (0, $eKhCe.completionKindFromString)(value.type);
                this._trie.set(key, value);
            }
        }
    }
    constructor(){
        super("recentlyUsedByPrefix");
        this._trie = (0, $4HO2P.TernarySearchTree).forStrings();
        this._seq = 0;
    }
}
let $b47923b9d6636815$export$50aa987e170ccef7 = class SuggestMemoryService {
    dispose() {
        this._disposables.dispose();
        this._persistSoon.dispose();
    }
    memorize(model, pos, item) {
        this._withStrategy(model, pos).memorize(model, pos, item);
        this._persistSoon.schedule();
    }
    select(model, pos, items) {
        return this._withStrategy(model, pos).select(model, pos, items);
    }
    _withStrategy(model, pos) {
        var _a;
        const mode = this._configService.getValue("editor.suggestSelection", {
            overrideIdentifier: model.getLanguageIdAtPosition(pos.lineNumber, pos.column),
            resource: model.uri
        });
        if (((_a = this._strategy) === null || _a === void 0 ? void 0 : _a.name) !== mode) {
            this._saveState();
            const ctor = SuggestMemoryService._strategyCtors.get(mode) || $b47923b9d6636815$export$f425102ee8def711;
            this._strategy = new ctor();
            try {
                const share = this._configService.getValue("editor.suggest.shareSuggestSelections");
                const scope = share ? 0 /* GLOBAL */  : 1 /* WORKSPACE */ ;
                const raw = this._storageService.get(`${SuggestMemoryService._storagePrefix}/${mode}`, scope);
                if (raw) this._strategy.fromJSON(JSON.parse(raw));
            } catch (e) {
            // things can go wrong with JSON...
            }
        }
        return this._strategy;
    }
    _saveState() {
        if (this._strategy) {
            const share = this._configService.getValue("editor.suggest.shareSuggestSelections");
            const scope = share ? 0 /* GLOBAL */  : 1 /* WORKSPACE */ ;
            const raw = JSON.stringify(this._strategy);
            this._storageService.store(`${SuggestMemoryService._storagePrefix}/${this._strategy.name}`, raw, scope, 1 /* MACHINE */ );
        }
    }
    constructor(_storageService, _configService){
        this._storageService = _storageService;
        this._configService = _configService;
        this._disposables = new (0, $atiRx.DisposableStore)();
        this._persistSoon = new (0, $eFOsn.RunOnceScheduler)(()=>this._saveState(), 500);
        this._disposables.add(_storageService.onWillSaveState((e)=>{
            if (e.reason === (0, $6XVdL.WillSaveStateReason).SHUTDOWN) this._saveState();
        }));
    }
};
$b47923b9d6636815$export$50aa987e170ccef7._strategyCtors = new Map([
    [
        "recentlyUsedByPrefix",
        $b47923b9d6636815$export$9b0af8db2fb435e5
    ],
    [
        "recentlyUsed",
        $b47923b9d6636815$export$ebb88911201cb1d1
    ],
    [
        "first",
        $b47923b9d6636815$export$f425102ee8def711
    ]
]);
$b47923b9d6636815$export$50aa987e170ccef7._storagePrefix = "suggest/memories";
$b47923b9d6636815$export$50aa987e170ccef7 = $b47923b9d6636815$var$__decorate([
    $b47923b9d6636815$var$__param(0, (0, $6XVdL.IStorageService)),
    $b47923b9d6636815$var$__param(1, (0, $9BIBz.IConfigurationService))
], $b47923b9d6636815$export$50aa987e170ccef7);
const $b47923b9d6636815$export$d66aa79ce7d9c867 = (0, $iZW67.createDecorator)("ISuggestMemories");
(0, $6pFSu.registerSingleton)($b47923b9d6636815$export$d66aa79ce7d9c867, $b47923b9d6636815$export$50aa987e170ccef7, true);


var $a4cc70188d6b2eff$exports = {};

$parcel$export($a4cc70188d6b2eff$exports, "WordContextKey", function () { return $a4cc70188d6b2eff$export$f4d1b9d63b237092; }, function (v) { return $a4cc70188d6b2eff$export$f4d1b9d63b237092 = v; });

var $bRtox = parcelRequire("bRtox");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $a4cc70188d6b2eff$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $a4cc70188d6b2eff$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
let $a4cc70188d6b2eff$export$f4d1b9d63b237092 = class WordContextKey {
    dispose() {
        var _a;
        this._configListener.dispose();
        (_a = this._selectionListener) === null || _a === void 0 || _a.dispose();
        this._ckAtEnd.reset();
    }
    _update() {
        // only update this when tab completions are enabled
        const enabled = this._editor.getOption(110 /* tabCompletion */ ) === "on";
        if (this._enabled === enabled) return;
        this._enabled = enabled;
        if (this._enabled) {
            const checkForWordEnd = ()=>{
                if (!this._editor.hasModel()) {
                    this._ckAtEnd.set(false);
                    return;
                }
                const model = this._editor.getModel();
                const selection = this._editor.getSelection();
                const word = model.getWordAtPosition(selection.getStartPosition());
                if (!word) {
                    this._ckAtEnd.set(false);
                    return;
                }
                this._ckAtEnd.set(word.endColumn === selection.getStartPosition().column);
            };
            this._selectionListener = this._editor.onDidChangeCursorSelection(checkForWordEnd);
            checkForWordEnd();
        } else if (this._selectionListener) {
            this._ckAtEnd.reset();
            this._selectionListener.dispose();
            this._selectionListener = undefined;
        }
    }
    constructor(_editor, contextKeyService){
        this._editor = _editor;
        this._enabled = false;
        this._ckAtEnd = WordContextKey.AtEnd.bindTo(contextKeyService);
        this._configListener = this._editor.onDidChangeConfiguration((e)=>e.hasChanged(110 /* tabCompletion */ ) && this._update());
        this._update();
    }
};
$a4cc70188d6b2eff$export$f4d1b9d63b237092.AtEnd = new (0, $bRtox.RawContextKey)("atEndOfWord", false);
$a4cc70188d6b2eff$export$f4d1b9d63b237092 = $a4cc70188d6b2eff$var$__decorate([
    $a4cc70188d6b2eff$var$__param(1, (0, $bRtox.IContextKeyService))
], $a4cc70188d6b2eff$export$f4d1b9d63b237092);



var $58WHl = parcelRequire("58WHl");

var $2IxgH = parcelRequire("2IxgH");

var $fAXtX = parcelRequire("fAXtX");

var $bRtox = parcelRequire("bRtox");

var $iZW67 = parcelRequire("iZW67");

var $cczLz = parcelRequire("cczLz");

var $h720z = parcelRequire("h720z");

var $d5d5ced7bee2e223$exports = {};

$parcel$export($d5d5ced7bee2e223$exports, "SuggestAlternatives", function () { return $d5d5ced7bee2e223$export$26081dcda3428b4d; }, function (v) { return $d5d5ced7bee2e223$export$26081dcda3428b4d = v; });

var $bRtox = parcelRequire("bRtox");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $d5d5ced7bee2e223$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $d5d5ced7bee2e223$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
let $d5d5ced7bee2e223$export$26081dcda3428b4d = class SuggestAlternatives {
    dispose() {
        this.reset();
    }
    reset() {
        var _a;
        this._ckOtherSuggestions.reset();
        (_a = this._listener) === null || _a === void 0 || _a.dispose();
        this._model = undefined;
        this._acceptNext = undefined;
        this._ignore = false;
    }
    set({ model: model , index: index  }, acceptNext) {
        // no suggestions -> nothing to do
        if (model.items.length === 0) {
            this.reset();
            return;
        }
        // no alternative suggestions -> nothing to do
        let nextIndex = SuggestAlternatives._moveIndex(true, model, index);
        if (nextIndex === index) {
            this.reset();
            return;
        }
        this._acceptNext = acceptNext;
        this._model = model;
        this._index = index;
        this._listener = this._editor.onDidChangeCursorPosition(()=>{
            if (!this._ignore) this.reset();
        });
        this._ckOtherSuggestions.set(true);
    }
    static _moveIndex(fwd, model, index) {
        let newIndex = index;
        while(true){
            newIndex = (newIndex + model.items.length + (fwd ? 1 : -1)) % model.items.length;
            if (newIndex === index) break;
            if (!model.items[newIndex].completion.additionalTextEdits) break;
        }
        return newIndex;
    }
    next() {
        this._move(true);
    }
    prev() {
        this._move(false);
    }
    _move(fwd) {
        if (!this._model) // nothing to reason about
        return;
        try {
            this._ignore = true;
            this._index = SuggestAlternatives._moveIndex(fwd, this._model, this._index);
            this._acceptNext({
                index: this._index,
                item: this._model.items[this._index],
                model: this._model
            });
        } finally{
            this._ignore = false;
        }
    }
    constructor(_editor, contextKeyService){
        this._editor = _editor;
        this._index = 0;
        this._ckOtherSuggestions = SuggestAlternatives.OtherSuggestions.bindTo(contextKeyService);
    }
};
$d5d5ced7bee2e223$export$26081dcda3428b4d.OtherSuggestions = new (0, $bRtox.RawContextKey)("hasOtherSuggestions", false);
$d5d5ced7bee2e223$export$26081dcda3428b4d = $d5d5ced7bee2e223$var$__decorate([
    $d5d5ced7bee2e223$var$__param(1, (0, $bRtox.IContextKeyService))
], $d5d5ced7bee2e223$export$26081dcda3428b4d);



var $4xCD7 = parcelRequire("4xCD7");

var $atiRx = parcelRequire("atiRx");

var $kv7iV = parcelRequire("kv7iV");
class $4f7505ec532ad73a$export$1c5a4637a8cc1b47 {
    _onItem(selected) {
        if (!selected || !(0, $4xCD7.isNonEmptyArray)(selected.item.completion.commitCharacters)) {
            // no item or no commit characters
            this.reset();
            return;
        }
        if (this._active && this._active.item.item === selected.item) // still the same item
        return;
        // keep item and its commit characters
        const acceptCharacters = new (0, $kv7iV.CharacterSet)();
        for (const ch of selected.item.completion.commitCharacters)if (ch.length > 0) acceptCharacters.add(ch.charCodeAt(0));
        this._active = {
            acceptCharacters: acceptCharacters,
            item: selected
        };
    }
    reset() {
        this._active = undefined;
    }
    dispose() {
        this._disposables.dispose();
    }
    constructor(editor, widget, accept){
        this._disposables = new (0, $atiRx.DisposableStore)();
        this._disposables.add(widget.onDidShow(()=>this._onItem(widget.getFocusedItem())));
        this._disposables.add(widget.onDidFocus(this._onItem, this));
        this._disposables.add(widget.onDidHide(this.reset, this));
        this._disposables.add(editor.onWillType((text)=>{
            if (this._active && !widget.isFrozen()) {
                const ch = text.charCodeAt(text.length - 1);
                if (this._active.acceptCharacters.has(ch) && editor.getOption(0 /* acceptSuggestionOnCommitCharacter */ )) accept(this._active.item);
            }
        }));
    }
}


var $942d743337bbaca0$exports = {};

$parcel$export($942d743337bbaca0$exports, "SuggestModel", function () { return $942d743337bbaca0$export$bd6d3a37695095d5; }, function (v) { return $942d743337bbaca0$export$bd6d3a37695095d5 = v; });

var $eFOsn = parcelRequire("eFOsn");

var $gnEXx = parcelRequire("gnEXx");

var $g0782 = parcelRequire("g0782");

var $fSvkC = parcelRequire("fSvkC");

var $atiRx = parcelRequire("atiRx");

var $9TEeL = parcelRequire("9TEeL");

var $cz0c7 = parcelRequire("cz0c7");

var $eKhCe = parcelRequire("eKhCe");

var $7N0CJ = parcelRequire("7N0CJ");

var $1176407fc728ffa7$exports = {};

$parcel$export($1176407fc728ffa7$exports, "WordDistance", function () { return $1176407fc728ffa7$export$620c7fa9f786bff6; }, function (v) { return $1176407fc728ffa7$export$620c7fa9f786bff6 = v; });

var $4xCD7 = parcelRequire("4xCD7");

var $3HpR4 = parcelRequire("3HpR4");
var $b57582352cb755a7$exports = {};

$parcel$export($b57582352cb755a7$exports, "BracketSelectionRangeProvider", function () { return $b57582352cb755a7$export$aa5c9041294ca4c8; }, function (v) { return $b57582352cb755a7$export$aa5c9041294ca4c8 = v; });

var $2JXtA = parcelRequire("2JXtA");

var $8qXsZ = parcelRequire("8qXsZ");

var $3HpR4 = parcelRequire("3HpR4");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $b57582352cb755a7$var$__awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class $b57582352cb755a7$export$aa5c9041294ca4c8 {
    provideSelectionRanges(model, positions) {
        return $b57582352cb755a7$var$__awaiter(this, void 0, void 0, function*() {
            const result = [];
            for (const position of positions){
                const bucket = [];
                result.push(bucket);
                const ranges = new Map();
                yield new Promise((resolve)=>$b57582352cb755a7$export$aa5c9041294ca4c8._bracketsRightYield(resolve, 0, model, position, ranges));
                yield new Promise((resolve)=>$b57582352cb755a7$export$aa5c9041294ca4c8._bracketsLeftYield(resolve, 0, model, position, ranges, bucket));
            }
            return result;
        });
    }
    static _bracketsRightYield(resolve, round, model, pos, ranges) {
        const counts = new Map();
        const t1 = Date.now();
        while(true){
            if (round >= $b57582352cb755a7$export$aa5c9041294ca4c8._maxRounds) {
                resolve();
                break;
            }
            if (!pos) {
                resolve();
                break;
            }
            let bracket = model.bracketPairs.findNextBracket(pos);
            if (!bracket) {
                resolve();
                break;
            }
            let d = Date.now() - t1;
            if (d > $b57582352cb755a7$export$aa5c9041294ca4c8._maxDuration) {
                setTimeout(()=>$b57582352cb755a7$export$aa5c9041294ca4c8._bracketsRightYield(resolve, round + 1, model, pos, ranges));
                break;
            }
            const key = bracket.close[0];
            if (bracket.isOpen) {
                // wait for closing
                let val = counts.has(key) ? counts.get(key) : 0;
                counts.set(key, val + 1);
            } else {
                // process closing
                let val1 = counts.has(key) ? counts.get(key) : 0;
                val1 -= 1;
                counts.set(key, Math.max(0, val1));
                if (val1 < 0) {
                    let list = ranges.get(key);
                    if (!list) {
                        list = new (0, $2JXtA.LinkedList)();
                        ranges.set(key, list);
                    }
                    list.push(bracket.range);
                }
            }
            pos = bracket.range.getEndPosition();
        }
    }
    static _bracketsLeftYield(resolve, round, model, pos, ranges, bucket) {
        const counts = new Map();
        const t1 = Date.now();
        while(true){
            if (round >= $b57582352cb755a7$export$aa5c9041294ca4c8._maxRounds && ranges.size === 0) {
                resolve();
                break;
            }
            if (!pos) {
                resolve();
                break;
            }
            let bracket = model.bracketPairs.findPrevBracket(pos);
            if (!bracket) {
                resolve();
                break;
            }
            let d = Date.now() - t1;
            if (d > $b57582352cb755a7$export$aa5c9041294ca4c8._maxDuration) {
                setTimeout(()=>$b57582352cb755a7$export$aa5c9041294ca4c8._bracketsLeftYield(resolve, round + 1, model, pos, ranges, bucket));
                break;
            }
            const key = bracket.close[0];
            if (!bracket.isOpen) {
                // wait for opening
                let val = counts.has(key) ? counts.get(key) : 0;
                counts.set(key, val + 1);
            } else {
                // opening
                let val1 = counts.has(key) ? counts.get(key) : 0;
                val1 -= 1;
                counts.set(key, Math.max(0, val1));
                if (val1 < 0) {
                    let list = ranges.get(key);
                    if (list) {
                        let closing = list.shift();
                        if (list.size === 0) ranges.delete(key);
                        const innerBracket = (0, $3HpR4.Range).fromPositions(bracket.range.getEndPosition(), closing.getStartPosition());
                        const outerBracket = (0, $3HpR4.Range).fromPositions(bracket.range.getStartPosition(), closing.getEndPosition());
                        bucket.push({
                            range: innerBracket
                        });
                        bucket.push({
                            range: outerBracket
                        });
                        $b57582352cb755a7$export$aa5c9041294ca4c8._addBracketLeading(model, outerBracket, bucket);
                    }
                }
            }
            pos = bracket.range.getStartPosition();
        }
    }
    static _addBracketLeading(model, bracket, bucket) {
        if (bracket.startLineNumber === bracket.endLineNumber) return;
        // xxxxxxxx {
        //
        // }
        const startLine = bracket.startLineNumber;
        const column = model.getLineFirstNonWhitespaceColumn(startLine);
        if (column !== 0 && column !== bracket.startColumn) {
            bucket.push({
                range: (0, $3HpR4.Range).fromPositions(new (0, $8qXsZ.Position)(startLine, column), bracket.getEndPosition())
            });
            bucket.push({
                range: (0, $3HpR4.Range).fromPositions(new (0, $8qXsZ.Position)(startLine, 1), bracket.getEndPosition())
            });
        }
        // xxxxxxxx
        // {
        //
        // }
        const aboveLine = startLine - 1;
        if (aboveLine > 0) {
            const column1 = model.getLineFirstNonWhitespaceColumn(aboveLine);
            if (column1 === bracket.startColumn && column1 !== model.getLineLastNonWhitespaceColumn(aboveLine)) {
                bucket.push({
                    range: (0, $3HpR4.Range).fromPositions(new (0, $8qXsZ.Position)(aboveLine, column1), bracket.getEndPosition())
                });
                bucket.push({
                    range: (0, $3HpR4.Range).fromPositions(new (0, $8qXsZ.Position)(aboveLine, 1), bracket.getEndPosition())
                });
            }
        }
    }
}
$b57582352cb755a7$export$aa5c9041294ca4c8._maxDuration = 30;
$b57582352cb755a7$export$aa5c9041294ca4c8._maxRounds = 2;


/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $1176407fc728ffa7$var$__awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class $1176407fc728ffa7$export$620c7fa9f786bff6 {
    static create(service, editor) {
        return $1176407fc728ffa7$var$__awaiter(this, void 0, void 0, function*() {
            if (!editor.getOption(105 /* suggest */ ).localityBonus) return $1176407fc728ffa7$export$620c7fa9f786bff6.None;
            if (!editor.hasModel()) return $1176407fc728ffa7$export$620c7fa9f786bff6.None;
            const model = editor.getModel();
            const position = editor.getPosition();
            if (!service.canComputeWordRanges(model.uri)) return $1176407fc728ffa7$export$620c7fa9f786bff6.None;
            const [ranges] = yield new (0, $b57582352cb755a7$exports.BracketSelectionRangeProvider)().provideSelectionRanges(model, [
                position
            ]);
            if (ranges.length === 0) return $1176407fc728ffa7$export$620c7fa9f786bff6.None;
            const wordRanges = yield service.computeWordRanges(model.uri, ranges[0].range);
            if (!wordRanges) return $1176407fc728ffa7$export$620c7fa9f786bff6.None;
            // remove current word
            const wordUntilPos = model.getWordUntilPosition(position);
            delete wordRanges[wordUntilPos.word];
            return new class extends $1176407fc728ffa7$export$620c7fa9f786bff6 {
                distance(anchor, item) {
                    if (!position.equals(editor.getPosition())) return 0;
                    if (item.kind === 17 /* Keyword */ ) return 2097152;
                    let word = typeof item.label === "string" ? item.label : item.label.label;
                    let wordLines = wordRanges[word];
                    if ((0, $4xCD7.isFalsyOrEmpty)(wordLines)) return 2097152;
                    let idx = (0, $4xCD7.binarySearch)(wordLines, (0, $3HpR4.Range).fromPositions(anchor), (0, $3HpR4.Range).compareRangesUsingStarts);
                    let bestWordRange = idx >= 0 ? wordLines[idx] : wordLines[Math.max(0, ~idx - 1)];
                    let blockDistance = ranges.length;
                    for (const range of ranges){
                        if (!(0, $3HpR4.Range).containsRange(range.range, bestWordRange)) break;
                        blockDistance -= 1;
                    }
                    return blockDistance;
                }
            };
        });
    }
}
$1176407fc728ffa7$export$620c7fa9f786bff6.None = new class extends $1176407fc728ffa7$export$620c7fa9f786bff6 {
    distance() {
        return 0;
    }
};



var $lkKTA = parcelRequire("lkKTA");

var $9BIBz = parcelRequire("9BIBz");

var $bRtox = parcelRequire("bRtox");

var $h720z = parcelRequire("h720z");

var $2EG7I = parcelRequire("2EG7I");

var $4xCD7 = parcelRequire("4xCD7");

var $c8WLW = parcelRequire("c8WLW");

var $9TEeL = parcelRequire("9TEeL");
class $5c780915263ddae6$export$894a84ea03928d60 {
    constructor(leadingLineContent, characterCountDelta){
        this.leadingLineContent = leadingLineContent;
        this.characterCountDelta = characterCountDelta;
    }
}
class $5c780915263ddae6$export$8420ec00c11e432f {
    get lineContext() {
        return this._lineContext;
    }
    set lineContext(value) {
        if (this._lineContext.leadingLineContent !== value.leadingLineContent || this._lineContext.characterCountDelta !== value.characterCountDelta) {
            this._refilterKind = this._lineContext.characterCountDelta < value.characterCountDelta && this._filteredItems ? 2 /* Incr */  : 1 /* All */ ;
            this._lineContext = value;
        }
    }
    get items() {
        this._ensureCachedState();
        return this._filteredItems;
    }
    get allProvider() {
        this._ensureCachedState();
        return this._providerInfo.keys();
    }
    get incomplete() {
        this._ensureCachedState();
        const result = new Set();
        for (let [provider, incomplete] of this._providerInfo)if (incomplete) result.add(provider);
        return result;
    }
    adopt(except) {
        let res = [];
        for(let i = 0; i < this._items.length;)if (!except.has(this._items[i].provider)) {
            res.push(this._items[i]);
            // unordered removed
            this._items[i] = this._items[this._items.length - 1];
            this._items.pop();
        } else // continue with next item
        i++;
        this._refilterKind = 1 /* All */ ;
        return res;
    }
    get stats() {
        this._ensureCachedState();
        return this._stats;
    }
    _ensureCachedState() {
        if (this._refilterKind !== 0 /* Nothing */ ) this._createCachedState();
    }
    _createCachedState() {
        this._providerInfo = new Map();
        const labelLengths = [];
        const { leadingLineContent: leadingLineContent , characterCountDelta: characterCountDelta  } = this._lineContext;
        let word = "";
        let wordLow = "";
        // incrementally filter less
        const source = this._refilterKind === 1 /* All */  ? this._items : this._filteredItems;
        const target = [];
        // picks a score function based on the number of
        // items that we have to score/filter and based on the
        // user-configuration
        const scoreFn = !this._options.filterGraceful || source.length > 2000 ? (0, $c8WLW.fuzzyScore) : (0, $c8WLW.fuzzyScoreGracefulAggressive);
        for(let i = 0; i < source.length; i++){
            const item = source[i];
            if (item.isInvalid) continue; // SKIP invalid items
            // collect all support, know if their result is incomplete
            this._providerInfo.set(item.provider, Boolean(item.container.incomplete));
            // 'word' is that remainder of the current line that we
            // filter and score against. In theory each suggestion uses a
            // different word, but in practice not - that's why we cache
            const overwriteBefore = item.position.column - item.editStart.column;
            const wordLen = overwriteBefore + characterCountDelta - (item.position.column - this._column);
            if (word.length !== wordLen) {
                word = wordLen === 0 ? "" : leadingLineContent.slice(-wordLen);
                wordLow = word.toLowerCase();
            }
            // remember the word against which this item was
            // scored
            item.word = word;
            if (wordLen === 0) // when there is nothing to score against, don't
            // event try to do. Use a const rank and rely on
            // the fallback-sort using the initial sort order.
            // use a score of `-100` because that is out of the
            // bound of values `fuzzyScore` will return
            item.score = (0, $c8WLW.FuzzyScore).Default;
            else {
                // skip word characters that are whitespace until
                // we have hit the replace range (overwriteBefore)
                let wordPos = 0;
                while(wordPos < overwriteBefore){
                    const ch = word.charCodeAt(wordPos);
                    if (ch === 32 /* Space */  || ch === 9 /* Tab */ ) wordPos += 1;
                    else break;
                }
                if (wordPos >= wordLen) // the wordPos at which scoring starts is the whole word
                // and therefore the same rules as not having a word apply
                item.score = (0, $c8WLW.FuzzyScore).Default;
                else if (typeof item.completion.filterText === "string") {
                    // when there is a `filterText` it must match the `word`.
                    // if it matches we check with the label to compute highlights
                    // and if that doesn't yield a result we have no highlights,
                    // despite having the match
                    let match = scoreFn(word, wordLow, wordPos, item.completion.filterText, item.filterTextLow, 0, false);
                    if (!match) continue; // NO match
                    if ((0, $9TEeL.compareIgnoreCase)(item.completion.filterText, item.textLabel) === 0) // filterText and label are actually the same -> use good highlights
                    item.score = match;
                    else {
                        // re-run the scorer on the label in the hope of a result BUT use the rank
                        // of the filterText-match
                        item.score = (0, $c8WLW.anyScore)(word, wordLow, wordPos, item.textLabel, item.labelLow, 0);
                        item.score[0] = match[0]; // use score from filterText
                    }
                } else {
                    // by default match `word` against the `label`
                    let match1 = scoreFn(word, wordLow, wordPos, item.textLabel, item.labelLow, 0, false);
                    if (!match1) continue; // NO match
                    item.score = match1;
                }
            }
            item.idx = i;
            item.distance = this._wordDistance.distance(item.position, item.completion);
            target.push(item);
            // update stats
            labelLengths.push(item.textLabel.length);
        }
        this._filteredItems = target.sort(this._snippetCompareFn);
        this._refilterKind = 0 /* Nothing */ ;
        this._stats = {
            pLabelLen: labelLengths.length ? (0, $4xCD7.quickSelect)(labelLengths.length - .85, labelLengths, (a, b)=>a - b) : 0
        };
    }
    static _compareCompletionItems(a, b) {
        if (a.score[0] > b.score[0]) return -1;
        else if (a.score[0] < b.score[0]) return 1;
        else if (a.distance < b.distance) return -1;
        else if (a.distance > b.distance) return 1;
        else if (a.idx < b.idx) return -1;
        else if (a.idx > b.idx) return 1;
        else return 0;
    }
    static _compareCompletionItemsSnippetsDown(a, b) {
        if (a.completion.kind !== b.completion.kind) {
            if (a.completion.kind === 27 /* Snippet */ ) return 1;
            else if (b.completion.kind === 27 /* Snippet */ ) return -1;
        }
        return $5c780915263ddae6$export$8420ec00c11e432f._compareCompletionItems(a, b);
    }
    static _compareCompletionItemsSnippetsUp(a, b) {
        if (a.completion.kind !== b.completion.kind) {
            if (a.completion.kind === 27 /* Snippet */ ) return -1;
            else if (b.completion.kind === 27 /* Snippet */ ) return 1;
        }
        return $5c780915263ddae6$export$8420ec00c11e432f._compareCompletionItems(a, b);
    }
    constructor(items, column, lineContext, wordDistance, options, snippetSuggestions, clipboardText){
        this.clipboardText = clipboardText;
        this._snippetCompareFn = $5c780915263ddae6$export$8420ec00c11e432f._compareCompletionItems;
        this._items = items;
        this._column = column;
        this._wordDistance = wordDistance;
        this._options = options;
        this._refilterKind = 1 /* All */ ;
        this._lineContext = lineContext;
        if (snippetSuggestions === "top") this._snippetCompareFn = $5c780915263ddae6$export$8420ec00c11e432f._compareCompletionItemsSnippetsUp;
        else if (snippetSuggestions === "bottom") this._snippetCompareFn = $5c780915263ddae6$export$8420ec00c11e432f._compareCompletionItemsSnippetsDown;
    }
}



/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $942d743337bbaca0$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $942d743337bbaca0$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var $942d743337bbaca0$var$__awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class $942d743337bbaca0$export$894a84ea03928d60 {
    static shouldAutoTrigger(editor) {
        if (!editor.hasModel()) return false;
        const model = editor.getModel();
        const pos = editor.getPosition();
        model.tokenizeIfCheap(pos.lineNumber);
        const word = model.getWordAtPosition(pos);
        if (!word) return false;
        if (word.endColumn !== pos.column) return false;
        if (!isNaN(Number(word.word))) return false;
        return true;
    }
    constructor(model, position, auto, shy){
        this.leadingLineContent = model.getLineContent(position.lineNumber).substr(0, position.column - 1);
        this.leadingWord = model.getWordUntilPosition(position);
        this.lineNumber = position.lineNumber;
        this.column = position.column;
        this.auto = auto;
        this.shy = shy;
    }
}
function $942d743337bbaca0$var$isSuggestPreviewEnabled(editor) {
    return editor.getOption(105 /* suggest */ ).preview;
}
function $942d743337bbaca0$var$canShowQuickSuggest(editor, contextKeyService, configurationService) {
    if (!Boolean(contextKeyService.getContextKeyValue("inlineSuggestionVisible"))) // Allow if there is no inline suggestion.
    return true;
    const allowQuickSuggestions = configurationService.getValue("editor.inlineSuggest.allowQuickSuggestions");
    if (allowQuickSuggestions !== undefined) // Use setting if available.
    return Boolean(allowQuickSuggestions);
    // Don't allow if inline suggestions are visible and no suggest preview is configured.
    // TODO disabled for copilot
    return false;
}
function $942d743337bbaca0$var$canShowSuggestOnTriggerCharacters(editor, contextKeyService, configurationService) {
    if (!Boolean(contextKeyService.getContextKeyValue("inlineSuggestionVisible"))) // Allow if there is no inline suggestion.
    return true;
    const allowQuickSuggestions = configurationService.getValue("editor.inlineSuggest.allowSuggestOnTriggerCharacters");
    if (allowQuickSuggestions !== undefined) // Use setting if available.
    return Boolean(allowQuickSuggestions);
    // Don't allow if inline suggestions are visible and no suggest preview is configured.
    // TODO disabled for copilot
    return false;
}
let $942d743337bbaca0$export$bd6d3a37695095d5 = class SuggestModel {
    dispose() {
        (0, $atiRx.dispose)(this._triggerCharacterListener);
        (0, $atiRx.dispose)([
            this._onDidCancel,
            this._onDidSuggest,
            this._onDidTrigger,
            this._triggerQuickSuggest
        ]);
        this._toDispose.dispose();
        this._completionDisposables.dispose();
        this.cancel();
    }
    // --- handle configuration & precondition changes
    _updateQuickSuggest() {
        this._quickSuggestDelay = this._editor.getOption(79 /* quickSuggestionsDelay */ );
        if (isNaN(this._quickSuggestDelay) || !this._quickSuggestDelay && this._quickSuggestDelay !== 0 || this._quickSuggestDelay < 0) this._quickSuggestDelay = 10;
    }
    _updateTriggerCharacters() {
        this._triggerCharacterListener.clear();
        if (this._editor.getOption(80 /* readOnly */ ) || !this._editor.hasModel() || !this._editor.getOption(108 /* suggestOnTriggerCharacters */ )) return;
        const supportsByTriggerCharacter = new Map();
        for (const support of (0, $eKhCe.CompletionProviderRegistry).all(this._editor.getModel()))for (const ch of support.triggerCharacters || []){
            let set = supportsByTriggerCharacter.get(ch);
            if (!set) {
                set = new Set();
                set.add((0, $abf46e0ea17ab20d$exports.getSnippetSuggestSupport)());
                supportsByTriggerCharacter.set(ch, set);
            }
            set.add(support);
        }
        const checkTriggerCharacter = (text)=>{
            if (!$942d743337bbaca0$var$canShowSuggestOnTriggerCharacters(this._editor, this._contextKeyService, this._configurationService)) return;
            if ($942d743337bbaca0$export$894a84ea03928d60.shouldAutoTrigger(this._editor)) // don't trigger by trigger characters when this is a case for quick suggest
            return;
            if (!text) {
                // came here from the compositionEnd-event
                const position = this._editor.getPosition();
                const model = this._editor.getModel();
                text = model.getLineContent(position.lineNumber).substr(0, position.column - 1);
            }
            let lastChar = "";
            if ((0, $9TEeL.isLowSurrogate)(text.charCodeAt(text.length - 1))) {
                if ((0, $9TEeL.isHighSurrogate)(text.charCodeAt(text.length - 2))) lastChar = text.substr(text.length - 2);
            } else lastChar = text.charAt(text.length - 1);
            const supports = supportsByTriggerCharacter.get(lastChar);
            if (supports) {
                // keep existing items that where not computed by the
                // supports/providers that want to trigger now
                const existing = this._completionModel ? {
                    items: this._completionModel.adopt(supports),
                    clipboardText: this._completionModel.clipboardText
                } : undefined;
                this.trigger({
                    auto: true,
                    shy: false,
                    triggerCharacter: lastChar
                }, Boolean(this._completionModel), supports, existing);
            }
        };
        this._triggerCharacterListener.add(this._editor.onDidType(checkTriggerCharacter));
        this._triggerCharacterListener.add(this._editor.onDidCompositionEnd(checkTriggerCharacter));
    }
    // --- trigger/retrigger/cancel suggest
    get state() {
        return this._state;
    }
    cancel(retrigger = false) {
        var _a;
        if (this._state !== 0 /* Idle */ ) {
            this._triggerQuickSuggest.cancel();
            (_a = this._requestToken) === null || _a === void 0 || _a.cancel();
            this._requestToken = undefined;
            this._state = 0 /* Idle */ ;
            this._completionModel = undefined;
            this._context = undefined;
            this._onDidCancel.fire({
                retrigger: retrigger
            });
        }
    }
    clear() {
        this._completionDisposables.clear();
    }
    _updateActiveSuggestSession() {
        if (this._state !== 0 /* Idle */ ) {
            if (!this._editor.hasModel() || !(0, $eKhCe.CompletionProviderRegistry).has(this._editor.getModel())) this.cancel();
            else this.trigger({
                auto: this._state === 2 /* Auto */ ,
                shy: false
            }, true);
        }
    }
    _onCursorChange(e) {
        if (!this._editor.hasModel()) return;
        const prevSelection = this._currentSelection;
        this._currentSelection = this._editor.getSelection();
        if (!e.selection.isEmpty() || e.reason !== 0 /* NotSet */  && e.reason !== 3 /* Explicit */  || e.source !== "keyboard" && e.source !== "deleteLeft") {
            // Early exit if nothing needs to be done!
            // Leave some form of early exit check here if you wish to continue being a cursor position change listener ;)
            this.cancel();
            return;
        }
        if (this._state === 0 /* Idle */  && e.reason === 0 /* NotSet */ ) {
            if (prevSelection.containsRange(this._currentSelection) || prevSelection.getEndPosition().isBeforeOrEqual(this._currentSelection.getPosition())) // cursor did move RIGHT due to typing -> trigger quick suggest
            this._doTriggerQuickSuggest();
        } else if (this._state !== 0 /* Idle */  && e.reason === 3 /* Explicit */ ) // suggest is active and something like cursor keys are used to move
        // the cursor. this means we can refilter at the new position
        this._refilterCompletionItems();
    }
    _onCompositionEnd() {
        // trigger or refilter when composition ends
        if (this._state === 0 /* Idle */ ) this._doTriggerQuickSuggest();
        else this._refilterCompletionItems();
    }
    _doTriggerQuickSuggest() {
        if (this._editor.getOption(78 /* quickSuggestions */ ) === false) // not enabled
        return;
        if (this._editor.getOption(105 /* suggest */ ).snippetsPreventQuickSuggestions && (0, $aab61a900846093a$exports.SnippetController2).get(this._editor).isInSnippet()) // no quick suggestion when in snippet mode
        return;
        this.cancel();
        this._triggerQuickSuggest.cancelAndSet(()=>{
            if (this._state !== 0 /* Idle */ ) return;
            if (!$942d743337bbaca0$export$894a84ea03928d60.shouldAutoTrigger(this._editor)) return;
            if (!this._editor.hasModel()) return;
            const model = this._editor.getModel();
            const pos = this._editor.getPosition();
            // validate enabled now
            const quickSuggestions = this._editor.getOption(78 /* quickSuggestions */ );
            if (quickSuggestions === false) return;
            else if (quickSuggestions === true) ;
            else {
                // Check the type of the token that triggered this
                model.tokenizeIfCheap(pos.lineNumber);
                const lineTokens = model.getLineTokens(pos.lineNumber);
                const tokenType = lineTokens.getStandardTokenType(lineTokens.findTokenIndexAtOffset(Math.max(pos.column - 1 - 1, 0)));
                const inValidScope = quickSuggestions.other && tokenType === 0 /* Other */  || quickSuggestions.comments && tokenType === 1 /* Comment */  || quickSuggestions.strings && tokenType === 2 /* String */ ;
                if (!inValidScope) return;
            }
            if (!$942d743337bbaca0$var$canShowQuickSuggest(this._editor, this._contextKeyService, this._configurationService)) // do not trigger quick suggestions if inline suggestions are shown
            return;
            if (!(0, $eKhCe.CompletionProviderRegistry).has(model)) return;
            // we made it till here -> trigger now
            this.trigger({
                auto: true,
                shy: false
            });
        }, this._quickSuggestDelay);
    }
    _refilterCompletionItems() {
        // Re-filter suggestions. This MUST run async because filtering/scoring
        // uses the model content AND the cursor position. The latter is NOT
        // updated when the document has changed (the event which drives this method)
        // and therefore a little pause (next mirco task) is needed. See:
        // https://stackoverflow.com/questions/25915634/difference-between-microtask-and-macrotask-within-an-event-loop-context#25933985
        Promise.resolve().then(()=>{
            if (this._state === 0 /* Idle */ ) return;
            if (!this._editor.hasModel()) return;
            const model = this._editor.getModel();
            const position = this._editor.getPosition();
            const ctx = new $942d743337bbaca0$export$894a84ea03928d60(model, position, this._state === 2 /* Auto */ , false);
            this._onNewContext(ctx);
        });
    }
    trigger(context, retrigger = false, onlyFrom, existing) {
        var _a;
        if (!this._editor.hasModel()) return;
        const model = this._editor.getModel();
        const auto = context.auto;
        const ctx = new $942d743337bbaca0$export$894a84ea03928d60(model, this._editor.getPosition(), auto, context.shy);
        // Cancel previous requests, change state & update UI
        this.cancel(retrigger);
        this._state = auto ? 2 /* Auto */  : 1 /* Manual */ ;
        this._onDidTrigger.fire({
            auto: auto,
            shy: context.shy,
            position: this._editor.getPosition()
        });
        // Capture context when request was sent
        this._context = ctx;
        // Build context for request
        let suggestCtx = {
            triggerKind: (_a = context.triggerKind) !== null && _a !== void 0 ? _a : 0 /* Invoke */ 
        };
        if (context.triggerCharacter) suggestCtx = {
            triggerKind: 1 /* TriggerCharacter */ ,
            triggerCharacter: context.triggerCharacter
        };
        this._requestToken = new (0, $gnEXx.CancellationTokenSource)();
        // kind filter and snippet sort rules
        const snippetSuggestions = this._editor.getOption(100 /* snippetSuggestions */ );
        let snippetSortOrder = 1 /* Inline */ ;
        switch(snippetSuggestions){
            case "top":
                snippetSortOrder = 0 /* Top */ ;
                break;
            // 	↓ that's the default anyways...
            // case 'inline':
            // 	snippetSortOrder = SnippetSortOrder.Inline;
            // 	break;
            case "bottom":
                snippetSortOrder = 2 /* Bottom */ ;
                break;
        }
        const { itemKind: itemKindFilter , showDeprecated: showDeprecated  } = SuggestModel._createSuggestFilter(this._editor);
        const wordDistance = (0, $1176407fc728ffa7$exports.WordDistance).create(this._editorWorkerService, this._editor);
        const completions = (0, $abf46e0ea17ab20d$exports.provideSuggestionItems)(model, this._editor.getPosition(), new (0, $abf46e0ea17ab20d$exports.CompletionOptions)(snippetSortOrder, itemKindFilter, onlyFrom, showDeprecated), suggestCtx, this._requestToken.token);
        Promise.all([
            completions,
            wordDistance
        ]).then(([completions, wordDistance])=>$942d743337bbaca0$var$__awaiter(this, void 0, void 0, function*() {
                var _b;
                (_b = this._requestToken) === null || _b === void 0 || _b.dispose();
                if (!this._editor.hasModel()) return;
                let clipboardText = existing === null || existing === void 0 ? void 0 : existing.clipboardText;
                if (!clipboardText && completions.needsClipboard) clipboardText = yield this._clipboardService.readText();
                if (this._state === 0 /* Idle */ ) return;
                const model = this._editor.getModel();
                let items = completions.items;
                if (existing) {
                    const cmpFn = (0, $abf46e0ea17ab20d$exports.getSuggestionComparator)(snippetSortOrder);
                    items = items.concat(existing.items).sort(cmpFn);
                }
                const ctx = new $942d743337bbaca0$export$894a84ea03928d60(model, this._editor.getPosition(), auto, context.shy);
                this._completionModel = new (0, $5c780915263ddae6$export$8420ec00c11e432f)(items, this._context.column, {
                    leadingLineContent: ctx.leadingLineContent,
                    characterCountDelta: ctx.column - this._context.column
                }, wordDistance, this._editor.getOption(105 /* suggest */ ), this._editor.getOption(100 /* snippetSuggestions */ ), clipboardText);
                // store containers so that they can be disposed later
                this._completionDisposables.add(completions.disposable);
                this._onNewContext(ctx);
                // finally report telemetry about durations
                this._reportDurationsTelemetry(completions.durations);
            })).catch((0, $g0782.onUnexpectedError));
    }
    _reportDurationsTelemetry(durations) {
        if ((this._telemetryGate++) % 230 !== 0) return;
        setTimeout(()=>{
            this._telemetryService.publicLog2("suggest.durations.json", {
                data: JSON.stringify(durations)
            });
            this._logService.debug("suggest.durations.json", durations);
        });
    }
    static _createSuggestFilter(editor) {
        // kind filter and snippet sort rules
        const result = new Set();
        // snippet setting
        const snippetSuggestions = editor.getOption(100 /* snippetSuggestions */ );
        if (snippetSuggestions === "none") result.add(27 /* Snippet */ );
        // type setting
        const suggestOptions = editor.getOption(105 /* suggest */ );
        if (!suggestOptions.showMethods) result.add(0 /* Method */ );
        if (!suggestOptions.showFunctions) result.add(1 /* Function */ );
        if (!suggestOptions.showConstructors) result.add(2 /* Constructor */ );
        if (!suggestOptions.showFields) result.add(3 /* Field */ );
        if (!suggestOptions.showVariables) result.add(4 /* Variable */ );
        if (!suggestOptions.showClasses) result.add(5 /* Class */ );
        if (!suggestOptions.showStructs) result.add(6 /* Struct */ );
        if (!suggestOptions.showInterfaces) result.add(7 /* Interface */ );
        if (!suggestOptions.showModules) result.add(8 /* Module */ );
        if (!suggestOptions.showProperties) result.add(9 /* Property */ );
        if (!suggestOptions.showEvents) result.add(10 /* Event */ );
        if (!suggestOptions.showOperators) result.add(11 /* Operator */ );
        if (!suggestOptions.showUnits) result.add(12 /* Unit */ );
        if (!suggestOptions.showValues) result.add(13 /* Value */ );
        if (!suggestOptions.showConstants) result.add(14 /* Constant */ );
        if (!suggestOptions.showEnums) result.add(15 /* Enum */ );
        if (!suggestOptions.showEnumMembers) result.add(16 /* EnumMember */ );
        if (!suggestOptions.showKeywords) result.add(17 /* Keyword */ );
        if (!suggestOptions.showWords) result.add(18 /* Text */ );
        if (!suggestOptions.showColors) result.add(19 /* Color */ );
        if (!suggestOptions.showFiles) result.add(20 /* File */ );
        if (!suggestOptions.showReferences) result.add(21 /* Reference */ );
        if (!suggestOptions.showColors) result.add(22 /* Customcolor */ );
        if (!suggestOptions.showFolders) result.add(23 /* Folder */ );
        if (!suggestOptions.showTypeParameters) result.add(24 /* TypeParameter */ );
        if (!suggestOptions.showSnippets) result.add(27 /* Snippet */ );
        if (!suggestOptions.showUsers) result.add(25 /* User */ );
        if (!suggestOptions.showIssues) result.add(26 /* Issue */ );
        return {
            itemKind: result,
            showDeprecated: suggestOptions.showDeprecated
        };
    }
    _onNewContext(ctx) {
        if (!this._context) // happens when 24x7 IntelliSense is enabled and still in its delay
        return;
        if (ctx.lineNumber !== this._context.lineNumber) {
            // e.g. happens when pressing Enter while IntelliSense is computed
            this.cancel();
            return;
        }
        if ((0, $9TEeL.getLeadingWhitespace)(ctx.leadingLineContent) !== (0, $9TEeL.getLeadingWhitespace)(this._context.leadingLineContent)) {
            // cancel IntelliSense when line start changes
            // happens when the current word gets outdented
            this.cancel();
            return;
        }
        if (ctx.column < this._context.column) {
            // typed -> moved cursor LEFT -> retrigger if still on a word
            if (ctx.leadingWord.word) this.trigger({
                auto: this._context.auto,
                shy: false
            }, true);
            else this.cancel();
            return;
        }
        if (!this._completionModel) // happens when IntelliSense is not yet computed
        return;
        if (ctx.leadingWord.word.length !== 0 && ctx.leadingWord.startColumn > this._context.leadingWord.startColumn) {
            // started a new word while IntelliSense shows -> retrigger
            // Select those providers have not contributed to this completion model and re-trigger completions for
            // them. Also adopt the existing items and merge them into the new completion model
            const inactiveProvider = new Set((0, $eKhCe.CompletionProviderRegistry).all(this._editor.getModel()));
            for (let provider of this._completionModel.allProvider)inactiveProvider.delete(provider);
            const items = this._completionModel.adopt(new Set());
            this.trigger({
                auto: this._context.auto,
                shy: false
            }, true, inactiveProvider, {
                items: items,
                clipboardText: this._completionModel.clipboardText
            });
            return;
        }
        if (ctx.column > this._context.column && this._completionModel.incomplete.size > 0 && ctx.leadingWord.word.length !== 0) {
            // typed -> moved cursor RIGHT & incomple model & still on a word -> retrigger
            const { incomplete: incomplete  } = this._completionModel;
            const items1 = this._completionModel.adopt(incomplete);
            this.trigger({
                auto: this._state === 2 /* Auto */ ,
                shy: false,
                triggerKind: 2 /* TriggerForIncompleteCompletions */ 
            }, true, incomplete, {
                items: items1,
                clipboardText: this._completionModel.clipboardText
            });
        } else {
            // typed -> moved cursor RIGHT -> update UI
            let oldLineContext = this._completionModel.lineContext;
            let isFrozen = false;
            this._completionModel.lineContext = {
                leadingLineContent: ctx.leadingLineContent,
                characterCountDelta: ctx.column - this._context.column
            };
            if (this._completionModel.items.length === 0) {
                if ($942d743337bbaca0$export$894a84ea03928d60.shouldAutoTrigger(this._editor) && this._context.leadingWord.endColumn < ctx.leadingWord.startColumn) {
                    // retrigger when heading into a new word
                    this.trigger({
                        auto: this._context.auto,
                        shy: false
                    }, true);
                    return;
                }
                if (!this._context.auto) {
                    // freeze when IntelliSense was manually requested
                    this._completionModel.lineContext = oldLineContext;
                    isFrozen = this._completionModel.items.length > 0;
                    if (isFrozen && ctx.leadingWord.word.length === 0) {
                        // there were results before but now there aren't
                        // and also we are not on a word anymore -> cancel
                        this.cancel();
                        return;
                    }
                } else {
                    // nothing left
                    this.cancel();
                    return;
                }
            }
            this._onDidSuggest.fire({
                completionModel: this._completionModel,
                auto: this._context.auto,
                shy: this._context.shy,
                isFrozen: isFrozen
            });
        }
    }
    constructor(_editor, _editorWorkerService, _clipboardService, _telemetryService, _logService, _contextKeyService, _configurationService){
        this._editor = _editor;
        this._editorWorkerService = _editorWorkerService;
        this._clipboardService = _clipboardService;
        this._telemetryService = _telemetryService;
        this._logService = _logService;
        this._contextKeyService = _contextKeyService;
        this._configurationService = _configurationService;
        this._toDispose = new (0, $atiRx.DisposableStore)();
        this._quickSuggestDelay = 10;
        this._triggerCharacterListener = new (0, $atiRx.DisposableStore)();
        this._triggerQuickSuggest = new (0, $eFOsn.TimeoutTimer)();
        this._state = 0 /* Idle */ ;
        this._completionDisposables = new (0, $atiRx.DisposableStore)();
        this._onDidCancel = new (0, $fSvkC.Emitter)();
        this._onDidTrigger = new (0, $fSvkC.Emitter)();
        this._onDidSuggest = new (0, $fSvkC.Emitter)();
        this.onDidCancel = this._onDidCancel.event;
        this.onDidTrigger = this._onDidTrigger.event;
        this.onDidSuggest = this._onDidSuggest.event;
        this._telemetryGate = 0;
        this._currentSelection = this._editor.getSelection() || new (0, $cz0c7.Selection)(1, 1, 1, 1);
        // wire up various listeners
        this._toDispose.add(this._editor.onDidChangeModel(()=>{
            this._updateTriggerCharacters();
            this.cancel();
        }));
        this._toDispose.add(this._editor.onDidChangeModelLanguage(()=>{
            this._updateTriggerCharacters();
            this.cancel();
        }));
        this._toDispose.add(this._editor.onDidChangeConfiguration(()=>{
            this._updateTriggerCharacters();
            this._updateQuickSuggest();
        }));
        this._toDispose.add((0, $eKhCe.CompletionProviderRegistry).onDidChange(()=>{
            this._updateTriggerCharacters();
            this._updateActiveSuggestSession();
        }));
        this._toDispose.add(this._editor.onDidChangeCursorSelection((e)=>{
            this._onCursorChange(e);
        }));
        let editorIsComposing = false;
        this._toDispose.add(this._editor.onDidCompositionStart(()=>{
            editorIsComposing = true;
        }));
        this._toDispose.add(this._editor.onDidCompositionEnd(()=>{
            editorIsComposing = false;
            this._onCompositionEnd();
        }));
        this._toDispose.add(this._editor.onDidChangeModelContent(()=>{
            // only filter completions when the editor isn't composing a character
            // allow-any-unicode-next-line
            // e.g. ¨ + u makes ü but just ¨ cannot be used for filtering
            if (!editorIsComposing) this._refilterCompletionItems();
        }));
        this._updateTriggerCharacters();
        this._updateQuickSuggest();
    }
};
$942d743337bbaca0$export$bd6d3a37695095d5 = $942d743337bbaca0$var$__decorate([
    $942d743337bbaca0$var$__param(1, (0, $7N0CJ.IEditorWorkerService)),
    $942d743337bbaca0$var$__param(2, (0, $lkKTA.IClipboardService)),
    $942d743337bbaca0$var$__param(3, (0, $2EG7I.ITelemetryService)),
    $942d743337bbaca0$var$__param(4, (0, $h720z.ILogService)),
    $942d743337bbaca0$var$__param(5, (0, $bRtox.IContextKeyService)),
    $942d743337bbaca0$var$__param(6, (0, $9BIBz.IConfigurationService))
], $942d743337bbaca0$export$bd6d3a37695095d5);



var $atiRx = parcelRequire("atiRx");
class $4017b827bc13adbf$export$4f0a10c40326a303 {
    getLastOvertypedInfo(idx) {
        if (!this._empty && idx >= 0 && idx < this._lastOvertyped.length) return this._lastOvertyped[idx];
        return undefined;
    }
    dispose() {
        this._disposables.dispose();
    }
    constructor(editor, suggestModel){
        this._disposables = new (0, $atiRx.DisposableStore)();
        this._lastOvertyped = [];
        this._empty = true;
        this._disposables.add(editor.onWillType(()=>{
            if (!this._empty) return;
            if (!editor.hasModel()) return;
            const selections = editor.getSelections();
            const selectionsLength = selections.length;
            // Check if it will overtype any selections
            let willOvertype = false;
            for(let i = 0; i < selectionsLength; i++)if (!selections[i].isEmpty()) {
                willOvertype = true;
                break;
            }
            if (!willOvertype) return;
            this._lastOvertyped = [];
            const model = editor.getModel();
            for(let i1 = 0; i1 < selectionsLength; i1++){
                const selection = selections[i1];
                // Check for overtyping capturer restrictions
                if (model.getValueLengthInRange(selection) > $4017b827bc13adbf$export$4f0a10c40326a303._maxSelectionLength) return;
                this._lastOvertyped[i1] = {
                    value: model.getValueInRange(selection),
                    multiline: selection.startLineNumber !== selection.endLineNumber
                };
            }
            this._empty = false;
        }));
        this._disposables.add(suggestModel.onDidCancel((e)=>{
            if (!this._empty && !e.retrigger) this._empty = true;
        }));
    }
}
$4017b827bc13adbf$export$4f0a10c40326a303._maxSelectionLength = 51200;


var $17a3075f14cb16fd$exports = {};

$parcel$export($17a3075f14cb16fd$exports, "SuggestWidget", function () { return $17a3075f14cb16fd$export$ad1808d575fcd49b; }, function (v) { return $17a3075f14cb16fd$export$ad1808d575fcd49b = v; });

var $jOYcd = parcelRequire("jOYcd");
parcelRequire("8hDtr");

var $d15WN = parcelRequire("d15WN");

var $eFOsn = parcelRequire("eFOsn");

var $g0782 = parcelRequire("g0782");

var $fSvkC = parcelRequire("fSvkC");

var $atiRx = parcelRequire("atiRx");

var $6OJeW = parcelRequire("6OJeW");

var $9TEeL = parcelRequire("9TEeL");


var $2cdd8a8028d7fa2e$exports = {};

$parcel$export($2cdd8a8028d7fa2e$exports, "SuggestWidgetStatus", function () { return $2cdd8a8028d7fa2e$export$59a11735faca49fe; }, function (v) { return $2cdd8a8028d7fa2e$export$59a11735faca49fe = v; });

var $jOYcd = parcelRequire("jOYcd");

var $dxI2a = parcelRequire("dxI2a");

var $atiRx = parcelRequire("atiRx");


var $58WHl = parcelRequire("58WHl");


var $2IxgH = parcelRequire("2IxgH");

var $bRtox = parcelRequire("bRtox");

var $iZW67 = parcelRequire("iZW67");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $2cdd8a8028d7fa2e$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $2cdd8a8028d7fa2e$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
class $2cdd8a8028d7fa2e$var$StatusBarViewItem extends (0, $ec16e17bf8793314$exports.MenuEntryActionViewItem) {
    updateLabel() {
        const kb = this._keybindingService.lookupKeybinding(this._action.id, this._contextKeyService);
        if (!kb) return super.updateLabel();
        if (this.label) this.label.textContent = (0, $58WHl.localize)("ddd", "{0} ({1})", this._action.label, $2cdd8a8028d7fa2e$var$StatusBarViewItem.symbolPrintEnter(kb));
    }
    static symbolPrintEnter(kb) {
        var _a;
        return (_a = kb.getLabel()) === null || _a === void 0 ? void 0 : _a.replace(/\benter\b/gi, "⏎");
    }
}
let $2cdd8a8028d7fa2e$export$59a11735faca49fe = class SuggestWidgetStatus {
    dispose() {
        this._menuDisposables.dispose();
        this.element.remove();
    }
    show() {
        const menu = this._menuService.createMenu((0, $abf46e0ea17ab20d$exports.suggestWidgetStatusbarMenu), this._contextKeyService);
        const renderMenu = ()=>{
            const left = [];
            const right = [];
            for (let [group, actions] of menu.getActions())if (group === "left") left.push(...actions);
            else right.push(...actions);
            this._leftActions.clear();
            this._leftActions.push(left);
            this._rightActions.clear();
            this._rightActions.push(right);
        };
        this._menuDisposables.add(menu.onDidChange(()=>renderMenu()));
        this._menuDisposables.add(menu);
    }
    hide() {
        this._menuDisposables.clear();
    }
    constructor(container, instantiationService, _menuService, _contextKeyService){
        this._menuService = _menuService;
        this._contextKeyService = _contextKeyService;
        this._menuDisposables = new (0, $atiRx.DisposableStore)();
        this.element = $jOYcd.append(container, $jOYcd.$(".suggest-status-bar"));
        const actionViewItemProvider = (action)=>{
            return action instanceof (0, $2IxgH.MenuItemAction) ? instantiationService.createInstance($2cdd8a8028d7fa2e$var$StatusBarViewItem, action, undefined) : undefined;
        };
        this._leftActions = new (0, $dxI2a.ActionBar)(this.element, {
            actionViewItemProvider: actionViewItemProvider
        });
        this._rightActions = new (0, $dxI2a.ActionBar)(this.element, {
            actionViewItemProvider: actionViewItemProvider
        });
        this._leftActions.domNode.classList.add("left");
        this._rightActions.domNode.classList.add("right");
    }
};
$2cdd8a8028d7fa2e$export$59a11735faca49fe = $2cdd8a8028d7fa2e$var$__decorate([
    $2cdd8a8028d7fa2e$var$__param(1, (0, $iZW67.IInstantiationService)),
    $2cdd8a8028d7fa2e$var$__param(2, (0, $2IxgH.IMenuService)),
    $2cdd8a8028d7fa2e$var$__param(3, (0, $bRtox.IContextKeyService))
], $2cdd8a8028d7fa2e$export$59a11735faca49fe);



var $8HDYc = parcelRequire("8HDYc");

var $58WHl = parcelRequire("58WHl");

var $3XYy8 = parcelRequire("3XYy8");

var $fUTzO = parcelRequire("fUTzO");
const $0b6df96c8772bb0d$export$3fae9d11aa0b9bc4 = (0, $3XYy8.registerColor)("symbolIcon.arrayForeground", {
    dark: (0, $3XYy8.foreground),
    light: (0, $3XYy8.foreground),
    hc: (0, $3XYy8.foreground)
}, (0, $58WHl.localize)("symbolIcon.arrayForeground", "The foreground color for array symbols. These symbols appear in the outline, breadcrumb, and suggest widget."));
const $0b6df96c8772bb0d$export$8b518b8ab21e1b34 = (0, $3XYy8.registerColor)("symbolIcon.booleanForeground", {
    dark: (0, $3XYy8.foreground),
    light: (0, $3XYy8.foreground),
    hc: (0, $3XYy8.foreground)
}, (0, $58WHl.localize)("symbolIcon.booleanForeground", "The foreground color for boolean symbols. These symbols appear in the outline, breadcrumb, and suggest widget."));
const $0b6df96c8772bb0d$export$4e2906c73c1071f4 = (0, $3XYy8.registerColor)("symbolIcon.classForeground", {
    dark: "#EE9D28",
    light: "#D67E00",
    hc: "#EE9D28"
}, (0, $58WHl.localize)("symbolIcon.classForeground", "The foreground color for class symbols. These symbols appear in the outline, breadcrumb, and suggest widget."));
const $0b6df96c8772bb0d$export$b9dc349586d7399d = (0, $3XYy8.registerColor)("symbolIcon.colorForeground", {
    dark: (0, $3XYy8.foreground),
    light: (0, $3XYy8.foreground),
    hc: (0, $3XYy8.foreground)
}, (0, $58WHl.localize)("symbolIcon.colorForeground", "The foreground color for color symbols. These symbols appear in the outline, breadcrumb, and suggest widget."));
const $0b6df96c8772bb0d$export$aff0be1504894ea8 = (0, $3XYy8.registerColor)("symbolIcon.constantForeground", {
    dark: (0, $3XYy8.foreground),
    light: (0, $3XYy8.foreground),
    hc: (0, $3XYy8.foreground)
}, (0, $58WHl.localize)("symbolIcon.constantForeground", "The foreground color for constant symbols. These symbols appear in the outline, breadcrumb, and suggest widget."));
const $0b6df96c8772bb0d$export$63d89b6050035451 = (0, $3XYy8.registerColor)("symbolIcon.constructorForeground", {
    dark: "#B180D7",
    light: "#652D90",
    hc: "#B180D7"
}, (0, $58WHl.localize)("symbolIcon.constructorForeground", "The foreground color for constructor symbols. These symbols appear in the outline, breadcrumb, and suggest widget."));
const $0b6df96c8772bb0d$export$327509b94276884d = (0, $3XYy8.registerColor)("symbolIcon.enumeratorForeground", {
    dark: "#EE9D28",
    light: "#D67E00",
    hc: "#EE9D28"
}, (0, $58WHl.localize)("symbolIcon.enumeratorForeground", "The foreground color for enumerator symbols. These symbols appear in the outline, breadcrumb, and suggest widget."));
const $0b6df96c8772bb0d$export$82c014b2122e3732 = (0, $3XYy8.registerColor)("symbolIcon.enumeratorMemberForeground", {
    dark: "#75BEFF",
    light: "#007ACC",
    hc: "#75BEFF"
}, (0, $58WHl.localize)("symbolIcon.enumeratorMemberForeground", "The foreground color for enumerator member symbols. These symbols appear in the outline, breadcrumb, and suggest widget."));
const $0b6df96c8772bb0d$export$d1dd34511c01e5f7 = (0, $3XYy8.registerColor)("symbolIcon.eventForeground", {
    dark: "#EE9D28",
    light: "#D67E00",
    hc: "#EE9D28"
}, (0, $58WHl.localize)("symbolIcon.eventForeground", "The foreground color for event symbols. These symbols appear in the outline, breadcrumb, and suggest widget."));
const $0b6df96c8772bb0d$export$74e9aa28e30eaabc = (0, $3XYy8.registerColor)("symbolIcon.fieldForeground", {
    dark: "#75BEFF",
    light: "#007ACC",
    hc: "#75BEFF"
}, (0, $58WHl.localize)("symbolIcon.fieldForeground", "The foreground color for field symbols. These symbols appear in the outline, breadcrumb, and suggest widget."));
const $0b6df96c8772bb0d$export$a116c119dac29f5d = (0, $3XYy8.registerColor)("symbolIcon.fileForeground", {
    dark: (0, $3XYy8.foreground),
    light: (0, $3XYy8.foreground),
    hc: (0, $3XYy8.foreground)
}, (0, $58WHl.localize)("symbolIcon.fileForeground", "The foreground color for file symbols. These symbols appear in the outline, breadcrumb, and suggest widget."));
const $0b6df96c8772bb0d$export$2d73341161b73c6b = (0, $3XYy8.registerColor)("symbolIcon.folderForeground", {
    dark: (0, $3XYy8.foreground),
    light: (0, $3XYy8.foreground),
    hc: (0, $3XYy8.foreground)
}, (0, $58WHl.localize)("symbolIcon.folderForeground", "The foreground color for folder symbols. These symbols appear in the outline, breadcrumb, and suggest widget."));
const $0b6df96c8772bb0d$export$2ca6c19cc6b399f2 = (0, $3XYy8.registerColor)("symbolIcon.functionForeground", {
    dark: "#B180D7",
    light: "#652D90",
    hc: "#B180D7"
}, (0, $58WHl.localize)("symbolIcon.functionForeground", "The foreground color for function symbols. These symbols appear in the outline, breadcrumb, and suggest widget."));
const $0b6df96c8772bb0d$export$8a976e1cbce7093b = (0, $3XYy8.registerColor)("symbolIcon.interfaceForeground", {
    dark: "#75BEFF",
    light: "#007ACC",
    hc: "#75BEFF"
}, (0, $58WHl.localize)("symbolIcon.interfaceForeground", "The foreground color for interface symbols. These symbols appear in the outline, breadcrumb, and suggest widget."));
const $0b6df96c8772bb0d$export$73fcd76f3eaf95ca = (0, $3XYy8.registerColor)("symbolIcon.keyForeground", {
    dark: (0, $3XYy8.foreground),
    light: (0, $3XYy8.foreground),
    hc: (0, $3XYy8.foreground)
}, (0, $58WHl.localize)("symbolIcon.keyForeground", "The foreground color for key symbols. These symbols appear in the outline, breadcrumb, and suggest widget."));
const $0b6df96c8772bb0d$export$55c4a8243445e5c1 = (0, $3XYy8.registerColor)("symbolIcon.keywordForeground", {
    dark: (0, $3XYy8.foreground),
    light: (0, $3XYy8.foreground),
    hc: (0, $3XYy8.foreground)
}, (0, $58WHl.localize)("symbolIcon.keywordForeground", "The foreground color for keyword symbols. These symbols appear in the outline, breadcrumb, and suggest widget."));
const $0b6df96c8772bb0d$export$ffd6832099bc300 = (0, $3XYy8.registerColor)("symbolIcon.methodForeground", {
    dark: "#B180D7",
    light: "#652D90",
    hc: "#B180D7"
}, (0, $58WHl.localize)("symbolIcon.methodForeground", "The foreground color for method symbols. These symbols appear in the outline, breadcrumb, and suggest widget."));
const $0b6df96c8772bb0d$export$a28f8647a8c464f7 = (0, $3XYy8.registerColor)("symbolIcon.moduleForeground", {
    dark: (0, $3XYy8.foreground),
    light: (0, $3XYy8.foreground),
    hc: (0, $3XYy8.foreground)
}, (0, $58WHl.localize)("symbolIcon.moduleForeground", "The foreground color for module symbols. These symbols appear in the outline, breadcrumb, and suggest widget."));
const $0b6df96c8772bb0d$export$3f085360969ec869 = (0, $3XYy8.registerColor)("symbolIcon.namespaceForeground", {
    dark: (0, $3XYy8.foreground),
    light: (0, $3XYy8.foreground),
    hc: (0, $3XYy8.foreground)
}, (0, $58WHl.localize)("symbolIcon.namespaceForeground", "The foreground color for namespace symbols. These symbols appear in the outline, breadcrumb, and suggest widget."));
const $0b6df96c8772bb0d$export$faf07d36462572e = (0, $3XYy8.registerColor)("symbolIcon.nullForeground", {
    dark: (0, $3XYy8.foreground),
    light: (0, $3XYy8.foreground),
    hc: (0, $3XYy8.foreground)
}, (0, $58WHl.localize)("symbolIcon.nullForeground", "The foreground color for null symbols. These symbols appear in the outline, breadcrumb, and suggest widget."));
const $0b6df96c8772bb0d$export$98983ac5e98e402e = (0, $3XYy8.registerColor)("symbolIcon.numberForeground", {
    dark: (0, $3XYy8.foreground),
    light: (0, $3XYy8.foreground),
    hc: (0, $3XYy8.foreground)
}, (0, $58WHl.localize)("symbolIcon.numberForeground", "The foreground color for number symbols. These symbols appear in the outline, breadcrumb, and suggest widget."));
const $0b6df96c8772bb0d$export$1c6ae5c31c02eebe = (0, $3XYy8.registerColor)("symbolIcon.objectForeground", {
    dark: (0, $3XYy8.foreground),
    light: (0, $3XYy8.foreground),
    hc: (0, $3XYy8.foreground)
}, (0, $58WHl.localize)("symbolIcon.objectForeground", "The foreground color for object symbols. These symbols appear in the outline, breadcrumb, and suggest widget."));
const $0b6df96c8772bb0d$export$f7ded60d36d8c9df = (0, $3XYy8.registerColor)("symbolIcon.operatorForeground", {
    dark: (0, $3XYy8.foreground),
    light: (0, $3XYy8.foreground),
    hc: (0, $3XYy8.foreground)
}, (0, $58WHl.localize)("symbolIcon.operatorForeground", "The foreground color for operator symbols. These symbols appear in the outline, breadcrumb, and suggest widget."));
const $0b6df96c8772bb0d$export$201c5e1a4afacb86 = (0, $3XYy8.registerColor)("symbolIcon.packageForeground", {
    dark: (0, $3XYy8.foreground),
    light: (0, $3XYy8.foreground),
    hc: (0, $3XYy8.foreground)
}, (0, $58WHl.localize)("symbolIcon.packageForeground", "The foreground color for package symbols. These symbols appear in the outline, breadcrumb, and suggest widget."));
const $0b6df96c8772bb0d$export$ecc1bfda99ca719b = (0, $3XYy8.registerColor)("symbolIcon.propertyForeground", {
    dark: (0, $3XYy8.foreground),
    light: (0, $3XYy8.foreground),
    hc: (0, $3XYy8.foreground)
}, (0, $58WHl.localize)("symbolIcon.propertyForeground", "The foreground color for property symbols. These symbols appear in the outline, breadcrumb, and suggest widget."));
const $0b6df96c8772bb0d$export$b2b64d36d52e1648 = (0, $3XYy8.registerColor)("symbolIcon.referenceForeground", {
    dark: (0, $3XYy8.foreground),
    light: (0, $3XYy8.foreground),
    hc: (0, $3XYy8.foreground)
}, (0, $58WHl.localize)("symbolIcon.referenceForeground", "The foreground color for reference symbols. These symbols appear in the outline, breadcrumb, and suggest widget."));
const $0b6df96c8772bb0d$export$2a18d5e0c753d08f = (0, $3XYy8.registerColor)("symbolIcon.snippetForeground", {
    dark: (0, $3XYy8.foreground),
    light: (0, $3XYy8.foreground),
    hc: (0, $3XYy8.foreground)
}, (0, $58WHl.localize)("symbolIcon.snippetForeground", "The foreground color for snippet symbols. These symbols appear in the outline, breadcrumb, and suggest widget."));
const $0b6df96c8772bb0d$export$e5b1264624214988 = (0, $3XYy8.registerColor)("symbolIcon.stringForeground", {
    dark: (0, $3XYy8.foreground),
    light: (0, $3XYy8.foreground),
    hc: (0, $3XYy8.foreground)
}, (0, $58WHl.localize)("symbolIcon.stringForeground", "The foreground color for string symbols. These symbols appear in the outline, breadcrumb, and suggest widget."));
const $0b6df96c8772bb0d$export$a09716ab27e476aa = (0, $3XYy8.registerColor)("symbolIcon.structForeground", {
    dark: (0, $3XYy8.foreground),
    light: (0, $3XYy8.foreground),
    hc: (0, $3XYy8.foreground)
}, (0, $58WHl.localize)("symbolIcon.structForeground", "The foreground color for struct symbols. These symbols appear in the outline, breadcrumb, and suggest widget."));
const $0b6df96c8772bb0d$export$63bb8b0faacec0ee = (0, $3XYy8.registerColor)("symbolIcon.textForeground", {
    dark: (0, $3XYy8.foreground),
    light: (0, $3XYy8.foreground),
    hc: (0, $3XYy8.foreground)
}, (0, $58WHl.localize)("symbolIcon.textForeground", "The foreground color for text symbols. These symbols appear in the outline, breadcrumb, and suggest widget."));
const $0b6df96c8772bb0d$export$2832ad164df8dd4b = (0, $3XYy8.registerColor)("symbolIcon.typeParameterForeground", {
    dark: (0, $3XYy8.foreground),
    light: (0, $3XYy8.foreground),
    hc: (0, $3XYy8.foreground)
}, (0, $58WHl.localize)("symbolIcon.typeParameterForeground", "The foreground color for type parameter symbols. These symbols appear in the outline, breadcrumb, and suggest widget."));
const $0b6df96c8772bb0d$export$a88fbc3f8bc85cf8 = (0, $3XYy8.registerColor)("symbolIcon.unitForeground", {
    dark: (0, $3XYy8.foreground),
    light: (0, $3XYy8.foreground),
    hc: (0, $3XYy8.foreground)
}, (0, $58WHl.localize)("symbolIcon.unitForeground", "The foreground color for unit symbols. These symbols appear in the outline, breadcrumb, and suggest widget."));
const $0b6df96c8772bb0d$export$479057adc7371f16 = (0, $3XYy8.registerColor)("symbolIcon.variableForeground", {
    dark: "#75BEFF",
    light: "#007ACC",
    hc: "#75BEFF"
}, (0, $58WHl.localize)("symbolIcon.variableForeground", "The foreground color for variable symbols. These symbols appear in the outline, breadcrumb, and suggest widget."));
(0, $fUTzO.registerThemingParticipant)((theme, collector)=>{
    const symbolIconArrayColor = theme.getColor($0b6df96c8772bb0d$export$3fae9d11aa0b9bc4);
    if (symbolIconArrayColor) collector.addRule(`${(0, $8HDYc.Codicon).symbolArray.cssSelector} { color: ${symbolIconArrayColor}; }`);
    const symbolIconBooleanColor = theme.getColor($0b6df96c8772bb0d$export$8b518b8ab21e1b34);
    if (symbolIconBooleanColor) collector.addRule(`${(0, $8HDYc.Codicon).symbolBoolean.cssSelector} { color: ${symbolIconBooleanColor}; }`);
    const symbolIconClassColor = theme.getColor($0b6df96c8772bb0d$export$4e2906c73c1071f4);
    if (symbolIconClassColor) collector.addRule(`${(0, $8HDYc.Codicon).symbolClass.cssSelector} { color: ${symbolIconClassColor}; }`);
    const symbolIconMethodColor = theme.getColor($0b6df96c8772bb0d$export$ffd6832099bc300);
    if (symbolIconMethodColor) collector.addRule(`${(0, $8HDYc.Codicon).symbolMethod.cssSelector} { color: ${symbolIconMethodColor}; }`);
    const symbolIconColorColor = theme.getColor($0b6df96c8772bb0d$export$b9dc349586d7399d);
    if (symbolIconColorColor) collector.addRule(`${(0, $8HDYc.Codicon).symbolColor.cssSelector} { color: ${symbolIconColorColor}; }`);
    const symbolIconConstantColor = theme.getColor($0b6df96c8772bb0d$export$aff0be1504894ea8);
    if (symbolIconConstantColor) collector.addRule(`${(0, $8HDYc.Codicon).symbolConstant.cssSelector} { color: ${symbolIconConstantColor}; }`);
    const symbolIconConstructorColor = theme.getColor($0b6df96c8772bb0d$export$63d89b6050035451);
    if (symbolIconConstructorColor) collector.addRule(`${(0, $8HDYc.Codicon).symbolConstructor.cssSelector} { color: ${symbolIconConstructorColor}; }`);
    const symbolIconEnumeratorColor = theme.getColor($0b6df96c8772bb0d$export$327509b94276884d);
    if (symbolIconEnumeratorColor) collector.addRule(`
			${(0, $8HDYc.Codicon).symbolValue.cssSelector},${(0, $8HDYc.Codicon).symbolEnum.cssSelector} { color: ${symbolIconEnumeratorColor}; }`);
    const symbolIconEnumeratorMemberColor = theme.getColor($0b6df96c8772bb0d$export$82c014b2122e3732);
    if (symbolIconEnumeratorMemberColor) collector.addRule(`${(0, $8HDYc.Codicon).symbolEnumMember.cssSelector} { color: ${symbolIconEnumeratorMemberColor}; }`);
    const symbolIconEventColor = theme.getColor($0b6df96c8772bb0d$export$d1dd34511c01e5f7);
    if (symbolIconEventColor) collector.addRule(`${(0, $8HDYc.Codicon).symbolEvent.cssSelector} { color: ${symbolIconEventColor}; }`);
    const symbolIconFieldColor = theme.getColor($0b6df96c8772bb0d$export$74e9aa28e30eaabc);
    if (symbolIconFieldColor) collector.addRule(`${(0, $8HDYc.Codicon).symbolField.cssSelector} { color: ${symbolIconFieldColor}; }`);
    const symbolIconFileColor = theme.getColor($0b6df96c8772bb0d$export$a116c119dac29f5d);
    if (symbolIconFileColor) collector.addRule(`${(0, $8HDYc.Codicon).symbolFile.cssSelector} { color: ${symbolIconFileColor}; }`);
    const symbolIconFolderColor = theme.getColor($0b6df96c8772bb0d$export$2d73341161b73c6b);
    if (symbolIconFolderColor) collector.addRule(`${(0, $8HDYc.Codicon).symbolFolder.cssSelector} { color: ${symbolIconFolderColor}; }`);
    const symbolIconFunctionColor = theme.getColor($0b6df96c8772bb0d$export$2ca6c19cc6b399f2);
    if (symbolIconFunctionColor) collector.addRule(`${(0, $8HDYc.Codicon).symbolFunction.cssSelector} { color: ${symbolIconFunctionColor}; }`);
    const symbolIconInterfaceColor = theme.getColor($0b6df96c8772bb0d$export$8a976e1cbce7093b);
    if (symbolIconInterfaceColor) collector.addRule(`${(0, $8HDYc.Codicon).symbolInterface.cssSelector} { color: ${symbolIconInterfaceColor}; }`);
    const symbolIconKeyColor = theme.getColor($0b6df96c8772bb0d$export$73fcd76f3eaf95ca);
    if (symbolIconKeyColor) collector.addRule(`${(0, $8HDYc.Codicon).symbolKey.cssSelector} { color: ${symbolIconKeyColor}; }`);
    const symbolIconKeywordColor = theme.getColor($0b6df96c8772bb0d$export$55c4a8243445e5c1);
    if (symbolIconKeywordColor) collector.addRule(`${(0, $8HDYc.Codicon).symbolKeyword.cssSelector} { color: ${symbolIconKeywordColor}; }`);
    const symbolIconModuleColor = theme.getColor($0b6df96c8772bb0d$export$a28f8647a8c464f7);
    if (symbolIconModuleColor) collector.addRule(`${(0, $8HDYc.Codicon).symbolModule.cssSelector} { color: ${symbolIconModuleColor}; }`);
    const outlineNamespaceColor = theme.getColor($0b6df96c8772bb0d$export$3f085360969ec869);
    if (outlineNamespaceColor) collector.addRule(`${(0, $8HDYc.Codicon).symbolNamespace.cssSelector} { color: ${outlineNamespaceColor}; }`);
    const symbolIconNullColor = theme.getColor($0b6df96c8772bb0d$export$faf07d36462572e);
    if (symbolIconNullColor) collector.addRule(`${(0, $8HDYc.Codicon).symbolNull.cssSelector} { color: ${symbolIconNullColor}; }`);
    const symbolIconNumberColor = theme.getColor($0b6df96c8772bb0d$export$98983ac5e98e402e);
    if (symbolIconNumberColor) collector.addRule(`${(0, $8HDYc.Codicon).symbolNumber.cssSelector} { color: ${symbolIconNumberColor}; }`);
    const symbolIconObjectColor = theme.getColor($0b6df96c8772bb0d$export$1c6ae5c31c02eebe);
    if (symbolIconObjectColor) collector.addRule(`${(0, $8HDYc.Codicon).symbolObject.cssSelector} { color: ${symbolIconObjectColor}; }`);
    const symbolIconOperatorColor = theme.getColor($0b6df96c8772bb0d$export$f7ded60d36d8c9df);
    if (symbolIconOperatorColor) collector.addRule(`${(0, $8HDYc.Codicon).symbolOperator.cssSelector} { color: ${symbolIconOperatorColor}; }`);
    const symbolIconPackageColor = theme.getColor($0b6df96c8772bb0d$export$201c5e1a4afacb86);
    if (symbolIconPackageColor) collector.addRule(`${(0, $8HDYc.Codicon).symbolPackage.cssSelector} { color: ${symbolIconPackageColor}; }`);
    const symbolIconPropertyColor = theme.getColor($0b6df96c8772bb0d$export$ecc1bfda99ca719b);
    if (symbolIconPropertyColor) collector.addRule(`${(0, $8HDYc.Codicon).symbolProperty.cssSelector} { color: ${symbolIconPropertyColor}; }`);
    const symbolIconReferenceColor = theme.getColor($0b6df96c8772bb0d$export$b2b64d36d52e1648);
    if (symbolIconReferenceColor) collector.addRule(`${(0, $8HDYc.Codicon).symbolReference.cssSelector} { color: ${symbolIconReferenceColor}; }`);
    const symbolIconSnippetColor = theme.getColor($0b6df96c8772bb0d$export$2a18d5e0c753d08f);
    if (symbolIconSnippetColor) collector.addRule(`${(0, $8HDYc.Codicon).symbolSnippet.cssSelector} { color: ${symbolIconSnippetColor}; }`);
    const symbolIconStringColor = theme.getColor($0b6df96c8772bb0d$export$e5b1264624214988);
    if (symbolIconStringColor) collector.addRule(`${(0, $8HDYc.Codicon).symbolString.cssSelector} { color: ${symbolIconStringColor}; }`);
    const symbolIconStructColor = theme.getColor($0b6df96c8772bb0d$export$a09716ab27e476aa);
    if (symbolIconStructColor) collector.addRule(`${(0, $8HDYc.Codicon).symbolStruct.cssSelector} { color: ${symbolIconStructColor}; }`);
    const symbolIconTextColor = theme.getColor($0b6df96c8772bb0d$export$63bb8b0faacec0ee);
    if (symbolIconTextColor) collector.addRule(`${(0, $8HDYc.Codicon).symbolText.cssSelector} { color: ${symbolIconTextColor}; }`);
    const symbolIconTypeParameterColor = theme.getColor($0b6df96c8772bb0d$export$2832ad164df8dd4b);
    if (symbolIconTypeParameterColor) collector.addRule(`${(0, $8HDYc.Codicon).symbolTypeParameter.cssSelector} { color: ${symbolIconTypeParameterColor}; }`);
    const symbolIconUnitColor = theme.getColor($0b6df96c8772bb0d$export$a88fbc3f8bc85cf8);
    if (symbolIconUnitColor) collector.addRule(`${(0, $8HDYc.Codicon).symbolUnit.cssSelector} { color: ${symbolIconUnitColor}; }`);
    const symbolIconVariableColor = theme.getColor($0b6df96c8772bb0d$export$479057adc7371f16);
    if (symbolIconVariableColor) collector.addRule(`${(0, $8HDYc.Codicon).symbolVariable.cssSelector} { color: ${symbolIconVariableColor}; }`);
});



var $58WHl = parcelRequire("58WHl");

var $bRtox = parcelRequire("bRtox");

var $iZW67 = parcelRequire("iZW67");

var $6XVdL = parcelRequire("6XVdL");

var $3XYy8 = parcelRequire("3XYy8");

var $diaKF = parcelRequire("diaKF");

var $fUTzO = parcelRequire("fUTzO");

var $jOYcd = parcelRequire("jOYcd");

var $4icNR = parcelRequire("4icNR");

var $fSvkC = parcelRequire("fSvkC");

var $atiRx = parcelRequire("atiRx");
class $2b4c5d1582491c49$export$f049a29194943609 {
    dispose() {
        this._northSash.dispose();
        this._southSash.dispose();
        this._eastSash.dispose();
        this._westSash.dispose();
        this._sashListener.dispose();
        this._onDidResize.dispose();
        this._onDidWillResize.dispose();
        this.domNode.remove();
    }
    enableSashes(north, east, south, west) {
        this._northSash.state = north ? 3 /* Enabled */  : 0 /* Disabled */ ;
        this._eastSash.state = east ? 3 /* Enabled */  : 0 /* Disabled */ ;
        this._southSash.state = south ? 3 /* Enabled */  : 0 /* Disabled */ ;
        this._westSash.state = west ? 3 /* Enabled */  : 0 /* Disabled */ ;
    }
    layout(height = this.size.height, width = this.size.width) {
        const { height: minHeight , width: minWidth  } = this._minSize;
        const { height: maxHeight , width: maxWidth  } = this._maxSize;
        height = Math.max(minHeight, Math.min(maxHeight, height));
        width = Math.max(minWidth, Math.min(maxWidth, width));
        const newSize = new (0, $jOYcd.Dimension)(width, height);
        if (!(0, $jOYcd.Dimension).equals(newSize, this._size)) {
            this.domNode.style.height = height + "px";
            this.domNode.style.width = width + "px";
            this._size = newSize;
            this._northSash.layout();
            this._eastSash.layout();
            this._southSash.layout();
            this._westSash.layout();
        }
    }
    clearSashHoverState() {
        this._eastSash.clearSashHoverState();
        this._westSash.clearSashHoverState();
        this._northSash.clearSashHoverState();
        this._southSash.clearSashHoverState();
    }
    get size() {
        return this._size;
    }
    set maxSize(value) {
        this._maxSize = value;
    }
    get maxSize() {
        return this._maxSize;
    }
    set minSize(value) {
        this._minSize = value;
    }
    get minSize() {
        return this._minSize;
    }
    set preferredSize(value) {
        this._preferredSize = value;
    }
    get preferredSize() {
        return this._preferredSize;
    }
    constructor(){
        this._onDidWillResize = new (0, $fSvkC.Emitter)();
        this.onDidWillResize = this._onDidWillResize.event;
        this._onDidResize = new (0, $fSvkC.Emitter)();
        this.onDidResize = this._onDidResize.event;
        this._sashListener = new (0, $atiRx.DisposableStore)();
        this._size = new (0, $jOYcd.Dimension)(0, 0);
        this._minSize = new (0, $jOYcd.Dimension)(0, 0);
        this._maxSize = new (0, $jOYcd.Dimension)(Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER);
        this.domNode = document.createElement("div");
        this._eastSash = new (0, $4icNR.Sash)(this.domNode, {
            getVerticalSashLeft: ()=>this._size.width
        }, {
            orientation: 0 /* VERTICAL */ 
        });
        this._westSash = new (0, $4icNR.Sash)(this.domNode, {
            getVerticalSashLeft: ()=>0
        }, {
            orientation: 0 /* VERTICAL */ 
        });
        this._northSash = new (0, $4icNR.Sash)(this.domNode, {
            getHorizontalSashTop: ()=>0
        }, {
            orientation: 1 /* HORIZONTAL */ ,
            orthogonalEdge: (0, $4icNR.OrthogonalEdge).North
        });
        this._southSash = new (0, $4icNR.Sash)(this.domNode, {
            getHorizontalSashTop: ()=>this._size.height
        }, {
            orientation: 1 /* HORIZONTAL */ ,
            orthogonalEdge: (0, $4icNR.OrthogonalEdge).South
        });
        this._northSash.orthogonalStartSash = this._westSash;
        this._northSash.orthogonalEndSash = this._eastSash;
        this._southSash.orthogonalStartSash = this._westSash;
        this._southSash.orthogonalEndSash = this._eastSash;
        let currentSize;
        let deltaY = 0;
        let deltaX = 0;
        this._sashListener.add((0, $fSvkC.Event).any(this._northSash.onDidStart, this._eastSash.onDidStart, this._southSash.onDidStart, this._westSash.onDidStart)(()=>{
            if (currentSize === undefined) {
                this._onDidWillResize.fire();
                currentSize = this._size;
                deltaY = 0;
                deltaX = 0;
            }
        }));
        this._sashListener.add((0, $fSvkC.Event).any(this._northSash.onDidEnd, this._eastSash.onDidEnd, this._southSash.onDidEnd, this._westSash.onDidEnd)(()=>{
            if (currentSize !== undefined) {
                currentSize = undefined;
                deltaY = 0;
                deltaX = 0;
                this._onDidResize.fire({
                    dimension: this._size,
                    done: true
                });
            }
        }));
        this._sashListener.add(this._eastSash.onDidChange((e)=>{
            if (currentSize) {
                deltaX = e.currentX - e.startX;
                this.layout(currentSize.height + deltaY, currentSize.width + deltaX);
                this._onDidResize.fire({
                    dimension: this._size,
                    done: false,
                    east: true
                });
            }
        }));
        this._sashListener.add(this._westSash.onDidChange((e)=>{
            if (currentSize) {
                deltaX = -(e.currentX - e.startX);
                this.layout(currentSize.height + deltaY, currentSize.width + deltaX);
                this._onDidResize.fire({
                    dimension: this._size,
                    done: false,
                    west: true
                });
            }
        }));
        this._sashListener.add(this._northSash.onDidChange((e)=>{
            if (currentSize) {
                deltaY = -(e.currentY - e.startY);
                this.layout(currentSize.height + deltaY, currentSize.width + deltaX);
                this._onDidResize.fire({
                    dimension: this._size,
                    done: false,
                    north: true
                });
            }
        }));
        this._sashListener.add(this._southSash.onDidChange((e)=>{
            if (currentSize) {
                deltaY = e.currentY - e.startY;
                this.layout(currentSize.height + deltaY, currentSize.width + deltaX);
                this._onDidResize.fire({
                    dimension: this._size,
                    done: false,
                    south: true
                });
            }
        }));
        this._sashListener.add((0, $fSvkC.Event).any(this._eastSash.onDidReset, this._westSash.onDidReset)((e)=>{
            if (this._preferredSize) {
                this.layout(this._size.height, this._preferredSize.width);
                this._onDidResize.fire({
                    dimension: this._size,
                    done: true
                });
            }
        }));
        this._sashListener.add((0, $fSvkC.Event).any(this._northSash.onDidReset, this._southSash.onDidReset)((e)=>{
            if (this._preferredSize) {
                this.layout(this._preferredSize.height, this._size.width);
                this._onDidResize.fire({
                    dimension: this._size,
                    done: true
                });
            }
        }));
    }
}



var $077db946d2496675$exports = {};

$parcel$export($077db946d2496675$exports, "canExpandCompletionItem", function () { return $077db946d2496675$export$f492f5f48ff8b22b; }, function (v) { return $077db946d2496675$export$f492f5f48ff8b22b = v; });
$parcel$export($077db946d2496675$exports, "SuggestDetailsWidget", function () { return $077db946d2496675$export$61e0dc2df900a441; }, function (v) { return $077db946d2496675$export$61e0dc2df900a441 = v; });
$parcel$export($077db946d2496675$exports, "SuggestDetailsOverlay", function () { return $077db946d2496675$export$d55abf796289b194; }, function (v) { return $077db946d2496675$export$d55abf796289b194 = v; });

var $abQPx = parcelRequire("abQPx");

var $jOYcd = parcelRequire("jOYcd");

var $cffC6 = parcelRequire("cffC6");

var $8HDYc = parcelRequire("8HDYc");

var $fSvkC = parcelRequire("fSvkC");

var $chTln = parcelRequire("chTln");

var $atiRx = parcelRequire("atiRx");


var $3xLkU = parcelRequire("3xLkU");


var $58WHl = parcelRequire("58WHl");

var $iZW67 = parcelRequire("iZW67");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $077db946d2496675$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $077db946d2496675$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
function $077db946d2496675$export$f492f5f48ff8b22b(item) {
    return !!item && Boolean(item.completion.documentation || item.completion.detail && item.completion.detail !== item.completion.label);
}
let $077db946d2496675$export$61e0dc2df900a441 = class SuggestDetailsWidget {
    dispose() {
        this._disposables.dispose();
        this._renderDisposeable.dispose();
    }
    _configureFont() {
        const options = this._editor.getOptions();
        const fontInfo = options.get(43 /* fontInfo */ );
        const fontFamily = fontInfo.getMassagedFontFamily((0, $abQPx.isSafari) ? (0, $3xLkU.EDITOR_FONT_DEFAULTS).fontFamily : null);
        const fontSize = options.get(106 /* suggestFontSize */ ) || fontInfo.fontSize;
        const lineHeight = options.get(107 /* suggestLineHeight */ ) || fontInfo.lineHeight;
        const fontWeight = fontInfo.fontWeight;
        const fontSizePx = `${fontSize}px`;
        const lineHeightPx = `${lineHeight}px`;
        this.domNode.style.fontSize = fontSizePx;
        this.domNode.style.lineHeight = `${lineHeight / fontSize}`;
        this.domNode.style.fontWeight = fontWeight;
        this.domNode.style.fontFeatureSettings = fontInfo.fontFeatureSettings;
        this._type.style.fontFamily = fontFamily;
        this._close.style.height = lineHeightPx;
        this._close.style.width = lineHeightPx;
    }
    getLayoutInfo() {
        const lineHeight = this._editor.getOption(107 /* suggestLineHeight */ ) || this._editor.getOption(43 /* fontInfo */ ).lineHeight;
        const borderWidth = this._borderWidth;
        const borderHeight = borderWidth * 2;
        return {
            lineHeight: lineHeight,
            borderWidth: borderWidth,
            borderHeight: borderHeight,
            verticalPadding: 22,
            horizontalPadding: 14
        };
    }
    renderLoading() {
        this._type.textContent = $58WHl.localize("loading", "Loading...");
        this._docs.textContent = "";
        this.domNode.classList.remove("no-docs", "no-type");
        this.layout(this.size.width, this.getLayoutInfo().lineHeight * 2);
        this._onDidChangeContents.fire(this);
    }
    renderItem(item, explainMode) {
        var _a, _b;
        this._renderDisposeable.clear();
        let { detail: detail , documentation: documentation  } = item.completion;
        if (explainMode) {
            let md = "";
            md += `score: ${item.score[0]}\n`;
            md += `prefix: ${(_a = item.word) !== null && _a !== void 0 ? _a : "(no prefix)"}\n`;
            md += `word: ${item.completion.filterText ? item.completion.filterText + " (filterText)" : item.textLabel}\n`;
            md += `distance: ${item.distance} (localityBonus-setting)\n`;
            md += `index: ${item.idx}, based on ${item.completion.sortText && `sortText: "${item.completion.sortText}"` || "label"}\n`;
            md += `commit_chars: ${(_b = item.completion.commitCharacters) === null || _b === void 0 ? void 0 : _b.join("")}\n`;
            documentation = new (0, $chTln.MarkdownString)().appendCodeblock("empty", md);
            detail = `Provider: ${item.provider._debugDisplayName}`;
        }
        if (!explainMode && !$077db946d2496675$export$f492f5f48ff8b22b(item)) {
            this.clearContents();
            return;
        }
        this.domNode.classList.remove("no-docs", "no-type");
        // --- details
        if (detail) {
            const cappedDetail = detail.length > 100000 ? `${detail.substr(0, 100000)}…` : detail;
            this._type.textContent = cappedDetail;
            this._type.title = cappedDetail;
            $jOYcd.show(this._type);
            this._type.classList.toggle("auto-wrap", !/\r?\n^\s+/gmi.test(cappedDetail));
        } else {
            $jOYcd.clearNode(this._type);
            this._type.title = "";
            $jOYcd.hide(this._type);
            this.domNode.classList.add("no-type");
        }
        // --- documentation
        $jOYcd.clearNode(this._docs);
        if (typeof documentation === "string") {
            this._docs.classList.remove("markdown-docs");
            this._docs.textContent = documentation;
        } else if (documentation) {
            this._docs.classList.add("markdown-docs");
            $jOYcd.clearNode(this._docs);
            const renderedContents = this._markdownRenderer.render(documentation);
            this._docs.appendChild(renderedContents.element);
            this._renderDisposeable.add(renderedContents);
            this._renderDisposeable.add(this._markdownRenderer.onDidRenderAsync(()=>{
                this.layout(this._size.width, this._type.clientHeight + this._docs.clientHeight);
                this._onDidChangeContents.fire(this);
            }));
        }
        this.domNode.style.userSelect = "text";
        this.domNode.tabIndex = -1;
        this._close.onmousedown = (e)=>{
            e.preventDefault();
            e.stopPropagation();
        };
        this._close.onclick = (e)=>{
            e.preventDefault();
            e.stopPropagation();
            this._onDidClose.fire();
        };
        this._body.scrollTop = 0;
        this.layout(this._size.width, this._type.clientHeight + this._docs.clientHeight);
        this._onDidChangeContents.fire(this);
    }
    clearContents() {
        this.domNode.classList.add("no-docs");
        this._type.textContent = "";
        this._docs.textContent = "";
    }
    get size() {
        return this._size;
    }
    layout(width, height) {
        const newSize = new $jOYcd.Dimension(width, height);
        if (!$jOYcd.Dimension.equals(newSize, this._size)) {
            this._size = newSize;
            $jOYcd.size(this.domNode, width, height);
        }
        this._scrollbar.scanDomNode();
    }
    scrollDown(much = 8) {
        this._body.scrollTop += much;
    }
    scrollUp(much = 8) {
        this._body.scrollTop -= much;
    }
    scrollTop() {
        this._body.scrollTop = 0;
    }
    scrollBottom() {
        this._body.scrollTop = this._body.scrollHeight;
    }
    pageDown() {
        this.scrollDown(80);
    }
    pageUp() {
        this.scrollUp(80);
    }
    set borderWidth(width) {
        this._borderWidth = width;
    }
    get borderWidth() {
        return this._borderWidth;
    }
    constructor(_editor, instaService){
        this._editor = _editor;
        this._onDidClose = new (0, $fSvkC.Emitter)();
        this.onDidClose = this._onDidClose.event;
        this._onDidChangeContents = new (0, $fSvkC.Emitter)();
        this.onDidChangeContents = this._onDidChangeContents.event;
        this._disposables = new (0, $atiRx.DisposableStore)();
        this._renderDisposeable = new (0, $atiRx.DisposableStore)();
        this._borderWidth = 1;
        this._size = new $jOYcd.Dimension(330, 0);
        this.domNode = $jOYcd.$(".suggest-details");
        this.domNode.classList.add("no-docs");
        this._markdownRenderer = instaService.createInstance((0, $ead540c899f453a8$exports.MarkdownRenderer), {
            editor: _editor
        });
        this._body = $jOYcd.$(".body");
        this._scrollbar = new (0, $cffC6.DomScrollableElement)(this._body, {});
        $jOYcd.append(this.domNode, this._scrollbar.getDomNode());
        this._disposables.add(this._scrollbar);
        this._header = $jOYcd.append(this._body, $jOYcd.$(".header"));
        this._close = $jOYcd.append(this._header, $jOYcd.$("span" + (0, $8HDYc.Codicon).close.cssSelector));
        this._close.title = $58WHl.localize("details.close", "Close");
        this._type = $jOYcd.append(this._header, $jOYcd.$("p.type"));
        this._docs = $jOYcd.append(this._body, $jOYcd.$("p.docs"));
        this._configureFont();
        this._disposables.add(this._editor.onDidChangeConfiguration((e)=>{
            if (e.hasChanged(43 /* fontInfo */ )) this._configureFont();
        }));
    }
};
$077db946d2496675$export$61e0dc2df900a441 = $077db946d2496675$var$__decorate([
    $077db946d2496675$var$__param(1, (0, $iZW67.IInstantiationService))
], $077db946d2496675$export$61e0dc2df900a441);
class $077db946d2496675$export$d55abf796289b194 {
    dispose() {
        this._resizable.dispose();
        this._disposables.dispose();
        this.hide();
    }
    getId() {
        return "suggest.details";
    }
    getDomNode() {
        return this._resizable.domNode;
    }
    getPosition() {
        return null;
    }
    show() {
        if (!this._added) {
            this._editor.addOverlayWidget(this);
            this.getDomNode().style.position = "fixed";
            this._added = true;
        }
    }
    hide(sessionEnded = false) {
        this._resizable.clearSashHoverState();
        if (this._added) {
            this._editor.removeOverlayWidget(this);
            this._added = false;
            this._anchorBox = undefined;
            this._topLeft = undefined;
        }
        if (sessionEnded) {
            this._userSize = undefined;
            this.widget.clearContents();
        }
    }
    placeAtAnchor(anchor, preferAlignAtTop) {
        var _a;
        const anchorBox = anchor.getBoundingClientRect();
        this._anchorBox = anchorBox;
        this._preferAlignAtTop = preferAlignAtTop;
        this._placeAtAnchor(this._anchorBox, (_a = this._userSize) !== null && _a !== void 0 ? _a : this.widget.size, preferAlignAtTop);
    }
    _placeAtAnchor(anchorBox, size, preferAlignAtTop) {
        var _a;
        const bodyBox = $jOYcd.getClientArea(document.body);
        const info = this.widget.getLayoutInfo();
        const defaultMinSize = new $jOYcd.Dimension(220, 2 * info.lineHeight);
        const defaultTop = anchorBox.top;
        // EAST
        const eastPlacement = function() {
            const width = bodyBox.width - (anchorBox.left + anchorBox.width + info.borderWidth + info.horizontalPadding);
            const left = -info.borderWidth + anchorBox.left + anchorBox.width;
            const maxSizeTop = new $jOYcd.Dimension(width, bodyBox.height - anchorBox.top - info.borderHeight - info.verticalPadding);
            const maxSizeBottom = maxSizeTop.with(undefined, anchorBox.top + anchorBox.height - info.borderHeight - info.verticalPadding);
            return {
                top: defaultTop,
                left: left,
                fit: width - size.width,
                maxSizeTop: maxSizeTop,
                maxSizeBottom: maxSizeBottom,
                minSize: defaultMinSize.with(Math.min(width, defaultMinSize.width))
            };
        }();
        // WEST
        const westPlacement = function() {
            const width = anchorBox.left - info.borderWidth - info.horizontalPadding;
            const left = Math.max(info.horizontalPadding, anchorBox.left - size.width - info.borderWidth);
            const maxSizeTop = new $jOYcd.Dimension(width, bodyBox.height - anchorBox.top - info.borderHeight - info.verticalPadding);
            const maxSizeBottom = maxSizeTop.with(undefined, anchorBox.top + anchorBox.height - info.borderHeight - info.verticalPadding);
            return {
                top: defaultTop,
                left: left,
                fit: width - size.width,
                maxSizeTop: maxSizeTop,
                maxSizeBottom: maxSizeBottom,
                minSize: defaultMinSize.with(Math.min(width, defaultMinSize.width))
            };
        }();
        // SOUTH
        const southPacement = function() {
            const left = anchorBox.left;
            const top = -info.borderWidth + anchorBox.top + anchorBox.height;
            const maxSizeBottom = new $jOYcd.Dimension(anchorBox.width - info.borderHeight, bodyBox.height - anchorBox.top - anchorBox.height - info.verticalPadding);
            return {
                top: top,
                left: left,
                fit: maxSizeBottom.height - size.height,
                maxSizeBottom: maxSizeBottom,
                maxSizeTop: maxSizeBottom,
                minSize: defaultMinSize.with(maxSizeBottom.width)
            };
        }();
        // take first placement that fits or the first with "least bad" fit
        const placements = [
            eastPlacement,
            westPlacement,
            southPacement
        ];
        const placement = (_a = placements.find((p)=>p.fit >= 0)) !== null && _a !== void 0 ? _a : placements.sort((a, b)=>b.fit - a.fit)[0];
        // top/bottom placement
        const bottom = anchorBox.top + anchorBox.height - info.borderHeight;
        let alignAtTop;
        let height = size.height;
        const maxHeight = Math.max(placement.maxSizeTop.height, placement.maxSizeBottom.height);
        if (height > maxHeight) height = maxHeight;
        let maxSize;
        if (preferAlignAtTop) {
            if (height <= placement.maxSizeTop.height) {
                alignAtTop = true;
                maxSize = placement.maxSizeTop;
            } else {
                alignAtTop = false;
                maxSize = placement.maxSizeBottom;
            }
        } else if (height <= placement.maxSizeBottom.height) {
            alignAtTop = false;
            maxSize = placement.maxSizeBottom;
        } else {
            alignAtTop = true;
            maxSize = placement.maxSizeTop;
        }
        this._applyTopLeft({
            left: placement.left,
            top: alignAtTop ? placement.top : bottom - height
        });
        this.getDomNode().style.position = "fixed";
        this._resizable.enableSashes(!alignAtTop, placement === eastPlacement, alignAtTop, placement !== eastPlacement);
        this._resizable.minSize = placement.minSize;
        this._resizable.maxSize = maxSize;
        this._resizable.layout(height, Math.min(maxSize.width, size.width));
        this.widget.layout(this._resizable.size.width, this._resizable.size.height);
    }
    _applyTopLeft(topLeft) {
        this._topLeft = topLeft;
        this.getDomNode().style.left = `${this._topLeft.left}px`;
        this.getDomNode().style.top = `${this._topLeft.top}px`;
    }
    constructor(widget, _editor){
        this.widget = widget;
        this._editor = _editor;
        this._disposables = new (0, $atiRx.DisposableStore)();
        this._added = false;
        this._preferAlignAtTop = true;
        this._resizable = new (0, $2b4c5d1582491c49$export$f049a29194943609)();
        this._resizable.domNode.classList.add("suggest-details-container");
        this._resizable.domNode.appendChild(widget.domNode);
        this._resizable.enableSashes(false, true, true, false);
        let topLeftNow;
        let sizeNow;
        let deltaTop = 0;
        let deltaLeft = 0;
        this._disposables.add(this._resizable.onDidWillResize(()=>{
            topLeftNow = this._topLeft;
            sizeNow = this._resizable.size;
        }));
        this._disposables.add(this._resizable.onDidResize((e)=>{
            if (topLeftNow && sizeNow) {
                this.widget.layout(e.dimension.width, e.dimension.height);
                let updateTopLeft = false;
                if (e.west) {
                    deltaLeft = sizeNow.width - e.dimension.width;
                    updateTopLeft = true;
                }
                if (e.north) {
                    deltaTop = sizeNow.height - e.dimension.height;
                    updateTopLeft = true;
                }
                if (updateTopLeft) this._applyTopLeft({
                    top: topLeftNow.top + deltaTop,
                    left: topLeftNow.left + deltaLeft
                });
            }
            if (e.done) {
                topLeftNow = undefined;
                sizeNow = undefined;
                deltaTop = 0;
                deltaLeft = 0;
                this._userSize = e.dimension;
            }
        }));
        this._disposables.add(this.widget.onDidChangeContents(()=>{
            var _a;
            if (this._anchorBox) this._placeAtAnchor(this._anchorBox, (_a = this._userSize) !== null && _a !== void 0 ? _a : this.widget.size, this._preferAlignAtTop);
        }));
    }
}


var $df63decae8f986c5$exports = {};

$parcel$export($df63decae8f986c5$exports, "getAriaId", function () { return $df63decae8f986c5$export$1b8419c18a1973d4; }, function (v) { return $df63decae8f986c5$export$1b8419c18a1973d4 = v; });
$parcel$export($df63decae8f986c5$exports, "ItemRenderer", function () { return $df63decae8f986c5$export$72711cb3319e66a8; }, function (v) { return $df63decae8f986c5$export$72711cb3319e66a8 = v; });

var $abQPx = parcelRequire("abQPx");

var $jOYcd = parcelRequire("jOYcd");

var $eCmkC = parcelRequire("eCmkC");

var $4xCD7 = parcelRequire("4xCD7");

var $8HDYc = parcelRequire("8HDYc");

var $fSvkC = parcelRequire("fSvkC");

var $c8WLW = parcelRequire("c8WLW");

var $atiRx = parcelRequire("atiRx");

var $7K96x = parcelRequire("7K96x");

var $3xLkU = parcelRequire("3xLkU");

var $eKhCe = parcelRequire("eKhCe");

var $fDjBp = parcelRequire("fDjBp");

var $aMhG1 = parcelRequire("aMhG1");

var $58zcN = parcelRequire("58zcN");
var $8e221ff0bb1d49ff$export$13c2b15ba9153568;
(function(FileKind) {
    FileKind[FileKind["FILE"] = 0] = "FILE";
    FileKind[FileKind["FOLDER"] = 1] = "FOLDER";
    FileKind[FileKind["ROOT_FOLDER"] = 2] = "ROOT_FOLDER";
})($8e221ff0bb1d49ff$export$13c2b15ba9153568 || ($8e221ff0bb1d49ff$export$13c2b15ba9153568 = {})); //#endregion


function $f7ca7b63269abe77$export$e27af96b7ae3b008(modelService, modeService, resource, fileKind) {
    // we always set these base classes even if we do not have a path
    const classes = fileKind === (0, $8e221ff0bb1d49ff$export$13c2b15ba9153568).ROOT_FOLDER ? [
        "rootfolder-icon"
    ] : fileKind === (0, $8e221ff0bb1d49ff$export$13c2b15ba9153568).FOLDER ? [
        "folder-icon"
    ] : [
        "file-icon"
    ];
    if (resource) {
        // Get the path and name of the resource. For data-URIs, we need to parse specially
        let name;
        if (resource.scheme === (0, $fDjBp.Schemas).data) {
            const metadata = (0, $aMhG1.DataUri).parseMetaData(resource);
            name = metadata.get((0, $aMhG1.DataUri).META_DATA_LABEL);
        } else name = $f7ca7b63269abe77$export$a5d1f61e0bd5c403((0, $aMhG1.basenameOrAuthority)(resource).toLowerCase());
        // Folders
        if (fileKind === (0, $8e221ff0bb1d49ff$export$13c2b15ba9153568).FOLDER) classes.push(`${name}-name-folder-icon`);
        else {
            // Name & Extension(s)
            if (name) {
                classes.push(`${name}-name-file-icon`);
                // Avoid doing an explosive combination of extensions for very long filenames
                // (most file systems do not allow files > 255 length) with lots of `.` characters
                // https://github.com/microsoft/vscode/issues/116199
                if (name.length <= 255) {
                    const dotSegments = name.split(".");
                    for(let i = 1; i < dotSegments.length; i++)classes.push(`${dotSegments.slice(i).join(".")}-ext-file-icon`); // add each combination of all found extensions if more than one
                }
                classes.push(`ext-file-icon`); // extra segment to increase file-ext score
            }
            // Detected Mode
            const detectedModeId = $f7ca7b63269abe77$var$detectModeId(modelService, modeService, resource);
            if (detectedModeId) classes.push(`${$f7ca7b63269abe77$export$a5d1f61e0bd5c403(detectedModeId)}-lang-file-icon`);
        }
    }
    return classes;
}
function $f7ca7b63269abe77$var$detectModeId(modelService, modeService, resource) {
    if (!resource) return null; // we need a resource at least
    let modeId = null;
    // Data URI: check for encoded metadata
    if (resource.scheme === (0, $fDjBp.Schemas).data) {
        const metadata = (0, $aMhG1.DataUri).parseMetaData(resource);
        const mime = metadata.get((0, $aMhG1.DataUri).META_DATA_MIME);
        if (mime) modeId = modeService.getModeId(mime);
    } else {
        const model = modelService.getModel(resource);
        if (model) modeId = model.getLanguageId();
    }
    // only take if the mode is specific (aka no just plain text)
    if (modeId && modeId !== (0, $58zcN.PLAINTEXT_MODE_ID)) return modeId;
    // otherwise fallback to path based detection
    return modeService.getModeIdByFilepathOrFirstLine(resource);
}
function $f7ca7b63269abe77$export$a5d1f61e0bd5c403(str) {
    return str.replace(/[\11\12\14\15\40]/g, "/"); // HTML class names can not contain certain whitespace characters, use / instead, which doesn't exist in file names.
}



var $dwrPd = parcelRequire("dwrPd");

var $6o4cZ = parcelRequire("6o4cZ");

var $58WHl = parcelRequire("58WHl");


var $iValS = parcelRequire("iValS");

var $fUTzO = parcelRequire("fUTzO");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $df63decae8f986c5$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $df63decae8f986c5$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var $df63decae8f986c5$var$_a;
function $df63decae8f986c5$export$1b8419c18a1973d4(index) {
    return `suggest-aria-id:${index}`;
}
const $df63decae8f986c5$export$3cc1a6a224e77f6d = (0, $iValS.registerIcon)("suggest-more-info", (0, $8HDYc.Codicon).chevronRight, $58WHl.localize("suggestMoreInfoIcon", "Icon for more information in the suggest widget."));
const $df63decae8f986c5$var$_completionItemColor = new ($df63decae8f986c5$var$_a = class ColorExtractor {
    extract(item, out) {
        if (item.textLabel.match(ColorExtractor._regexStrict)) {
            out[0] = item.textLabel;
            return true;
        }
        if (item.completion.detail && item.completion.detail.match(ColorExtractor._regexStrict)) {
            out[0] = item.completion.detail;
            return true;
        }
        if (typeof item.completion.documentation === "string") {
            const match = ColorExtractor._regexRelaxed.exec(item.completion.documentation);
            if (match && (match.index === 0 || match.index + match[0].length === item.completion.documentation.length)) {
                out[0] = match[0];
                return true;
            }
        }
        return false;
    }
}, $df63decae8f986c5$var$_a._regexRelaxed = /(#([\da-fA-F]{3}){1,2}|(rgb|hsl)a\(\s*(\d{1,3}%?\s*,\s*){3}(1|0?\.\d+)\)|(rgb|hsl)\(\s*\d{1,3}%?(\s*,\s*\d{1,3}%?){2}\s*\))/, $df63decae8f986c5$var$_a._regexStrict = new RegExp(`^${$df63decae8f986c5$var$_a._regexRelaxed.source}$`, "i"), $df63decae8f986c5$var$_a);
let $df63decae8f986c5$export$72711cb3319e66a8 = class ItemRenderer {
    dispose() {
        this._onDidToggleDetails.dispose();
    }
    renderTemplate(container) {
        const data = Object.create(null);
        data.disposables = new (0, $atiRx.DisposableStore)();
        data.root = container;
        data.root.classList.add("show-file-icons");
        data.icon = (0, $jOYcd.append)(container, (0, $jOYcd.$)(".icon"));
        data.colorspan = (0, $jOYcd.append)(data.icon, (0, $jOYcd.$)("span.colorspan"));
        const text = (0, $jOYcd.append)(container, (0, $jOYcd.$)(".contents"));
        const main = (0, $jOYcd.append)(text, (0, $jOYcd.$)(".main"));
        data.iconContainer = (0, $jOYcd.append)(main, (0, $jOYcd.$)(".icon-label.codicon"));
        data.left = (0, $jOYcd.append)(main, (0, $jOYcd.$)("span.left"));
        data.right = (0, $jOYcd.append)(main, (0, $jOYcd.$)("span.right"));
        data.iconLabel = new (0, $eCmkC.IconLabel)(data.left, {
            supportHighlights: true,
            supportIcons: true
        });
        data.disposables.add(data.iconLabel);
        data.parametersLabel = (0, $jOYcd.append)(data.left, (0, $jOYcd.$)("span.signature-label"));
        data.qualifierLabel = (0, $jOYcd.append)(data.left, (0, $jOYcd.$)("span.qualifier-label"));
        data.detailsLabel = (0, $jOYcd.append)(data.right, (0, $jOYcd.$)("span.details-label"));
        data.readMore = (0, $jOYcd.append)(data.right, (0, $jOYcd.$)("span.readMore" + (0, $fUTzO.ThemeIcon).asCSSSelector($df63decae8f986c5$export$3cc1a6a224e77f6d)));
        data.readMore.title = $58WHl.localize("readMore", "Read More");
        const configureFont = ()=>{
            const options = this._editor.getOptions();
            const fontInfo = options.get(43 /* fontInfo */ );
            const fontFamily = fontInfo.getMassagedFontFamily((0, $abQPx.isSafari) ? (0, $3xLkU.EDITOR_FONT_DEFAULTS).fontFamily : null);
            const fontFeatureSettings = fontInfo.fontFeatureSettings;
            const fontSize = options.get(106 /* suggestFontSize */ ) || fontInfo.fontSize;
            const lineHeight = options.get(107 /* suggestLineHeight */ ) || fontInfo.lineHeight;
            const fontWeight = fontInfo.fontWeight;
            const fontSizePx = `${fontSize}px`;
            const lineHeightPx = `${lineHeight}px`;
            data.root.style.fontSize = fontSizePx;
            data.root.style.fontWeight = fontWeight;
            main.style.fontFamily = fontFamily;
            main.style.fontFeatureSettings = fontFeatureSettings;
            main.style.lineHeight = lineHeightPx;
            data.icon.style.height = lineHeightPx;
            data.icon.style.width = lineHeightPx;
            data.readMore.style.height = lineHeightPx;
            data.readMore.style.width = lineHeightPx;
        };
        configureFont();
        data.disposables.add(this._editor.onDidChangeConfiguration((e)=>{
            if (e.hasChanged(43 /* fontInfo */ ) || e.hasChanged(106 /* suggestFontSize */ ) || e.hasChanged(107 /* suggestLineHeight */ )) configureFont();
        }));
        return data;
    }
    renderElement(element, index, data) {
        const { completion: completion  } = element;
        data.root.id = $df63decae8f986c5$export$1b8419c18a1973d4(index);
        data.colorspan.style.backgroundColor = "";
        const labelOptions = {
            labelEscapeNewLines: true,
            matches: (0, $c8WLW.createMatches)(element.score)
        };
        let color = [];
        if (completion.kind === 19 /* Color */  && $df63decae8f986c5$var$_completionItemColor.extract(element, color)) {
            // special logic for 'color' completion items
            data.icon.className = "icon customcolor";
            data.iconContainer.className = "icon hide";
            data.colorspan.style.backgroundColor = color[0];
        } else if (completion.kind === 20 /* File */  && this._themeService.getFileIconTheme().hasFileIcons) {
            // special logic for 'file' completion items
            data.icon.className = "icon hide";
            data.iconContainer.className = "icon hide";
            const labelClasses = (0, $f7ca7b63269abe77$export$e27af96b7ae3b008)(this._modelService, this._modeService, (0, $7K96x.URI).from({
                scheme: "fake",
                path: element.textLabel
            }), (0, $8e221ff0bb1d49ff$export$13c2b15ba9153568).FILE);
            const detailClasses = (0, $f7ca7b63269abe77$export$e27af96b7ae3b008)(this._modelService, this._modeService, (0, $7K96x.URI).from({
                scheme: "fake",
                path: completion.detail
            }), (0, $8e221ff0bb1d49ff$export$13c2b15ba9153568).FILE);
            labelOptions.extraClasses = labelClasses.length > detailClasses.length ? labelClasses : detailClasses;
        } else if (completion.kind === 23 /* Folder */  && this._themeService.getFileIconTheme().hasFolderIcons) {
            // special logic for 'folder' completion items
            data.icon.className = "icon hide";
            data.iconContainer.className = "icon hide";
            labelOptions.extraClasses = (0, $4xCD7.flatten)([
                (0, $f7ca7b63269abe77$export$e27af96b7ae3b008)(this._modelService, this._modeService, (0, $7K96x.URI).from({
                    scheme: "fake",
                    path: element.textLabel
                }), (0, $8e221ff0bb1d49ff$export$13c2b15ba9153568).FOLDER),
                (0, $f7ca7b63269abe77$export$e27af96b7ae3b008)(this._modelService, this._modeService, (0, $7K96x.URI).from({
                    scheme: "fake",
                    path: completion.detail
                }), (0, $8e221ff0bb1d49ff$export$13c2b15ba9153568).FOLDER)
            ]);
        } else {
            // normal icon
            data.icon.className = "icon hide";
            data.iconContainer.className = "";
            data.iconContainer.classList.add("suggest-icon", ...(0, $eKhCe.completionKindToCssClass)(completion.kind).split(" "));
        }
        if (completion.tags && completion.tags.indexOf(1 /* Deprecated */ ) >= 0) {
            labelOptions.extraClasses = (labelOptions.extraClasses || []).concat([
                "deprecated"
            ]);
            labelOptions.matches = [];
        }
        data.iconLabel.setLabel(element.textLabel, undefined, labelOptions);
        if (typeof completion.label === "string") {
            data.parametersLabel.textContent = "";
            data.detailsLabel.textContent = $df63decae8f986c5$var$stripNewLines(completion.detail || "");
            data.root.classList.add("string-label");
        } else {
            data.parametersLabel.textContent = $df63decae8f986c5$var$stripNewLines(completion.label.detail || "");
            data.detailsLabel.textContent = $df63decae8f986c5$var$stripNewLines(completion.label.description || "");
            data.root.classList.remove("string-label");
        }
        if (this._editor.getOption(105 /* suggest */ ).showInlineDetails) (0, $jOYcd.show)(data.detailsLabel);
        else (0, $jOYcd.hide)(data.detailsLabel);
        if ((0, $077db946d2496675$exports.canExpandCompletionItem)(element)) {
            data.right.classList.add("can-expand-details");
            (0, $jOYcd.show)(data.readMore);
            data.readMore.onmousedown = (e)=>{
                e.stopPropagation();
                e.preventDefault();
            };
            data.readMore.onclick = (e)=>{
                e.stopPropagation();
                e.preventDefault();
                this._onDidToggleDetails.fire();
            };
        } else {
            data.right.classList.remove("can-expand-details");
            (0, $jOYcd.hide)(data.readMore);
            data.readMore.onmousedown = null;
            data.readMore.onclick = null;
        }
    }
    disposeTemplate(templateData) {
        templateData.disposables.dispose();
    }
    constructor(_editor, _modelService, _modeService, _themeService){
        this._editor = _editor;
        this._modelService = _modelService;
        this._modeService = _modeService;
        this._themeService = _themeService;
        this._onDidToggleDetails = new (0, $fSvkC.Emitter)();
        this.onDidToggleDetails = this._onDidToggleDetails.event;
        this.templateId = "suggestion";
    }
};
$df63decae8f986c5$export$72711cb3319e66a8 = $df63decae8f986c5$var$__decorate([
    $df63decae8f986c5$var$__param(1, (0, $dwrPd.IModelService)),
    $df63decae8f986c5$var$__param(2, (0, $6o4cZ.IModeService)),
    $df63decae8f986c5$var$__param(3, (0, $fUTzO.IThemeService))
], $df63decae8f986c5$export$72711cb3319e66a8);
function $df63decae8f986c5$var$stripNewLines(str) {
    return str.replace(/\r\n|\r|\n/g, "");
}


/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $17a3075f14cb16fd$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $17a3075f14cb16fd$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var $17a3075f14cb16fd$var$__awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const $17a3075f14cb16fd$export$4e0daeab52f97af3 = (0, $3XYy8.registerColor)("editorSuggestWidget.selectedBackground", {
    dark: (0, $3XYy8.quickInputListFocusBackground),
    light: (0, $3XYy8.quickInputListFocusBackground),
    hc: (0, $3XYy8.quickInputListFocusBackground)
}, $58WHl.localize("editorSuggestWidgetSelectedBackground", "Background color of the selected entry in the suggest widget."));
class $17a3075f14cb16fd$var$PersistedWidgetSize {
    restore() {
        var _a;
        const raw = (_a = this._service.get(this._key, 0 /* GLOBAL */ )) !== null && _a !== void 0 ? _a : "";
        try {
            const obj = JSON.parse(raw);
            if ($jOYcd.Dimension.is(obj)) return $jOYcd.Dimension.lift(obj);
        } catch (_b) {
        // ignore
        }
        return undefined;
    }
    store(size) {
        this._service.store(this._key, JSON.stringify(size), 0 /* GLOBAL */ , 1 /* MACHINE */ );
    }
    reset() {
        this._service.remove(this._key, 0 /* GLOBAL */ );
    }
    constructor(_service, editor){
        this._service = _service;
        this._key = `suggestWidget.size/${editor.getEditorType()}/${editor instanceof (0, $cd934ec6628ad62c$exports.EmbeddedCodeEditorWidget)}`;
    }
}
let $17a3075f14cb16fd$export$ad1808d575fcd49b = class SuggestWidget {
    dispose() {
        var _a;
        this._details.widget.dispose();
        this._details.dispose();
        this._list.dispose();
        this._status.dispose();
        this._disposables.dispose();
        (_a = this._loadingTimeout) === null || _a === void 0 || _a.dispose();
        this._showTimeout.dispose();
        this._contentWidget.dispose();
        this.element.dispose();
    }
    _onEditorMouseDown(mouseEvent) {
        if (this._details.widget.domNode.contains(mouseEvent.target.element)) // Clicking inside details
        this._details.widget.domNode.focus();
        else // Clicking outside details and inside suggest
        if (this.element.domNode.contains(mouseEvent.target.element)) this.editor.focus();
    }
    _onCursorSelectionChanged() {
        if (this._state !== 0 /* Hidden */ ) this._contentWidget.layout();
    }
    _onListMouseDownOrTap(e) {
        if (typeof e.element === "undefined" || typeof e.index === "undefined") return;
        // prevent stealing browser focus from the editor
        e.browserEvent.preventDefault();
        e.browserEvent.stopPropagation();
        this._select(e.element, e.index);
    }
    _onListSelection(e) {
        if (e.elements.length) this._select(e.elements[0], e.indexes[0]);
    }
    _select(item, index) {
        const completionModel = this._completionModel;
        if (completionModel) {
            this._onDidSelect.fire({
                item: item,
                index: index,
                model: completionModel
            });
            this.editor.focus();
        }
    }
    _onThemeChange(theme) {
        this._details.widget.borderWidth = theme.type === "hc" ? 2 : 1;
    }
    _onListFocus(e) {
        var _a;
        if (this._ignoreFocusEvents) return;
        if (!e.elements.length) {
            if (this._currentSuggestionDetails) {
                this._currentSuggestionDetails.cancel();
                this._currentSuggestionDetails = undefined;
                this._focusedItem = undefined;
            }
            this.editor.setAriaOptions({
                activeDescendant: undefined
            });
            return;
        }
        if (!this._completionModel) return;
        const item = e.elements[0];
        const index = e.indexes[0];
        if (item !== this._focusedItem) {
            (_a = this._currentSuggestionDetails) === null || _a === void 0 || _a.cancel();
            this._currentSuggestionDetails = undefined;
            this._focusedItem = item;
            this._list.reveal(index);
            this._currentSuggestionDetails = (0, $eFOsn.createCancelablePromise)((token)=>$17a3075f14cb16fd$var$__awaiter(this, void 0, void 0, function*() {
                    const loading = (0, $eFOsn.disposableTimeout)(()=>{
                        if (this._isDetailsVisible()) this.showDetails(true);
                    }, 250);
                    token.onCancellationRequested(()=>loading.dispose());
                    const result = yield item.resolve(token);
                    loading.dispose();
                    return result;
                }));
            this._currentSuggestionDetails.then(()=>{
                if (index >= this._list.length || item !== this._list.element(index)) return;
                // item can have extra information, so re-render
                this._ignoreFocusEvents = true;
                this._list.splice(index, 1, [
                    item
                ]);
                this._list.setFocus([
                    index
                ]);
                this._ignoreFocusEvents = false;
                if (this._isDetailsVisible()) this.showDetails(false);
                else this.element.domNode.classList.remove("docs-side");
                this.editor.setAriaOptions({
                    activeDescendant: (0, $df63decae8f986c5$exports.getAriaId)(index)
                });
            }).catch((0, $g0782.onUnexpectedError));
        }
        // emit an event
        this._onDidFocus.fire({
            item: item,
            index: index,
            model: this._completionModel
        });
    }
    _setState(state) {
        if (this._state === state) return;
        this._state = state;
        this.element.domNode.classList.toggle("frozen", state === 4 /* Frozen */ );
        this.element.domNode.classList.remove("message");
        switch(state){
            case 0 /* Hidden */ :
                $jOYcd.hide(this._messageElement, this._listElement, this._status.element);
                this._details.hide(true);
                this._status.hide();
                this._contentWidget.hide();
                this._ctxSuggestWidgetVisible.reset();
                this._ctxSuggestWidgetMultipleSuggestions.reset();
                this._showTimeout.cancel();
                this.element.domNode.classList.remove("visible");
                this._list.splice(0, this._list.length);
                this._focusedItem = undefined;
                this._cappedHeight = undefined;
                this._explainMode = false;
                break;
            case 1 /* Loading */ :
                this.element.domNode.classList.add("message");
                this._messageElement.textContent = SuggestWidget.LOADING_MESSAGE;
                $jOYcd.hide(this._listElement, this._status.element);
                $jOYcd.show(this._messageElement);
                this._details.hide();
                this._show();
                this._focusedItem = undefined;
                break;
            case 2 /* Empty */ :
                this.element.domNode.classList.add("message");
                this._messageElement.textContent = SuggestWidget.NO_SUGGESTIONS_MESSAGE;
                $jOYcd.hide(this._listElement, this._status.element);
                $jOYcd.show(this._messageElement);
                this._details.hide();
                this._show();
                this._focusedItem = undefined;
                break;
            case 3 /* Open */ :
                $jOYcd.hide(this._messageElement);
                $jOYcd.show(this._listElement, this._status.element);
                this._show();
                break;
            case 4 /* Frozen */ :
                $jOYcd.hide(this._messageElement);
                $jOYcd.show(this._listElement, this._status.element);
                this._show();
                break;
            case 5 /* Details */ :
                $jOYcd.hide(this._messageElement);
                $jOYcd.show(this._listElement, this._status.element);
                this._details.show();
                this._show();
                break;
        }
    }
    _show() {
        this._status.show();
        this._contentWidget.show();
        this._layout(this._persistedSize.restore());
        this._ctxSuggestWidgetVisible.set(true);
        this._showTimeout.cancelAndSet(()=>{
            this.element.domNode.classList.add("visible");
            this._onDidShow.fire(this);
        }, 100);
    }
    showTriggered(auto, delay) {
        if (this._state !== 0 /* Hidden */ ) return;
        this._contentWidget.setPosition(this.editor.getPosition());
        this._isAuto = !!auto;
        if (!this._isAuto) this._loadingTimeout = (0, $eFOsn.disposableTimeout)(()=>this._setState(1 /* Loading */ ), delay);
    }
    showSuggestions(completionModel, selectionIndex, isFrozen, isAuto) {
        var _a, _b;
        this._contentWidget.setPosition(this.editor.getPosition());
        (_a = this._loadingTimeout) === null || _a === void 0 || _a.dispose();
        (_b = this._currentSuggestionDetails) === null || _b === void 0 || _b.cancel();
        this._currentSuggestionDetails = undefined;
        if (this._completionModel !== completionModel) this._completionModel = completionModel;
        if (isFrozen && this._state !== 2 /* Empty */  && this._state !== 0 /* Hidden */ ) {
            this._setState(4 /* Frozen */ );
            return;
        }
        const visibleCount = this._completionModel.items.length;
        const isEmpty = visibleCount === 0;
        this._ctxSuggestWidgetMultipleSuggestions.set(visibleCount > 1);
        if (isEmpty) {
            this._setState(isAuto ? 0 /* Hidden */  : 2 /* Empty */ );
            this._completionModel = undefined;
            return;
        }
        this._focusedItem = undefined;
        this._list.splice(0, this._list.length, this._completionModel.items);
        this._setState(isFrozen ? 4 /* Frozen */  : 3 /* Open */ );
        this._list.reveal(selectionIndex, 0);
        this._list.setFocus([
            selectionIndex
        ]);
        this._layout(this.element.size);
        // Reset focus border
        this._details.widget.domNode.classList.remove("focused");
    }
    selectNextPage() {
        switch(this._state){
            case 0 /* Hidden */ :
                return false;
            case 5 /* Details */ :
                this._details.widget.pageDown();
                return true;
            case 1 /* Loading */ :
                return !this._isAuto;
            default:
                this._list.focusNextPage();
                return true;
        }
    }
    selectNext() {
        switch(this._state){
            case 0 /* Hidden */ :
                return false;
            case 1 /* Loading */ :
                return !this._isAuto;
            default:
                this._list.focusNext(1, true);
                return true;
        }
    }
    selectLast() {
        switch(this._state){
            case 0 /* Hidden */ :
                return false;
            case 5 /* Details */ :
                this._details.widget.scrollBottom();
                return true;
            case 1 /* Loading */ :
                return !this._isAuto;
            default:
                this._list.focusLast();
                return true;
        }
    }
    selectPreviousPage() {
        switch(this._state){
            case 0 /* Hidden */ :
                return false;
            case 5 /* Details */ :
                this._details.widget.pageUp();
                return true;
            case 1 /* Loading */ :
                return !this._isAuto;
            default:
                this._list.focusPreviousPage();
                return true;
        }
    }
    selectPrevious() {
        switch(this._state){
            case 0 /* Hidden */ :
                return false;
            case 1 /* Loading */ :
                return !this._isAuto;
            default:
                this._list.focusPrevious(1, true);
                return false;
        }
    }
    selectFirst() {
        switch(this._state){
            case 0 /* Hidden */ :
                return false;
            case 5 /* Details */ :
                this._details.widget.scrollTop();
                return true;
            case 1 /* Loading */ :
                return !this._isAuto;
            default:
                this._list.focusFirst();
                return true;
        }
    }
    getFocusedItem() {
        if (this._state !== 0 /* Hidden */  && this._state !== 2 /* Empty */  && this._state !== 1 /* Loading */  && this._completionModel) return {
            item: this._list.getFocusedElements()[0],
            index: this._list.getFocus()[0],
            model: this._completionModel
        };
        return undefined;
    }
    toggleDetailsFocus() {
        if (this._state === 5 /* Details */ ) {
            this._setState(3 /* Open */ );
            this._details.widget.domNode.classList.remove("focused");
        } else if (this._state === 3 /* Open */  && this._isDetailsVisible()) {
            this._setState(5 /* Details */ );
            this._details.widget.domNode.classList.add("focused");
        }
    }
    toggleDetails() {
        if (this._isDetailsVisible()) {
            // hide details widget
            this._ctxSuggestWidgetDetailsVisible.set(false);
            this._setDetailsVisible(false);
            this._details.hide();
            this.element.domNode.classList.remove("shows-details");
        } else if (((0, $077db946d2496675$exports.canExpandCompletionItem)(this._list.getFocusedElements()[0]) || this._explainMode) && (this._state === 3 /* Open */  || this._state === 5 /* Details */  || this._state === 4 /* Frozen */ )) {
            // show details widget (iff possible)
            this._ctxSuggestWidgetDetailsVisible.set(true);
            this._setDetailsVisible(true);
            this.showDetails(false);
        }
    }
    showDetails(loading) {
        this._details.show();
        if (loading) this._details.widget.renderLoading();
        else this._details.widget.renderItem(this._list.getFocusedElements()[0], this._explainMode);
        this._positionDetails();
        this.editor.focus();
        this.element.domNode.classList.add("shows-details");
    }
    toggleExplainMode() {
        if (this._list.getFocusedElements()[0]) {
            this._explainMode = !this._explainMode;
            if (!this._isDetailsVisible()) this.toggleDetails();
            else this.showDetails(false);
        }
    }
    resetPersistedSize() {
        this._persistedSize.reset();
    }
    hideWidget() {
        var _a;
        (_a = this._loadingTimeout) === null || _a === void 0 || _a.dispose();
        this._setState(0 /* Hidden */ );
        this._onDidHide.fire(this);
        this.element.clearSashHoverState();
        // ensure that a reasonable widget height is persisted so that
        // accidential "resize-to-single-items" cases aren't happening
        const dim = this._persistedSize.restore();
        const minPersistedHeight = Math.ceil(this.getLayoutInfo().itemHeight * 4.3);
        if (dim && dim.height < minPersistedHeight) this._persistedSize.store(dim.with(undefined, minPersistedHeight));
    }
    isFrozen() {
        return this._state === 4 /* Frozen */ ;
    }
    _afterRender(position) {
        if (position === null) {
            if (this._isDetailsVisible()) this._details.hide(); //todo@jrieken soft-hide
            return;
        }
        if (this._state === 2 /* Empty */  || this._state === 1 /* Loading */ ) // no special positioning when widget isn't showing list
        return;
        if (this._isDetailsVisible()) this._details.show();
        this._positionDetails();
    }
    _layout(size) {
        var _a, _b, _c;
        if (!this.editor.hasModel()) return;
        if (!this.editor.getDomNode()) // happens when running tests
        return;
        const bodyBox = $jOYcd.getClientArea(document.body);
        const info = this.getLayoutInfo();
        if (!size) size = info.defaultSize;
        let height = size.height;
        let width = size.width;
        // status bar
        this._status.element.style.lineHeight = `${info.itemHeight}px`;
        if (this._state === 2 /* Empty */  || this._state === 1 /* Loading */ ) {
            // showing a message only
            height = info.itemHeight + info.borderHeight;
            width = info.defaultSize.width / 2;
            this.element.enableSashes(false, false, false, false);
            this.element.minSize = this.element.maxSize = new $jOYcd.Dimension(width, height);
            this._contentWidget.setPreference(2 /* BELOW */ );
        } else {
            // showing items
            // width math
            const maxWidth = bodyBox.width - info.borderHeight - 2 * info.horizontalPadding;
            if (width > maxWidth) width = maxWidth;
            const preferredWidth = this._completionModel ? this._completionModel.stats.pLabelLen * info.typicalHalfwidthCharacterWidth : width;
            // height math
            const fullHeight = info.statusBarHeight + this._list.contentHeight + info.borderHeight;
            const minHeight = info.itemHeight + info.statusBarHeight;
            const editorBox = $jOYcd.getDomNodePagePosition(this.editor.getDomNode());
            const cursorBox = this.editor.getScrolledVisiblePosition(this.editor.getPosition());
            const cursorBottom = editorBox.top + cursorBox.top + cursorBox.height;
            const maxHeightBelow = Math.min(bodyBox.height - cursorBottom - info.verticalPadding, fullHeight);
            const availableSpaceAbove = editorBox.top + cursorBox.top - info.verticalPadding;
            const maxHeightAbove = Math.min(availableSpaceAbove, fullHeight);
            let maxHeight = Math.min(Math.max(maxHeightAbove, maxHeightBelow) + info.borderHeight, fullHeight);
            if (height === ((_a = this._cappedHeight) === null || _a === void 0 ? void 0 : _a.capped)) // Restore the old (wanted) height when the current
            // height is capped to fit
            height = this._cappedHeight.wanted;
            if (height < minHeight) height = minHeight;
            if (height > maxHeight) height = maxHeight;
            const forceRenderingAboveRequiredSpace = 150;
            if (height > maxHeightBelow || this._forceRenderingAbove && availableSpaceAbove > forceRenderingAboveRequiredSpace) {
                this._contentWidget.setPreference(1 /* ABOVE */ );
                this.element.enableSashes(true, true, false, false);
                maxHeight = maxHeightAbove;
            } else {
                this._contentWidget.setPreference(2 /* BELOW */ );
                this.element.enableSashes(false, true, true, false);
                maxHeight = maxHeightBelow;
            }
            this.element.preferredSize = new $jOYcd.Dimension(preferredWidth, info.defaultSize.height);
            this.element.maxSize = new $jOYcd.Dimension(maxWidth, maxHeight);
            this.element.minSize = new $jOYcd.Dimension(220, minHeight);
            // Know when the height was capped to fit and remember
            // the wanted height for later. This is required when going
            // left to widen suggestions.
            this._cappedHeight = height === fullHeight ? {
                wanted: (_c = (_b = this._cappedHeight) === null || _b === void 0 ? void 0 : _b.wanted) !== null && _c !== void 0 ? _c : size.height,
                capped: height
            } : undefined;
        }
        this._resize(width, height);
    }
    _resize(width, height) {
        const { width: maxWidth , height: maxHeight  } = this.element.maxSize;
        width = Math.min(maxWidth, width);
        height = Math.min(maxHeight, height);
        const { statusBarHeight: statusBarHeight  } = this.getLayoutInfo();
        this._list.layout(height - statusBarHeight, width);
        this._listElement.style.height = `${height - statusBarHeight}px`;
        this.element.layout(height, width);
        this._contentWidget.layout();
        this._positionDetails();
    }
    _positionDetails() {
        var _a;
        if (this._isDetailsVisible()) this._details.placeAtAnchor(this.element.domNode, ((_a = this._contentWidget.getPosition()) === null || _a === void 0 ? void 0 : _a.preference[0]) === 2 /* BELOW */ );
    }
    getLayoutInfo() {
        const fontInfo = this.editor.getOption(43 /* fontInfo */ );
        const itemHeight = (0, $6OJeW.clamp)(this.editor.getOption(107 /* suggestLineHeight */ ) || fontInfo.lineHeight, 8, 1000);
        const statusBarHeight = !this.editor.getOption(105 /* suggest */ ).showStatusBar || this._state === 2 /* Empty */  || this._state === 1 /* Loading */  ? 0 : itemHeight;
        const borderWidth = this._details.widget.borderWidth;
        const borderHeight = 2 * borderWidth;
        return {
            itemHeight: itemHeight,
            statusBarHeight: statusBarHeight,
            borderWidth: borderWidth,
            borderHeight: borderHeight,
            typicalHalfwidthCharacterWidth: fontInfo.typicalHalfwidthCharacterWidth,
            verticalPadding: 22,
            horizontalPadding: 14,
            defaultSize: new $jOYcd.Dimension(430, statusBarHeight + 12 * itemHeight + borderHeight)
        };
    }
    _isDetailsVisible() {
        return this._storageService.getBoolean("expandSuggestionDocs", 0 /* GLOBAL */ , false);
    }
    _setDetailsVisible(value) {
        this._storageService.store("expandSuggestionDocs", value, 0 /* GLOBAL */ , 0 /* USER */ );
    }
    forceRenderingAbove() {
        if (!this._forceRenderingAbove) {
            this._forceRenderingAbove = true;
            this._layout(this._persistedSize.restore());
        }
    }
    stopForceRenderingAbove() {
        this._forceRenderingAbove = false;
    }
    constructor(editor, _storageService, _contextKeyService, _themeService, instantiationService){
        this.editor = editor;
        this._storageService = _storageService;
        this._state = 0 /* Hidden */ ;
        this._isAuto = false;
        this._ignoreFocusEvents = false;
        this._forceRenderingAbove = false;
        this._explainMode = false;
        this._showTimeout = new (0, $eFOsn.TimeoutTimer)();
        this._disposables = new (0, $atiRx.DisposableStore)();
        this._onDidSelect = new (0, $fSvkC.Emitter)();
        this._onDidFocus = new (0, $fSvkC.Emitter)();
        this._onDidHide = new (0, $fSvkC.Emitter)();
        this._onDidShow = new (0, $fSvkC.Emitter)();
        this.onDidSelect = this._onDidSelect.event;
        this.onDidFocus = this._onDidFocus.event;
        this.onDidHide = this._onDidHide.event;
        this.onDidShow = this._onDidShow.event;
        this._onDetailsKeydown = new (0, $fSvkC.Emitter)();
        this.onDetailsKeyDown = this._onDetailsKeydown.event;
        this.element = new (0, $2b4c5d1582491c49$export$f049a29194943609)();
        this.element.domNode.classList.add("editor-widget", "suggest-widget");
        this._contentWidget = new $17a3075f14cb16fd$export$335c575f116d83ac(this, editor);
        this._persistedSize = new $17a3075f14cb16fd$var$PersistedWidgetSize(_storageService, editor);
        class ResizeState {
            constructor(persistedSize, currentSize, persistHeight = false, persistWidth = false){
                this.persistedSize = persistedSize;
                this.currentSize = currentSize;
                this.persistHeight = persistHeight;
                this.persistWidth = persistWidth;
            }
        }
        let state;
        this._disposables.add(this.element.onDidWillResize(()=>{
            this._contentWidget.lockPreference();
            state = new ResizeState(this._persistedSize.restore(), this.element.size);
        }));
        this._disposables.add(this.element.onDidResize((e)=>{
            var _a, _b, _c, _d;
            this._resize(e.dimension.width, e.dimension.height);
            if (state) {
                state.persistHeight = state.persistHeight || !!e.north || !!e.south;
                state.persistWidth = state.persistWidth || !!e.east || !!e.west;
            }
            if (!e.done) return;
            if (state) {
                // only store width or height value that have changed and also
                // only store changes that are above a certain threshold
                const { itemHeight: itemHeight , defaultSize: defaultSize  } = this.getLayoutInfo();
                const threshold = Math.round(itemHeight / 2);
                let { width: width , height: height  } = this.element.size;
                if (!state.persistHeight || Math.abs(state.currentSize.height - height) <= threshold) height = (_b = (_a = state.persistedSize) === null || _a === void 0 ? void 0 : _a.height) !== null && _b !== void 0 ? _b : defaultSize.height;
                if (!state.persistWidth || Math.abs(state.currentSize.width - width) <= threshold) width = (_d = (_c = state.persistedSize) === null || _c === void 0 ? void 0 : _c.width) !== null && _d !== void 0 ? _d : defaultSize.width;
                this._persistedSize.store(new $jOYcd.Dimension(width, height));
            }
            // reset working state
            this._contentWidget.unlockPreference();
            state = undefined;
        }));
        this._messageElement = $jOYcd.append(this.element.domNode, $jOYcd.$(".message"));
        this._listElement = $jOYcd.append(this.element.domNode, $jOYcd.$(".tree"));
        const details = instantiationService.createInstance((0, $077db946d2496675$exports.SuggestDetailsWidget), this.editor);
        details.onDidClose(this.toggleDetails, this, this._disposables);
        this._details = new (0, $077db946d2496675$exports.SuggestDetailsOverlay)(details, this.editor);
        const applyIconStyle = ()=>this.element.domNode.classList.toggle("no-icons", !this.editor.getOption(105 /* suggest */ ).showIcons);
        applyIconStyle();
        const renderer = instantiationService.createInstance((0, $df63decae8f986c5$exports.ItemRenderer), this.editor);
        this._disposables.add(renderer);
        this._disposables.add(renderer.onDidToggleDetails(()=>this.toggleDetails()));
        this._list = new (0, $d15WN.List)("SuggestWidget", this._listElement, {
            getHeight: (_element)=>this.getLayoutInfo().itemHeight,
            getTemplateId: (_element)=>"suggestion"
        }, [
            renderer
        ], {
            alwaysConsumeMouseWheel: true,
            useShadows: false,
            mouseSupport: false,
            accessibilityProvider: {
                getRole: ()=>"option",
                getAriaLabel: (item)=>{
                    if (item.isResolved && this._isDetailsVisible()) {
                        const { documentation: documentation , detail: detail  } = item.completion;
                        const docs = $9TEeL.format("{0}{1}", detail || "", documentation ? typeof documentation === "string" ? documentation : documentation.value : "");
                        return $58WHl.localize("ariaCurrenttSuggestionReadDetails", "{0}, docs: {1}", item.textLabel, docs);
                    } else return item.textLabel;
                },
                getWidgetAriaLabel: ()=>$58WHl.localize("suggest", "Suggest"),
                getWidgetRole: ()=>"listbox"
            }
        });
        this._status = instantiationService.createInstance((0, $2cdd8a8028d7fa2e$exports.SuggestWidgetStatus), this.element.domNode);
        const applyStatusBarStyle = ()=>this.element.domNode.classList.toggle("with-status-bar", this.editor.getOption(105 /* suggest */ ).showStatusBar);
        applyStatusBarStyle();
        this._disposables.add((0, $diaKF.attachListStyler)(this._list, _themeService, {
            listInactiveFocusBackground: $17a3075f14cb16fd$export$4e0daeab52f97af3,
            listInactiveFocusOutline: (0, $3XYy8.activeContrastBorder)
        }));
        this._disposables.add(_themeService.onDidColorThemeChange((t)=>this._onThemeChange(t)));
        this._onThemeChange(_themeService.getColorTheme());
        this._disposables.add(this._list.onMouseDown((e)=>this._onListMouseDownOrTap(e)));
        this._disposables.add(this._list.onTap((e)=>this._onListMouseDownOrTap(e)));
        this._disposables.add(this._list.onDidChangeSelection((e)=>this._onListSelection(e)));
        this._disposables.add(this._list.onDidChangeFocus((e)=>this._onListFocus(e)));
        this._disposables.add(this.editor.onDidChangeCursorSelection(()=>this._onCursorSelectionChanged()));
        this._disposables.add(this.editor.onDidChangeConfiguration((e)=>{
            if (e.hasChanged(105 /* suggest */ )) {
                applyStatusBarStyle();
                applyIconStyle();
            }
        }));
        this._ctxSuggestWidgetVisible = (0, $abf46e0ea17ab20d$exports.Context).Visible.bindTo(_contextKeyService);
        this._ctxSuggestWidgetDetailsVisible = (0, $abf46e0ea17ab20d$exports.Context).DetailsVisible.bindTo(_contextKeyService);
        this._ctxSuggestWidgetMultipleSuggestions = (0, $abf46e0ea17ab20d$exports.Context).MultipleSuggestions.bindTo(_contextKeyService);
        this._disposables.add($jOYcd.addStandardDisposableListener(this._details.widget.domNode, "keydown", (e)=>{
            this._onDetailsKeydown.fire(e);
        }));
        this._disposables.add(this.editor.onMouseDown((e)=>this._onEditorMouseDown(e)));
    }
};
$17a3075f14cb16fd$export$ad1808d575fcd49b.LOADING_MESSAGE = $58WHl.localize("suggestWidget.loading", "Loading...");
$17a3075f14cb16fd$export$ad1808d575fcd49b.NO_SUGGESTIONS_MESSAGE = $58WHl.localize("suggestWidget.noSuggestions", "No suggestions.");
$17a3075f14cb16fd$export$ad1808d575fcd49b = $17a3075f14cb16fd$var$__decorate([
    $17a3075f14cb16fd$var$__param(1, (0, $6XVdL.IStorageService)),
    $17a3075f14cb16fd$var$__param(2, (0, $bRtox.IContextKeyService)),
    $17a3075f14cb16fd$var$__param(3, (0, $fUTzO.IThemeService)),
    $17a3075f14cb16fd$var$__param(4, (0, $iZW67.IInstantiationService))
], $17a3075f14cb16fd$export$ad1808d575fcd49b);
class $17a3075f14cb16fd$export$335c575f116d83ac {
    dispose() {
        if (this._added) {
            this._added = false;
            this._editor.removeContentWidget(this);
        }
    }
    getId() {
        return "editor.widget.suggestWidget";
    }
    getDomNode() {
        return this._widget.element.domNode;
    }
    show() {
        this._hidden = false;
        if (!this._added) {
            this._added = true;
            this._editor.addContentWidget(this);
        }
    }
    hide() {
        if (!this._hidden) {
            this._hidden = true;
            this.layout();
        }
    }
    layout() {
        this._editor.layoutContentWidget(this);
    }
    getPosition() {
        if (this._hidden || !this._position || !this._preference) return null;
        return {
            position: this._position,
            preference: [
                this._preference
            ]
        };
    }
    beforeRender() {
        const { height: height , width: width  } = this._widget.element.size;
        const { borderWidth: borderWidth , horizontalPadding: horizontalPadding  } = this._widget.getLayoutInfo();
        return new $jOYcd.Dimension(width + 2 * borderWidth + horizontalPadding, height + 2 * borderWidth);
    }
    afterRender(position) {
        this._widget._afterRender(position);
    }
    setPreference(preference) {
        if (!this._preferenceLocked) this._preference = preference;
    }
    lockPreference() {
        this._preferenceLocked = true;
    }
    unlockPreference() {
        this._preferenceLocked = false;
    }
    setPosition(position) {
        this._position = position;
    }
    constructor(_widget, _editor){
        this._widget = _widget;
        this._editor = _editor;
        this.allowEditorOverflow = true;
        this.suppressMouseDown = false;
        this._preferenceLocked = false;
        this._added = false;
        this._hidden = false;
    }
}



var $2EG7I = parcelRequire("2EG7I");

var $aMhG1 = parcelRequire("aMhG1");

var $cQRg9 = parcelRequire("cQRg9");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $8be883bd38612905$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $8be883bd38612905$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
// sticky suggest widget which doesn't disappear on focus out and such
let $8be883bd38612905$var$_sticky = false;
// _sticky = Boolean("true"); // done "weirdly" so that a lint warning prevents you from pushing this
class $8be883bd38612905$var$LineSuffix {
    dispose() {
        if (this._marker && !this._model.isDisposed()) this._model.deltaDecorations(this._marker, []);
    }
    delta(position) {
        if (this._model.isDisposed() || this._position.lineNumber !== position.lineNumber) // bail out early if things seems fishy
        return 0;
        // read the marker (in case suggest was triggered at line end) or compare
        // the cursor to the line end.
        if (this._marker) {
            const range = this._model.getDecorationRange(this._marker[0]);
            const end = this._model.getOffsetAt(range.getStartPosition());
            return end - this._model.getOffsetAt(position);
        } else return this._model.getLineMaxColumn(position.lineNumber) - position.column;
    }
    constructor(_model, _position){
        this._model = _model;
        this._position = _position;
        // spy on what's happening right of the cursor. two cases:
        // 1. end of line -> check that it's still end of line
        // 2. mid of line -> add a marker and compute the delta
        const maxColumn = _model.getLineMaxColumn(_position.lineNumber);
        if (maxColumn !== _position.column) {
            const offset = _model.getOffsetAt(_position);
            const end = _model.getPositionAt(offset + 1);
            this._marker = _model.deltaDecorations([], [
                {
                    range: (0, $3HpR4.Range).fromPositions(_position, end),
                    options: {
                        description: "suggest-line-suffix",
                        stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ 
                    }
                }
            ]);
        }
    }
}
let $8be883bd38612905$export$54e1189006f2eb3a = class SuggestController {
    static get(editor) {
        return editor.getContribution(SuggestController.ID);
    }
    dispose() {
        this._alternatives.dispose();
        this._toDispose.dispose();
        this.widget.dispose();
        this.model.dispose();
        this._lineSuffix.dispose();
    }
    _insertSuggestion(event, flags) {
        if (!event || !event.item) {
            this._alternatives.value.reset();
            this.model.cancel();
            this.model.clear();
            return;
        }
        if (!this.editor.hasModel()) return;
        const model = this.editor.getModel();
        const modelVersionNow = model.getAlternativeVersionId();
        const { item: item  } = event;
        //
        const tasks = [];
        const cts = new (0, $gnEXx.CancellationTokenSource)();
        // pushing undo stops *before* additional text edits and
        // *after* the main edit
        if (!(flags & 1 /* NoBeforeUndoStop */ )) this.editor.pushUndoStop();
        // compute overwrite[Before|After] deltas BEFORE applying extra edits
        const info = this.getOverwriteInfo(item, Boolean(flags & 8 /* AlternativeOverwriteConfig */ ));
        // keep item in memory
        this._memoryService.memorize(model, this.editor.getPosition(), item);
        if (Array.isArray(item.completion.additionalTextEdits)) {
            // sync additional edits
            const scrollState = (0, $iVwSq.StableEditorScrollState).capture(this.editor);
            this.editor.executeEdits("suggestController.additionalTextEdits.sync", item.completion.additionalTextEdits.map((edit)=>(0, $13fPA.EditOperation).replace((0, $3HpR4.Range).lift(edit.range), edit.text)));
            scrollState.restoreRelativeVerticalPositionOfCursor(this.editor);
        } else if (!item.isResolved) {
            // async additional edits
            const sw = new (0, $k8jZF.StopWatch)(true);
            let position;
            const docListener = model.onDidChangeContent((e)=>{
                if (e.isFlush) {
                    cts.cancel();
                    docListener.dispose();
                    return;
                }
                for (let change of e.changes){
                    const thisPosition = (0, $3HpR4.Range).getEndPosition(change.range);
                    if (!position || (0, $8qXsZ.Position).isBefore(thisPosition, position)) position = thisPosition;
                }
            });
            let oldFlags = flags;
            flags |= 2 /* NoAfterUndoStop */ ;
            let didType = false;
            let typeListener = this.editor.onWillType(()=>{
                typeListener.dispose();
                didType = true;
                if (!(oldFlags & 2 /* NoAfterUndoStop */ )) this.editor.pushUndoStop();
            });
            tasks.push(item.resolve(cts.token).then(()=>{
                if (!item.completion.additionalTextEdits || cts.token.isCancellationRequested) return false;
                if (position && item.completion.additionalTextEdits.some((edit)=>(0, $8qXsZ.Position).isBefore(position, (0, $3HpR4.Range).getStartPosition(edit.range)))) return false;
                if (didType) this.editor.pushUndoStop();
                const scrollState = (0, $iVwSq.StableEditorScrollState).capture(this.editor);
                this.editor.executeEdits("suggestController.additionalTextEdits.async", item.completion.additionalTextEdits.map((edit)=>(0, $13fPA.EditOperation).replace((0, $3HpR4.Range).lift(edit.range), edit.text)));
                scrollState.restoreRelativeVerticalPositionOfCursor(this.editor);
                if (didType || !(oldFlags & 2 /* NoAfterUndoStop */ )) this.editor.pushUndoStop();
                return true;
            }).then((applied)=>{
                this._logService.trace("[suggest] async resolving of edits DONE (ms, applied?)", sw.elapsed(), applied);
                docListener.dispose();
                typeListener.dispose();
            }));
        }
        let { insertText: insertText  } = item.completion;
        if (!(item.completion.insertTextRules & 4 /* InsertAsSnippet */ )) insertText = (0, $03fe7e83485db5e8$export$e073bfe8583e8fbf).escape(insertText);
        (0, $aab61a900846093a$exports.SnippetController2).get(this.editor).insert(insertText, {
            overwriteBefore: info.overwriteBefore,
            overwriteAfter: info.overwriteAfter,
            undoStopBefore: false,
            undoStopAfter: false,
            adjustWhitespace: !(item.completion.insertTextRules & 1 /* KeepWhitespace */ ),
            clipboardText: event.model.clipboardText,
            overtypingCapturer: this._overtypingCapturer.value
        });
        if (!(flags & 2 /* NoAfterUndoStop */ )) this.editor.pushUndoStop();
        if (!item.completion.command) // done
        this.model.cancel();
        else if (item.completion.command.id === $8be883bd38612905$export$6adf569aad8e1b71.id) // retigger
        this.model.trigger({
            auto: true,
            shy: false
        }, true);
        else {
            // exec command, done
            tasks.push(this._commandService.executeCommand(item.completion.command.id, ...item.completion.command.arguments ? [
                ...item.completion.command.arguments
            ] : []).catch((0, $g0782.onUnexpectedError)));
            this.model.cancel();
        }
        if (flags & 4 /* KeepAlternativeSuggestions */ ) this._alternatives.value.set(event, (next)=>{
            // cancel resolving of additional edits
            cts.cancel();
            // this is not so pretty. when inserting the 'next'
            // suggestion we undo until we are at the state at
            // which we were before inserting the previous suggestion...
            while(model.canUndo()){
                if (modelVersionNow !== model.getAlternativeVersionId()) model.undo();
                this._insertSuggestion(next, 3 /* NoAfterUndoStop */  | (flags & 8 /* AlternativeOverwriteConfig */  ? 8 /* AlternativeOverwriteConfig */  : 0));
                break;
            }
        });
        this._alertCompletionItem(item);
        // clear only now - after all tasks are done
        Promise.all(tasks).finally(()=>{
            this._reportSuggestionAcceptedTelemetry(model, event);
            this.model.clear();
            cts.dispose();
        });
    }
    _reportSuggestionAcceptedTelemetry(model, acceptedSuggestion) {
        var _a;
        if ((this._telemetryGate++) % 100 !== 0) return;
        // _debugDisplayName looks like `vscode.css-language-features(/-:)`, where the last bit is the trigger chars
        // normalize it to just the extension ID and lowercase
        const providerId = ((_a = acceptedSuggestion.item.provider._debugDisplayName) !== null && _a !== void 0 ? _a : "unknown").split("(", 1)[0].toLowerCase();
        this._telemetryService.publicLog2("suggest.acceptedSuggestion", {
            providerId: providerId,
            basenameHash: (0, $cQRg9.hash)((0, $aMhG1.basename)(model.uri)).toString(16),
            languageId: model.getLanguageId(),
            fileExtension: (0, $aMhG1.extname)(model.uri)
        });
    }
    getOverwriteInfo(item, toggleMode) {
        (0, $3ICxR.assertType)(this.editor.hasModel());
        let replace = this.editor.getOption(105 /* suggest */ ).insertMode === "replace";
        if (toggleMode) replace = !replace;
        const overwriteBefore = item.position.column - item.editStart.column;
        const overwriteAfter = (replace ? item.editReplaceEnd.column : item.editInsertEnd.column) - item.position.column;
        const columnDelta = this.editor.getPosition().column - item.position.column;
        const suffixDelta = this._lineSuffix.value ? this._lineSuffix.value.delta(this.editor.getPosition()) : 0;
        return {
            overwriteBefore: overwriteBefore + columnDelta,
            overwriteAfter: overwriteAfter + suffixDelta
        };
    }
    _alertCompletionItem(item) {
        if ((0, $4xCD7.isNonEmptyArray)(item.completion.additionalTextEdits)) {
            let msg = $58WHl.localize("aria.alert.snippet", "Accepting '{0}' made {1} additional edits", item.textLabel, item.completion.additionalTextEdits.length);
            (0, $cVmYb.alert)(msg);
        }
    }
    triggerSuggest(onlyFrom, auto) {
        if (this.editor.hasModel()) {
            this.model.trigger({
                auto: auto !== null && auto !== void 0 ? auto : false,
                shy: false
            }, false, onlyFrom);
            this.editor.revealPosition(this.editor.getPosition(), 0 /* Smooth */ );
            this.editor.focus();
        }
    }
    triggerSuggestAndAcceptBest(arg) {
        if (!this.editor.hasModel()) return;
        const positionNow = this.editor.getPosition();
        const fallback = ()=>{
            if (positionNow.equals(this.editor.getPosition())) this._commandService.executeCommand(arg.fallback);
        };
        const makesTextEdit = (item)=>{
            if (item.completion.insertTextRules & 4 /* InsertAsSnippet */  || item.completion.additionalTextEdits) // snippet, other editor -> makes edit
            return true;
            const position = this.editor.getPosition();
            const startColumn = item.editStart.column;
            const endColumn = position.column;
            if (endColumn - startColumn !== item.completion.insertText.length) // unequal lengths -> makes edit
            return true;
            const textNow = this.editor.getModel().getValueInRange({
                startLineNumber: position.lineNumber,
                startColumn: startColumn,
                endLineNumber: position.lineNumber,
                endColumn: endColumn
            });
            // unequal text -> makes edit
            return textNow !== item.completion.insertText;
        };
        (0, $fSvkC.Event).once(this.model.onDidTrigger)((_)=>{
            // wait for trigger because only then the cancel-event is trustworthy
            let listener = [];
            (0, $fSvkC.Event).any(this.model.onDidTrigger, this.model.onDidCancel)(()=>{
                // retrigger or cancel -> try to type default text
                (0, $atiRx.dispose)(listener);
                fallback();
            }, undefined, listener);
            this.model.onDidSuggest(({ completionModel: completionModel  })=>{
                (0, $atiRx.dispose)(listener);
                if (completionModel.items.length === 0) {
                    fallback();
                    return;
                }
                const index = this._memoryService.select(this.editor.getModel(), this.editor.getPosition(), completionModel.items);
                const item = completionModel.items[index];
                if (!makesTextEdit(item)) {
                    fallback();
                    return;
                }
                this.editor.pushUndoStop();
                this._insertSuggestion({
                    index: index,
                    item: item,
                    model: completionModel
                }, 7 /* NoAfterUndoStop */ );
            }, undefined, listener);
        });
        this.model.trigger({
            auto: false,
            shy: true
        });
        this.editor.revealPosition(positionNow, 0 /* Smooth */ );
        this.editor.focus();
    }
    acceptSelectedSuggestion(keepAlternativeSuggestions, alternativeOverwriteConfig) {
        const item = this.widget.value.getFocusedItem();
        let flags = 0;
        if (keepAlternativeSuggestions) flags |= 4 /* KeepAlternativeSuggestions */ ;
        if (alternativeOverwriteConfig) flags |= 8 /* AlternativeOverwriteConfig */ ;
        this._insertSuggestion(item, flags);
    }
    acceptNextSuggestion() {
        this._alternatives.value.next();
    }
    acceptPrevSuggestion() {
        this._alternatives.value.prev();
    }
    cancelSuggestWidget() {
        this.model.cancel();
        this.model.clear();
        this.widget.value.hideWidget();
    }
    selectNextSuggestion() {
        this.widget.value.selectNext();
    }
    selectNextPageSuggestion() {
        this.widget.value.selectNextPage();
    }
    selectLastSuggestion() {
        this.widget.value.selectLast();
    }
    selectPrevSuggestion() {
        this.widget.value.selectPrevious();
    }
    selectPrevPageSuggestion() {
        this.widget.value.selectPreviousPage();
    }
    selectFirstSuggestion() {
        this.widget.value.selectFirst();
    }
    toggleSuggestionDetails() {
        this.widget.value.toggleDetails();
    }
    toggleExplainMode() {
        this.widget.value.toggleExplainMode();
    }
    toggleSuggestionFocus() {
        this.widget.value.toggleDetailsFocus();
    }
    resetWidgetSize() {
        this.widget.value.resetPersistedSize();
    }
    forceRenderingAbove() {
        this.widget.value.forceRenderingAbove();
    }
    stopForceRenderingAbove() {
        if (!this.widget.isInitialized) // This method has no effect if the widget is not initialized yet.
        return;
        this.widget.value.stopForceRenderingAbove();
    }
    registerSelector(selector) {
        return this._selectors.register(selector);
    }
    constructor(editor, _memoryService, _commandService, _contextKeyService, _instantiationService, _logService, _telemetryService){
        this._memoryService = _memoryService;
        this._commandService = _commandService;
        this._contextKeyService = _contextKeyService;
        this._instantiationService = _instantiationService;
        this._logService = _logService;
        this._telemetryService = _telemetryService;
        this._lineSuffix = new (0, $atiRx.MutableDisposable)();
        this._toDispose = new (0, $atiRx.DisposableStore)();
        this._selectors = new $8be883bd38612905$var$PriorityRegistry((s)=>s.priority);
        this._telemetryGate = 0;
        this.editor = editor;
        this.model = _instantiationService.createInstance((0, $942d743337bbaca0$exports.SuggestModel), this.editor);
        // context key: update insert/replace mode
        const ctxInsertMode = (0, $abf46e0ea17ab20d$exports.Context).InsertMode.bindTo(_contextKeyService);
        ctxInsertMode.set(editor.getOption(105 /* suggest */ ).insertMode);
        this.model.onDidTrigger(()=>ctxInsertMode.set(editor.getOption(105 /* suggest */ ).insertMode));
        this.widget = this._toDispose.add(new (0, $eFOsn.IdleValue)(()=>{
            const widget = this._instantiationService.createInstance((0, $17a3075f14cb16fd$exports.SuggestWidget), this.editor);
            this._toDispose.add(widget);
            this._toDispose.add(widget.onDidSelect((item)=>this._insertSuggestion(item, 0), this));
            // Wire up logic to accept a suggestion on certain characters
            const commitCharacterController = new (0, $4f7505ec532ad73a$export$1c5a4637a8cc1b47)(this.editor, widget, (item)=>this._insertSuggestion(item, 2 /* NoAfterUndoStop */ ));
            this._toDispose.add(commitCharacterController);
            this._toDispose.add(this.model.onDidSuggest((e)=>{
                if (e.completionModel.items.length === 0) commitCharacterController.reset();
            }));
            // Wire up makes text edit context key
            const ctxMakesTextEdit = (0, $abf46e0ea17ab20d$exports.Context).MakesTextEdit.bindTo(this._contextKeyService);
            const ctxHasInsertAndReplace = (0, $abf46e0ea17ab20d$exports.Context).HasInsertAndReplaceRange.bindTo(this._contextKeyService);
            const ctxCanResolve = (0, $abf46e0ea17ab20d$exports.Context).CanResolve.bindTo(this._contextKeyService);
            this._toDispose.add((0, $atiRx.toDisposable)(()=>{
                ctxMakesTextEdit.reset();
                ctxHasInsertAndReplace.reset();
                ctxCanResolve.reset();
            }));
            this._toDispose.add(widget.onDidFocus(({ item: item  })=>{
                // (ctx: makesTextEdit)
                const position = this.editor.getPosition();
                const startColumn = item.editStart.column;
                const endColumn = position.column;
                let value = true;
                if (this.editor.getOption(1 /* acceptSuggestionOnEnter */ ) === "smart" && this.model.state === 2 /* Auto */  && !item.completion.additionalTextEdits && !(item.completion.insertTextRules & 4 /* InsertAsSnippet */ ) && endColumn - startColumn === item.completion.insertText.length) {
                    const oldText = this.editor.getModel().getValueInRange({
                        startLineNumber: position.lineNumber,
                        startColumn: startColumn,
                        endLineNumber: position.lineNumber,
                        endColumn: endColumn
                    });
                    value = oldText !== item.completion.insertText;
                }
                ctxMakesTextEdit.set(value);
                // (ctx: hasInsertAndReplaceRange)
                ctxHasInsertAndReplace.set(!(0, $8qXsZ.Position).equals(item.editInsertEnd, item.editReplaceEnd));
                // (ctx: canResolve)
                ctxCanResolve.set(Boolean(item.provider.resolveCompletionItem) || Boolean(item.completion.documentation) || item.completion.detail !== item.completion.label);
            }));
            this._toDispose.add(widget.onDetailsKeyDown((e)=>{
                // cmd + c on macOS, ctrl + c on Win / Linux
                if (e.toKeybinding().equals(new (0, $i3lQA.SimpleKeybinding)(true, false, false, false, 33 /* KeyC */ )) || $1d81R.isMacintosh && e.toKeybinding().equals(new (0, $i3lQA.SimpleKeybinding)(false, false, false, true, 33 /* KeyC */ ))) {
                    e.stopPropagation();
                    return;
                }
                if (!e.toKeybinding().isModifierKey()) this.editor.focus();
            }));
            return widget;
        }));
        // Wire up text overtyping capture
        this._overtypingCapturer = this._toDispose.add(new (0, $eFOsn.IdleValue)(()=>{
            return this._toDispose.add(new (0, $4017b827bc13adbf$export$4f0a10c40326a303)(this.editor, this.model));
        }));
        this._alternatives = this._toDispose.add(new (0, $eFOsn.IdleValue)(()=>{
            return this._toDispose.add(new (0, $d5d5ced7bee2e223$exports.SuggestAlternatives)(this.editor, this._contextKeyService));
        }));
        this._toDispose.add(_instantiationService.createInstance((0, $a4cc70188d6b2eff$exports.WordContextKey), editor));
        this._toDispose.add(this.model.onDidTrigger((e)=>{
            this.widget.value.showTriggered(e.auto, e.shy ? 250 : 50);
            this._lineSuffix.value = new $8be883bd38612905$var$LineSuffix(this.editor.getModel(), e.position);
        }));
        this._toDispose.add(this.model.onDidSuggest((e)=>{
            if (!e.shy) {
                let index = -1;
                for (const selector of this._selectors.itemsOrderedByPriorityDesc){
                    index = selector.select(this.editor.getModel(), this.editor.getPosition(), e.completionModel.items);
                    if (index !== -1) break;
                }
                if (index === -1) index = this._memoryService.select(this.editor.getModel(), this.editor.getPosition(), e.completionModel.items);
                this.widget.value.showSuggestions(e.completionModel, index, e.isFrozen, e.auto);
            }
        }));
        this._toDispose.add(this.model.onDidCancel((e)=>{
            if (!e.retrigger) this.widget.value.hideWidget();
        }));
        this._toDispose.add(this.editor.onDidBlurEditorWidget(()=>{
            if (!$8be883bd38612905$var$_sticky) {
                this.model.cancel();
                this.model.clear();
            }
        }));
        // Manage the acceptSuggestionsOnEnter context key
        let acceptSuggestionsOnEnter = (0, $abf46e0ea17ab20d$exports.Context).AcceptSuggestionsOnEnter.bindTo(_contextKeyService);
        let updateFromConfig = ()=>{
            const acceptSuggestionOnEnter = this.editor.getOption(1 /* acceptSuggestionOnEnter */ );
            acceptSuggestionsOnEnter.set(acceptSuggestionOnEnter === "on" || acceptSuggestionOnEnter === "smart");
        };
        this._toDispose.add(this.editor.onDidChangeConfiguration(()=>updateFromConfig()));
        updateFromConfig();
    }
};
$8be883bd38612905$export$54e1189006f2eb3a.ID = "editor.contrib.suggestController";
$8be883bd38612905$export$54e1189006f2eb3a = $8be883bd38612905$var$__decorate([
    $8be883bd38612905$var$__param(1, (0, $b47923b9d6636815$exports.ISuggestMemoryService)),
    $8be883bd38612905$var$__param(2, (0, $fAXtX.ICommandService)),
    $8be883bd38612905$var$__param(3, (0, $bRtox.IContextKeyService)),
    $8be883bd38612905$var$__param(4, (0, $iZW67.IInstantiationService)),
    $8be883bd38612905$var$__param(5, (0, $h720z.ILogService)),
    $8be883bd38612905$var$__param(6, (0, $2EG7I.ITelemetryService))
], $8be883bd38612905$export$54e1189006f2eb3a);
class $8be883bd38612905$var$PriorityRegistry {
    register(value) {
        if (this._items.indexOf(value) !== -1) throw new Error("Value is already registered");
        this._items.push(value);
        this._items.sort((s1, s2)=>this.prioritySelector(s2) - this.prioritySelector(s1));
        return {
            dispose: ()=>{
                const idx = this._items.indexOf(value);
                if (idx >= 0) this._items.splice(idx, 1);
            }
        };
    }
    get itemsOrderedByPriorityDesc() {
        return this._items;
    }
    constructor(prioritySelector){
        this.prioritySelector = prioritySelector;
        this._items = new Array();
    }
}
class $8be883bd38612905$export$6adf569aad8e1b71 extends (0, $gGOeQ.EditorAction) {
    run(_accessor, editor, args) {
        const controller = $8be883bd38612905$export$54e1189006f2eb3a.get(editor);
        if (!controller) return;
        let auto;
        if (args && typeof args === "object") {
            if (args.auto === true) auto = true;
        }
        controller.triggerSuggest(undefined, auto);
    }
    constructor(){
        super({
            id: $8be883bd38612905$export$6adf569aad8e1b71.id,
            label: $58WHl.localize("suggest.trigger.label", "Trigger Suggest"),
            alias: "Trigger Suggest",
            precondition: (0, $bRtox.ContextKeyExpr).and((0, $bdLce.EditorContextKeys).writable, (0, $bdLce.EditorContextKeys).hasCompletionItemProvider),
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).textInputFocus,
                primary: 2058 /* Space */ ,
                secondary: [
                    2087 /* KeyI */ 
                ],
                mac: {
                    primary: 266 /* Space */ ,
                    secondary: [
                        521 /* Escape */ ,
                        2087 /* KeyI */ 
                    ]
                },
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
$8be883bd38612905$export$6adf569aad8e1b71.id = "editor.action.triggerSuggest";
(0, $gGOeQ.registerEditorContribution)($8be883bd38612905$export$54e1189006f2eb3a.ID, $8be883bd38612905$export$54e1189006f2eb3a);
(0, $gGOeQ.registerEditorAction)($8be883bd38612905$export$6adf569aad8e1b71);
const $8be883bd38612905$var$weight = 190;
const $8be883bd38612905$var$SuggestCommand = (0, $gGOeQ.EditorCommand).bindToContribution($8be883bd38612905$export$54e1189006f2eb3a.get);
(0, $gGOeQ.registerEditorCommand)(new $8be883bd38612905$var$SuggestCommand({
    id: "acceptSelectedSuggestion",
    precondition: (0, $abf46e0ea17ab20d$exports.Context).Visible,
    handler (x) {
        x.acceptSelectedSuggestion(true, false);
    }
}));
// normal tab
(0, $cczLz.KeybindingsRegistry).registerKeybindingRule({
    id: "acceptSelectedSuggestion",
    when: (0, $bRtox.ContextKeyExpr).and((0, $abf46e0ea17ab20d$exports.Context).Visible, (0, $bdLce.EditorContextKeys).textInputFocus),
    primary: 2 /* Tab */ ,
    weight: $8be883bd38612905$var$weight
});
// accept on enter has special rules
(0, $cczLz.KeybindingsRegistry).registerKeybindingRule({
    id: "acceptSelectedSuggestion",
    when: (0, $bRtox.ContextKeyExpr).and((0, $abf46e0ea17ab20d$exports.Context).Visible, (0, $bdLce.EditorContextKeys).textInputFocus, (0, $abf46e0ea17ab20d$exports.Context).AcceptSuggestionsOnEnter, (0, $abf46e0ea17ab20d$exports.Context).MakesTextEdit),
    primary: 3 /* Enter */ ,
    weight: $8be883bd38612905$var$weight
});
(0, $2IxgH.MenuRegistry).appendMenuItem((0, $abf46e0ea17ab20d$exports.suggestWidgetStatusbarMenu), {
    command: {
        id: "acceptSelectedSuggestion",
        title: $58WHl.localize("accept.insert", "Insert")
    },
    group: "left",
    order: 1,
    when: (0, $abf46e0ea17ab20d$exports.Context).HasInsertAndReplaceRange.toNegated()
});
(0, $2IxgH.MenuRegistry).appendMenuItem((0, $abf46e0ea17ab20d$exports.suggestWidgetStatusbarMenu), {
    command: {
        id: "acceptSelectedSuggestion",
        title: $58WHl.localize("accept.insert", "Insert")
    },
    group: "left",
    order: 1,
    when: (0, $bRtox.ContextKeyExpr).and((0, $abf46e0ea17ab20d$exports.Context).HasInsertAndReplaceRange, (0, $abf46e0ea17ab20d$exports.Context).InsertMode.isEqualTo("insert"))
});
(0, $2IxgH.MenuRegistry).appendMenuItem((0, $abf46e0ea17ab20d$exports.suggestWidgetStatusbarMenu), {
    command: {
        id: "acceptSelectedSuggestion",
        title: $58WHl.localize("accept.replace", "Replace")
    },
    group: "left",
    order: 1,
    when: (0, $bRtox.ContextKeyExpr).and((0, $abf46e0ea17ab20d$exports.Context).HasInsertAndReplaceRange, (0, $abf46e0ea17ab20d$exports.Context).InsertMode.isEqualTo("replace"))
});
(0, $gGOeQ.registerEditorCommand)(new $8be883bd38612905$var$SuggestCommand({
    id: "acceptAlternativeSelectedSuggestion",
    precondition: (0, $bRtox.ContextKeyExpr).and((0, $abf46e0ea17ab20d$exports.Context).Visible, (0, $bdLce.EditorContextKeys).textInputFocus),
    kbOpts: {
        weight: $8be883bd38612905$var$weight,
        kbExpr: (0, $bdLce.EditorContextKeys).textInputFocus,
        primary: 1027 /* Enter */ ,
        secondary: [
            1026 /* Tab */ 
        ]
    },
    handler (x) {
        x.acceptSelectedSuggestion(false, true);
    },
    menuOpts: [
        {
            menuId: (0, $abf46e0ea17ab20d$exports.suggestWidgetStatusbarMenu),
            group: "left",
            order: 2,
            when: (0, $bRtox.ContextKeyExpr).and((0, $abf46e0ea17ab20d$exports.Context).HasInsertAndReplaceRange, (0, $abf46e0ea17ab20d$exports.Context).InsertMode.isEqualTo("insert")),
            title: $58WHl.localize("accept.replace", "Replace")
        },
        {
            menuId: (0, $abf46e0ea17ab20d$exports.suggestWidgetStatusbarMenu),
            group: "left",
            order: 2,
            when: (0, $bRtox.ContextKeyExpr).and((0, $abf46e0ea17ab20d$exports.Context).HasInsertAndReplaceRange, (0, $abf46e0ea17ab20d$exports.Context).InsertMode.isEqualTo("replace")),
            title: $58WHl.localize("accept.insert", "Insert")
        }
    ]
}));
// continue to support the old command
(0, $fAXtX.CommandsRegistry).registerCommandAlias("acceptSelectedSuggestionOnEnter", "acceptSelectedSuggestion");
(0, $gGOeQ.registerEditorCommand)(new $8be883bd38612905$var$SuggestCommand({
    id: "hideSuggestWidget",
    precondition: (0, $abf46e0ea17ab20d$exports.Context).Visible,
    handler: (x)=>x.cancelSuggestWidget(),
    kbOpts: {
        weight: $8be883bd38612905$var$weight,
        kbExpr: (0, $bdLce.EditorContextKeys).textInputFocus,
        primary: 9 /* Escape */ ,
        secondary: [
            1033 /* Escape */ 
        ]
    }
}));
(0, $gGOeQ.registerEditorCommand)(new $8be883bd38612905$var$SuggestCommand({
    id: "selectNextSuggestion",
    precondition: (0, $bRtox.ContextKeyExpr).and((0, $abf46e0ea17ab20d$exports.Context).Visible, (0, $abf46e0ea17ab20d$exports.Context).MultipleSuggestions),
    handler: (c)=>c.selectNextSuggestion(),
    kbOpts: {
        weight: $8be883bd38612905$var$weight,
        kbExpr: (0, $bdLce.EditorContextKeys).textInputFocus,
        primary: 18 /* DownArrow */ ,
        secondary: [
            2066 /* DownArrow */ 
        ],
        mac: {
            primary: 18 /* DownArrow */ ,
            secondary: [
                2066 /* DownArrow */ ,
                300 /* KeyN */ 
            ]
        }
    }
}));
(0, $gGOeQ.registerEditorCommand)(new $8be883bd38612905$var$SuggestCommand({
    id: "selectNextPageSuggestion",
    precondition: (0, $bRtox.ContextKeyExpr).and((0, $abf46e0ea17ab20d$exports.Context).Visible, (0, $abf46e0ea17ab20d$exports.Context).MultipleSuggestions),
    handler: (c)=>c.selectNextPageSuggestion(),
    kbOpts: {
        weight: $8be883bd38612905$var$weight,
        kbExpr: (0, $bdLce.EditorContextKeys).textInputFocus,
        primary: 12 /* PageDown */ ,
        secondary: [
            2060 /* PageDown */ 
        ]
    }
}));
(0, $gGOeQ.registerEditorCommand)(new $8be883bd38612905$var$SuggestCommand({
    id: "selectLastSuggestion",
    precondition: (0, $bRtox.ContextKeyExpr).and((0, $abf46e0ea17ab20d$exports.Context).Visible, (0, $abf46e0ea17ab20d$exports.Context).MultipleSuggestions),
    handler: (c)=>c.selectLastSuggestion()
}));
(0, $gGOeQ.registerEditorCommand)(new $8be883bd38612905$var$SuggestCommand({
    id: "selectPrevSuggestion",
    precondition: (0, $bRtox.ContextKeyExpr).and((0, $abf46e0ea17ab20d$exports.Context).Visible, (0, $abf46e0ea17ab20d$exports.Context).MultipleSuggestions),
    handler: (c)=>c.selectPrevSuggestion(),
    kbOpts: {
        weight: $8be883bd38612905$var$weight,
        kbExpr: (0, $bdLce.EditorContextKeys).textInputFocus,
        primary: 16 /* UpArrow */ ,
        secondary: [
            2064 /* UpArrow */ 
        ],
        mac: {
            primary: 16 /* UpArrow */ ,
            secondary: [
                2064 /* UpArrow */ ,
                302 /* KeyP */ 
            ]
        }
    }
}));
(0, $gGOeQ.registerEditorCommand)(new $8be883bd38612905$var$SuggestCommand({
    id: "selectPrevPageSuggestion",
    precondition: (0, $bRtox.ContextKeyExpr).and((0, $abf46e0ea17ab20d$exports.Context).Visible, (0, $abf46e0ea17ab20d$exports.Context).MultipleSuggestions),
    handler: (c)=>c.selectPrevPageSuggestion(),
    kbOpts: {
        weight: $8be883bd38612905$var$weight,
        kbExpr: (0, $bdLce.EditorContextKeys).textInputFocus,
        primary: 11 /* PageUp */ ,
        secondary: [
            2059 /* PageUp */ 
        ]
    }
}));
(0, $gGOeQ.registerEditorCommand)(new $8be883bd38612905$var$SuggestCommand({
    id: "selectFirstSuggestion",
    precondition: (0, $bRtox.ContextKeyExpr).and((0, $abf46e0ea17ab20d$exports.Context).Visible, (0, $abf46e0ea17ab20d$exports.Context).MultipleSuggestions),
    handler: (c)=>c.selectFirstSuggestion()
}));
(0, $gGOeQ.registerEditorCommand)(new $8be883bd38612905$var$SuggestCommand({
    id: "toggleSuggestionDetails",
    precondition: (0, $abf46e0ea17ab20d$exports.Context).Visible,
    handler: (x)=>x.toggleSuggestionDetails(),
    kbOpts: {
        weight: $8be883bd38612905$var$weight,
        kbExpr: (0, $bdLce.EditorContextKeys).textInputFocus,
        primary: 2058 /* Space */ ,
        secondary: [
            2087 /* KeyI */ 
        ],
        mac: {
            primary: 266 /* Space */ ,
            secondary: [
                2087 /* KeyI */ 
            ]
        }
    },
    menuOpts: [
        {
            menuId: (0, $abf46e0ea17ab20d$exports.suggestWidgetStatusbarMenu),
            group: "right",
            order: 1,
            when: (0, $bRtox.ContextKeyExpr).and((0, $abf46e0ea17ab20d$exports.Context).DetailsVisible, (0, $abf46e0ea17ab20d$exports.Context).CanResolve),
            title: $58WHl.localize("detail.more", "show less")
        },
        {
            menuId: (0, $abf46e0ea17ab20d$exports.suggestWidgetStatusbarMenu),
            group: "right",
            order: 1,
            when: (0, $bRtox.ContextKeyExpr).and((0, $abf46e0ea17ab20d$exports.Context).DetailsVisible.toNegated(), (0, $abf46e0ea17ab20d$exports.Context).CanResolve),
            title: $58WHl.localize("detail.less", "show more")
        }
    ]
}));
(0, $gGOeQ.registerEditorCommand)(new $8be883bd38612905$var$SuggestCommand({
    id: "toggleExplainMode",
    precondition: (0, $abf46e0ea17ab20d$exports.Context).Visible,
    handler: (x)=>x.toggleExplainMode(),
    kbOpts: {
        weight: 100 /* EditorContrib */ ,
        primary: 2133 /* Slash */ 
    }
}));
(0, $gGOeQ.registerEditorCommand)(new $8be883bd38612905$var$SuggestCommand({
    id: "toggleSuggestionFocus",
    precondition: (0, $abf46e0ea17ab20d$exports.Context).Visible,
    handler: (x)=>x.toggleSuggestionFocus(),
    kbOpts: {
        weight: $8be883bd38612905$var$weight,
        kbExpr: (0, $bdLce.EditorContextKeys).textInputFocus,
        primary: 2570 /* Space */ ,
        mac: {
            primary: 778 /* Space */ 
        }
    }
}));
//#region tab completions
(0, $gGOeQ.registerEditorCommand)(new $8be883bd38612905$var$SuggestCommand({
    id: "insertBestCompletion",
    precondition: (0, $bRtox.ContextKeyExpr).and((0, $bdLce.EditorContextKeys).textInputFocus, (0, $bRtox.ContextKeyExpr).equals("config.editor.tabCompletion", "on"), (0, $a4cc70188d6b2eff$exports.WordContextKey).AtEnd, (0, $abf46e0ea17ab20d$exports.Context).Visible.toNegated(), (0, $d5d5ced7bee2e223$exports.SuggestAlternatives).OtherSuggestions.toNegated(), (0, $aab61a900846093a$exports.SnippetController2).InSnippetMode.toNegated()),
    handler: (x, arg)=>{
        x.triggerSuggestAndAcceptBest((0, $3ICxR.isObject)(arg) ? Object.assign({
            fallback: "tab"
        }, arg) : {
            fallback: "tab"
        });
    },
    kbOpts: {
        weight: $8be883bd38612905$var$weight,
        primary: 2 /* Tab */ 
    }
}));
(0, $gGOeQ.registerEditorCommand)(new $8be883bd38612905$var$SuggestCommand({
    id: "insertNextSuggestion",
    precondition: (0, $bRtox.ContextKeyExpr).and((0, $bdLce.EditorContextKeys).textInputFocus, (0, $bRtox.ContextKeyExpr).equals("config.editor.tabCompletion", "on"), (0, $d5d5ced7bee2e223$exports.SuggestAlternatives).OtherSuggestions, (0, $abf46e0ea17ab20d$exports.Context).Visible.toNegated(), (0, $aab61a900846093a$exports.SnippetController2).InSnippetMode.toNegated()),
    handler: (x)=>x.acceptNextSuggestion(),
    kbOpts: {
        weight: $8be883bd38612905$var$weight,
        kbExpr: (0, $bdLce.EditorContextKeys).textInputFocus,
        primary: 2 /* Tab */ 
    }
}));
(0, $gGOeQ.registerEditorCommand)(new $8be883bd38612905$var$SuggestCommand({
    id: "insertPrevSuggestion",
    precondition: (0, $bRtox.ContextKeyExpr).and((0, $bdLce.EditorContextKeys).textInputFocus, (0, $bRtox.ContextKeyExpr).equals("config.editor.tabCompletion", "on"), (0, $d5d5ced7bee2e223$exports.SuggestAlternatives).OtherSuggestions, (0, $abf46e0ea17ab20d$exports.Context).Visible.toNegated(), (0, $aab61a900846093a$exports.SnippetController2).InSnippetMode.toNegated()),
    handler: (x)=>x.acceptPrevSuggestion(),
    kbOpts: {
        weight: $8be883bd38612905$var$weight,
        kbExpr: (0, $bdLce.EditorContextKeys).textInputFocus,
        primary: 1026 /* Tab */ 
    }
}));
(0, $gGOeQ.registerEditorAction)(class extends (0, $gGOeQ.EditorAction) {
    run(_accessor, editor) {
        $8be883bd38612905$export$54e1189006f2eb3a.get(editor).resetWidgetSize();
    }
    constructor(){
        super({
            id: "editor.action.resetSuggestSize",
            label: $58WHl.localize("suggest.reset.label", "Reset Suggest Widget Size"),
            alias: "Reset Suggest Widget Size",
            precondition: undefined
        });
    }
});




function $a4c3c94186bcd7c9$export$76e3015fedec517f(object, disposable) {
    return {
        object: object,
        dispose: ()=>disposable === null || disposable === void 0 ? void 0 : disposable.dispose()
    };
}
function $a4c3c94186bcd7c9$export$53e1d82c551f6242(selector, comparator) {
    return (a, b)=>comparator(selector(a), selector(b));
}
function $a4c3c94186bcd7c9$export$bc15bf6a97104dc9() {
    return (a, b)=>a - b;
}
function $a4c3c94186bcd7c9$export$7670cf76b4aa9e08(items, comparator) {
    let min = undefined;
    for (const item of items)if (min === undefined || comparator(item, min) > 0) min = item;
    return min;
}


class $463c1ebad78c062d$export$25701ac5464bebfb extends (0, $atiRx.Disposable) {
    /**
     * Returns undefined if the suggest widget is not active.
    */ get state() {
        if (!this._isActive) return undefined;
        return {
            selectedItem: this._currentSuggestItemInfo
        };
    }
    update(newActive) {
        const newInlineCompletion = this.getSuggestItemInfo();
        let shouldFire = false;
        if (!$463c1ebad78c062d$var$suggestItemInfoEquals(this._currentSuggestItemInfo, newInlineCompletion)) {
            this._currentSuggestItemInfo = newInlineCompletion;
            shouldFire = true;
        }
        if (this._isActive !== newActive) {
            this._isActive = newActive;
            shouldFire = true;
        }
        if (shouldFire) this.onDidChangeEmitter.fire();
    }
    getSuggestItemInfo() {
        const suggestController = (0, $8be883bd38612905$exports.SuggestController).get(this.editor);
        if (!suggestController) return undefined;
        if (!this.isSuggestWidgetVisible) return undefined;
        const focusedItem = suggestController.widget.value.getFocusedItem();
        if (!focusedItem) return undefined;
        // TODO: item.isResolved
        return $463c1ebad78c062d$var$suggestionToSuggestItemInfo(suggestController, this.editor.getPosition(), focusedItem.item, this.isShiftKeyPressed);
    }
    stopForceRenderingAbove() {
        const suggestController = (0, $8be883bd38612905$exports.SuggestController).get(this.editor);
        if (suggestController) suggestController.stopForceRenderingAbove();
    }
    forceRenderingAbove() {
        const suggestController = (0, $8be883bd38612905$exports.SuggestController).get(this.editor);
        if (suggestController) suggestController.forceRenderingAbove();
    }
    constructor(editor, suggestControllerPreselector){
        super();
        this.editor = editor;
        this.suggestControllerPreselector = suggestControllerPreselector;
        this.isSuggestWidgetVisible = false;
        this.isShiftKeyPressed = false;
        this._isActive = false;
        this._currentSuggestItemInfo = undefined;
        this.onDidChangeEmitter = new (0, $fSvkC.Emitter)();
        this.onDidChange = this.onDidChangeEmitter.event;
        // This delay fixes a suggest widget issue when typing "." immediately restarts the suggestion session.
        this.setInactiveDelayed = this._register(new (0, $eFOsn.RunOnceScheduler)(()=>{
            if (!this.isSuggestWidgetVisible) {
                if (this._isActive) {
                    this._isActive = false;
                    this.onDidChangeEmitter.fire();
                }
            }
        }, 100));
        // See the command acceptAlternativeSelectedSuggestion that is bound to shift+tab
        this._register(editor.onKeyDown((e)=>{
            if (e.shiftKey && !this.isShiftKeyPressed) {
                this.isShiftKeyPressed = true;
                this.update(this._isActive);
            }
        }));
        this._register(editor.onKeyUp((e)=>{
            if (e.shiftKey && this.isShiftKeyPressed) {
                this.isShiftKeyPressed = false;
                this.update(this._isActive);
            }
        }));
        const suggestController = (0, $8be883bd38612905$exports.SuggestController).get(this.editor);
        if (suggestController) {
            this._register(suggestController.registerSelector({
                priority: 100,
                select: (model, pos, suggestItems)=>{
                    const textModel = this.editor.getModel();
                    const normalizedItemToPreselect = (0, $a25fac58e5e8c708$exports.minimizeInlineCompletion)(textModel, this.suggestControllerPreselector());
                    if (!normalizedItemToPreselect) return -1;
                    const position = (0, $8qXsZ.Position).lift(pos);
                    const candidates = suggestItems.map((suggestItem, index)=>{
                        const inlineSuggestItem = $463c1ebad78c062d$var$suggestionToSuggestItemInfo(suggestController, position, suggestItem, this.isShiftKeyPressed);
                        const normalizedSuggestItem = (0, $a25fac58e5e8c708$exports.minimizeInlineCompletion)(textModel, inlineSuggestItem === null || inlineSuggestItem === void 0 ? void 0 : inlineSuggestItem.normalizedInlineCompletion);
                        if (!normalizedSuggestItem) return undefined;
                        const valid = $463c1ebad78c062d$export$4f3d24302fd497b(normalizedItemToPreselect.range, normalizedSuggestItem.range) && normalizedItemToPreselect.text.startsWith(normalizedSuggestItem.text);
                        return {
                            index: index,
                            valid: valid,
                            prefixLength: normalizedSuggestItem.text.length,
                            suggestItem: suggestItem
                        };
                    }).filter((item)=>item && item.valid);
                    const result = (0, $a4c3c94186bcd7c9$export$7670cf76b4aa9e08)(candidates, (0, $a4c3c94186bcd7c9$export$53e1d82c551f6242)((s)=>s.prefixLength, (0, $a4c3c94186bcd7c9$export$bc15bf6a97104dc9)()));
                    return result ? result.index : -1;
                }
            }));
            let isBoundToSuggestWidget = false;
            const bindToSuggestWidget = ()=>{
                if (isBoundToSuggestWidget) return;
                isBoundToSuggestWidget = true;
                this._register(suggestController.widget.value.onDidShow(()=>{
                    this.isSuggestWidgetVisible = true;
                    this.update(true);
                }));
                this._register(suggestController.widget.value.onDidHide(()=>{
                    this.isSuggestWidgetVisible = false;
                    this.setInactiveDelayed.schedule();
                    this.update(this._isActive);
                }));
                this._register(suggestController.widget.value.onDidFocus(()=>{
                    this.isSuggestWidgetVisible = true;
                    this.update(true);
                }));
            };
            this._register((0, $fSvkC.Event).once(suggestController.model.onDidTrigger)((e)=>{
                bindToSuggestWidget();
            }));
        }
        this.update(this._isActive);
    }
}
function $463c1ebad78c062d$export$4f3d24302fd497b(rangeToTest, prefix) {
    return prefix.startLineNumber === rangeToTest.startLineNumber && prefix.startColumn === rangeToTest.startColumn && (prefix.endLineNumber < rangeToTest.endLineNumber || prefix.endLineNumber === rangeToTest.endLineNumber && prefix.endColumn <= rangeToTest.endColumn);
}
function $463c1ebad78c062d$var$suggestItemInfoEquals(a, b) {
    if (a === b) return true;
    if (!a || !b) return false;
    return a.completionItemKind === b.completionItemKind && a.isSnippetText === b.isSnippetText && (0, $36c04cd9279ee2b6$export$11e165236064256b)(a.normalizedInlineCompletion, b.normalizedInlineCompletion);
}
function $463c1ebad78c062d$var$suggestionToSuggestItemInfo(suggestController, position, item, toggleMode) {
    // additionalTextEdits might not be resolved here, this could be problematic.
    if (Array.isArray(item.completion.additionalTextEdits) && item.completion.additionalTextEdits.length > 0) // cannot represent additional text edits
    return {
        completionItemKind: item.completion.kind,
        isSnippetText: false,
        normalizedInlineCompletion: {
            // Dummy element, so that space is reserved, but no text is shown
            range: (0, $3HpR4.Range).fromPositions(position, position),
            text: ""
        }
    };
    let { insertText: insertText  } = item.completion;
    let isSnippetText = false;
    if (item.completion.insertTextRules & 4 /* InsertAsSnippet */ ) {
        const snippet = new (0, $03fe7e83485db5e8$export$e073bfe8583e8fbf)().parse(insertText);
        const model = suggestController.editor.getModel();
        // Ignore snippets that are too large.
        // Adjust whitespace is expensive for them.
        if (snippet.children.length > 100) return undefined;
        (0, $28b804470d6f3919$export$d334bb6e0f563f7).adjustWhitespace(model, position, snippet, true, true);
        insertText = snippet.toString();
        isSnippetText = true;
    }
    const info = suggestController.getOverwriteInfo(item, toggleMode);
    return {
        isSnippetText: isSnippetText,
        completionItemKind: item.completion.kind,
        normalizedInlineCompletion: {
            text: insertText,
            range: (0, $3HpR4.Range).fromPositions(position.delta(0, -info.overwriteBefore), position.delta(0, Math.max(info.overwriteAfter, 0)))
        }
    };
}


/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $ec51719bdf97267f$var$__awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class $ec51719bdf97267f$export$ebdca630db4b64a2 extends (0, $405490c6ad93fdb6$export$e69a41b67268cb2a) {
    get isActive() {
        return this.suggestionInlineCompletionSource.state !== undefined;
    }
    isSuggestionPreviewEnabled() {
        const suggestOptions = this.editor.getOption(105 /* suggest */ );
        return suggestOptions.preview;
    }
    updateCache() {
        return $ec51719bdf97267f$var$__awaiter(this, void 0, void 0, function*() {
            const state = this.suggestionInlineCompletionSource.state;
            if (!state || !state.selectedItem) return;
            const info = {
                text: state.selectedItem.normalizedInlineCompletion.text,
                range: state.selectedItem.normalizedInlineCompletion.range,
                isSnippetText: state.selectedItem.isSnippetText,
                completionKind: state.selectedItem.completionItemKind
            };
            const position = this.editor.getPosition();
            const promise = (0, $eFOsn.createCancelablePromise)((token)=>$ec51719bdf97267f$var$__awaiter(this, void 0, void 0, function*() {
                    let result;
                    try {
                        result = yield (0, $a25fac58e5e8c708$exports.provideInlineCompletions)(position, this.editor.getModel(), {
                            triggerKind: (0, $eKhCe.InlineCompletionTriggerKind).Automatic,
                            selectedSuggestionInfo: info
                        }, token);
                    } catch (e) {
                        (0, $g0782.onUnexpectedError)(e);
                        return;
                    }
                    if (token.isCancellationRequested) return;
                    this.cache.setValue(this.editor, result, (0, $eKhCe.InlineCompletionTriggerKind).Automatic);
                    this.onDidChangeEmitter.fire();
                }));
            const operation = new (0, $a25fac58e5e8c708$exports.UpdateOperation)(promise, (0, $eKhCe.InlineCompletionTriggerKind).Automatic);
            this.updateOperation.value = operation;
            yield promise;
            if (this.updateOperation.value === operation) this.updateOperation.clear();
        });
    }
    get ghostText() {
        var _a, _b, _c;
        const isSuggestionPreviewEnabled = this.isSuggestionPreviewEnabled();
        const augmentedCompletion = (0, $a25fac58e5e8c708$exports.minimizeInlineCompletion)(this.editor.getModel(), (_b = (_a = this.cache.value) === null || _a === void 0 ? void 0 : _a.completions[0]) === null || _b === void 0 ? void 0 : _b.toLiveInlineCompletion());
        const suggestWidgetState = this.suggestionInlineCompletionSource.state;
        const suggestInlineCompletion = (0, $a25fac58e5e8c708$exports.minimizeInlineCompletion)(this.editor.getModel(), (_c = suggestWidgetState === null || suggestWidgetState === void 0 ? void 0 : suggestWidgetState.selectedItem) === null || _c === void 0 ? void 0 : _c.normalizedInlineCompletion);
        const isAugmentedCompletionValid = augmentedCompletion && suggestInlineCompletion && augmentedCompletion.text.startsWith(suggestInlineCompletion.text) && augmentedCompletion.range.equalsRange(suggestInlineCompletion.range);
        if (!isSuggestionPreviewEnabled && !isAugmentedCompletionValid) return undefined;
        // If the augmented completion is not valid and there is no suggest inline completion, we still show the augmented completion.
        const finalCompletion = isAugmentedCompletionValid ? augmentedCompletion : suggestInlineCompletion || augmentedCompletion;
        const inlineCompletionPreviewLength = isAugmentedCompletionValid ? finalCompletion.text.length - suggestInlineCompletion.text.length : 0;
        const newGhostText = this.toGhostText(finalCompletion, inlineCompletionPreviewLength);
        return newGhostText;
    }
    toGhostText(completion, inlineCompletionPreviewLength) {
        const mode = this.editor.getOptions().get(105 /* suggest */ ).previewMode;
        return completion ? (0, $36c04cd9279ee2b6$export$31cc5495dc7f07c1)(completion, this.editor.getModel(), mode, this.editor.getPosition(), inlineCompletionPreviewLength) || // Show an invisible ghost text to reserve space
        new (0, $405490c6ad93fdb6$export$9415a6e27591b584)(completion.range.endLineNumber, [], this.minReservedLineCount) : undefined;
    }
    constructor(editor, cache){
        super(editor);
        this.cache = cache;
        this.suggestionInlineCompletionSource = this._register(new (0, $463c1ebad78c062d$export$25701ac5464bebfb)(this.editor, // Use the first cache item (if any) as preselection.
        ()=>{
            var _a, _b;
            return (_b = (_a = this.cache.value) === null || _a === void 0 ? void 0 : _a.completions[0]) === null || _b === void 0 ? void 0 : _b.toLiveInlineCompletion();
        }));
        this.updateOperation = this._register(new (0, $atiRx.MutableDisposable)());
        this.updateCacheSoon = this._register(new (0, $eFOsn.RunOnceScheduler)(()=>this.updateCache(), 50));
        this.minReservedLineCount = 0;
        this._register(this.suggestionInlineCompletionSource.onDidChange(()=>{
            this.updateCacheSoon.schedule();
            const suggestWidgetState = this.suggestionInlineCompletionSource.state;
            if (!suggestWidgetState) this.minReservedLineCount = 0;
            const newGhostText = this.ghostText;
            if (newGhostText) this.minReservedLineCount = Math.max(this.minReservedLineCount, $ec51719bdf97267f$var$sum(newGhostText.parts.map((p)=>p.lines.length - 1)));
            if (this.minReservedLineCount >= 1) this.suggestionInlineCompletionSource.forceRenderingAbove();
            else this.suggestionInlineCompletionSource.stopForceRenderingAbove();
            this.onDidChangeEmitter.fire();
        }));
        this._register(this.cache.onDidChange(()=>{
            this.onDidChangeEmitter.fire();
        }));
        this._register(this.editor.onDidChangeCursorPosition((e)=>{
            this.minReservedLineCount = 0;
            this.updateCacheSoon.schedule();
            this.onDidChangeEmitter.fire();
        }));
        this._register((0, $atiRx.toDisposable)(()=>this.suggestionInlineCompletionSource.stopForceRenderingAbove()));
    }
}
function $ec51719bdf97267f$var$sum(arr) {
    return arr.reduce((a, b)=>a + b, 0);
}




var $fAXtX = parcelRequire("fAXtX");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $084689ea4a49b85d$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $084689ea4a49b85d$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var $084689ea4a49b85d$var$__awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class $084689ea4a49b85d$export$e7955302052332d2 extends (0, $atiRx.Disposable) {
    get targetModel() {
        var _a;
        return (_a = this.currentModelRef.value) === null || _a === void 0 ? void 0 : _a.object;
    }
    setTargetModel(model) {
        var _a;
        if (((_a = this.currentModelRef.value) === null || _a === void 0 ? void 0 : _a.object) === model) return;
        this.currentModelRef.clear();
        this.currentModelRef.value = model ? (0, $a4c3c94186bcd7c9$export$76e3015fedec517f)(model, model.onDidChange(()=>{
            this.hasCachedGhostText = false;
            this.onDidChangeEmitter.fire();
        })) : undefined;
        this.hasCachedGhostText = false;
        this.onDidChangeEmitter.fire();
    }
    get ghostText() {
        var _a, _b;
        if (!this.hasCachedGhostText) {
            this.cachedGhostText = (_b = (_a = this.currentModelRef.value) === null || _a === void 0 ? void 0 : _a.object) === null || _b === void 0 ? void 0 : _b.ghostText;
            this.hasCachedGhostText = true;
        }
        return this.cachedGhostText;
    }
    setExpanded(expanded) {
        var _a;
        (_a = this.targetModel) === null || _a === void 0 || _a.setExpanded(expanded);
    }
    get minReservedLineCount() {
        return this.targetModel ? this.targetModel.minReservedLineCount : 0;
    }
    constructor(){
        super(...arguments);
        this.onDidChangeEmitter = new (0, $fSvkC.Emitter)();
        this.onDidChange = this.onDidChangeEmitter.event;
        this.hasCachedGhostText = false;
        this.currentModelRef = this._register(new (0, $atiRx.MutableDisposable)());
    }
}
/**
 * A ghost text model that is both driven by inline completions and the suggest widget.
*/ let $084689ea4a49b85d$export$c35e2fb758843dde = class GhostTextModel extends $084689ea4a49b85d$export$e7955302052332d2 {
    get activeInlineCompletionsModel() {
        if (this.targetModel === this.inlineCompletionsModel) return this.inlineCompletionsModel;
        return undefined;
    }
    updateModel() {
        this.setTargetModel(this.suggestWidgetAdapterModel.isActive ? this.suggestWidgetAdapterModel : this.inlineCompletionsModel);
        this.inlineCompletionsModel.setActive(this.targetModel === this.inlineCompletionsModel);
    }
    shouldShowHoverAt(hoverRange) {
        var _a;
        const ghostText = (_a = this.activeInlineCompletionsModel) === null || _a === void 0 ? void 0 : _a.ghostText;
        if (ghostText) return ghostText.parts.some((p)=>hoverRange.containsPosition(new (0, $8qXsZ.Position)(ghostText.lineNumber, p.column)));
        return false;
    }
    triggerInlineCompletion() {
        var _a;
        (_a = this.activeInlineCompletionsModel) === null || _a === void 0 || _a.trigger((0, $eKhCe.InlineCompletionTriggerKind).Explicit);
    }
    commitInlineCompletion() {
        var _a;
        (_a = this.activeInlineCompletionsModel) === null || _a === void 0 || _a.commitCurrentSuggestion();
    }
    hideInlineCompletion() {
        var _a;
        (_a = this.activeInlineCompletionsModel) === null || _a === void 0 || _a.hide();
    }
    showNextInlineCompletion() {
        var _a;
        (_a = this.activeInlineCompletionsModel) === null || _a === void 0 || _a.showNext();
    }
    showPreviousInlineCompletion() {
        var _a;
        (_a = this.activeInlineCompletionsModel) === null || _a === void 0 || _a.showPrevious();
    }
    hasMultipleInlineCompletions() {
        var _a;
        return $084689ea4a49b85d$var$__awaiter(this, void 0, void 0, function*() {
            const result = yield (_a = this.activeInlineCompletionsModel) === null || _a === void 0 ? void 0 : _a.hasMultipleInlineCompletions();
            return result !== undefined ? result : false;
        });
    }
    constructor(editor, commandService){
        super();
        this.editor = editor;
        this.commandService = commandService;
        this.sharedCache = this._register(new $084689ea4a49b85d$export$a0277e5cfbcb13a5());
        this.suggestWidgetAdapterModel = this._register(new (0, $ec51719bdf97267f$exports.SuggestWidgetPreviewModel)(this.editor, this.sharedCache));
        this.inlineCompletionsModel = this._register(new (0, $a25fac58e5e8c708$exports.InlineCompletionsModel)(this.editor, this.sharedCache, this.commandService));
        this._register(this.suggestWidgetAdapterModel.onDidChange(()=>{
            this.updateModel();
        }));
        this.updateModel();
    }
};
$084689ea4a49b85d$export$c35e2fb758843dde = $084689ea4a49b85d$var$__decorate([
    $084689ea4a49b85d$var$__param(1, (0, $fAXtX.ICommandService))
], $084689ea4a49b85d$export$c35e2fb758843dde);
class $084689ea4a49b85d$export$a0277e5cfbcb13a5 extends (0, $atiRx.Disposable) {
    get value() {
        return this.cache.value;
    }
    setValue(editor, completionsSource, triggerKind) {
        this.cache.value = new (0, $a25fac58e5e8c708$exports.SynchronizedInlineCompletionsCache)(editor, completionsSource, ()=>this.onDidChangeEmitter.fire(), triggerKind);
    }
    clearAndLeak() {
        return this.cache.clearAndLeak();
    }
    clear() {
        this.cache.clear();
    }
    constructor(){
        super(...arguments);
        this.onDidChangeEmitter = new (0, $fSvkC.Emitter)();
        this.onDidChange = this.onDidChangeEmitter.event;
        this.cache = this._register(new (0, $atiRx.MutableDisposable)());
    }
}


var $abe555dfc3b00010$exports = {};

$parcel$export($abe555dfc3b00010$exports, "GhostTextWidget", function () { return $abe555dfc3b00010$export$28b57199d8d32698; }, function (v) { return $abe555dfc3b00010$export$28b57199d8d32698 = v; });

var $jOYcd = parcelRequire("jOYcd");

var $atiRx = parcelRequire("atiRx");

var $9TEeL = parcelRequire("9TEeL");


var $g3gmC = parcelRequire("g3gmC");

var $3xLkU = parcelRequire("3xLkU");

var $gicP9 = parcelRequire("gicP9");

var $8qXsZ = parcelRequire("8qXsZ");

var $3HpR4 = parcelRequire("3HpR4");

var $hSvRH = parcelRequire("hSvRH");

var $6o4cZ = parcelRequire("6o4cZ");

var $dW2jK = parcelRequire("dW2jK");

var $iuQG2 = parcelRequire("iuQG2");

var $g2jBf = parcelRequire("g2jBf");

var $iZW67 = parcelRequire("iZW67");

var $fUTzO = parcelRequire("fUTzO");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $abe555dfc3b00010$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $abe555dfc3b00010$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var $abe555dfc3b00010$var$_a;
const $abe555dfc3b00010$var$ttPolicy = ($abe555dfc3b00010$var$_a = window.trustedTypes) === null || $abe555dfc3b00010$var$_a === void 0 ? void 0 : $abe555dfc3b00010$var$_a.createPolicy("editorGhostText", {
    createHTML: (value)=>value
});
let $abe555dfc3b00010$export$28b57199d8d32698 = class GhostTextWidget extends (0, $atiRx.Disposable) {
    shouldShowHoverAtViewZone(viewZoneId) {
        return this.additionalLinesWidget.viewZoneId === viewZoneId;
    }
    update() {
        var _a;
        const ghostText = this.model.ghostText;
        if (!this.editor.hasModel() || !ghostText || this.disposed) {
            this.partsWidget.clear();
            this.additionalLinesWidget.clear();
            return;
        }
        const inlineTexts = new Array();
        const additionalLines = new Array();
        function addToAdditionalLines(lines, className) {
            if (additionalLines.length > 0) {
                const lastLine = additionalLines[additionalLines.length - 1];
                if (className) lastLine.decorations.push(new (0, $iuQG2.LineDecoration)(lastLine.content.length + 1, lastLine.content.length + 1 + lines[0].length, className, 0 /* Regular */ ));
                lastLine.content += lines[0];
                lines = lines.slice(1);
            }
            for (const line of lines)additionalLines.push({
                content: line,
                decorations: className ? [
                    new (0, $iuQG2.LineDecoration)(1, line.length + 1, className, 0 /* Regular */ )
                ] : []
            });
        }
        const textBufferLine = this.editor.getModel().getLineContent(ghostText.lineNumber);
        this.editor.getModel().getLineTokens(ghostText.lineNumber);
        let hiddenTextStartColumn = undefined;
        let lastIdx = 0;
        for (const part of ghostText.parts){
            let lines = part.lines;
            if (hiddenTextStartColumn === undefined) {
                inlineTexts.push({
                    column: part.column,
                    text: lines[0],
                    preview: part.preview
                });
                lines = lines.slice(1);
            } else addToAdditionalLines([
                textBufferLine.substring(lastIdx, part.column - 1)
            ], undefined);
            if (lines.length > 0) {
                addToAdditionalLines(lines, "ghost-text");
                if (hiddenTextStartColumn === undefined && part.column <= textBufferLine.length) hiddenTextStartColumn = part.column;
            }
            lastIdx = part.column - 1;
        }
        if (hiddenTextStartColumn !== undefined) addToAdditionalLines([
            textBufferLine.substring(lastIdx)
        ], undefined);
        this.partsWidget.setParts(ghostText.lineNumber, inlineTexts, hiddenTextStartColumn !== undefined ? {
            column: hiddenTextStartColumn,
            length: textBufferLine.length + 1 - hiddenTextStartColumn
        } : undefined);
        this.additionalLinesWidget.updateLines(ghostText.lineNumber, additionalLines, ghostText.additionalReservedLineCount);
        if (ghostText.parts.some((p)=>p.lines.length < 0)) // Not supported at the moment, condition is always false.
        this.viewMoreContentWidget = this.renderViewMoreLines(new (0, $8qXsZ.Position)(ghostText.lineNumber, this.editor.getModel().getLineMaxColumn(ghostText.lineNumber)), "", 0);
        else {
            (_a = this.viewMoreContentWidget) === null || _a === void 0 || _a.dispose();
            this.viewMoreContentWidget = undefined;
        }
    }
    renderViewMoreLines(position, firstLineText, remainingLinesLength) {
        const fontInfo = this.editor.getOption(43 /* fontInfo */ );
        const domNode = document.createElement("div");
        domNode.className = "suggest-preview-additional-widget";
        (0, $g3gmC.Configuration).applyFontInfoSlow(domNode, fontInfo);
        const spacer = document.createElement("span");
        spacer.className = "content-spacer";
        spacer.append(firstLineText);
        domNode.append(spacer);
        const newline = document.createElement("span");
        newline.className = "content-newline suggest-preview-text";
        newline.append("⏎  ");
        domNode.append(newline);
        const disposableStore = new (0, $atiRx.DisposableStore)();
        const button = document.createElement("div");
        button.className = "button suggest-preview-text";
        button.append(`+${remainingLinesLength} lines…`);
        disposableStore.add($jOYcd.addStandardDisposableListener(button, "mousedown", (e)=>{
            var _a;
            (_a = this.model) === null || _a === void 0 || _a.setExpanded(true);
            e.preventDefault();
            this.editor.focus();
        }));
        domNode.append(button);
        return new $abe555dfc3b00010$var$ViewMoreLinesContentWidget(this.editor, position, domNode, disposableStore);
    }
    constructor(editor, model, instantiationService, modeService){
        super();
        this.editor = editor;
        this.model = model;
        this.instantiationService = instantiationService;
        this.modeService = modeService;
        this.disposed = false;
        this.partsWidget = this._register(this.instantiationService.createInstance($abe555dfc3b00010$var$DecorationsWidget, this.editor));
        this.additionalLinesWidget = this._register(new $abe555dfc3b00010$var$AdditionalLinesWidget(this.editor, this.modeService.languageIdCodec));
        this.viewMoreContentWidget = undefined;
        this._register(this.editor.onDidChangeConfiguration((e)=>{
            if (e.hasChanged(29 /* disableMonospaceOptimizations */ ) || e.hasChanged(104 /* stopRenderingLineAfter */ ) || e.hasChanged(87 /* renderWhitespace */ ) || e.hasChanged(82 /* renderControlCharacters */ ) || e.hasChanged(44 /* fontLigatures */ ) || e.hasChanged(43 /* fontInfo */ ) || e.hasChanged(58 /* lineHeight */ )) this.update();
        }));
        this._register((0, $atiRx.toDisposable)(()=>{
            var _a;
            this.disposed = true;
            this.update();
            (_a = this.viewMoreContentWidget) === null || _a === void 0 || _a.dispose();
            this.viewMoreContentWidget = undefined;
        }));
        this._register(model.onDidChange(()=>{
            this.update();
        }));
        this.update();
    }
};
$abe555dfc3b00010$export$28b57199d8d32698 = $abe555dfc3b00010$var$__decorate([
    $abe555dfc3b00010$var$__param(2, (0, $iZW67.IInstantiationService)),
    $abe555dfc3b00010$var$__param(3, (0, $6o4cZ.IModeService))
], $abe555dfc3b00010$export$28b57199d8d32698);
class $abe555dfc3b00010$var$DecorationsWidget {
    dispose() {
        this.clear();
        this.disposableStore.dispose();
    }
    clear() {
        this.editor.deltaDecorations(this.decorationIds, []);
        this.disposableStore.clear();
    }
    setParts(lineNumber, parts, hiddenText) {
        this.disposableStore.clear();
        const textModel = this.editor.getModel();
        if (!textModel) return;
        const hiddenTextDecorations = new Array();
        if (hiddenText) hiddenTextDecorations.push({
            range: (0, $3HpR4.Range).fromPositions(new (0, $8qXsZ.Position)(lineNumber, hiddenText.column), new (0, $8qXsZ.Position)(lineNumber, hiddenText.column + hiddenText.length)),
            options: {
                inlineClassName: "ghost-text-hidden",
                description: "ghost-text-hidden"
            }
        });
        this.decorationIds = this.editor.deltaDecorations(this.decorationIds, parts.map((p)=>{
            return {
                range: (0, $3HpR4.Range).fromPositions(new (0, $8qXsZ.Position)(lineNumber, p.column)),
                options: {
                    description: "ghost-text",
                    after: {
                        content: p.text,
                        inlineClassName: p.preview ? "ghost-text-decoration-preview" : "ghost-text-decoration"
                    },
                    showIfCollapsed: true
                }
            };
        }).concat(hiddenTextDecorations));
    }
    constructor(editor){
        this.editor = editor;
        this.decorationIds = [];
        this.disposableStore = new (0, $atiRx.DisposableStore)();
    }
}
class $abe555dfc3b00010$var$AdditionalLinesWidget {
    get viewZoneId() {
        return this._viewZoneId;
    }
    dispose() {
        this.clear();
    }
    clear() {
        this.editor.changeViewZones((changeAccessor)=>{
            if (this._viewZoneId) {
                changeAccessor.removeZone(this._viewZoneId);
                this._viewZoneId = undefined;
            }
        });
    }
    updateLines(lineNumber, additionalLines, minReservedLineCount) {
        const textModel = this.editor.getModel();
        if (!textModel) return;
        const { tabSize: tabSize  } = textModel.getOptions();
        this.editor.changeViewZones((changeAccessor)=>{
            if (this._viewZoneId) {
                changeAccessor.removeZone(this._viewZoneId);
                this._viewZoneId = undefined;
            }
            const heightInLines = Math.max(additionalLines.length, minReservedLineCount);
            if (heightInLines > 0) {
                const domNode = document.createElement("div");
                $abe555dfc3b00010$var$renderLines(domNode, tabSize, additionalLines, this.editor.getOptions(), this.languageIdCodec);
                this._viewZoneId = changeAccessor.addZone({
                    afterLineNumber: lineNumber,
                    heightInLines: heightInLines,
                    domNode: domNode
                });
            }
        });
    }
    constructor(editor, languageIdCodec){
        this.editor = editor;
        this.languageIdCodec = languageIdCodec;
        this._viewZoneId = undefined;
    }
}
function $abe555dfc3b00010$var$renderLines(domNode, tabSize, lines, opts, languageIdCodec) {
    const disableMonospaceOptimizations = opts.get(29 /* disableMonospaceOptimizations */ );
    const stopRenderingLineAfter = opts.get(104 /* stopRenderingLineAfter */ );
    // To avoid visual confusion, we don't want to render visible whitespace
    const renderWhitespace = "none";
    const renderControlCharacters = opts.get(82 /* renderControlCharacters */ );
    const fontLigatures = opts.get(44 /* fontLigatures */ );
    const fontInfo = opts.get(43 /* fontInfo */ );
    const lineHeight = opts.get(58 /* lineHeight */ );
    const sb = (0, $hSvRH.createStringBuilder)(10000);
    sb.appendASCIIString('<div class="suggest-preview-text">');
    for(let i = 0, len = lines.length; i < len; i++){
        const lineData = lines[i];
        const line = lineData.content;
        sb.appendASCIIString('<div class="view-line');
        sb.appendASCIIString('" style="top:');
        sb.appendASCIIString(String(i * lineHeight));
        sb.appendASCIIString('px;width:1000000px;">');
        const isBasicASCII = $9TEeL.isBasicASCII(line);
        const containsRTL = $9TEeL.containsRTL(line);
        const lineTokens = (0, $gicP9.LineTokens).createEmpty(line, languageIdCodec);
        (0, $g2jBf.renderViewLine)(new (0, $g2jBf.RenderLineInput)(fontInfo.isMonospace && !disableMonospaceOptimizations, fontInfo.canUseHalfwidthRightwardsArrow, line, false, isBasicASCII, containsRTL, 0, lineTokens, lineData.decorations, tabSize, 0, fontInfo.spaceWidth, fontInfo.middotWidth, fontInfo.wsmiddotWidth, stopRenderingLineAfter, renderWhitespace, renderControlCharacters, fontLigatures !== (0, $3xLkU.EditorFontLigatures).OFF, null), sb);
        sb.appendASCIIString("</div>");
    }
    sb.appendASCIIString("</div>");
    (0, $g3gmC.Configuration).applyFontInfoSlow(domNode, fontInfo);
    const html = sb.build();
    const trustedhtml = $abe555dfc3b00010$var$ttPolicy ? $abe555dfc3b00010$var$ttPolicy.createHTML(html) : html;
    domNode.innerHTML = trustedhtml;
}
class $abe555dfc3b00010$var$ViewMoreLinesContentWidget extends (0, $atiRx.Disposable) {
    getId() {
        return "editor.widget.viewMoreLinesWidget";
    }
    getDomNode() {
        return this.domNode;
    }
    getPosition() {
        return {
            position: this.position,
            preference: [
                0 /* EXACT */ 
            ]
        };
    }
    constructor(editor, position, domNode, disposableStore){
        super();
        this.editor = editor;
        this.position = position;
        this.domNode = domNode;
        this.allowEditorOverflow = false;
        this.suppressMouseDown = false;
        this._register(disposableStore);
        this._register((0, $atiRx.toDisposable)(()=>{
            this.editor.removeContentWidget(this);
        }));
        this.editor.addContentWidget(this);
    }
}
(0, $fUTzO.registerThemingParticipant)((theme, collector)=>{
    const foreground = theme.getColor((0, $dW2jK.ghostTextForeground));
    if (foreground) {
        // `!important` ensures that other decorations don't cause a style conflict (#132017).
        collector.addRule(`.monaco-editor .ghost-text-decoration { color: ${foreground.toString()} !important; }`);
        collector.addRule(`.monaco-editor .ghost-text-decoration-preview { color: ${foreground.toString()} !important; }`);
        collector.addRule(`.monaco-editor .suggest-preview-text .ghost-text { color: ${foreground.toString()} !important; }`);
    }
    const background = theme.getColor((0, $dW2jK.ghostTextBackground));
    if (background) {
        collector.addRule(`.monaco-editor .ghost-text-decoration { background-color: ${background.toString()}; }`);
        collector.addRule(`.monaco-editor .ghost-text-decoration-preview { background-color: ${background.toString()}; }`);
        collector.addRule(`.monaco-editor .suggest-preview-text .ghost-text { background-color: ${background.toString()}; }`);
    }
    const border = theme.getColor((0, $dW2jK.ghostTextBorder));
    if (border) {
        collector.addRule(`.monaco-editor .suggest-preview-text .ghost-text { border: 1px solid ${border}; }`);
        collector.addRule(`.monaco-editor .ghost-text-decoration { border: 1px solid ${border}; }`);
        collector.addRule(`.monaco-editor .ghost-text-decoration-preview { border: 1px solid ${border}; }`);
    }
});



var $58WHl = parcelRequire("58WHl");

var $bRtox = parcelRequire("bRtox");

var $iZW67 = parcelRequire("iZW67");

var $cczLz = parcelRequire("cczLz");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $42a160c6ab5a90c1$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $42a160c6ab5a90c1$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var $42a160c6ab5a90c1$var$__awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
let $42a160c6ab5a90c1$export$ffa5b9ac8848b7ee = class GhostTextController extends (0, $atiRx.Disposable) {
    static get(editor) {
        return editor.getContribution(GhostTextController.ID);
    }
    get activeModel() {
        var _a;
        return (_a = this.activeController.value) === null || _a === void 0 ? void 0 : _a.model;
    }
    // Don't call this method when not neccessary. It will recreate the activeController.
    updateModelController() {
        const suggestOptions = this.editor.getOption(105 /* suggest */ );
        const inlineSuggestOptions = this.editor.getOption(54 /* inlineSuggest */ );
        this.activeController.value = undefined;
        // ActiveGhostTextController is only created if one of those settings is set or if the inline completions are triggered explicitly.
        this.activeController.value = this.editor.hasModel() && (suggestOptions.preview || inlineSuggestOptions.enabled || this.triggeredExplicitly) ? this.instantiationService.createInstance($42a160c6ab5a90c1$export$bcf17a7fc858c9df, this.editor) : undefined;
    }
    shouldShowHoverAt(hoverRange) {
        var _a;
        return ((_a = this.activeModel) === null || _a === void 0 ? void 0 : _a.shouldShowHoverAt(hoverRange)) || false;
    }
    shouldShowHoverAtViewZone(viewZoneId) {
        var _a, _b;
        return ((_b = (_a = this.activeController.value) === null || _a === void 0 ? void 0 : _a.widget) === null || _b === void 0 ? void 0 : _b.shouldShowHoverAtViewZone(viewZoneId)) || false;
    }
    trigger() {
        var _a;
        this.triggeredExplicitly = true;
        if (!this.activeController.value) this.updateModelController();
        (_a = this.activeModel) === null || _a === void 0 || _a.triggerInlineCompletion();
    }
    commit() {
        var _a;
        (_a = this.activeModel) === null || _a === void 0 || _a.commitInlineCompletion();
    }
    hide() {
        var _a;
        (_a = this.activeModel) === null || _a === void 0 || _a.hideInlineCompletion();
    }
    showNextInlineCompletion() {
        var _a;
        (_a = this.activeModel) === null || _a === void 0 || _a.showNextInlineCompletion();
    }
    showPreviousInlineCompletion() {
        var _a;
        (_a = this.activeModel) === null || _a === void 0 || _a.showPreviousInlineCompletion();
    }
    hasMultipleInlineCompletions() {
        var _a;
        return $42a160c6ab5a90c1$var$__awaiter(this, void 0, void 0, function*() {
            const result = yield (_a = this.activeModel) === null || _a === void 0 ? void 0 : _a.hasMultipleInlineCompletions();
            return result !== undefined ? result : false;
        });
    }
    constructor(editor, instantiationService){
        super();
        this.editor = editor;
        this.instantiationService = instantiationService;
        this.triggeredExplicitly = false;
        this.activeController = this._register(new (0, $atiRx.MutableDisposable)());
        this._register(this.editor.onDidChangeModel(()=>{
            this.updateModelController();
        }));
        this._register(this.editor.onDidChangeConfiguration((e)=>{
            if (e.hasChanged(105 /* suggest */ )) this.updateModelController();
            if (e.hasChanged(54 /* inlineSuggest */ )) this.updateModelController();
        }));
        this.updateModelController();
    }
};
$42a160c6ab5a90c1$export$ffa5b9ac8848b7ee.inlineSuggestionVisible = new (0, $bRtox.RawContextKey)("inlineSuggestionVisible", false, $58WHl.localize("inlineSuggestionVisible", "Whether an inline suggestion is visible"));
$42a160c6ab5a90c1$export$ffa5b9ac8848b7ee.inlineSuggestionHasIndentation = new (0, $bRtox.RawContextKey)("inlineSuggestionHasIndentation", false, $58WHl.localize("inlineSuggestionHasIndentation", "Whether the inline suggestion starts with whitespace"));
$42a160c6ab5a90c1$export$ffa5b9ac8848b7ee.inlineSuggestionHasIndentationLessThanTabSize = new (0, $bRtox.RawContextKey)("inlineSuggestionHasIndentationLessThanTabSize", true, $58WHl.localize("inlineSuggestionHasIndentationLessThanTabSize", "Whether the inline suggestion starts with whitespace that is less than what would be inserted by tab"));
$42a160c6ab5a90c1$export$ffa5b9ac8848b7ee.ID = "editor.contrib.ghostTextController";
$42a160c6ab5a90c1$export$ffa5b9ac8848b7ee = $42a160c6ab5a90c1$var$__decorate([
    $42a160c6ab5a90c1$var$__param(1, (0, $iZW67.IInstantiationService))
], $42a160c6ab5a90c1$export$ffa5b9ac8848b7ee);
class $42a160c6ab5a90c1$var$GhostTextContextKeys {
    constructor(contextKeyService){
        this.contextKeyService = contextKeyService;
        this.inlineCompletionVisible = $42a160c6ab5a90c1$export$ffa5b9ac8848b7ee.inlineSuggestionVisible.bindTo(this.contextKeyService);
        this.inlineCompletionSuggestsIndentation = $42a160c6ab5a90c1$export$ffa5b9ac8848b7ee.inlineSuggestionHasIndentation.bindTo(this.contextKeyService);
        this.inlineCompletionSuggestsIndentationLessThanTabSize = $42a160c6ab5a90c1$export$ffa5b9ac8848b7ee.inlineSuggestionHasIndentationLessThanTabSize.bindTo(this.contextKeyService);
    }
}
/**
 * The controller for a text editor with an initialized text model.
 * Must be disposed as soon as the model detaches from the editor.
*/ let $42a160c6ab5a90c1$export$bcf17a7fc858c9df = class ActiveGhostTextController extends (0, $atiRx.Disposable) {
    updateContextKeys() {
        var _a;
        this.contextKeys.inlineCompletionVisible.set(((_a = this.model.activeInlineCompletionsModel) === null || _a === void 0 ? void 0 : _a.ghostText) !== undefined);
        let startsWithIndentation = false;
        let startsWithIndentationLessThanTabSize = true;
        const ghostText = this.model.inlineCompletionsModel.ghostText;
        if (!!this.model.activeInlineCompletionsModel && ghostText && ghostText.parts.length > 0) {
            const { column: column , lines: lines  } = ghostText.parts[0];
            const firstLine = lines[0];
            const indentationEndColumn = this.editor.getModel().getLineIndentColumn(ghostText.lineNumber);
            const inIndentation = column <= indentationEndColumn;
            if (inIndentation) {
                let firstNonWsIdx = (0, $9TEeL.firstNonWhitespaceIndex)(firstLine);
                if (firstNonWsIdx === -1) firstNonWsIdx = firstLine.length - 1;
                startsWithIndentation = firstNonWsIdx > 0;
                const tabSize = this.editor.getModel().getOptions().tabSize;
                const visibleColumnIndentation = (0, $kmS7I.CursorColumns).visibleColumnFromColumn(firstLine, firstNonWsIdx + 1, tabSize);
                startsWithIndentationLessThanTabSize = visibleColumnIndentation < tabSize;
            }
        }
        this.contextKeys.inlineCompletionSuggestsIndentation.set(startsWithIndentation);
        this.contextKeys.inlineCompletionSuggestsIndentationLessThanTabSize.set(startsWithIndentationLessThanTabSize);
    }
    constructor(editor, instantiationService, contextKeyService){
        super();
        this.editor = editor;
        this.instantiationService = instantiationService;
        this.contextKeyService = contextKeyService;
        this.contextKeys = new $42a160c6ab5a90c1$var$GhostTextContextKeys(this.contextKeyService);
        this.model = this._register(this.instantiationService.createInstance((0, $084689ea4a49b85d$exports.GhostTextModel), this.editor));
        this.widget = this._register(this.instantiationService.createInstance((0, $abe555dfc3b00010$exports.GhostTextWidget), this.editor, this.model));
        this._register((0, $atiRx.toDisposable)(()=>{
            this.contextKeys.inlineCompletionVisible.set(false);
            this.contextKeys.inlineCompletionSuggestsIndentation.set(false);
            this.contextKeys.inlineCompletionSuggestsIndentationLessThanTabSize.set(true);
        }));
        this._register(this.model.onDidChange(()=>{
            this.updateContextKeys();
        }));
        this.updateContextKeys();
    }
};
$42a160c6ab5a90c1$export$bcf17a7fc858c9df = $42a160c6ab5a90c1$var$__decorate([
    $42a160c6ab5a90c1$var$__param(1, (0, $iZW67.IInstantiationService)),
    $42a160c6ab5a90c1$var$__param(2, (0, $bRtox.IContextKeyService))
], $42a160c6ab5a90c1$export$bcf17a7fc858c9df);
const $42a160c6ab5a90c1$var$GhostTextCommand = (0, $gGOeQ.EditorCommand).bindToContribution($42a160c6ab5a90c1$export$ffa5b9ac8848b7ee.get);
const $42a160c6ab5a90c1$export$6bdad8075dfe5c6b = new $42a160c6ab5a90c1$var$GhostTextCommand({
    id: (0, $ee3f75cf777da8d1$export$f1235a78c589a102),
    precondition: $42a160c6ab5a90c1$export$ffa5b9ac8848b7ee.inlineSuggestionVisible,
    handler (x) {
        x.commit();
        x.editor.focus();
    }
});
(0, $gGOeQ.registerEditorCommand)($42a160c6ab5a90c1$export$6bdad8075dfe5c6b);
(0, $cczLz.KeybindingsRegistry).registerKeybindingRule({
    primary: 2 /* Tab */ ,
    weight: 200,
    id: $42a160c6ab5a90c1$export$6bdad8075dfe5c6b.id,
    when: (0, $bRtox.ContextKeyExpr).and($42a160c6ab5a90c1$export$6bdad8075dfe5c6b.precondition, (0, $bdLce.EditorContextKeys).tabMovesFocus.toNegated(), $42a160c6ab5a90c1$export$ffa5b9ac8848b7ee.inlineSuggestionHasIndentationLessThanTabSize)
});
(0, $gGOeQ.registerEditorCommand)(new $42a160c6ab5a90c1$var$GhostTextCommand({
    id: "editor.action.inlineSuggest.hide",
    precondition: $42a160c6ab5a90c1$export$ffa5b9ac8848b7ee.inlineSuggestionVisible,
    kbOpts: {
        weight: 100,
        primary: 9 /* Escape */ 
    },
    handler (x) {
        x.hide();
    }
}));
class $42a160c6ab5a90c1$export$57edbf9569cc9779 extends (0, $gGOeQ.EditorAction) {
    run(accessor, editor) {
        return $42a160c6ab5a90c1$var$__awaiter(this, void 0, void 0, function*() {
            const controller = $42a160c6ab5a90c1$export$ffa5b9ac8848b7ee.get(editor);
            if (controller) {
                controller.showNextInlineCompletion();
                editor.focus();
            }
        });
    }
    constructor(){
        super({
            id: $42a160c6ab5a90c1$export$57edbf9569cc9779.ID,
            label: $58WHl.localize("action.inlineSuggest.showNext", "Show Next Inline Suggestion"),
            alias: "Show Next Inline Suggestion",
            precondition: (0, $bRtox.ContextKeyExpr).and((0, $bdLce.EditorContextKeys).writable, $42a160c6ab5a90c1$export$ffa5b9ac8848b7ee.inlineSuggestionVisible),
            kbOpts: {
                weight: 100,
                primary: 601 /* BracketRight */ 
            }
        });
    }
}
$42a160c6ab5a90c1$export$57edbf9569cc9779.ID = "editor.action.inlineSuggest.showNext";
class $42a160c6ab5a90c1$export$deb45c643cbebb10 extends (0, $gGOeQ.EditorAction) {
    run(accessor, editor) {
        return $42a160c6ab5a90c1$var$__awaiter(this, void 0, void 0, function*() {
            const controller = $42a160c6ab5a90c1$export$ffa5b9ac8848b7ee.get(editor);
            if (controller) {
                controller.showPreviousInlineCompletion();
                editor.focus();
            }
        });
    }
    constructor(){
        super({
            id: $42a160c6ab5a90c1$export$deb45c643cbebb10.ID,
            label: $58WHl.localize("action.inlineSuggest.showPrevious", "Show Previous Inline Suggestion"),
            alias: "Show Previous Inline Suggestion",
            precondition: (0, $bRtox.ContextKeyExpr).and((0, $bdLce.EditorContextKeys).writable, $42a160c6ab5a90c1$export$ffa5b9ac8848b7ee.inlineSuggestionVisible),
            kbOpts: {
                weight: 100,
                primary: 599 /* BracketLeft */ 
            }
        });
    }
}
$42a160c6ab5a90c1$export$deb45c643cbebb10.ID = "editor.action.inlineSuggest.showPrevious";
class $42a160c6ab5a90c1$export$ba15d049566a3d99 extends (0, $gGOeQ.EditorAction) {
    run(accessor, editor) {
        return $42a160c6ab5a90c1$var$__awaiter(this, void 0, void 0, function*() {
            const controller = $42a160c6ab5a90c1$export$ffa5b9ac8848b7ee.get(editor);
            if (controller) controller.trigger();
        });
    }
    constructor(){
        super({
            id: "editor.action.inlineSuggest.trigger",
            label: $58WHl.localize("action.inlineSuggest.trigger", "Trigger Inline Suggestion"),
            alias: "Trigger Inline Suggestion",
            precondition: (0, $bdLce.EditorContextKeys).writable
        });
    }
}
(0, $gGOeQ.registerEditorContribution)($42a160c6ab5a90c1$export$ffa5b9ac8848b7ee.ID, $42a160c6ab5a90c1$export$ffa5b9ac8848b7ee);
(0, $gGOeQ.registerEditorAction)($42a160c6ab5a90c1$export$ba15d049566a3d99);
(0, $gGOeQ.registerEditorAction)($42a160c6ab5a90c1$export$57edbf9569cc9779);
(0, $gGOeQ.registerEditorAction)($42a160c6ab5a90c1$export$deb45c643cbebb10);



var $58WHl = parcelRequire("58WHl");

var $6qNtj = parcelRequire("6qNtj");

var $2IxgH = parcelRequire("2IxgH");

var $fAXtX = parcelRequire("fAXtX");

var $bRtox = parcelRequire("bRtox");

var $9KRmt = parcelRequire("9KRmt");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $c19e865ca7e97982$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $c19e865ca7e97982$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
class $c19e865ca7e97982$export$d54b1f95b394dfe6 {
    isValidForHoverAnchor(anchor) {
        return anchor.type === 1 /* Range */  && this.range.startColumn <= anchor.range.startColumn && this.range.endColumn >= anchor.range.endColumn;
    }
    hasMultipleSuggestions() {
        return this.controller.hasMultipleInlineCompletions();
    }
    constructor(owner, range, controller){
        this.owner = owner;
        this.range = range;
        this.controller = controller;
    }
}
let $c19e865ca7e97982$export$85c63d130bb225cb = class InlineCompletionsHoverParticipant {
    suggestHoverAnchor(mouseEvent) {
        const controller = (0, $42a160c6ab5a90c1$exports.GhostTextController).get(this._editor);
        if (!controller) return null;
        if (mouseEvent.target.type === 8 /* CONTENT_VIEW_ZONE */ ) {
            // handle the case where the mouse is over the view zone
            const viewZoneData = mouseEvent.target.detail;
            if (controller.shouldShowHoverAtViewZone(viewZoneData.viewZoneId)) return new (0, $2c285531b7bd0e5c$export$cadc11e524c92809)(1000, this, (0, $3HpR4.Range).fromPositions(viewZoneData.positionBefore || viewZoneData.position, viewZoneData.positionBefore || viewZoneData.position));
        }
        if (mouseEvent.target.type === 7 /* CONTENT_EMPTY */  && mouseEvent.target.range) {
            // handle the case where the mouse is over the empty portion of a line following ghost text
            if (controller.shouldShowHoverAt(mouseEvent.target.range)) return new (0, $2c285531b7bd0e5c$export$cadc11e524c92809)(1000, this, mouseEvent.target.range);
        }
        if (mouseEvent.target.type === 6 /* CONTENT_TEXT */  && mouseEvent.target.range && mouseEvent.target.detail) {
            // handle the case where the mouse is directly over ghost text
            const mightBeForeignElement = mouseEvent.target.detail.mightBeForeignElement;
            if (mightBeForeignElement && controller.shouldShowHoverAt(mouseEvent.target.range)) return new (0, $2c285531b7bd0e5c$export$cadc11e524c92809)(1000, this, mouseEvent.target.range);
        }
        return null;
    }
    computeSync(anchor, lineDecorations) {
        const controller = (0, $42a160c6ab5a90c1$exports.GhostTextController).get(this._editor);
        if (controller && controller.shouldShowHoverAt(anchor.range)) return [
            new $c19e865ca7e97982$export$d54b1f95b394dfe6(this, anchor.range, controller)
        ];
        return [];
    }
    renderHoverParts(hoverParts, fragment, statusBar) {
        const disposableStore = new (0, $atiRx.DisposableStore)();
        const part = hoverParts[0];
        if (this.accessibilityService.isScreenReaderOptimized()) this.renderScreenReaderText(part, fragment, disposableStore);
        const menu = disposableStore.add(this._menuService.createMenu((0, $2IxgH.MenuId).InlineCompletionsActions, this._contextKeyService));
        const previousAction = statusBar.addAction({
            label: $58WHl.localize("showNextInlineSuggestion", "Next"),
            commandId: (0, $42a160c6ab5a90c1$exports.ShowNextInlineSuggestionAction).ID,
            run: ()=>this._commandService.executeCommand((0, $42a160c6ab5a90c1$exports.ShowNextInlineSuggestionAction).ID)
        });
        const nextAction = statusBar.addAction({
            label: $58WHl.localize("showPreviousInlineSuggestion", "Previous"),
            commandId: (0, $42a160c6ab5a90c1$exports.ShowPreviousInlineSuggestionAction).ID,
            run: ()=>this._commandService.executeCommand((0, $42a160c6ab5a90c1$exports.ShowPreviousInlineSuggestionAction).ID)
        });
        statusBar.addAction({
            label: $58WHl.localize("acceptInlineSuggestion", "Accept"),
            commandId: (0, $42a160c6ab5a90c1$exports.commitInlineSuggestionAction).id,
            run: ()=>this._commandService.executeCommand((0, $42a160c6ab5a90c1$exports.commitInlineSuggestionAction).id)
        });
        const actions = [
            previousAction,
            nextAction
        ];
        for (const action of actions)action.setEnabled(false);
        part.hasMultipleSuggestions().then((hasMore)=>{
            for (const action of actions)action.setEnabled(hasMore);
        });
        for (const [_, group] of menu.getActions()){
            for (const action1 of group)if (action1 instanceof (0, $2IxgH.MenuItemAction)) statusBar.addAction({
                label: action1.label,
                commandId: action1.item.id,
                run: ()=>this._commandService.executeCommand(action1.item.id)
            });
        }
        return disposableStore;
    }
    renderScreenReaderText(part, fragment, disposableStore) {
        var _a, _b;
        const $ = $jOYcd.$;
        const markdownHoverElement = $("div.hover-row.markdown-hover");
        const hoverContentsElement = $jOYcd.append(markdownHoverElement, $("div.hover-contents"));
        const renderer = disposableStore.add(new (0, $ead540c899f453a8$exports.MarkdownRenderer)({
            editor: this._editor
        }, this._modeService, this._openerService));
        const render = (code)=>{
            disposableStore.add(renderer.onDidRenderAsync(()=>{
                hoverContentsElement.className = "hover-contents code-hover-contents";
                this._hover.onContentsChanged();
            }));
            const inlineSuggestionAvailable = $58WHl.localize("inlineSuggestionFollows", "Suggestion:");
            const renderedContents = disposableStore.add(renderer.render(new (0, $chTln.MarkdownString)().appendText(inlineSuggestionAvailable).appendCodeblock("text", code)));
            hoverContentsElement.replaceChildren(renderedContents.element);
        };
        const ghostText = (_b = (_a = part.controller.activeModel) === null || _a === void 0 ? void 0 : _a.inlineCompletionsModel) === null || _b === void 0 ? void 0 : _b.ghostText;
        if (ghostText) {
            const lineText = this._editor.getModel().getLineContent(ghostText.lineNumber);
            render(ghostText.renderForScreenReader(lineText));
        }
        fragment.appendChild(markdownHoverElement);
    }
    constructor(_editor, _hover, _commandService, _menuService, _contextKeyService, _modeService, _openerService, accessibilityService){
        this._editor = _editor;
        this._hover = _hover;
        this._commandService = _commandService;
        this._menuService = _menuService;
        this._contextKeyService = _contextKeyService;
        this._modeService = _modeService;
        this._openerService = _openerService;
        this.accessibilityService = accessibilityService;
    }
};
$c19e865ca7e97982$export$85c63d130bb225cb = $c19e865ca7e97982$var$__decorate([
    $c19e865ca7e97982$var$__param(2, (0, $fAXtX.ICommandService)),
    $c19e865ca7e97982$var$__param(3, (0, $2IxgH.IMenuService)),
    $c19e865ca7e97982$var$__param(4, (0, $bRtox.IContextKeyService)),
    $c19e865ca7e97982$var$__param(5, (0, $6o4cZ.IModeService)),
    $c19e865ca7e97982$var$__param(6, (0, $9KRmt.IOpenerService)),
    $c19e865ca7e97982$var$__param(7, (0, $6qNtj.IAccessibilityService))
], $c19e865ca7e97982$export$85c63d130bb225cb);



var $bRtox = parcelRequire("bRtox");

var $iZW67 = parcelRequire("iZW67");

var $gY9wc = parcelRequire("gY9wc");

var $54fbd29620c47e8e$exports = {};

$parcel$export($54fbd29620c47e8e$exports, "UnicodeHighlighterHoverParticipant", function () { return $54fbd29620c47e8e$export$abfb214dc8905583; }, function (v) { return $54fbd29620c47e8e$export$abfb214dc8905583 = v; });

var $eFOsn = parcelRequire("eFOsn");

var $8HDYc = parcelRequire("8HDYc");

var $atiRx = parcelRequire("atiRx");

var $9TEeL = parcelRequire("9TEeL");


var $gGOeQ = parcelRequire("gGOeQ");

var $3xLkU = parcelRequire("3xLkU");

var $bbATZ = parcelRequire("bbATZ");

var $g88WD = parcelRequire("g88WD");

var $kFs4l = parcelRequire("kFs4l");

var $7N0CJ = parcelRequire("7N0CJ");

var $6o4cZ = parcelRequire("6o4cZ");

var $c4x9k = parcelRequire("c4x9k");

var $d8574f74588f2384$exports = {};

$parcel$export($d8574f74588f2384$exports, "BannerController", function () { return $d8574f74588f2384$export$1da7e17bff54d3c0; }, function (v) { return $d8574f74588f2384$export$1da7e17bff54d3c0 = v; });


var $jOYcd = parcelRequire("jOYcd");

var $dxI2a = parcelRequire("dxI2a");

var $1e8So = parcelRequire("1e8So");

var $atiRx = parcelRequire("atiRx");


var $iZW67 = parcelRequire("iZW67");
var $228c07a1d149e982$exports = {};

$parcel$export($228c07a1d149e982$exports, "Link", function () { return $228c07a1d149e982$export$a6c7ac8248d6e38a; }, function (v) { return $228c07a1d149e982$export$a6c7ac8248d6e38a = v; });

var $jOYcd = parcelRequire("jOYcd");

var $5abWm = parcelRequire("5abWm");

var $iiWsJ = parcelRequire("iiWsJ");

var $50vT2 = parcelRequire("50vT2");

var $fSvkC = parcelRequire("fSvkC");

var $atiRx = parcelRequire("atiRx");

var $9KRmt = parcelRequire("9KRmt");

var $3XYy8 = parcelRequire("3XYy8");

var $fUTzO = parcelRequire("fUTzO");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $228c07a1d149e982$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $228c07a1d149e982$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
let $228c07a1d149e982$export$a6c7ac8248d6e38a = class Link extends (0, $atiRx.Disposable) {
    get enabled() {
        return this._enabled;
    }
    set enabled(enabled) {
        if (enabled) {
            this.el.setAttribute("aria-disabled", "false");
            this.el.tabIndex = 0;
            this.el.style.pointerEvents = "auto";
            this.el.style.opacity = "1";
            this.el.style.cursor = "pointer";
            this._enabled = false;
        } else {
            this.el.setAttribute("aria-disabled", "true");
            this.el.tabIndex = -1;
            this.el.style.pointerEvents = "none";
            this.el.style.opacity = "0.4";
            this.el.style.cursor = "default";
            this._enabled = true;
        }
        this._enabled = enabled;
    }
    constructor(container, _link, options = {}, openerService){
        var _a;
        super();
        this._link = _link;
        this._enabled = true;
        this.el = (0, $jOYcd.append)(container, (0, $jOYcd.$)("a.monaco-link", {
            tabIndex: (_a = _link.tabIndex) !== null && _a !== void 0 ? _a : 0,
            href: _link.href,
            title: _link.title
        }, _link.label));
        this.el.setAttribute("role", "button");
        const onClickEmitter = this._register(new (0, $5abWm.DomEmitter)(this.el, "click"));
        const onKeyPress = this._register(new (0, $5abWm.DomEmitter)(this.el, "keypress"));
        const onEnterPress = (0, $fSvkC.Event).chain(onKeyPress.event).map((e)=>new (0, $iiWsJ.StandardKeyboardEvent)(e)).filter((e)=>e.keyCode === 3 /* Enter */ ).event;
        const onTap = this._register(new (0, $5abWm.DomEmitter)(this.el, (0, $50vT2.EventType).Tap)).event;
        this._register((0, $50vT2.Gesture).addTarget(this.el));
        const onOpen = (0, $fSvkC.Event).any(onClickEmitter.event, onEnterPress, onTap);
        this._register(onOpen((e)=>{
            if (!this.enabled) return;
            (0, $jOYcd.EventHelper).stop(e, true);
            if (options === null || options === void 0 ? void 0 : options.opener) options.opener(this._link.href);
            else openerService.open(this._link.href, {
                allowCommands: true
            });
        }));
        this.enabled = true;
    }
};
$228c07a1d149e982$export$a6c7ac8248d6e38a = $228c07a1d149e982$var$__decorate([
    $228c07a1d149e982$var$__param(3, (0, $9KRmt.IOpenerService))
], $228c07a1d149e982$export$a6c7ac8248d6e38a);
(0, $fUTzO.registerThemingParticipant)((theme, collector)=>{
    const textLinkForegroundColor = theme.getColor((0, $3XYy8.textLinkForeground));
    if (textLinkForegroundColor) collector.addRule(`.monaco-link { color: ${textLinkForegroundColor}; }`);
    const textLinkActiveForegroundColor = theme.getColor((0, $3XYy8.textLinkActiveForeground));
    if (textLinkActiveForegroundColor) collector.addRule(`.monaco-link:hover { color: ${textLinkActiveForegroundColor}; }`);
});



var $iValS = parcelRequire("iValS");

var $fUTzO = parcelRequire("fUTzO");
var $d8574f74588f2384$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $d8574f74588f2384$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
const $d8574f74588f2384$var$BANNER_ELEMENT_HEIGHT = 26;
let $d8574f74588f2384$export$1da7e17bff54d3c0 = class BannerController extends (0, $atiRx.Disposable) {
    hide() {
        this._editor.setBanner(null, 0);
        this.banner.clear();
    }
    show(item) {
        this.banner.show(Object.assign(Object.assign({}, item), {
            onClose: ()=>{
                this.hide();
                if (item.onClose) item.onClose();
            }
        }));
        this._editor.setBanner(this.banner.element, $d8574f74588f2384$var$BANNER_ELEMENT_HEIGHT);
    }
    constructor(_editor, instantiationService){
        super();
        this._editor = _editor;
        this.instantiationService = instantiationService;
        this.banner = this._register(this.instantiationService.createInstance($d8574f74588f2384$var$Banner));
    }
};
$d8574f74588f2384$export$1da7e17bff54d3c0 = $d8574f74588f2384$var$__decorate([
    $d8574f74588f2384$var$__param(1, (0, $iZW67.IInstantiationService))
], $d8574f74588f2384$export$1da7e17bff54d3c0);
// TODO@hediet: Investigate if this can be reused by the workspace banner (bannerPart.ts).
let $d8574f74588f2384$var$Banner = class Banner extends (0, $atiRx.Disposable) {
    getAriaLabel(item) {
        if (item.ariaLabel) return item.ariaLabel;
        if (typeof item.message === "string") return item.message;
        return undefined;
    }
    getBannerMessage(message) {
        if (typeof message === "string") {
            const element = (0, $jOYcd.$)("span");
            element.innerText = message;
            return element;
        }
        return this.markdownRenderer.render(message).element;
    }
    clear() {
        (0, $jOYcd.clearNode)(this.element);
    }
    show(item) {
        // Clear previous item
        (0, $jOYcd.clearNode)(this.element);
        // Banner aria label
        const ariaLabel = this.getAriaLabel(item);
        if (ariaLabel) this.element.setAttribute("aria-label", ariaLabel);
        // Icon
        const iconContainer = (0, $jOYcd.append)(this.element, (0, $jOYcd.$)("div.icon-container"));
        iconContainer.setAttribute("aria-hidden", "true");
        if (item.icon) iconContainer.appendChild((0, $jOYcd.$)(`div${(0, $fUTzO.ThemeIcon).asCSSSelector(item.icon)}`));
        // Message
        const messageContainer = (0, $jOYcd.append)(this.element, (0, $jOYcd.$)("div.message-container"));
        messageContainer.setAttribute("aria-hidden", "true");
        messageContainer.appendChild(this.getBannerMessage(item.message));
        // Message Actions
        this.messageActionsContainer = (0, $jOYcd.append)(this.element, (0, $jOYcd.$)("div.message-actions-container"));
        if (item.actions) for (const action of item.actions)this._register(this.instantiationService.createInstance((0, $228c07a1d149e982$exports.Link), this.messageActionsContainer, Object.assign(Object.assign({}, action), {
            tabIndex: -1
        }), {}));
        // Action
        const actionBarContainer = (0, $jOYcd.append)(this.element, (0, $jOYcd.$)("div.action-container"));
        this.actionBar = this._register(new (0, $dxI2a.ActionBar)(actionBarContainer));
        this.actionBar.push(this._register(new (0, $1e8So.Action)("banner.close", "Close Banner", (0, $fUTzO.ThemeIcon).asClassName((0, $iValS.widgetClose)), true, ()=>{
            if (typeof item.onClose === "function") item.onClose();
        })), {
            icon: true,
            label: false
        });
        this.actionBar.setFocusable(false);
    }
    constructor(instantiationService){
        super();
        this.instantiationService = instantiationService;
        this.markdownRenderer = this.instantiationService.createInstance((0, $ead540c899f453a8$exports.MarkdownRenderer), {});
        this.element = (0, $jOYcd.$)("div.editor-banner");
        this.element.tabIndex = 0;
    }
};
$d8574f74588f2384$var$Banner = $d8574f74588f2384$var$__decorate([
    $d8574f74588f2384$var$__param(0, (0, $iZW67.IInstantiationService))
], $d8574f74588f2384$var$Banner);



var $58WHl = parcelRequire("58WHl");

var $9BIBz = parcelRequire("9BIBz");

var $iZW67 = parcelRequire("iZW67");

var $9KRmt = parcelRequire("9KRmt");

var $aqUJX = parcelRequire("aqUJX");

var $3XYy8 = parcelRequire("3XYy8");

var $iValS = parcelRequire("iValS");

var $fUTzO = parcelRequire("fUTzO");

var $fiGA6 = parcelRequire("fiGA6");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $54fbd29620c47e8e$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $54fbd29620c47e8e$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var $54fbd29620c47e8e$var$__awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const $54fbd29620c47e8e$export$8929e07d808734d0 = (0, $iValS.registerIcon)("extensions-warning-message", (0, $8HDYc.Codicon).warning, $58WHl.localize("warningIcon", "Icon shown with a warning message in the extensions editor."));
let $54fbd29620c47e8e$export$db6ed2fe81e44dff = class UnicodeHighlighter extends (0, $atiRx.Disposable) {
    dispose() {
        if (this._highlighter) {
            this._highlighter.dispose();
            this._highlighter = null;
        }
        super.dispose();
    }
    _updateHighlighter() {
        this._updateState(null);
        if (this._highlighter) {
            this._highlighter.dispose();
            this._highlighter = null;
        }
        if (!this._editor.hasModel()) return;
        const options = $54fbd29620c47e8e$var$resolveOptions(this._workspaceTrustService.isWorkspaceTrusted(), this._options);
        if ([
            options.nonBasicASCII,
            options.ambiguousCharacters,
            options.invisibleCharacters, 
        ].every((option)=>option === false)) // Don't do anything if the feature is fully disabled
        return;
        const highlightOptions = {
            nonBasicASCII: options.nonBasicASCII,
            ambiguousCharacters: options.ambiguousCharacters,
            invisibleCharacters: options.invisibleCharacters,
            includeComments: options.includeComments,
            allowedCodePoints: Object.keys(options.allowedCharacters).map((c)=>c.codePointAt(0))
        };
        if (this._editorWorkerService.canComputeUnicodeHighlights(this._editor.getModel().uri)) this._highlighter = new $54fbd29620c47e8e$var$DocumentUnicodeHighlighter(this._editor, highlightOptions, this._updateState, this._editorWorkerService);
        else this._highlighter = new $54fbd29620c47e8e$var$ViewportUnicodeHighlighter(this._editor, highlightOptions, this._updateState);
    }
    getDecorationInfo(decorationId) {
        if (this._highlighter) return this._highlighter.getDecorationInfo(decorationId);
        return null;
    }
    constructor(_editor, _editorWorkerService, _workspaceTrustService, instantiationService){
        super();
        this._editor = _editor;
        this._editorWorkerService = _editorWorkerService;
        this._workspaceTrustService = _workspaceTrustService;
        this._highlighter = null;
        this._bannerClosed = false;
        this._updateState = (state)=>{
            if (state && state.hasMore) {
                if (this._bannerClosed) return;
                // This document contains many non-basic ASCII characters.
                const max = Math.max(state.ambiguousCharacterCount, state.nonBasicAsciiCharacterCount, state.invisibleCharacterCount);
                let data;
                if (state.nonBasicAsciiCharacterCount >= max) data = {
                    message: $58WHl.localize("unicodeHighlighting.thisDocumentHasManyNonBasicAsciiUnicodeCharacters", "This document contains many non-basic ASCII unicode characters"),
                    command: new $54fbd29620c47e8e$export$bd2d98ee4f877b7c()
                };
                else if (state.ambiguousCharacterCount >= max) data = {
                    message: $58WHl.localize("unicodeHighlighting.thisDocumentHasManyAmbiguousUnicodeCharacters", "This document contains many ambiguous unicode characters"),
                    command: new $54fbd29620c47e8e$export$13974d2fac2cb715()
                };
                else if (state.invisibleCharacterCount >= max) data = {
                    message: $58WHl.localize("unicodeHighlighting.thisDocumentHasManyInvisibleUnicodeCharacters", "This document contains many invisible unicode characters"),
                    command: new $54fbd29620c47e8e$export$a9f1e8c395a54dc4()
                };
                else throw new Error("Unreachable");
                this._bannerController.show({
                    id: "unicodeHighlightBanner",
                    message: data.message,
                    icon: $54fbd29620c47e8e$export$8929e07d808734d0,
                    actions: [
                        {
                            label: data.command.shortLabel,
                            href: `command:${data.command.id}`
                        }
                    ],
                    onClose: ()=>{
                        this._bannerClosed = true;
                    }
                });
            } else this._bannerController.hide();
        };
        this._bannerController = this._register(instantiationService.createInstance((0, $d8574f74588f2384$exports.BannerController), _editor));
        this._register(this._editor.onDidChangeModel(()=>{
            this._bannerClosed = false;
            this._updateHighlighter();
        }));
        this._options = _editor.getOption(112 /* unicodeHighlighting */ );
        this._register(_workspaceTrustService.onDidChangeTrust((e)=>{
            this._updateHighlighter();
        }));
        this._register(_editor.onDidChangeConfiguration((e)=>{
            if (e.hasChanged(112 /* unicodeHighlighting */ )) {
                this._options = _editor.getOption(112 /* unicodeHighlighting */ );
                this._updateHighlighter();
            }
        }));
        this._updateHighlighter();
    }
};
$54fbd29620c47e8e$export$db6ed2fe81e44dff.ID = "editor.contrib.unicodeHighlighter";
$54fbd29620c47e8e$export$db6ed2fe81e44dff = $54fbd29620c47e8e$var$__decorate([
    $54fbd29620c47e8e$var$__param(1, (0, $7N0CJ.IEditorWorkerService)),
    $54fbd29620c47e8e$var$__param(2, (0, $fiGA6.IWorkspaceTrustManagementService)),
    $54fbd29620c47e8e$var$__param(3, (0, $iZW67.IInstantiationService))
], $54fbd29620c47e8e$export$db6ed2fe81e44dff);
function $54fbd29620c47e8e$var$resolveOptions(trusted, options) {
    var _a;
    return {
        nonBasicASCII: options.nonBasicASCII === (0, $3xLkU.inUntrustedWorkspace) ? !trusted : options.nonBasicASCII,
        ambiguousCharacters: options.ambiguousCharacters,
        invisibleCharacters: options.invisibleCharacters,
        includeComments: options.includeComments === (0, $3xLkU.inUntrustedWorkspace) ? !trusted : options.includeComments,
        allowedCharacters: (_a = options.allowedCharacters) !== null && _a !== void 0 ? _a : {}
    };
}
let $54fbd29620c47e8e$var$DocumentUnicodeHighlighter = class DocumentUnicodeHighlighter extends (0, $atiRx.Disposable) {
    dispose() {
        this._decorationIds = new Set(this._model.deltaDecorations(Array.from(this._decorationIds), []));
        super.dispose();
    }
    _update() {
        if (!this._model.mightContainNonBasicASCII()) {
            this._decorationIds = new Set(this._editor.deltaDecorations(Array.from(this._decorationIds), []));
            return;
        }
        const modelVersionId = this._model.getVersionId();
        this._editorWorkerService.computedUnicodeHighlights(this._model.uri, this._options).then((info)=>{
            if (this._model.getVersionId() !== modelVersionId) // model changed in the meantime
            return;
            this._updateState(info);
            const decorations = [];
            if (!info.hasMore) // Don't show decoration if there are too many.
            // In this case, a banner is shown.
            for (const range of info.ranges)decorations.push({
                range: range,
                options: this._options.includeComments ? $54fbd29620c47e8e$var$DECORATION : $54fbd29620c47e8e$var$DECORATION_HIDE_IN_COMMENTS
            });
            this._decorationIds = new Set(this._editor.deltaDecorations(Array.from(this._decorationIds), decorations));
        });
    }
    getDecorationInfo(decorationId) {
        if (!this._decorationIds.has(decorationId)) return null;
        const model = this._editor.getModel();
        const range = model.getDecorationRange(decorationId);
        if (!(0, $c4x9k.isModelDecorationVisible)(model, {
            range: range,
            options: this._options.includeComments ? $54fbd29620c47e8e$var$DECORATION : $54fbd29620c47e8e$var$DECORATION_HIDE_IN_COMMENTS,
            id: decorationId,
            ownerId: 0
        })) return null;
        const text = model.getValueInRange(range);
        return {
            reason: $54fbd29620c47e8e$var$computeReason(text, this._options)
        };
    }
    constructor(_editor, _options, _updateState, _editorWorkerService){
        super();
        this._editor = _editor;
        this._options = _options;
        this._updateState = _updateState;
        this._editorWorkerService = _editorWorkerService;
        this._model = this._editor.getModel();
        this._decorationIds = new Set();
        this._updateSoon = this._register(new (0, $eFOsn.RunOnceScheduler)(()=>this._update(), 250));
        this._register(this._editor.onDidChangeModelContent(()=>{
            this._updateSoon.schedule();
        }));
        this._updateSoon.schedule();
    }
};
$54fbd29620c47e8e$var$DocumentUnicodeHighlighter = $54fbd29620c47e8e$var$__decorate([
    $54fbd29620c47e8e$var$__param(3, (0, $7N0CJ.IEditorWorkerService))
], $54fbd29620c47e8e$var$DocumentUnicodeHighlighter);
class $54fbd29620c47e8e$var$ViewportUnicodeHighlighter extends (0, $atiRx.Disposable) {
    dispose() {
        this._decorationIds = new Set(this._model.deltaDecorations(Array.from(this._decorationIds), []));
        super.dispose();
    }
    _update() {
        if (!this._model.mightContainNonBasicASCII()) {
            this._decorationIds = new Set(this._editor.deltaDecorations(Array.from(this._decorationIds), []));
            return;
        }
        const ranges = this._editor.getVisibleRanges();
        const decorations = [];
        const totalResult = {
            ranges: [],
            ambiguousCharacterCount: 0,
            invisibleCharacterCount: 0,
            nonBasicAsciiCharacterCount: 0,
            hasMore: false
        };
        for (const range of ranges){
            const result = (0, $kFs4l.UnicodeTextModelHighlighter).computeUnicodeHighlights(this._model, this._options, range);
            for (const r of result.ranges)totalResult.ranges.push(r);
            totalResult.ambiguousCharacterCount += totalResult.ambiguousCharacterCount;
            totalResult.invisibleCharacterCount += totalResult.invisibleCharacterCount;
            totalResult.nonBasicAsciiCharacterCount += totalResult.nonBasicAsciiCharacterCount;
            totalResult.hasMore = totalResult.hasMore || result.hasMore;
        }
        if (!totalResult.hasMore) // Don't show decorations if there are too many.
        // A banner will be shown instead.
        for (const range1 of totalResult.ranges)decorations.push({
            range: range1,
            options: this._options.includeComments ? $54fbd29620c47e8e$var$DECORATION : $54fbd29620c47e8e$var$DECORATION_HIDE_IN_COMMENTS
        });
        this._updateState(totalResult);
        this._decorationIds = new Set(this._editor.deltaDecorations(Array.from(this._decorationIds), decorations));
    }
    getDecorationInfo(decorationId) {
        if (!this._decorationIds.has(decorationId)) return null;
        const model = this._editor.getModel();
        const range = model.getDecorationRange(decorationId);
        const text = model.getValueInRange(range);
        if (!(0, $c4x9k.isModelDecorationVisible)(model, {
            range: range,
            options: this._options.includeComments ? $54fbd29620c47e8e$var$DECORATION : $54fbd29620c47e8e$var$DECORATION_HIDE_IN_COMMENTS,
            id: decorationId,
            ownerId: 0
        })) return null;
        return {
            reason: $54fbd29620c47e8e$var$computeReason(text, this._options)
        };
    }
    constructor(_editor, _options, _updateState){
        super();
        this._editor = _editor;
        this._options = _options;
        this._updateState = _updateState;
        this._model = this._editor.getModel();
        this._decorationIds = new Set();
        this._updateSoon = this._register(new (0, $eFOsn.RunOnceScheduler)(()=>this._update(), 250));
        this._register(this._editor.onDidLayoutChange(()=>{
            this._updateSoon.schedule();
        }));
        this._register(this._editor.onDidScrollChange(()=>{
            this._updateSoon.schedule();
        }));
        this._register(this._editor.onDidChangeHiddenAreas(()=>{
            this._updateSoon.schedule();
        }));
        this._register(this._editor.onDidChangeModelContent(()=>{
            this._updateSoon.schedule();
        }));
        this._updateSoon.schedule();
    }
}
let $54fbd29620c47e8e$export$abfb214dc8905583 = class UnicodeHighlighterHoverParticipant {
    computeSync(anchor, lineDecorations) {
        if (!this._editor.hasModel() || anchor.type !== 1 /* Range */ ) return [];
        const model = this._editor.getModel();
        const unicodeHighlighter = this._editor.getContribution($54fbd29620c47e8e$export$db6ed2fe81e44dff.ID);
        const result = [];
        let index = 300;
        for (const d of lineDecorations){
            const highlightInfo = unicodeHighlighter.getDecorationInfo(d.id);
            if (!highlightInfo) continue;
            const char = model.getValueInRange(d.range);
            // text refers to a single character.
            const codePoint = char.codePointAt(0);
            function formatCodePoint(codePoint) {
                let value = `\`U+${codePoint.toString(16).padStart(4, "0")}\``;
                if (!(0, $9TEeL.InvisibleCharacters).isInvisibleCharacter(codePoint)) // Don't render any control characters or any invisible characters, as they cannot be seen anyways.
                value += ` "${`${$54fbd29620c47e8e$var$renderCodePointAsInlineCode(codePoint)}`}"`;
                return value;
            }
            const codePointStr = formatCodePoint(codePoint);
            let reason;
            switch(highlightInfo.reason.kind){
                case 0 /* Ambiguous */ :
                    reason = $58WHl.localize("unicodeHighlight.characterIsAmbiguous", "The character {0} could be confused with the character {1}, which is more common in source code.", codePointStr, formatCodePoint(highlightInfo.reason.confusableWith.codePointAt(0)));
                    break;
                case 1 /* Invisible */ :
                    reason = $58WHl.localize("unicodeHighlight.characterIsInvisible", "The character {0} is invisible.", codePointStr);
                    break;
                case 2 /* NonBasicAscii */ :
                    reason = $58WHl.localize("unicodeHighlight.characterIsNonBasicAscii", "The character {0} is not a basic ASCII character.", codePointStr);
                    break;
            }
            const adjustSettingsArgs = {
                codePoint: codePoint,
                reason: highlightInfo.reason.kind
            };
            const adjustSettings = $58WHl.localize("unicodeHighlight.adjustSettings", "Adjust settings");
            const contents = [
                {
                    value: `${reason} [${adjustSettings}](command:${$54fbd29620c47e8e$export$cc3a119c1042a4c8.ID}?${encodeURIComponent(JSON.stringify(adjustSettingsArgs))})`,
                    isTrusted: true
                }
            ];
            result.push(new (0, $4c95ce6e2b4515d4$exports.MarkdownHover)(this, d.range, contents, index++));
        }
        return result;
    }
    renderHoverParts(hoverParts, fragment, statusBar) {
        return (0, $4c95ce6e2b4515d4$exports.renderMarkdownHovers)(hoverParts, fragment, this._editor, this._hover, this._modeService, this._openerService);
    }
    constructor(_editor, _hover, _modeService, _openerService){
        this._editor = _editor;
        this._hover = _hover;
        this._modeService = _modeService;
        this._openerService = _openerService;
    }
};
$54fbd29620c47e8e$export$abfb214dc8905583 = $54fbd29620c47e8e$var$__decorate([
    $54fbd29620c47e8e$var$__param(2, (0, $6o4cZ.IModeService)),
    $54fbd29620c47e8e$var$__param(3, (0, $9KRmt.IOpenerService))
], $54fbd29620c47e8e$export$abfb214dc8905583);
function $54fbd29620c47e8e$var$renderCodePointAsInlineCode(codePoint) {
    if (codePoint === 96 /* BackTick */ ) return "`` ` ``";
    return "`" + String.fromCodePoint(codePoint) + "`";
}
function $54fbd29620c47e8e$var$computeReason(char, options) {
    return (0, $kFs4l.UnicodeTextModelHighlighter).computeUnicodeHighlightReason(char, options);
}
const $54fbd29620c47e8e$var$DECORATION_HIDE_IN_COMMENTS = (0, $g88WD.ModelDecorationOptions).register({
    description: "unicode-highlight",
    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ ,
    className: "unicode-highlight",
    showIfCollapsed: true,
    overviewRuler: {
        color: (0, $fUTzO.themeColorFromId)((0, $3XYy8.overviewRulerUnicodeHighlightForeground)),
        position: (0, $bbATZ.OverviewRulerLane).Center
    },
    minimap: {
        color: (0, $fUTzO.themeColorFromId)((0, $3XYy8.minimapUnicodeHighlight)),
        position: (0, $bbATZ.MinimapPosition).Inline
    },
    hideInCommentTokens: true
});
const $54fbd29620c47e8e$var$DECORATION = (0, $g88WD.ModelDecorationOptions).register({
    description: "unicode-highlight",
    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ ,
    className: "unicode-highlight",
    showIfCollapsed: true,
    overviewRuler: {
        color: (0, $fUTzO.themeColorFromId)((0, $3XYy8.overviewRulerFindMatchForeground)),
        position: (0, $bbATZ.OverviewRulerLane).Center
    },
    minimap: {
        color: (0, $fUTzO.themeColorFromId)((0, $3XYy8.minimapFindMatch)),
        position: (0, $bbATZ.MinimapPosition).Inline
    }
});
class $54fbd29620c47e8e$export$13974d2fac2cb715 extends (0, $gGOeQ.EditorAction) {
    run(accessor, editor, args) {
        return $54fbd29620c47e8e$var$__awaiter(this, void 0, void 0, function*() {
            let configurationService = accessor === null || accessor === void 0 ? void 0 : accessor.get((0, $9BIBz.IConfigurationService));
            if (configurationService) this.runAction(configurationService);
        });
    }
    runAction(configurationService) {
        return $54fbd29620c47e8e$var$__awaiter(this, void 0, void 0, function*() {
            yield configurationService.updateValue((0, $3xLkU.unicodeHighlightConfigKeys).ambiguousCharacters, false, 1 /* USER */ );
        });
    }
    constructor(){
        super({
            id: $54fbd29620c47e8e$export$13974d2fac2cb715.ID,
            label: $58WHl.localize("action.unicodeHighlight.disableHighlightingOfAmbiguousCharacters", "Disable highlighting of ambiguous characters"),
            alias: "Disable highlighting of ambiguous characters",
            precondition: undefined
        });
        this.shortLabel = $58WHl.localize("unicodeHighlight.disableHighlightingOfAmbiguousCharacters.shortLabel", "Disable Ambiguous Highlight");
    }
}
$54fbd29620c47e8e$export$13974d2fac2cb715.ID = "editor.action.unicodeHighlight.disableHighlightingOfAmbiguousCharacters";
class $54fbd29620c47e8e$export$a9f1e8c395a54dc4 extends (0, $gGOeQ.EditorAction) {
    run(accessor, editor, args) {
        return $54fbd29620c47e8e$var$__awaiter(this, void 0, void 0, function*() {
            let configurationService = accessor === null || accessor === void 0 ? void 0 : accessor.get((0, $9BIBz.IConfigurationService));
            if (configurationService) this.runAction(configurationService);
        });
    }
    runAction(configurationService) {
        return $54fbd29620c47e8e$var$__awaiter(this, void 0, void 0, function*() {
            yield configurationService.updateValue((0, $3xLkU.unicodeHighlightConfigKeys).invisibleCharacters, false, 1 /* USER */ );
        });
    }
    constructor(){
        super({
            id: $54fbd29620c47e8e$export$a9f1e8c395a54dc4.ID,
            label: $58WHl.localize("action.unicodeHighlight.disableHighlightingOfInvisibleCharacters", "Disable highlighting of invisible characters"),
            alias: "Disable highlighting of invisible characters",
            precondition: undefined
        });
        this.shortLabel = $58WHl.localize("unicodeHighlight.disableHighlightingOfInvisibleCharacters.shortLabel", "Disable Invisible Highlight");
    }
}
$54fbd29620c47e8e$export$a9f1e8c395a54dc4.ID = "editor.action.unicodeHighlight.disableHighlightingOfInvisibleCharacters";
class $54fbd29620c47e8e$export$bd2d98ee4f877b7c extends (0, $gGOeQ.EditorAction) {
    run(accessor, editor, args) {
        return $54fbd29620c47e8e$var$__awaiter(this, void 0, void 0, function*() {
            let configurationService = accessor === null || accessor === void 0 ? void 0 : accessor.get((0, $9BIBz.IConfigurationService));
            if (configurationService) this.runAction(configurationService);
        });
    }
    runAction(configurationService) {
        return $54fbd29620c47e8e$var$__awaiter(this, void 0, void 0, function*() {
            yield configurationService.updateValue((0, $3xLkU.unicodeHighlightConfigKeys).nonBasicASCII, false, 1 /* USER */ );
        });
    }
    constructor(){
        super({
            id: $54fbd29620c47e8e$export$bd2d98ee4f877b7c.ID,
            label: $58WHl.localize("action.unicodeHighlight.disableHighlightingOfNonBasicAsciiCharacters", "Disable highlighting of non basic ASCII characters"),
            alias: "Disable highlighting of non basic ASCII characters",
            precondition: undefined
        });
        this.shortLabel = $58WHl.localize("unicodeHighlight.disableHighlightingOfNonBasicAsciiCharacters.shortLabel", "Disable Non ASCII Highlight");
    }
}
$54fbd29620c47e8e$export$bd2d98ee4f877b7c.ID = "editor.action.unicodeHighlight.disableHighlightingOfNonBasicAsciiCharacters";
class $54fbd29620c47e8e$export$cc3a119c1042a4c8 extends (0, $gGOeQ.EditorAction) {
    run(accessor, editor, args) {
        return $54fbd29620c47e8e$var$__awaiter(this, void 0, void 0, function*() {
            const { codePoint: codePoint , reason: reason  } = args;
            const char = String.fromCodePoint(codePoint);
            const quickPickService = accessor.get((0, $aqUJX.IQuickInputService));
            const configurationService = accessor.get((0, $9BIBz.IConfigurationService));
            function getExcludeCharFromBeingHighlightedLabel(codePoint) {
                if ((0, $9TEeL.InvisibleCharacters).isInvisibleCharacter(codePoint)) return $58WHl.localize("unicodeHighlight.excludeInvisibleCharFromBeingHighlighted", "Exclude {0} (invisible character) from being highlighted", `U+${codePoint.toString(16)}`);
                return $58WHl.localize("unicodeHighlight.excludeCharFromBeingHighlighted", "Exclude {0} from being highlighted", `U+${codePoint.toString(16)} "${char}"`);
            }
            const options = [
                {
                    label: getExcludeCharFromBeingHighlightedLabel(codePoint),
                    run: ()=>$54fbd29620c47e8e$var$excludeCharFromBeingHighlighted(configurationService, [
                            codePoint
                        ])
                }, 
            ];
            if (reason === 0 /* Ambiguous */ ) {
                const action = new $54fbd29620c47e8e$export$13974d2fac2cb715();
                options.push({
                    label: action.label,
                    run: ()=>$54fbd29620c47e8e$var$__awaiter(this, void 0, void 0, function*() {
                            return action.runAction(configurationService);
                        })
                });
            } else if (reason === 1 /* Invisible */ ) {
                const action1 = new $54fbd29620c47e8e$export$a9f1e8c395a54dc4();
                options.push({
                    label: action1.label,
                    run: ()=>$54fbd29620c47e8e$var$__awaiter(this, void 0, void 0, function*() {
                            return action1.runAction(configurationService);
                        })
                });
            } else if (reason === 2 /* NonBasicAscii */ ) {
                const action2 = new $54fbd29620c47e8e$export$bd2d98ee4f877b7c();
                options.push({
                    label: action2.label,
                    run: ()=>$54fbd29620c47e8e$var$__awaiter(this, void 0, void 0, function*() {
                            return action2.runAction(configurationService);
                        })
                });
            } else $54fbd29620c47e8e$var$expectNever(reason);
            const result = yield quickPickService.pick(options, {
                title: $58WHl.localize("unicodeHighlight.configureUnicodeHighlightOptions", "Configure Unicode Highlight Options")
            });
            if (result) yield result.run();
        });
    }
    constructor(){
        super({
            id: $54fbd29620c47e8e$export$cc3a119c1042a4c8.ID,
            label: $58WHl.localize("action.unicodeHighlight.showExcludeOptions", "Show Exclude Options"),
            alias: "Show Exclude Options",
            precondition: undefined
        });
    }
}
$54fbd29620c47e8e$export$cc3a119c1042a4c8.ID = "editor.action.unicodeHighlight.showExcludeOptions";
function $54fbd29620c47e8e$var$excludeCharFromBeingHighlighted(configurationService, charCodes) {
    return $54fbd29620c47e8e$var$__awaiter(this, void 0, void 0, function*() {
        const existingValue = configurationService.getValue((0, $3xLkU.unicodeHighlightConfigKeys).allowedCharacters);
        let value;
        if (typeof existingValue === "object" && existingValue) value = existingValue;
        else value = {};
        for (const charCode of charCodes)value[String.fromCodePoint(charCode)] = true;
        yield configurationService.updateValue((0, $3xLkU.unicodeHighlightConfigKeys).allowedCharacters, value, 1 /* USER */ );
    });
}
function $54fbd29620c47e8e$var$expectNever(value) {
    throw new Error(`Unexpected value: ${value}`);
}
(0, $gGOeQ.registerEditorAction)($54fbd29620c47e8e$export$13974d2fac2cb715);
(0, $gGOeQ.registerEditorAction)($54fbd29620c47e8e$export$a9f1e8c395a54dc4);
(0, $gGOeQ.registerEditorAction)($54fbd29620c47e8e$export$bd2d98ee4f877b7c);
(0, $gGOeQ.registerEditorAction)($54fbd29620c47e8e$export$cc3a119c1042a4c8);
(0, $gGOeQ.registerEditorContribution)($54fbd29620c47e8e$export$db6ed2fe81e44dff.ID, $54fbd29620c47e8e$export$db6ed2fe81e44dff);



var $eFOsn = parcelRequire("eFOsn");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $8c7ecbfaaee4ac63$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $8c7ecbfaaee4ac63$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
const $8c7ecbfaaee4ac63$var$$ = $jOYcd.$;
let $8c7ecbfaaee4ac63$var$EditorHoverStatusBar = class EditorHoverStatusBar extends (0, $atiRx.Disposable) {
    get hasContent() {
        return this._hasContent;
    }
    addAction(actionOptions) {
        const keybinding = this._keybindingService.lookupKeybinding(actionOptions.commandId);
        const keybindingLabel = keybinding ? keybinding.getLabel() : null;
        this._hasContent = true;
        return this._register((0, $685f6eb996bf9e24$export$bc0ed2dd33dfd810).render(this.actionsElement, actionOptions, keybindingLabel));
    }
    append(element) {
        const result = $jOYcd.append(this.actionsElement, element);
        this._hasContent = true;
        return result;
    }
    constructor(_keybindingService){
        super();
        this._keybindingService = _keybindingService;
        this._hasContent = false;
        this.hoverElement = $8c7ecbfaaee4ac63$var$$("div.hover-row.status-bar");
        this.actionsElement = $jOYcd.append(this.hoverElement, $8c7ecbfaaee4ac63$var$$("div.actions"));
    }
};
$8c7ecbfaaee4ac63$var$EditorHoverStatusBar = $8c7ecbfaaee4ac63$var$__decorate([
    $8c7ecbfaaee4ac63$var$__param(0, (0, $gY9wc.IKeybindingService))
], $8c7ecbfaaee4ac63$var$EditorHoverStatusBar);
class $8c7ecbfaaee4ac63$var$ModesContentComputer {
    setAnchor(anchor) {
        this._anchor = anchor;
        this._result = [];
    }
    clearResult() {
        this._result = [];
    }
    static _getLineDecorations(editor, anchor) {
        if (anchor.type !== 1 /* Range */ ) return [];
        const model = editor.getModel();
        const lineNumber = anchor.range.startLineNumber;
        const maxColumn = model.getLineMaxColumn(lineNumber);
        return editor.getLineDecorations(lineNumber).filter((d)=>{
            if (d.options.isWholeLine) return true;
            const startColumn = d.range.startLineNumber === lineNumber ? d.range.startColumn : 1;
            const endColumn = d.range.endLineNumber === lineNumber ? d.range.endColumn : maxColumn;
            if (d.options.showIfCollapsed) {
                // Relax check around `showIfCollapsed` decorations to also include +/- 1 character
                if (startColumn > anchor.range.startColumn + 1 || anchor.range.endColumn - 1 > endColumn) return false;
            } else {
                if (startColumn > anchor.range.startColumn || anchor.range.endColumn > endColumn) return false;
            }
            return true;
        });
    }
    computeAsync(token) {
        const anchor = this._anchor;
        if (!this._editor.hasModel() || !anchor) return (0, $eFOsn.AsyncIterableObject).EMPTY;
        const lineDecorations = $8c7ecbfaaee4ac63$var$ModesContentComputer._getLineDecorations(this._editor, anchor);
        return (0, $eFOsn.AsyncIterableObject).merge(this._participants.map((participant)=>this._computeAsync(participant, lineDecorations, anchor, token)));
    }
    _computeAsync(participant, lineDecorations, anchor, token) {
        if (!participant.computeAsync) return (0, $eFOsn.AsyncIterableObject).EMPTY;
        return participant.computeAsync(anchor, lineDecorations, token);
    }
    computeSync() {
        if (!this._editor.hasModel() || !this._anchor) return [];
        const lineDecorations = $8c7ecbfaaee4ac63$var$ModesContentComputer._getLineDecorations(this._editor, this._anchor);
        let result = [];
        for (const participant of this._participants)result = result.concat(participant.computeSync(this._anchor, lineDecorations));
        return (0, $4xCD7.coalesce)(result);
    }
    onResult(result, isFromSynchronousComputation) {
        // Always put synchronous messages before asynchronous ones
        if (isFromSynchronousComputation) this._result = result.concat(this._result);
        else this._result = this._result.concat(result);
    }
    getResult() {
        return this._result.slice(0);
    }
    getResultWithLoadingMessage() {
        if (this._anchor) {
            for (const participant of this._participants)if (participant.createLoadingMessage) {
                const loadingMessage = participant.createLoadingMessage(this._anchor);
                if (loadingMessage) return this._result.slice(0).concat([
                    loadingMessage
                ]);
            }
        }
        return this._result.slice(0);
    }
    constructor(editor, _participants){
        this._participants = _participants;
        this._editor = editor;
        this._result = [];
        this._anchor = null;
    }
}
let $8c7ecbfaaee4ac63$export$27477712c6ad8b14 = class ModesContentHoverWidget extends (0, $5Bh2C.Widget) {
    dispose() {
        this._hoverOperation.cancel();
        this._editor.removeContentWidget(this);
        super.dispose();
    }
    getId() {
        return ModesContentHoverWidget.ID;
    }
    getDomNode() {
        return this._hover.containerDomNode;
    }
    _shouldShowAt(mouseEvent) {
        const targetType = mouseEvent.target.type;
        if (targetType === 6 /* CONTENT_TEXT */ ) return true;
        if (targetType === 7 /* CONTENT_EMPTY */ ) {
            const epsilon = this._editor.getOption(43 /* fontInfo */ ).typicalHalfwidthCharacterWidth / 2;
            const data = mouseEvent.target.detail;
            if (data && !data.isAfterLines && typeof data.horizontalDistanceToText === "number" && data.horizontalDistanceToText < epsilon) // Let hover kick in even when the mouse is technically in the empty area after a line, given the distance is small enough
            return true;
        }
        return false;
    }
    maybeShowAt(mouseEvent) {
        var _a;
        const anchorCandidates = [];
        for (const participant of this._participants)if (typeof participant.suggestHoverAnchor === "function") {
            const anchor = participant.suggestHoverAnchor(mouseEvent);
            if (anchor) anchorCandidates.push(anchor);
        }
        if (this._shouldShowAt(mouseEvent) && mouseEvent.target.range) {
            // TODO@rebornix. This should be removed if we move Color Picker out of Hover component.
            // Check if mouse is hovering on color decorator
            const hoverOnColorDecorator = [
                ...((_a = mouseEvent.target.element) === null || _a === void 0 ? void 0 : _a.classList.values()) || []
            ].find((className)=>className.startsWith("ced-colorBox")) && mouseEvent.target.range.endColumn - mouseEvent.target.range.startColumn === 1;
            const showAtRange = hoverOnColorDecorator // shift the mouse focus by one as color decorator is a `before` decoration of next character.
             ? new (0, $3HpR4.Range)(mouseEvent.target.range.startLineNumber, mouseEvent.target.range.startColumn + 1, mouseEvent.target.range.endLineNumber, mouseEvent.target.range.endColumn + 1) : mouseEvent.target.range;
            anchorCandidates.push(new (0, $2c285531b7bd0e5c$export$2a967524099ecc2c)(0, showAtRange));
        }
        if (anchorCandidates.length === 0) return false;
        anchorCandidates.sort((a, b)=>b.priority - a.priority);
        this._startShowingAt(anchorCandidates[0], 0 /* Delayed */ , false);
        return true;
    }
    _showAt(position, range, focus) {
        // Position has changed
        this._showAtPosition = position;
        this._showAtRange = range;
        this._hoverVisibleKey.set(true);
        this._isVisible = true;
        this._hover.containerDomNode.classList.toggle("hidden", !this._isVisible);
        this._editor.layoutContentWidget(this);
        // Simply force a synchronous render on the editor
        // such that the widget does not really render with left = '0px'
        this._editor.render();
        this._stoleFocus = focus;
        if (focus) this._hover.containerDomNode.focus();
    }
    getPosition() {
        if (this._isVisible) {
            let preferAbove = this._preferAbove;
            if (!preferAbove && this._contextKeyService.getContextKeyValue((0, $abf46e0ea17ab20d$exports.Context).Visible.key)) // Prefer rendering above if the suggest widget is visible
            preferAbove = true;
            return {
                position: this._showAtPosition,
                range: this._showAtRange,
                preference: preferAbove ? [
                    1 /* ABOVE */ ,
                    2 /* BELOW */ , 
                ] : [
                    2 /* BELOW */ ,
                    1 /* ABOVE */ , 
                ]
            };
        }
        return null;
    }
    _updateFont() {
        const codeClasses = Array.prototype.slice.call(this._hover.contentsDomNode.getElementsByClassName("code"));
        codeClasses.forEach((node)=>this._editor.applyFontInfo(node));
    }
    _updateContents(node) {
        this._hover.contentsDomNode.textContent = "";
        this._hover.contentsDomNode.appendChild(node);
        this._updateFont();
        this._editor.layoutContentWidget(this);
        this._hover.onContentsChanged();
    }
    layout() {
        const height = Math.max(this._editor.getLayoutInfo().height / 4, 250);
        const { fontSize: fontSize , lineHeight: lineHeight  } = this._editor.getOption(43 /* fontInfo */ );
        this._hover.contentsDomNode.style.fontSize = `${fontSize}px`;
        this._hover.contentsDomNode.style.lineHeight = `${lineHeight / fontSize}`;
        this._hover.contentsDomNode.style.maxHeight = `${height}px`;
        this._hover.contentsDomNode.style.maxWidth = `${Math.max(this._editor.getLayoutInfo().width * 0.66, 500)}px`;
    }
    onModelDecorationsChanged() {
        if (this._isChangingDecorations) return;
        if (this._isVisible) {
            // The decorations have changed and the hover is visible,
            // we need to recompute the displayed text
            this._hoverOperation.cancel();
            this._computer.clearResult();
            if (!this._colorPicker) this._hoverOperation.start(0 /* Delayed */ );
        }
    }
    startShowingAtRange(range, mode, focus) {
        this._startShowingAt(new (0, $2c285531b7bd0e5c$export$2a967524099ecc2c)(0, range), mode, focus);
    }
    _startShowingAt(anchor, mode, focus) {
        if (this._lastAnchor && this._lastAnchor.equals(anchor)) // We have to show the widget at the exact same range as before, so no work is needed
        return;
        this._hoverOperation.cancel();
        if (this._isVisible) {
            // The range might have changed, but the hover is visible
            // Instead of hiding it completely, filter out messages that are still in the new range and
            // kick off a new computation
            if (!this._showAtPosition || !this._lastAnchor || !anchor.canAdoptVisibleHover(this._lastAnchor, this._showAtPosition)) this.hide();
            else {
                const filteredMessages = this._messages.filter((m)=>m.isValidForHoverAnchor(anchor));
                if (filteredMessages.length === 0) this.hide();
                else if (filteredMessages.length === this._messages.length && this._messagesAreComplete) // no change
                return;
                else this._renderMessages(anchor, filteredMessages);
            }
        }
        this._lastAnchor = anchor;
        this._computer.setAnchor(anchor);
        this._shouldFocus = focus;
        this._hoverOperation.start(mode);
    }
    hide() {
        this._lastAnchor = null;
        this._hoverOperation.cancel();
        if (this._isVisible) {
            setTimeout(()=>{
                // Give commands a chance to see the key
                if (!this._isVisible) this._hoverVisibleKey.set(false);
            }, 0);
            this._isVisible = false;
            this._hover.containerDomNode.classList.toggle("hidden", !this._isVisible);
            this._editor.layoutContentWidget(this);
            if (this._stoleFocus) this._editor.focus();
        }
        this._isChangingDecorations = true;
        this._highlightDecorations = this._editor.deltaDecorations(this._highlightDecorations, []);
        this._isChangingDecorations = false;
        if (this._renderDisposable) {
            this._renderDisposable.dispose();
            this._renderDisposable = null;
        }
        this._colorPicker = null;
    }
    isColorPickerVisible() {
        return !!this._colorPicker;
    }
    setColorPicker(widget) {
        this._colorPicker = widget;
    }
    onContentsChanged() {
        this._hover.onContentsChanged();
    }
    _withResult(result, complete) {
        this._messages = result;
        this._messagesAreComplete = complete;
        if (this._lastAnchor && this._messages.length > 0) this._renderMessages(this._lastAnchor, this._messages);
        else if (complete) this.hide();
    }
    _renderMessages(anchor, messages) {
        if (this._renderDisposable) {
            this._renderDisposable.dispose();
            this._renderDisposable = null;
        }
        this._colorPicker = null; // TODO: TypeScript thinks this is always null
        // update column from which to show
        let renderColumn = 1073741824 /* MAX_SAFE_SMALL_INTEGER */ ;
        let highlightRange = messages[0].range;
        let forceShowAtRange = null;
        let fragment = document.createDocumentFragment();
        const disposables = new (0, $atiRx.DisposableStore)();
        const hoverParts = new Map();
        for (const msg of messages){
            renderColumn = Math.min(renderColumn, msg.range.startColumn);
            highlightRange = (0, $3HpR4.Range).plusRange(highlightRange, msg.range);
            if (msg.forceShowAtRange) forceShowAtRange = msg.range;
            if (!hoverParts.has(msg.owner)) hoverParts.set(msg.owner, []);
            const dest = hoverParts.get(msg.owner);
            dest.push(msg);
        }
        const statusBar = disposables.add(new $8c7ecbfaaee4ac63$var$EditorHoverStatusBar(this._keybindingService));
        for (const participant of this._participants)if (hoverParts.has(participant)) {
            const participantHoverParts = hoverParts.get(participant);
            disposables.add(participant.renderHoverParts(participantHoverParts, fragment, statusBar));
        }
        if (statusBar.hasContent) fragment.appendChild(statusBar.hoverElement);
        this._renderDisposable = disposables;
        // show
        if (fragment.hasChildNodes()) {
            if (forceShowAtRange) this._showAt(forceShowAtRange.getStartPosition(), forceShowAtRange, this._shouldFocus);
            else this._showAt(new (0, $8qXsZ.Position)(anchor.range.startLineNumber, renderColumn), highlightRange, this._shouldFocus);
            this._updateContents(fragment);
        }
        if (this._colorPicker) this._colorPicker.layout();
        this._isChangingDecorations = true;
        this._highlightDecorations = this._editor.deltaDecorations(this._highlightDecorations, highlightRange ? [
            {
                range: highlightRange,
                options: ModesContentHoverWidget._DECORATION_OPTIONS
            }
        ] : []);
        this._isChangingDecorations = false;
    }
    constructor(editor, _hoverVisibleKey, instantiationService, _keybindingService, _contextKeyService){
        super();
        this._hoverVisibleKey = _hoverVisibleKey;
        this._keybindingService = _keybindingService;
        this._contextKeyService = _contextKeyService;
        // IContentWidget.allowEditorOverflow
        this.allowEditorOverflow = true;
        this._participants = [
            instantiationService.createInstance((0, $3c464a16db535c4c$exports.ColorHoverParticipant), editor, this),
            instantiationService.createInstance((0, $4c95ce6e2b4515d4$exports.MarkdownHoverParticipant), editor, this),
            instantiationService.createInstance((0, $c19e865ca7e97982$exports.InlineCompletionsHoverParticipant), editor, this),
            instantiationService.createInstance((0, $54fbd29620c47e8e$exports.UnicodeHighlighterHoverParticipant), editor, this),
            instantiationService.createInstance((0, $d4aad6bd92374522$exports.MarkerHoverParticipant), editor, this), 
        ];
        this._editor = editor;
        this._isVisible = false;
        this._stoleFocus = false;
        this._renderDisposable = null;
        this._hover = this._register(new (0, $685f6eb996bf9e24$export$bd9cbe052e594410)());
        this._hover.containerDomNode.classList.toggle("hidden", !this._isVisible);
        this.onkeydown(this._hover.containerDomNode, (e)=>{
            if (e.equals(9 /* Escape */ )) this.hide();
        });
        this._register(this._editor.onDidChangeConfiguration((e)=>{
            if (e.hasChanged(43 /* fontInfo */ )) this._updateFont();
        }));
        this._editor.onDidLayoutChange(()=>this.layout());
        this.layout();
        this._editor.addContentWidget(this);
        this._showAtPosition = null;
        this._showAtRange = null;
        this._stoleFocus = false;
        this._messages = [];
        this._messagesAreComplete = false;
        this._lastAnchor = null;
        this._computer = new $8c7ecbfaaee4ac63$var$ModesContentComputer(this._editor, this._participants);
        this._highlightDecorations = [];
        this._isChangingDecorations = false;
        this._shouldFocus = false;
        this._colorPicker = null;
        this._preferAbove = this._editor.getOption(52 /* hover */ ).above;
        this._hoverOperation = new (0, $53b7605684860f54$exports.HoverOperation)(this._computer, (result)=>this._withResult(result, true), null, (result)=>this._withResult(result, false), this._editor.getOption(52 /* hover */ ).delay);
        this._register($jOYcd.addStandardDisposableListener(this.getDomNode(), $jOYcd.EventType.FOCUS, ()=>{
            if (this._colorPicker) this.getDomNode().classList.add("colorpicker-hover");
        }));
        this._register($jOYcd.addStandardDisposableListener(this.getDomNode(), $jOYcd.EventType.BLUR, ()=>{
            this.getDomNode().classList.remove("colorpicker-hover");
        }));
        this._register(editor.onDidChangeConfiguration(()=>{
            this._hoverOperation.setHoverTime(this._editor.getOption(52 /* hover */ ).delay);
            this._preferAbove = this._editor.getOption(52 /* hover */ ).above;
        }));
        this._register((0, $eKhCe.TokenizationRegistry).onDidChange(()=>{
            if (this._isVisible && this._lastAnchor && this._messages.length > 0) {
                this._hover.contentsDomNode.textContent = "";
                this._renderMessages(this._lastAnchor, this._messages);
            }
        }));
    }
};
$8c7ecbfaaee4ac63$export$27477712c6ad8b14.ID = "editor.contrib.modesContentHoverWidget";
$8c7ecbfaaee4ac63$export$27477712c6ad8b14._DECORATION_OPTIONS = (0, $g88WD.ModelDecorationOptions).register({
    description: "content-hover-highlight",
    className: "hoverHighlight"
});
$8c7ecbfaaee4ac63$export$27477712c6ad8b14 = $8c7ecbfaaee4ac63$var$__decorate([
    $8c7ecbfaaee4ac63$var$__param(2, (0, $iZW67.IInstantiationService)),
    $8c7ecbfaaee4ac63$var$__param(3, (0, $gY9wc.IKeybindingService)),
    $8c7ecbfaaee4ac63$var$__param(4, (0, $bRtox.IContextKeyService))
], $8c7ecbfaaee4ac63$export$27477712c6ad8b14);



var $jOYcd = parcelRequire("jOYcd");

var $4xCD7 = parcelRequire("4xCD7");

var $chTln = parcelRequire("chTln");

var $atiRx = parcelRequire("atiRx");



var $5Bh2C = parcelRequire("5Bh2C");

var $9KRmt = parcelRequire("9KRmt");

const $07405203002934bd$var$$ = $jOYcd.$;
class $07405203002934bd$var$MarginComputer {
    setLineNumber(lineNumber) {
        this._lineNumber = lineNumber;
        this._result = [];
    }
    clearResult() {
        this._result = [];
    }
    computeSync() {
        const toHoverMessage = (contents)=>{
            return {
                value: contents
            };
        };
        const lineDecorations = this._editor.getLineDecorations(this._lineNumber);
        const result = [];
        if (!lineDecorations) return result;
        for (const d of lineDecorations){
            if (!d.options.glyphMarginClassName) continue;
            const hoverMessage = d.options.glyphMarginHoverMessage;
            if (!hoverMessage || (0, $chTln.isEmptyMarkdownString)(hoverMessage)) continue;
            result.push(...(0, $4xCD7.asArray)(hoverMessage).map(toHoverMessage));
        }
        return result;
    }
    onResult(result, isFromSynchronousComputation) {
        this._result = this._result.concat(result);
    }
    getResult() {
        return this._result;
    }
    getResultWithLoadingMessage() {
        return this.getResult();
    }
    constructor(editor){
        this._editor = editor;
        this._lineNumber = -1;
        this._result = [];
    }
}
class $07405203002934bd$export$5b5b89fc3da37c5f extends (0, $5Bh2C.Widget) {
    dispose() {
        this._hoverOperation.cancel();
        this._editor.removeOverlayWidget(this);
        super.dispose();
    }
    getId() {
        return $07405203002934bd$export$5b5b89fc3da37c5f.ID;
    }
    getDomNode() {
        return this._hover.containerDomNode;
    }
    getPosition() {
        return null;
    }
    _showAt(lineNumber) {
        if (!this._isVisible) {
            this._isVisible = true;
            this._hover.containerDomNode.classList.toggle("hidden", !this._isVisible);
        }
        const editorLayout = this._editor.getLayoutInfo();
        const topForLineNumber = this._editor.getTopForLineNumber(lineNumber);
        const editorScrollTop = this._editor.getScrollTop();
        const lineHeight = this._editor.getOption(58 /* lineHeight */ );
        const nodeHeight = this._hover.containerDomNode.clientHeight;
        const top = topForLineNumber - editorScrollTop - (nodeHeight - lineHeight) / 2;
        this._hover.containerDomNode.style.left = `${editorLayout.glyphMarginLeft + editorLayout.glyphMarginWidth}px`;
        this._hover.containerDomNode.style.top = `${Math.max(Math.round(top), 0)}px`;
    }
    _updateFont() {
        const codeClasses = Array.prototype.slice.call(this._hover.contentsDomNode.getElementsByClassName("code"));
        codeClasses.forEach((node)=>this._editor.applyFontInfo(node));
    }
    _updateContents(node) {
        this._hover.contentsDomNode.textContent = "";
        this._hover.contentsDomNode.appendChild(node);
        this._updateFont();
    }
    onModelDecorationsChanged() {
        if (this._isVisible) {
            // The decorations have changed and the hover is visible,
            // we need to recompute the displayed text
            this._hoverOperation.cancel();
            this._computer.clearResult();
            this._hoverOperation.start(0 /* Delayed */ );
        }
    }
    startShowingAt(lineNumber) {
        if (this._lastLineNumber === lineNumber) // We have to show the widget at the exact same line number as before, so no work is needed
        return;
        this._hoverOperation.cancel();
        this.hide();
        this._lastLineNumber = lineNumber;
        this._computer.setLineNumber(lineNumber);
        this._hoverOperation.start(0 /* Delayed */ );
    }
    hide() {
        this._lastLineNumber = -1;
        this._hoverOperation.cancel();
        if (!this._isVisible) return;
        this._isVisible = false;
        this._hover.containerDomNode.classList.toggle("hidden", !this._isVisible);
    }
    _withResult(result) {
        this._messages = result;
        if (this._messages.length > 0) this._renderMessages(this._lastLineNumber, this._messages);
        else this.hide();
    }
    _renderMessages(lineNumber, messages) {
        this._renderDisposeables.clear();
        const fragment = document.createDocumentFragment();
        for (const msg of messages){
            const markdownHoverElement = $07405203002934bd$var$$("div.hover-row.markdown-hover");
            const hoverContentsElement = $jOYcd.append(markdownHoverElement, $07405203002934bd$var$$("div.hover-contents"));
            const renderedContents = this._renderDisposeables.add(this._markdownRenderer.render(msg.value));
            hoverContentsElement.appendChild(renderedContents.element);
            fragment.appendChild(markdownHoverElement);
        }
        this._updateContents(fragment);
        this._showAt(lineNumber);
    }
    constructor(editor, modeService, openerService = (0, $9KRmt.NullOpenerService)){
        super();
        this._renderDisposeables = this._register(new (0, $atiRx.DisposableStore)());
        this._editor = editor;
        this._isVisible = false;
        this._messages = [];
        this._lastLineNumber = -1;
        this._hover = this._register(new (0, $685f6eb996bf9e24$export$bd9cbe052e594410)());
        this._hover.containerDomNode.classList.toggle("hidden", !this._isVisible);
        this._markdownRenderer = this._register(new (0, $ead540c899f453a8$exports.MarkdownRenderer)({
            editor: this._editor
        }, modeService, openerService));
        this._computer = new $07405203002934bd$var$MarginComputer(this._editor);
        this._hoverOperation = new (0, $53b7605684860f54$exports.HoverOperation)(this._computer, (result)=>this._withResult(result), undefined, (result)=>this._withResult(result), 300);
        this._register(this._editor.onDidChangeConfiguration((e)=>{
            if (e.hasChanged(43 /* fontInfo */ )) this._updateFont();
        }));
        this._editor.addOverlayWidget(this);
    }
}
$07405203002934bd$export$5b5b89fc3da37c5f.ID = "editor.contrib.modesGlyphHoverWidget";



var $58WHl = parcelRequire("58WHl");

var $bRtox = parcelRequire("bRtox");

var $iZW67 = parcelRequire("iZW67");

var $9KRmt = parcelRequire("9KRmt");

var $3XYy8 = parcelRequire("3XYy8");

var $fUTzO = parcelRequire("fUTzO");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $b90e09b07616b8ec$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $b90e09b07616b8ec$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
let $b90e09b07616b8ec$export$5fb2eabf73ef0293 = class ModesHoverController {
    static get(editor) {
        return editor.getContribution(ModesHoverController.ID);
    }
    _hookEvents() {
        const hideWidgetsEventHandler = ()=>this._hideWidgets();
        const hoverOpts = this._editor.getOption(52 /* hover */ );
        this._isHoverEnabled = hoverOpts.enabled;
        this._isHoverSticky = hoverOpts.sticky;
        if (this._isHoverEnabled) {
            this._toUnhook.add(this._editor.onMouseDown((e)=>this._onEditorMouseDown(e)));
            this._toUnhook.add(this._editor.onMouseUp((e)=>this._onEditorMouseUp(e)));
            this._toUnhook.add(this._editor.onMouseMove((e)=>this._onEditorMouseMove(e)));
            this._toUnhook.add(this._editor.onKeyDown((e)=>this._onKeyDown(e)));
            this._toUnhook.add(this._editor.onDidChangeModelDecorations(()=>this._onModelDecorationsChanged()));
        } else {
            this._toUnhook.add(this._editor.onMouseMove((e)=>this._onEditorMouseMove(e)));
            this._toUnhook.add(this._editor.onKeyDown((e)=>this._onKeyDown(e)));
        }
        this._toUnhook.add(this._editor.onMouseLeave(hideWidgetsEventHandler));
        this._toUnhook.add(this._editor.onDidChangeModel(hideWidgetsEventHandler));
        this._toUnhook.add(this._editor.onDidScrollChange((e)=>this._onEditorScrollChanged(e)));
    }
    _unhookEvents() {
        this._toUnhook.clear();
    }
    _onModelDecorationsChanged() {
        var _a, _b;
        (_a = this._contentWidget) === null || _a === void 0 || _a.onModelDecorationsChanged();
        (_b = this._glyphWidget) === null || _b === void 0 || _b.onModelDecorationsChanged();
    }
    _onEditorScrollChanged(e) {
        if (e.scrollTopChanged || e.scrollLeftChanged) this._hideWidgets();
    }
    _onEditorMouseDown(mouseEvent) {
        this._isMouseDown = true;
        const targetType = mouseEvent.target.type;
        if (targetType === 9 /* CONTENT_WIDGET */  && mouseEvent.target.detail === (0, $8c7ecbfaaee4ac63$exports.ModesContentHoverWidget).ID) {
            this._hoverClicked = true;
            // mouse down on top of content hover widget
            return;
        }
        if (targetType === 12 /* OVERLAY_WIDGET */  && mouseEvent.target.detail === (0, $07405203002934bd$export$5b5b89fc3da37c5f).ID) // mouse down on top of overlay hover widget
        return;
        if (targetType !== 12 /* OVERLAY_WIDGET */  && mouseEvent.target.detail !== (0, $07405203002934bd$export$5b5b89fc3da37c5f).ID) this._hoverClicked = false;
        this._hideWidgets();
    }
    _onEditorMouseUp(mouseEvent) {
        this._isMouseDown = false;
    }
    _onEditorMouseMove(mouseEvent) {
        var _a, _b, _c, _d, _e;
        let targetType = mouseEvent.target.type;
        if (this._isMouseDown && this._hoverClicked) return;
        if (this._isHoverSticky && targetType === 9 /* CONTENT_WIDGET */  && mouseEvent.target.detail === (0, $8c7ecbfaaee4ac63$exports.ModesContentHoverWidget).ID) // mouse moved on top of content hover widget
        return;
        if (this._isHoverSticky && !((_b = (_a = mouseEvent.event.browserEvent.view) === null || _a === void 0 ? void 0 : _a.getSelection()) === null || _b === void 0 ? void 0 : _b.isCollapsed)) // selected text within content hover widget
        return;
        if (!this._isHoverSticky && targetType === 9 /* CONTENT_WIDGET */  && mouseEvent.target.detail === (0, $8c7ecbfaaee4ac63$exports.ModesContentHoverWidget).ID && ((_c = this._contentWidget) === null || _c === void 0 ? void 0 : _c.isColorPickerVisible())) // though the hover is not sticky, the color picker needs to.
        return;
        if (this._isHoverSticky && targetType === 12 /* OVERLAY_WIDGET */  && mouseEvent.target.detail === (0, $07405203002934bd$export$5b5b89fc3da37c5f).ID) // mouse moved on top of overlay hover widget
        return;
        if (!this._isHoverEnabled) {
            this._hideWidgets();
            return;
        }
        const contentWidget = this._getOrCreateContentWidget();
        if (contentWidget.maybeShowAt(mouseEvent)) {
            (_d = this._glyphWidget) === null || _d === void 0 || _d.hide();
            return;
        }
        if (targetType === 2 /* GUTTER_GLYPH_MARGIN */  && mouseEvent.target.position) {
            (_e = this._contentWidget) === null || _e === void 0 || _e.hide();
            if (!this._glyphWidget) this._glyphWidget = new (0, $07405203002934bd$export$5b5b89fc3da37c5f)(this._editor, this._modeService, this._openerService);
            this._glyphWidget.startShowingAt(mouseEvent.target.position.lineNumber);
            return;
        }
        this._hideWidgets();
    }
    _onKeyDown(e) {
        if (e.keyCode !== 5 /* Ctrl */  && e.keyCode !== 6 /* Alt */  && e.keyCode !== 57 /* Meta */  && e.keyCode !== 4 /* Shift */ ) // Do not hide hover when a modifier key is pressed
        this._hideWidgets();
    }
    _hideWidgets() {
        var _a, _b, _c;
        if (this._isMouseDown && this._hoverClicked && ((_a = this._contentWidget) === null || _a === void 0 ? void 0 : _a.isColorPickerVisible())) return;
        this._hoverClicked = false;
        (_b = this._glyphWidget) === null || _b === void 0 || _b.hide();
        (_c = this._contentWidget) === null || _c === void 0 || _c.hide();
    }
    _getOrCreateContentWidget() {
        if (!this._contentWidget) this._contentWidget = this._instantiationService.createInstance((0, $8c7ecbfaaee4ac63$exports.ModesContentHoverWidget), this._editor, this._hoverVisibleKey);
        return this._contentWidget;
    }
    isColorPickerVisible() {
        var _a;
        return ((_a = this._contentWidget) === null || _a === void 0 ? void 0 : _a.isColorPickerVisible()) || false;
    }
    showContentHover(range, mode, focus) {
        this._getOrCreateContentWidget().startShowingAtRange(range, mode, focus);
    }
    dispose() {
        var _a, _b;
        this._unhookEvents();
        this._toUnhook.dispose();
        this._didChangeConfigurationHandler.dispose();
        (_a = this._glyphWidget) === null || _a === void 0 || _a.dispose();
        (_b = this._contentWidget) === null || _b === void 0 || _b.dispose();
    }
    constructor(_editor, _instantiationService, _openerService, _modeService, _contextKeyService){
        this._editor = _editor;
        this._instantiationService = _instantiationService;
        this._openerService = _openerService;
        this._modeService = _modeService;
        this._toUnhook = new (0, $atiRx.DisposableStore)();
        this._isMouseDown = false;
        this._hoverClicked = false;
        this._contentWidget = null;
        this._glyphWidget = null;
        this._hookEvents();
        this._didChangeConfigurationHandler = this._editor.onDidChangeConfiguration((e)=>{
            if (e.hasChanged(52 /* hover */ )) {
                this._unhookEvents();
                this._hookEvents();
            }
        });
        this._hoverVisibleKey = (0, $bdLce.EditorContextKeys).hoverVisible.bindTo(_contextKeyService);
    }
};
$b90e09b07616b8ec$export$5fb2eabf73ef0293.ID = "editor.contrib.hover";
$b90e09b07616b8ec$export$5fb2eabf73ef0293 = $b90e09b07616b8ec$var$__decorate([
    $b90e09b07616b8ec$var$__param(1, (0, $iZW67.IInstantiationService)),
    $b90e09b07616b8ec$var$__param(2, (0, $9KRmt.IOpenerService)),
    $b90e09b07616b8ec$var$__param(3, (0, $6o4cZ.IModeService)),
    $b90e09b07616b8ec$var$__param(4, (0, $bRtox.IContextKeyService))
], $b90e09b07616b8ec$export$5fb2eabf73ef0293);
class $b90e09b07616b8ec$var$ShowHoverAction extends (0, $gGOeQ.EditorAction) {
    run(accessor, editor) {
        if (!editor.hasModel()) return;
        let controller = $b90e09b07616b8ec$export$5fb2eabf73ef0293.get(editor);
        if (!controller) return;
        const position = editor.getPosition();
        const range = new (0, $3HpR4.Range)(position.lineNumber, position.column, position.lineNumber, position.column);
        const focus = editor.getOption(2 /* accessibilitySupport */ ) === 2 /* Enabled */ ;
        controller.showContentHover(range, 1 /* Immediate */ , focus);
    }
    constructor(){
        super({
            id: "editor.action.showHover",
            label: $58WHl.localize({
                key: "showHover",
                comment: [
                    "Label for action that will trigger the showing of a hover in the editor.",
                    "This allows for users to show the hover without using the mouse."
                ]
            }, "Show Hover"),
            alias: "Show Hover",
            precondition: undefined,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: (0, $fQtIR.KeyChord)(2089 /* KeyK */ , 2087 /* KeyI */ ),
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
class $b90e09b07616b8ec$var$ShowDefinitionPreviewHoverAction extends (0, $gGOeQ.EditorAction) {
    run(accessor, editor) {
        let controller = $b90e09b07616b8ec$export$5fb2eabf73ef0293.get(editor);
        if (!controller) return;
        const position = editor.getPosition();
        if (!position) return;
        const range = new (0, $3HpR4.Range)(position.lineNumber, position.column, position.lineNumber, position.column);
        const goto = (0, $0c5c4a66d5e29ecc$exports.GotoDefinitionAtPositionEditorContribution).get(editor);
        const promise = goto.startFindDefinitionFromCursor(position);
        promise.then(()=>{
            controller.showContentHover(range, 1 /* Immediate */ , true);
        });
    }
    constructor(){
        super({
            id: "editor.action.showDefinitionPreviewHover",
            label: $58WHl.localize({
                key: "showDefinitionPreviewHover",
                comment: [
                    "Label for action that will trigger the showing of definition preview hover in the editor.",
                    "This allows for users to show the definition preview hover without using the mouse."
                ]
            }, "Show Definition Preview Hover"),
            alias: "Show Definition Preview Hover",
            precondition: undefined
        });
    }
}
(0, $gGOeQ.registerEditorContribution)($b90e09b07616b8ec$export$5fb2eabf73ef0293.ID, $b90e09b07616b8ec$export$5fb2eabf73ef0293);
(0, $gGOeQ.registerEditorAction)($b90e09b07616b8ec$var$ShowHoverAction);
(0, $gGOeQ.registerEditorAction)($b90e09b07616b8ec$var$ShowDefinitionPreviewHoverAction);
// theming
(0, $fUTzO.registerThemingParticipant)((theme, collector)=>{
    const editorHoverHighlightColor = theme.getColor((0, $3XYy8.editorHoverHighlight));
    if (editorHoverHighlightColor) collector.addRule(`.monaco-editor .hoverHighlight { background-color: ${editorHoverHighlightColor}; }`);
    const hoverBackground = theme.getColor((0, $3XYy8.editorHoverBackground));
    if (hoverBackground) collector.addRule(`.monaco-editor .monaco-hover { background-color: ${hoverBackground}; }`);
    const hoverBorder = theme.getColor((0, $3XYy8.editorHoverBorder));
    if (hoverBorder) {
        collector.addRule(`.monaco-editor .monaco-hover { border: 1px solid ${hoverBorder}; }`);
        collector.addRule(`.monaco-editor .monaco-hover .hover-row:not(:first-child):not(:empty) { border-top: 1px solid ${hoverBorder.transparent(0.5)}; }`);
        collector.addRule(`.monaco-editor .monaco-hover hr { border-top: 1px solid ${hoverBorder.transparent(0.5)}; }`);
        collector.addRule(`.monaco-editor .monaco-hover hr { border-bottom: 0px solid ${hoverBorder.transparent(0.5)}; }`);
    }
    const link = theme.getColor((0, $3XYy8.textLinkForeground));
    if (link) collector.addRule(`.monaco-editor .monaco-hover a { color: ${link}; }`);
    const linkHover = theme.getColor((0, $3XYy8.textLinkActiveForeground));
    if (linkHover) collector.addRule(`.monaco-editor .monaco-hover a:hover { color: ${linkHover}; }`);
    const hoverForeground = theme.getColor((0, $3XYy8.editorHoverForeground));
    if (hoverForeground) collector.addRule(`.monaco-editor .monaco-hover { color: ${hoverForeground}; }`);
    const actionsBackground = theme.getColor((0, $3XYy8.editorHoverStatusBarBackground));
    if (actionsBackground) collector.addRule(`.monaco-editor .monaco-hover .hover-row .actions { background-color: ${actionsBackground}; }`);
    const codeBackground = theme.getColor((0, $3XYy8.textCodeBlockBackground));
    if (codeBackground) collector.addRule(`.monaco-editor .monaco-hover code { background-color: ${codeBackground}; }`);
});


class $9221d92cfa0f22e7$export$207d84fc3451c066 extends (0, $atiRx.Disposable) {
    dispose() {
        super.dispose();
    }
    onMouseDown(mouseEvent) {
        var _a;
        const targetType = mouseEvent.target.type;
        if (targetType !== 6 /* CONTENT_TEXT */ ) return;
        const hoverOnColorDecorator = [
            ...((_a = mouseEvent.target.element) === null || _a === void 0 ? void 0 : _a.classList.values()) || []
        ].find((className)=>className.startsWith("ced-colorBox"));
        if (!hoverOnColorDecorator) return;
        if (!mouseEvent.target.range) return;
        const hoverController = this._editor.getContribution((0, $b90e09b07616b8ec$exports.ModesHoverController).ID);
        if (!hoverController.isColorPickerVisible()) {
            const range = new (0, $3HpR4.Range)(mouseEvent.target.range.startLineNumber, mouseEvent.target.range.startColumn + 1, mouseEvent.target.range.endLineNumber, mouseEvent.target.range.endColumn + 1);
            hoverController.showContentHover(range, 0 /* Delayed */ , false);
        }
    }
    constructor(_editor){
        super();
        this._editor = _editor;
        this._register(_editor.onMouseDown((e)=>this.onMouseDown(e)));
    }
}
$9221d92cfa0f22e7$export$207d84fc3451c066.ID = "editor.contrib.colorContribution"; // ms
(0, $gGOeQ.registerEditorContribution)($9221d92cfa0f22e7$export$207d84fc3451c066.ID, $9221d92cfa0f22e7$export$207d84fc3451c066);



var $fQtIR = parcelRequire("fQtIR");

var $gGOeQ = parcelRequire("gGOeQ");

var $3HpR4 = parcelRequire("3HpR4");

var $bdLce = parcelRequire("bdLce");

var $13fPA = parcelRequire("13fPA");

var $8qXsZ = parcelRequire("8qXsZ");

var $3HpR4 = parcelRequire("3HpR4");

var $cz0c7 = parcelRequire("cz0c7");

var $9wt9e = parcelRequire("9wt9e");
class $c22621819bc6f51c$export$889a1441dfb5fa88 {
    static _haystackHasNeedleAtOffset(haystack, needle, offset) {
        if (offset < 0) return false;
        const needleLength = needle.length;
        const haystackLength = haystack.length;
        if (offset + needleLength > haystackLength) return false;
        for(let i = 0; i < needleLength; i++){
            const codeA = haystack.charCodeAt(offset + i);
            const codeB = needle.charCodeAt(i);
            if (codeA === codeB) continue;
            if (codeA >= 65 /* A */  && codeA <= 90 /* Z */  && codeA + 32 === codeB) continue;
            if (codeB >= 65 /* A */  && codeB <= 90 /* Z */  && codeB + 32 === codeA) continue;
            return false;
        }
        return true;
    }
    _createOperationsForBlockComment(selection, startToken, endToken, insertSpace, model, builder) {
        const startLineNumber = selection.startLineNumber;
        const startColumn = selection.startColumn;
        const endLineNumber = selection.endLineNumber;
        const endColumn = selection.endColumn;
        const startLineText = model.getLineContent(startLineNumber);
        const endLineText = model.getLineContent(endLineNumber);
        let startTokenIndex = startLineText.lastIndexOf(startToken, startColumn - 1 + startToken.length);
        let endTokenIndex = endLineText.indexOf(endToken, endColumn - 1 - endToken.length);
        if (startTokenIndex !== -1 && endTokenIndex !== -1) {
            if (startLineNumber === endLineNumber) {
                const lineBetweenTokens = startLineText.substring(startTokenIndex + startToken.length, endTokenIndex);
                if (lineBetweenTokens.indexOf(endToken) >= 0) {
                    // force to add a block comment
                    startTokenIndex = -1;
                    endTokenIndex = -1;
                }
            } else {
                const startLineAfterStartToken = startLineText.substring(startTokenIndex + startToken.length);
                const endLineBeforeEndToken = endLineText.substring(0, endTokenIndex);
                if (startLineAfterStartToken.indexOf(endToken) >= 0 || endLineBeforeEndToken.indexOf(endToken) >= 0) {
                    // force to add a block comment
                    startTokenIndex = -1;
                    endTokenIndex = -1;
                }
            }
        }
        let ops;
        if (startTokenIndex !== -1 && endTokenIndex !== -1) {
            // Consider spaces as part of the comment tokens
            if (insertSpace && startTokenIndex + startToken.length < startLineText.length && startLineText.charCodeAt(startTokenIndex + startToken.length) === 32 /* Space */ ) // Pretend the start token contains a trailing space
            startToken = startToken + " ";
            if (insertSpace && endTokenIndex > 0 && endLineText.charCodeAt(endTokenIndex - 1) === 32 /* Space */ ) {
                // Pretend the end token contains a leading space
                endToken = " " + endToken;
                endTokenIndex -= 1;
            }
            ops = $c22621819bc6f51c$export$889a1441dfb5fa88._createRemoveBlockCommentOperations(new (0, $3HpR4.Range)(startLineNumber, startTokenIndex + startToken.length + 1, endLineNumber, endTokenIndex + 1), startToken, endToken);
        } else {
            ops = $c22621819bc6f51c$export$889a1441dfb5fa88._createAddBlockCommentOperations(selection, startToken, endToken, this._insertSpace);
            this._usedEndToken = ops.length === 1 ? endToken : null;
        }
        for (const op of ops)builder.addTrackedEditOperation(op.range, op.text);
    }
    static _createRemoveBlockCommentOperations(r, startToken, endToken) {
        let res = [];
        if (!(0, $3HpR4.Range).isEmpty(r)) {
            // Remove block comment start
            res.push((0, $13fPA.EditOperation).delete(new (0, $3HpR4.Range)(r.startLineNumber, r.startColumn - startToken.length, r.startLineNumber, r.startColumn)));
            // Remove block comment end
            res.push((0, $13fPA.EditOperation).delete(new (0, $3HpR4.Range)(r.endLineNumber, r.endColumn, r.endLineNumber, r.endColumn + endToken.length)));
        } else // Remove both continuously
        res.push((0, $13fPA.EditOperation).delete(new (0, $3HpR4.Range)(r.startLineNumber, r.startColumn - startToken.length, r.endLineNumber, r.endColumn + endToken.length)));
        return res;
    }
    static _createAddBlockCommentOperations(r, startToken, endToken, insertSpace) {
        let res = [];
        if (!(0, $3HpR4.Range).isEmpty(r)) {
            // Insert block comment start
            res.push((0, $13fPA.EditOperation).insert(new (0, $8qXsZ.Position)(r.startLineNumber, r.startColumn), startToken + (insertSpace ? " " : "")));
            // Insert block comment end
            res.push((0, $13fPA.EditOperation).insert(new (0, $8qXsZ.Position)(r.endLineNumber, r.endColumn), (insertSpace ? " " : "") + endToken));
        } else // Insert both continuously
        res.push((0, $13fPA.EditOperation).replace(new (0, $3HpR4.Range)(r.startLineNumber, r.startColumn, r.endLineNumber, r.endColumn), startToken + "  " + endToken));
        return res;
    }
    getEditOperations(model, builder) {
        const startLineNumber = this._selection.startLineNumber;
        const startColumn = this._selection.startColumn;
        model.tokenizeIfCheap(startLineNumber);
        const languageId = model.getLanguageIdAtPosition(startLineNumber, startColumn);
        const config = (0, $9wt9e.LanguageConfigurationRegistry).getComments(languageId);
        if (!config || !config.blockCommentStartToken || !config.blockCommentEndToken) // Mode does not support block comments
        return;
        this._createOperationsForBlockComment(this._selection, config.blockCommentStartToken, config.blockCommentEndToken, this._insertSpace, model, builder);
    }
    computeCursorState(model, helper) {
        const inverseEditOperations = helper.getInverseEditOperations();
        if (inverseEditOperations.length === 2) {
            const startTokenEditOperation = inverseEditOperations[0];
            const endTokenEditOperation = inverseEditOperations[1];
            return new (0, $cz0c7.Selection)(startTokenEditOperation.range.endLineNumber, startTokenEditOperation.range.endColumn, endTokenEditOperation.range.startLineNumber, endTokenEditOperation.range.startColumn);
        } else {
            const srcRange = inverseEditOperations[0].range;
            const deltaColumn = this._usedEndToken ? -this._usedEndToken.length - 1 : 0; // minus 1 space before endToken
            return new (0, $cz0c7.Selection)(srcRange.endLineNumber, srcRange.endColumn + deltaColumn, srcRange.endLineNumber, srcRange.endColumn + deltaColumn);
        }
    }
    constructor(selection, insertSpace){
        this._selection = selection;
        this._insertSpace = insertSpace;
        this._usedEndToken = null;
    }
}



var $9TEeL = parcelRequire("9TEeL");

var $13fPA = parcelRequire("13fPA");

var $8qXsZ = parcelRequire("8qXsZ");

var $3HpR4 = parcelRequire("3HpR4");

var $cz0c7 = parcelRequire("cz0c7");

var $9wt9e = parcelRequire("9wt9e");

class $f5d355a1a3f8ccf9$export$da3e0fab717c9ef9 {
    /**
     * Do an initial pass over the lines and gather info about the line comment string.
     * Returns null if any of the lines doesn't support a line comment string.
     */ static _gatherPreflightCommentStrings(model, startLineNumber, endLineNumber) {
        model.tokenizeIfCheap(startLineNumber);
        const languageId = model.getLanguageIdAtPosition(startLineNumber, 1);
        const config = (0, $9wt9e.LanguageConfigurationRegistry).getComments(languageId);
        const commentStr = config ? config.lineCommentToken : null;
        if (!commentStr) // Mode does not support line comments
        return null;
        let lines = [];
        for(let i = 0, lineCount = endLineNumber - startLineNumber + 1; i < lineCount; i++)lines[i] = {
            ignore: false,
            commentStr: commentStr,
            commentStrOffset: 0,
            commentStrLength: commentStr.length
        };
        return lines;
    }
    /**
     * Analyze lines and decide which lines are relevant and what the toggle should do.
     * Also, build up several offsets and lengths useful in the generation of editor operations.
     */ static _analyzeLines(type, insertSpace, model, lines, startLineNumber, ignoreEmptyLines, ignoreFirstLine) {
        let onlyWhitespaceLines = true;
        let shouldRemoveComments;
        if (type === 0 /* Toggle */ ) shouldRemoveComments = true;
        else if (type === 1 /* ForceAdd */ ) shouldRemoveComments = false;
        else shouldRemoveComments = true;
        for(let i = 0, lineCount = lines.length; i < lineCount; i++){
            const lineData = lines[i];
            const lineNumber = startLineNumber + i;
            if (lineNumber === startLineNumber && ignoreFirstLine) {
                // first line ignored
                lineData.ignore = true;
                continue;
            }
            const lineContent = model.getLineContent(lineNumber);
            const lineContentStartOffset = $9TEeL.firstNonWhitespaceIndex(lineContent);
            if (lineContentStartOffset === -1) {
                // Empty or whitespace only line
                lineData.ignore = ignoreEmptyLines;
                lineData.commentStrOffset = lineContent.length;
                continue;
            }
            onlyWhitespaceLines = false;
            lineData.ignore = false;
            lineData.commentStrOffset = lineContentStartOffset;
            if (shouldRemoveComments && !(0, $c22621819bc6f51c$export$889a1441dfb5fa88)._haystackHasNeedleAtOffset(lineContent, lineData.commentStr, lineContentStartOffset)) {
                if (type === 0 /* Toggle */ ) // Every line so far has been a line comment, but this one is not
                shouldRemoveComments = false;
                else if (type === 1 /* ForceAdd */ ) ;
                else lineData.ignore = true;
            }
            if (shouldRemoveComments && insertSpace) {
                // Remove a following space if present
                const commentStrEndOffset = lineContentStartOffset + lineData.commentStrLength;
                if (commentStrEndOffset < lineContent.length && lineContent.charCodeAt(commentStrEndOffset) === 32 /* Space */ ) lineData.commentStrLength += 1;
            }
        }
        if (type === 0 /* Toggle */  && onlyWhitespaceLines) {
            // For only whitespace lines, we insert comments
            shouldRemoveComments = false;
            // Also, no longer ignore them
            for(let i1 = 0, lineCount1 = lines.length; i1 < lineCount1; i1++)lines[i1].ignore = false;
        }
        return {
            supported: true,
            shouldRemoveComments: shouldRemoveComments,
            lines: lines
        };
    }
    /**
     * Analyze all lines and decide exactly what to do => not supported | insert line comments | remove line comments
     */ static _gatherPreflightData(type, insertSpace, model, startLineNumber, endLineNumber, ignoreEmptyLines, ignoreFirstLine) {
        const lines = $f5d355a1a3f8ccf9$export$da3e0fab717c9ef9._gatherPreflightCommentStrings(model, startLineNumber, endLineNumber);
        if (lines === null) return {
            supported: false
        };
        return $f5d355a1a3f8ccf9$export$da3e0fab717c9ef9._analyzeLines(type, insertSpace, model, lines, startLineNumber, ignoreEmptyLines, ignoreFirstLine);
    }
    /**
     * Given a successful analysis, execute either insert line comments, either remove line comments
     */ _executeLineComments(model, builder, data, s) {
        let ops;
        if (data.shouldRemoveComments) ops = $f5d355a1a3f8ccf9$export$da3e0fab717c9ef9._createRemoveLineCommentsOperations(data.lines, s.startLineNumber);
        else {
            $f5d355a1a3f8ccf9$export$da3e0fab717c9ef9._normalizeInsertionPoint(model, data.lines, s.startLineNumber, this._tabSize);
            ops = this._createAddLineCommentsOperations(data.lines, s.startLineNumber);
        }
        const cursorPosition = new (0, $8qXsZ.Position)(s.positionLineNumber, s.positionColumn);
        for(let i = 0, len = ops.length; i < len; i++){
            builder.addEditOperation(ops[i].range, ops[i].text);
            if ((0, $3HpR4.Range).isEmpty(ops[i].range) && (0, $3HpR4.Range).getStartPosition(ops[i].range).equals(cursorPosition)) {
                const lineContent = model.getLineContent(cursorPosition.lineNumber);
                if (lineContent.length + 1 === cursorPosition.column) this._deltaColumn = (ops[i].text || "").length;
            }
        }
        this._selectionId = builder.trackSelection(s);
    }
    _attemptRemoveBlockComment(model, s, startToken, endToken) {
        let startLineNumber = s.startLineNumber;
        let endLineNumber = s.endLineNumber;
        let startTokenAllowedBeforeColumn = endToken.length + Math.max(model.getLineFirstNonWhitespaceColumn(s.startLineNumber), s.startColumn);
        let startTokenIndex = model.getLineContent(startLineNumber).lastIndexOf(startToken, startTokenAllowedBeforeColumn - 1);
        let endTokenIndex = model.getLineContent(endLineNumber).indexOf(endToken, s.endColumn - 1 - startToken.length);
        if (startTokenIndex !== -1 && endTokenIndex === -1) {
            endTokenIndex = model.getLineContent(startLineNumber).indexOf(endToken, startTokenIndex + startToken.length);
            endLineNumber = startLineNumber;
        }
        if (startTokenIndex === -1 && endTokenIndex !== -1) {
            startTokenIndex = model.getLineContent(endLineNumber).lastIndexOf(startToken, endTokenIndex);
            startLineNumber = endLineNumber;
        }
        if (s.isEmpty() && (startTokenIndex === -1 || endTokenIndex === -1)) {
            startTokenIndex = model.getLineContent(startLineNumber).indexOf(startToken);
            if (startTokenIndex !== -1) endTokenIndex = model.getLineContent(startLineNumber).indexOf(endToken, startTokenIndex + startToken.length);
        }
        // We have to adjust to possible inner white space.
        // For Space after startToken, add Space to startToken - range math will work out.
        if (startTokenIndex !== -1 && model.getLineContent(startLineNumber).charCodeAt(startTokenIndex + startToken.length) === 32 /* Space */ ) startToken += " ";
        // For Space before endToken, add Space before endToken and shift index one left.
        if (endTokenIndex !== -1 && model.getLineContent(endLineNumber).charCodeAt(endTokenIndex - 1) === 32 /* Space */ ) {
            endToken = " " + endToken;
            endTokenIndex -= 1;
        }
        if (startTokenIndex !== -1 && endTokenIndex !== -1) return (0, $c22621819bc6f51c$export$889a1441dfb5fa88)._createRemoveBlockCommentOperations(new (0, $3HpR4.Range)(startLineNumber, startTokenIndex + startToken.length + 1, endLineNumber, endTokenIndex + 1), startToken, endToken);
        return null;
    }
    /**
     * Given an unsuccessful analysis, delegate to the block comment command
     */ _executeBlockComment(model, builder, s) {
        model.tokenizeIfCheap(s.startLineNumber);
        let languageId = model.getLanguageIdAtPosition(s.startLineNumber, 1);
        let config = (0, $9wt9e.LanguageConfigurationRegistry).getComments(languageId);
        if (!config || !config.blockCommentStartToken || !config.blockCommentEndToken) // Mode does not support block comments
        return;
        const startToken = config.blockCommentStartToken;
        const endToken = config.blockCommentEndToken;
        let ops = this._attemptRemoveBlockComment(model, s, startToken, endToken);
        if (!ops) {
            if (s.isEmpty()) {
                const lineContent = model.getLineContent(s.startLineNumber);
                let firstNonWhitespaceIndex = $9TEeL.firstNonWhitespaceIndex(lineContent);
                if (firstNonWhitespaceIndex === -1) // Line is empty or contains only whitespace
                firstNonWhitespaceIndex = lineContent.length;
                ops = (0, $c22621819bc6f51c$export$889a1441dfb5fa88)._createAddBlockCommentOperations(new (0, $3HpR4.Range)(s.startLineNumber, firstNonWhitespaceIndex + 1, s.startLineNumber, lineContent.length + 1), startToken, endToken, this._insertSpace);
            } else ops = (0, $c22621819bc6f51c$export$889a1441dfb5fa88)._createAddBlockCommentOperations(new (0, $3HpR4.Range)(s.startLineNumber, model.getLineFirstNonWhitespaceColumn(s.startLineNumber), s.endLineNumber, model.getLineMaxColumn(s.endLineNumber)), startToken, endToken, this._insertSpace);
            if (ops.length === 1) // Leave cursor after token and Space
            this._deltaColumn = startToken.length + 1;
        }
        this._selectionId = builder.trackSelection(s);
        for (const op of ops)builder.addEditOperation(op.range, op.text);
    }
    getEditOperations(model, builder) {
        let s = this._selection;
        this._moveEndPositionDown = false;
        if (s.startLineNumber === s.endLineNumber && this._ignoreFirstLine) {
            builder.addEditOperation(new (0, $3HpR4.Range)(s.startLineNumber, model.getLineMaxColumn(s.startLineNumber), s.startLineNumber + 1, 1), s.startLineNumber === model.getLineCount() ? "" : "\n");
            this._selectionId = builder.trackSelection(s);
            return;
        }
        if (s.startLineNumber < s.endLineNumber && s.endColumn === 1) {
            this._moveEndPositionDown = true;
            s = s.setEndPosition(s.endLineNumber - 1, model.getLineMaxColumn(s.endLineNumber - 1));
        }
        const data = $f5d355a1a3f8ccf9$export$da3e0fab717c9ef9._gatherPreflightData(this._type, this._insertSpace, model, s.startLineNumber, s.endLineNumber, this._ignoreEmptyLines, this._ignoreFirstLine);
        if (data.supported) return this._executeLineComments(model, builder, data, s);
        return this._executeBlockComment(model, builder, s);
    }
    computeCursorState(model, helper) {
        let result = helper.getTrackedSelection(this._selectionId);
        if (this._moveEndPositionDown) result = result.setEndPosition(result.endLineNumber + 1, 1);
        return new (0, $cz0c7.Selection)(result.selectionStartLineNumber, result.selectionStartColumn + this._deltaColumn, result.positionLineNumber, result.positionColumn + this._deltaColumn);
    }
    /**
     * Generate edit operations in the remove line comment case
     */ static _createRemoveLineCommentsOperations(lines, startLineNumber) {
        let res = [];
        for(let i = 0, len = lines.length; i < len; i++){
            const lineData = lines[i];
            if (lineData.ignore) continue;
            res.push((0, $13fPA.EditOperation).delete(new (0, $3HpR4.Range)(startLineNumber + i, lineData.commentStrOffset + 1, startLineNumber + i, lineData.commentStrOffset + lineData.commentStrLength + 1)));
        }
        return res;
    }
    /**
     * Generate edit operations in the add line comment case
     */ _createAddLineCommentsOperations(lines, startLineNumber) {
        let res = [];
        const afterCommentStr = this._insertSpace ? " " : "";
        for(let i = 0, len = lines.length; i < len; i++){
            const lineData = lines[i];
            if (lineData.ignore) continue;
            res.push((0, $13fPA.EditOperation).insert(new (0, $8qXsZ.Position)(startLineNumber + i, lineData.commentStrOffset + 1), lineData.commentStr + afterCommentStr));
        }
        return res;
    }
    static nextVisibleColumn(currentVisibleColumn, tabSize, isTab, columnSize) {
        if (isTab) return currentVisibleColumn + (tabSize - currentVisibleColumn % tabSize);
        return currentVisibleColumn + columnSize;
    }
    /**
     * Adjust insertion points to have them vertically aligned in the add line comment case
     */ static _normalizeInsertionPoint(model, lines, startLineNumber, tabSize) {
        let minVisibleColumn = 1073741824 /* MAX_SAFE_SMALL_INTEGER */ ;
        let j;
        let lenJ;
        for(let i = 0, len = lines.length; i < len; i++){
            if (lines[i].ignore) continue;
            const lineContent = model.getLineContent(startLineNumber + i);
            let currentVisibleColumn = 0;
            for(let j1 = 0, lenJ1 = lines[i].commentStrOffset; currentVisibleColumn < minVisibleColumn && j1 < lenJ1; j1++)currentVisibleColumn = $f5d355a1a3f8ccf9$export$da3e0fab717c9ef9.nextVisibleColumn(currentVisibleColumn, tabSize, lineContent.charCodeAt(j1) === 9 /* Tab */ , 1);
            if (currentVisibleColumn < minVisibleColumn) minVisibleColumn = currentVisibleColumn;
        }
        minVisibleColumn = Math.floor(minVisibleColumn / tabSize) * tabSize;
        for(let i1 = 0, len1 = lines.length; i1 < len1; i1++){
            if (lines[i1].ignore) continue;
            const lineContent1 = model.getLineContent(startLineNumber + i1);
            let currentVisibleColumn1 = 0;
            for(j = 0, lenJ = lines[i1].commentStrOffset; currentVisibleColumn1 < minVisibleColumn && j < lenJ; j++)currentVisibleColumn1 = $f5d355a1a3f8ccf9$export$da3e0fab717c9ef9.nextVisibleColumn(currentVisibleColumn1, tabSize, lineContent1.charCodeAt(j) === 9 /* Tab */ , 1);
            if (currentVisibleColumn1 > minVisibleColumn) lines[i1].commentStrOffset = j - 1;
            else lines[i1].commentStrOffset = j;
        }
    }
    constructor(selection, tabSize, type, insertSpace, ignoreEmptyLines, ignoreFirstLine){
        this._selection = selection;
        this._tabSize = tabSize;
        this._type = type;
        this._insertSpace = insertSpace;
        this._selectionId = null;
        this._deltaColumn = 0;
        this._moveEndPositionDown = false;
        this._ignoreEmptyLines = ignoreEmptyLines;
        this._ignoreFirstLine = ignoreFirstLine || false;
    }
}



var $58WHl = parcelRequire("58WHl");

var $2IxgH = parcelRequire("2IxgH");
class $632b0188d82bdc2a$var$CommentLineAction extends (0, $gGOeQ.EditorAction) {
    run(accessor, editor) {
        if (!editor.hasModel()) return;
        const model = editor.getModel();
        const commands = [];
        const modelOptions = model.getOptions();
        const commentsOptions = editor.getOption(19 /* comments */ );
        const selections = editor.getSelections().map((selection, index)=>({
                selection: selection,
                index: index,
                ignoreFirstLine: false
            }));
        selections.sort((a, b)=>(0, $3HpR4.Range).compareRangesUsingStarts(a.selection, b.selection));
        // Remove selections that would result in copying the same line
        let prev = selections[0];
        for(let i = 1; i < selections.length; i++){
            const curr = selections[i];
            if (prev.selection.endLineNumber === curr.selection.startLineNumber) {
                // these two selections would copy the same line
                if (prev.index < curr.index) // prev wins
                curr.ignoreFirstLine = true;
                else {
                    // curr wins
                    prev.ignoreFirstLine = true;
                    prev = curr;
                }
            }
        }
        for (const selection of selections)commands.push(new (0, $f5d355a1a3f8ccf9$export$da3e0fab717c9ef9)(selection.selection, modelOptions.tabSize, this._type, commentsOptions.insertSpace, commentsOptions.ignoreEmptyLines, selection.ignoreFirstLine));
        editor.pushUndoStop();
        editor.executeCommands(this.id, commands);
        editor.pushUndoStop();
    }
    constructor(type, opts){
        super(opts);
        this._type = type;
    }
}
class $632b0188d82bdc2a$var$ToggleCommentLineAction extends $632b0188d82bdc2a$var$CommentLineAction {
    constructor(){
        super(0 /* Toggle */ , {
            id: "editor.action.commentLine",
            label: $58WHl.localize("comment.line", "Toggle Line Comment"),
            alias: "Toggle Line Comment",
            precondition: (0, $bdLce.EditorContextKeys).writable,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: 2133 /* Slash */ ,
                weight: 100 /* EditorContrib */ 
            },
            menuOpts: {
                menuId: (0, $2IxgH.MenuId).MenubarEditMenu,
                group: "5_insert",
                title: $58WHl.localize({
                    key: "miToggleLineComment",
                    comment: [
                        "&& denotes a mnemonic"
                    ]
                }, "&&Toggle Line Comment"),
                order: 1
            }
        });
    }
}
class $632b0188d82bdc2a$var$AddLineCommentAction extends $632b0188d82bdc2a$var$CommentLineAction {
    constructor(){
        super(1 /* ForceAdd */ , {
            id: "editor.action.addCommentLine",
            label: $58WHl.localize("comment.line.add", "Add Line Comment"),
            alias: "Add Line Comment",
            precondition: (0, $bdLce.EditorContextKeys).writable,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: (0, $fQtIR.KeyChord)(2089 /* KeyK */ , 2081 /* KeyC */ ),
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
class $632b0188d82bdc2a$var$RemoveLineCommentAction extends $632b0188d82bdc2a$var$CommentLineAction {
    constructor(){
        super(2 /* ForceRemove */ , {
            id: "editor.action.removeCommentLine",
            label: $58WHl.localize("comment.line.remove", "Remove Line Comment"),
            alias: "Remove Line Comment",
            precondition: (0, $bdLce.EditorContextKeys).writable,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: (0, $fQtIR.KeyChord)(2089 /* KeyK */ , 2099 /* KeyU */ ),
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
class $632b0188d82bdc2a$var$BlockCommentAction extends (0, $gGOeQ.EditorAction) {
    run(accessor, editor) {
        if (!editor.hasModel()) return;
        const commentsOptions = editor.getOption(19 /* comments */ );
        const commands = [];
        const selections = editor.getSelections();
        for (const selection of selections)commands.push(new (0, $c22621819bc6f51c$export$889a1441dfb5fa88)(selection, commentsOptions.insertSpace));
        editor.pushUndoStop();
        editor.executeCommands(this.id, commands);
        editor.pushUndoStop();
    }
    constructor(){
        super({
            id: "editor.action.blockComment",
            label: $58WHl.localize("comment.block", "Toggle Block Comment"),
            alias: "Toggle Block Comment",
            precondition: (0, $bdLce.EditorContextKeys).writable,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: 1567 /* KeyA */ ,
                linux: {
                    primary: 3103 /* KeyA */ 
                },
                weight: 100 /* EditorContrib */ 
            },
            menuOpts: {
                menuId: (0, $2IxgH.MenuId).MenubarEditMenu,
                group: "5_insert",
                title: $58WHl.localize({
                    key: "miToggleBlockComment",
                    comment: [
                        "&& denotes a mnemonic"
                    ]
                }, "Toggle &&Block Comment"),
                order: 2
            }
        });
    }
}
(0, $gGOeQ.registerEditorAction)($632b0188d82bdc2a$var$ToggleCommentLineAction);
(0, $gGOeQ.registerEditorAction)($632b0188d82bdc2a$var$AddLineCommentAction);
(0, $gGOeQ.registerEditorAction)($632b0188d82bdc2a$var$RemoveLineCommentAction);
(0, $gGOeQ.registerEditorAction)($632b0188d82bdc2a$var$BlockCommentAction);


var $3b3651ce8b5ce53e$exports = {};

var $jOYcd = parcelRequire("jOYcd");

var $bhJjH = parcelRequire("bhJjH");

var $1e8So = parcelRequire("1e8So");

var $atiRx = parcelRequire("atiRx");

var $1d81R = parcelRequire("1d81R");

var $gGOeQ = parcelRequire("gGOeQ");

var $bdLce = parcelRequire("bdLce");

var $58WHl = parcelRequire("58WHl");

var $2IxgH = parcelRequire("2IxgH");

var $bRtox = parcelRequire("bRtox");

var $jINLy = parcelRequire("jINLy");

var $gY9wc = parcelRequire("gY9wc");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $3b3651ce8b5ce53e$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $3b3651ce8b5ce53e$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
let $3b3651ce8b5ce53e$export$4b3a61d923941f77 = class ContextMenuController {
    static get(editor) {
        return editor.getContribution(ContextMenuController.ID);
    }
    _onContextMenu(e) {
        if (!this._editor.hasModel()) return;
        if (!this._editor.getOption(20 /* contextmenu */ )) {
            this._editor.focus();
            // Ensure the cursor is at the position of the mouse click
            if (e.target.position && !this._editor.getSelection().containsPosition(e.target.position)) this._editor.setPosition(e.target.position);
            return; // Context menu is turned off through configuration
        }
        if (e.target.type === 12 /* OVERLAY_WIDGET */ ) return; // allow native menu on widgets to support right click on input field for example in find
        e.event.preventDefault();
        e.event.stopPropagation();
        if (e.target.type !== 6 /* CONTENT_TEXT */  && e.target.type !== 7 /* CONTENT_EMPTY */  && e.target.type !== 1 /* TEXTAREA */ ) return; // only support mouse click into text or native context menu key for now
        // Ensure the editor gets focus if it hasn't, so the right events are being sent to other contributions
        this._editor.focus();
        // Ensure the cursor is at the position of the mouse click
        if (e.target.position) {
            let hasSelectionAtPosition = false;
            for (const selection of this._editor.getSelections())if (selection.containsPosition(e.target.position)) {
                hasSelectionAtPosition = true;
                break;
            }
            if (!hasSelectionAtPosition) this._editor.setPosition(e.target.position);
        }
        // Unless the user triggerd the context menu through Shift+F10, use the mouse position as menu position
        let anchor = null;
        if (e.target.type !== 1 /* TEXTAREA */ ) anchor = {
            x: e.event.posx - 1,
            width: 2,
            y: e.event.posy - 1,
            height: 2
        };
        // Show the context menu
        this.showContextMenu(anchor);
    }
    showContextMenu(anchor) {
        if (!this._editor.getOption(20 /* contextmenu */ )) return; // Context menu is turned off through configuration
        if (!this._editor.hasModel()) return;
        if (!this._contextMenuService) {
            this._editor.focus();
            return; // We need the context menu service to function
        }
        // Find actions available for menu
        const menuActions = this._getMenuActions(this._editor.getModel(), this._editor.isSimpleWidget ? (0, $2IxgH.MenuId).SimpleEditorContext : (0, $2IxgH.MenuId).EditorContext);
        // Show menu if we have actions to show
        if (menuActions.length > 0) this._doShowContextMenu(menuActions, anchor);
    }
    _getMenuActions(model, menuId) {
        const result = [];
        // get menu groups
        const menu = this._menuService.createMenu(menuId, this._contextKeyService);
        const groups = menu.getActions({
            arg: model.uri
        });
        menu.dispose();
        // translate them into other actions
        for (let group of groups){
            const [, actions] = group;
            let addedItems = 0;
            for (const action of actions)if (action instanceof (0, $2IxgH.SubmenuItemAction)) {
                const subActions = this._getMenuActions(model, action.item.submenu);
                if (subActions.length > 0) {
                    result.push(new (0, $1e8So.SubmenuAction)(action.id, action.label, subActions));
                    addedItems++;
                }
            } else {
                result.push(action);
                addedItems++;
            }
            if (addedItems) result.push(new (0, $1e8So.Separator)());
        }
        if (result.length) result.pop(); // remove last separator
        return result;
    }
    _doShowContextMenu(actions, anchor = null) {
        if (!this._editor.hasModel()) return;
        // Disable hover
        const oldHoverSetting = this._editor.getOption(52 /* hover */ );
        this._editor.updateOptions({
            hover: {
                enabled: false
            }
        });
        if (!anchor) {
            // Ensure selection is visible
            this._editor.revealPosition(this._editor.getPosition(), 1 /* Immediate */ );
            this._editor.render();
            const cursorCoords = this._editor.getScrolledVisiblePosition(this._editor.getPosition());
            // Translate to absolute editor position
            const editorCoords = $jOYcd.getDomNodePagePosition(this._editor.getDomNode());
            const posx = editorCoords.left + cursorCoords.left;
            const posy = editorCoords.top + cursorCoords.top + cursorCoords.height;
            anchor = {
                x: posx,
                y: posy
            };
        }
        const useShadowDOM = this._editor.getOption(114 /* useShadowDOM */ ) && !(0, $1d81R.isIOS); // Do not use shadow dom on IOS #122035
        // Show menu
        this._contextMenuIsBeingShownCount++;
        this._contextMenuService.showContextMenu({
            domForShadowRoot: useShadowDOM ? this._editor.getDomNode() : undefined,
            getAnchor: ()=>anchor,
            getActions: ()=>actions,
            getActionViewItem: (action)=>{
                const keybinding = this._keybindingFor(action);
                if (keybinding) return new (0, $bhJjH.ActionViewItem)(action, action, {
                    label: true,
                    keybinding: keybinding.getLabel(),
                    isMenu: true
                });
                const customActionViewItem = action;
                if (typeof customActionViewItem.getActionViewItem === "function") return customActionViewItem.getActionViewItem();
                return new (0, $bhJjH.ActionViewItem)(action, action, {
                    icon: true,
                    label: true,
                    isMenu: true
                });
            },
            getKeyBinding: (action)=>{
                return this._keybindingFor(action);
            },
            onHide: (wasCancelled)=>{
                this._contextMenuIsBeingShownCount--;
                this._editor.focus();
                this._editor.updateOptions({
                    hover: oldHoverSetting
                });
            }
        });
    }
    _keybindingFor(action) {
        return this._keybindingService.lookupKeybinding(action.id);
    }
    dispose() {
        if (this._contextMenuIsBeingShownCount > 0) this._contextViewService.hideContextView();
        this._toDispose.dispose();
    }
    constructor(editor, _contextMenuService, _contextViewService, _contextKeyService, _keybindingService, _menuService){
        this._contextMenuService = _contextMenuService;
        this._contextViewService = _contextViewService;
        this._contextKeyService = _contextKeyService;
        this._keybindingService = _keybindingService;
        this._menuService = _menuService;
        this._toDispose = new (0, $atiRx.DisposableStore)();
        this._contextMenuIsBeingShownCount = 0;
        this._editor = editor;
        this._toDispose.add(this._editor.onContextMenu((e)=>this._onContextMenu(e)));
        this._toDispose.add(this._editor.onMouseWheel((e)=>{
            if (this._contextMenuIsBeingShownCount > 0) {
                const view = this._contextViewService.getContextViewElement();
                const target = e.srcElement;
                // Event triggers on shadow root host first
                // Check if the context view is under this host before hiding it #103169
                if (!(target.shadowRoot && $jOYcd.getShadowRoot(view) === target.shadowRoot)) this._contextViewService.hideContextView();
            }
        }));
        this._toDispose.add(this._editor.onKeyDown((e)=>{
            if (e.keyCode === 58 /* ContextMenu */ ) {
                // Chrome is funny like that
                e.preventDefault();
                e.stopPropagation();
                this.showContextMenu();
            }
        }));
    }
};
$3b3651ce8b5ce53e$export$4b3a61d923941f77.ID = "editor.contrib.contextmenu";
$3b3651ce8b5ce53e$export$4b3a61d923941f77 = $3b3651ce8b5ce53e$var$__decorate([
    $3b3651ce8b5ce53e$var$__param(1, (0, $jINLy.IContextMenuService)),
    $3b3651ce8b5ce53e$var$__param(2, (0, $jINLy.IContextViewService)),
    $3b3651ce8b5ce53e$var$__param(3, (0, $bRtox.IContextKeyService)),
    $3b3651ce8b5ce53e$var$__param(4, (0, $gY9wc.IKeybindingService)),
    $3b3651ce8b5ce53e$var$__param(5, (0, $2IxgH.IMenuService))
], $3b3651ce8b5ce53e$export$4b3a61d923941f77);
class $3b3651ce8b5ce53e$var$ShowContextMenu extends (0, $gGOeQ.EditorAction) {
    run(accessor, editor) {
        let contribution = $3b3651ce8b5ce53e$export$4b3a61d923941f77.get(editor);
        contribution.showContextMenu();
    }
    constructor(){
        super({
            id: "editor.action.showContextMenu",
            label: $58WHl.localize("action.showContextMenu.label", "Show Editor Context Menu"),
            alias: "Show Editor Context Menu",
            precondition: undefined,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).textInputFocus,
                primary: 1092 /* F10 */ ,
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
(0, $gGOeQ.registerEditorContribution)($3b3651ce8b5ce53e$export$4b3a61d923941f77.ID, $3b3651ce8b5ce53e$export$4b3a61d923941f77);
(0, $gGOeQ.registerEditorAction)($3b3651ce8b5ce53e$var$ShowContextMenu);



var $atiRx = parcelRequire("atiRx");

var $gGOeQ = parcelRequire("gGOeQ");

var $bdLce = parcelRequire("bdLce");

var $58WHl = parcelRequire("58WHl");
class $824daf112c900527$var$CursorState {
    equals(other) {
        const thisLen = this.selections.length;
        const otherLen = other.selections.length;
        if (thisLen !== otherLen) return false;
        for(let i = 0; i < thisLen; i++){
            if (!this.selections[i].equalsSelection(other.selections[i])) return false;
        }
        return true;
    }
    constructor(selections){
        this.selections = selections;
    }
}
class $824daf112c900527$var$StackElement {
    constructor(cursorState, scrollTop, scrollLeft){
        this.cursorState = cursorState;
        this.scrollTop = scrollTop;
        this.scrollLeft = scrollLeft;
    }
}
class $824daf112c900527$export$74eff563205978ea extends (0, $atiRx.Disposable) {
    static get(editor) {
        return editor.getContribution($824daf112c900527$export$74eff563205978ea.ID);
    }
    cursorUndo() {
        if (!this._editor.hasModel() || this._undoStack.length === 0) return;
        this._redoStack.push(new $824daf112c900527$var$StackElement(new $824daf112c900527$var$CursorState(this._editor.getSelections()), this._editor.getScrollTop(), this._editor.getScrollLeft()));
        this._applyState(this._undoStack.pop());
    }
    cursorRedo() {
        if (!this._editor.hasModel() || this._redoStack.length === 0) return;
        this._undoStack.push(new $824daf112c900527$var$StackElement(new $824daf112c900527$var$CursorState(this._editor.getSelections()), this._editor.getScrollTop(), this._editor.getScrollLeft()));
        this._applyState(this._redoStack.pop());
    }
    _applyState(stackElement) {
        this._isCursorUndoRedo = true;
        this._editor.setSelections(stackElement.cursorState.selections);
        this._editor.setScrollPosition({
            scrollTop: stackElement.scrollTop,
            scrollLeft: stackElement.scrollLeft
        });
        this._isCursorUndoRedo = false;
    }
    constructor(editor){
        super();
        this._editor = editor;
        this._isCursorUndoRedo = false;
        this._undoStack = [];
        this._redoStack = [];
        this._register(editor.onDidChangeModel((e)=>{
            this._undoStack = [];
            this._redoStack = [];
        }));
        this._register(editor.onDidChangeModelContent((e)=>{
            this._undoStack = [];
            this._redoStack = [];
        }));
        this._register(editor.onDidChangeCursorSelection((e)=>{
            if (this._isCursorUndoRedo) return;
            if (!e.oldSelections) return;
            if (e.oldModelVersionId !== e.modelVersionId) return;
            const prevState = new $824daf112c900527$var$CursorState(e.oldSelections);
            const isEqualToLastUndoStack = this._undoStack.length > 0 && this._undoStack[this._undoStack.length - 1].cursorState.equals(prevState);
            if (!isEqualToLastUndoStack) {
                this._undoStack.push(new $824daf112c900527$var$StackElement(prevState, editor.getScrollTop(), editor.getScrollLeft()));
                this._redoStack = [];
                if (this._undoStack.length > 50) // keep the cursor undo stack bounded
                this._undoStack.shift();
            }
        }));
    }
}
$824daf112c900527$export$74eff563205978ea.ID = "editor.contrib.cursorUndoRedoController";
class $824daf112c900527$export$3118bf0ed8b65899 extends (0, $gGOeQ.EditorAction) {
    run(accessor, editor, args) {
        $824daf112c900527$export$74eff563205978ea.get(editor).cursorUndo();
    }
    constructor(){
        super({
            id: "cursorUndo",
            label: $58WHl.localize("cursor.undo", "Cursor Undo"),
            alias: "Cursor Undo",
            precondition: undefined,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).textInputFocus,
                primary: 2099 /* KeyU */ ,
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
class $824daf112c900527$export$d501f63aca5a7669 extends (0, $gGOeQ.EditorAction) {
    run(accessor, editor, args) {
        $824daf112c900527$export$74eff563205978ea.get(editor).cursorRedo();
    }
    constructor(){
        super({
            id: "cursorRedo",
            label: $58WHl.localize("cursor.redo", "Cursor Redo"),
            alias: "Cursor Redo",
            precondition: undefined
        });
    }
}
(0, $gGOeQ.registerEditorContribution)($824daf112c900527$export$74eff563205978ea.ID, $824daf112c900527$export$74eff563205978ea);
(0, $gGOeQ.registerEditorAction)($824daf112c900527$export$3118bf0ed8b65899);
(0, $gGOeQ.registerEditorAction)($824daf112c900527$export$d501f63aca5a7669);



var $atiRx = parcelRequire("atiRx");

var $1d81R = parcelRequire("1d81R");


var $gGOeQ = parcelRequire("gGOeQ");

var $8qXsZ = parcelRequire("8qXsZ");

var $3HpR4 = parcelRequire("3HpR4");

var $cz0c7 = parcelRequire("cz0c7");

var $g88WD = parcelRequire("g88WD");

var $3HpR4 = parcelRequire("3HpR4");

var $cz0c7 = parcelRequire("cz0c7");
class $8f79921aeb4543d1$export$eb6766de171f86ab {
    getEditOperations(model, builder) {
        let text = model.getValueInRange(this.selection);
        if (!this.copy) builder.addEditOperation(this.selection, null);
        builder.addEditOperation(new (0, $3HpR4.Range)(this.targetPosition.lineNumber, this.targetPosition.column, this.targetPosition.lineNumber, this.targetPosition.column), text);
        if (this.selection.containsPosition(this.targetPosition) && !(this.copy && (this.selection.getEndPosition().equals(this.targetPosition) || this.selection.getStartPosition().equals(this.targetPosition) // we allow users to paste content beside the selection
        ))) {
            this.targetSelection = this.selection;
            return;
        }
        if (this.copy) {
            this.targetSelection = new (0, $cz0c7.Selection)(this.targetPosition.lineNumber, this.targetPosition.column, this.selection.endLineNumber - this.selection.startLineNumber + this.targetPosition.lineNumber, this.selection.startLineNumber === this.selection.endLineNumber ? this.targetPosition.column + this.selection.endColumn - this.selection.startColumn : this.selection.endColumn);
            return;
        }
        if (this.targetPosition.lineNumber > this.selection.endLineNumber) {
            // Drag the selection downwards
            this.targetSelection = new (0, $cz0c7.Selection)(this.targetPosition.lineNumber - this.selection.endLineNumber + this.selection.startLineNumber, this.targetPosition.column, this.targetPosition.lineNumber, this.selection.startLineNumber === this.selection.endLineNumber ? this.targetPosition.column + this.selection.endColumn - this.selection.startColumn : this.selection.endColumn);
            return;
        }
        if (this.targetPosition.lineNumber < this.selection.endLineNumber) {
            // Drag the selection upwards
            this.targetSelection = new (0, $cz0c7.Selection)(this.targetPosition.lineNumber, this.targetPosition.column, this.targetPosition.lineNumber + this.selection.endLineNumber - this.selection.startLineNumber, this.selection.startLineNumber === this.selection.endLineNumber ? this.targetPosition.column + this.selection.endColumn - this.selection.startColumn : this.selection.endColumn);
            return;
        }
        // The target position is at the same line as the selection's end position.
        if (this.selection.endColumn <= this.targetPosition.column) // The target position is after the selection's end position
        this.targetSelection = new (0, $cz0c7.Selection)(this.targetPosition.lineNumber - this.selection.endLineNumber + this.selection.startLineNumber, this.selection.startLineNumber === this.selection.endLineNumber ? this.targetPosition.column - this.selection.endColumn + this.selection.startColumn : this.targetPosition.column - this.selection.endColumn + this.selection.startColumn, this.targetPosition.lineNumber, this.selection.startLineNumber === this.selection.endLineNumber ? this.targetPosition.column : this.selection.endColumn);
        else // The target position is before the selection's end position. Since the selection doesn't contain the target position, the selection is one-line and target position is before this selection.
        this.targetSelection = new (0, $cz0c7.Selection)(this.targetPosition.lineNumber - this.selection.endLineNumber + this.selection.startLineNumber, this.targetPosition.column, this.targetPosition.lineNumber, this.targetPosition.column + this.selection.endColumn - this.selection.startColumn);
    }
    computeCursorState(model, helper) {
        return this.targetSelection;
    }
    constructor(selection, targetPosition, copy){
        this.selection = selection;
        this.targetPosition = targetPosition;
        this.copy = copy;
        this.targetSelection = null;
    }
}


function $8f94db4ed72ccb1a$var$hasTriggerModifier(e) {
    if (0, $1d81R.isMacintosh) return e.altKey;
    else return e.ctrlKey;
}
class $8f94db4ed72ccb1a$export$809c28265265f08e extends (0, $atiRx.Disposable) {
    onEditorBlur() {
        this._removeDecoration();
        this._dragSelection = null;
        this._mouseDown = false;
        this._modifierPressed = false;
    }
    onEditorKeyDown(e) {
        if (!this._editor.getOption(31 /* dragAndDrop */ ) || this._editor.getOption(18 /* columnSelection */ )) return;
        if ($8f94db4ed72ccb1a$var$hasTriggerModifier(e)) this._modifierPressed = true;
        if (this._mouseDown && $8f94db4ed72ccb1a$var$hasTriggerModifier(e)) this._editor.updateOptions({
            mouseStyle: "copy"
        });
    }
    onEditorKeyUp(e) {
        if (!this._editor.getOption(31 /* dragAndDrop */ ) || this._editor.getOption(18 /* columnSelection */ )) return;
        if ($8f94db4ed72ccb1a$var$hasTriggerModifier(e)) this._modifierPressed = false;
        if (this._mouseDown && e.keyCode === $8f94db4ed72ccb1a$export$809c28265265f08e.TRIGGER_KEY_VALUE) this._editor.updateOptions({
            mouseStyle: "default"
        });
    }
    _onEditorMouseDown(mouseEvent) {
        this._mouseDown = true;
    }
    _onEditorMouseUp(mouseEvent) {
        this._mouseDown = false;
        // Whenever users release the mouse, the drag and drop operation should finish and the cursor should revert to text.
        this._editor.updateOptions({
            mouseStyle: "text"
        });
    }
    _onEditorMouseDrag(mouseEvent) {
        let target = mouseEvent.target;
        if (this._dragSelection === null) {
            const selections = this._editor.getSelections() || [];
            let possibleSelections = selections.filter((selection)=>target.position && selection.containsPosition(target.position));
            if (possibleSelections.length === 1) this._dragSelection = possibleSelections[0];
            else return;
        }
        if ($8f94db4ed72ccb1a$var$hasTriggerModifier(mouseEvent.event)) this._editor.updateOptions({
            mouseStyle: "copy"
        });
        else this._editor.updateOptions({
            mouseStyle: "default"
        });
        if (target.position) {
            if (this._dragSelection.containsPosition(target.position)) this._removeDecoration();
            else this.showAt(target.position);
        }
    }
    _onEditorMouseDropCanceled() {
        this._editor.updateOptions({
            mouseStyle: "text"
        });
        this._removeDecoration();
        this._dragSelection = null;
        this._mouseDown = false;
    }
    _onEditorMouseDrop(mouseEvent) {
        if (mouseEvent.target && (this._hitContent(mouseEvent.target) || this._hitMargin(mouseEvent.target)) && mouseEvent.target.position) {
            let newCursorPosition = new (0, $8qXsZ.Position)(mouseEvent.target.position.lineNumber, mouseEvent.target.position.column);
            if (this._dragSelection === null) {
                let newSelections = null;
                if (mouseEvent.event.shiftKey) {
                    let primarySelection = this._editor.getSelection();
                    if (primarySelection) {
                        const { selectionStartLineNumber: selectionStartLineNumber , selectionStartColumn: selectionStartColumn  } = primarySelection;
                        newSelections = [
                            new (0, $cz0c7.Selection)(selectionStartLineNumber, selectionStartColumn, newCursorPosition.lineNumber, newCursorPosition.column)
                        ];
                    }
                } else newSelections = (this._editor.getSelections() || []).map((selection)=>{
                    if (selection.containsPosition(newCursorPosition)) return new (0, $cz0c7.Selection)(newCursorPosition.lineNumber, newCursorPosition.column, newCursorPosition.lineNumber, newCursorPosition.column);
                    else return selection;
                });
                // Use `mouse` as the source instead of `api` and setting the reason to explicit (to behave like any other mouse operation).
                this._editor.setSelections(newSelections || [], "mouse", 3 /* Explicit */ );
            } else if (!this._dragSelection.containsPosition(newCursorPosition) || ($8f94db4ed72ccb1a$var$hasTriggerModifier(mouseEvent.event) || this._modifierPressed) && (this._dragSelection.getEndPosition().equals(newCursorPosition) || this._dragSelection.getStartPosition().equals(newCursorPosition) // we allow users to paste content beside the selection
            )) {
                this._editor.pushUndoStop();
                this._editor.executeCommand($8f94db4ed72ccb1a$export$809c28265265f08e.ID, new (0, $8f79921aeb4543d1$export$eb6766de171f86ab)(this._dragSelection, newCursorPosition, $8f94db4ed72ccb1a$var$hasTriggerModifier(mouseEvent.event) || this._modifierPressed));
                this._editor.pushUndoStop();
            }
        }
        this._editor.updateOptions({
            mouseStyle: "text"
        });
        this._removeDecoration();
        this._dragSelection = null;
        this._mouseDown = false;
    }
    showAt(position) {
        let newDecorations = [
            {
                range: new (0, $3HpR4.Range)(position.lineNumber, position.column, position.lineNumber, position.column),
                options: $8f94db4ed72ccb1a$export$809c28265265f08e._DECORATION_OPTIONS
            }
        ];
        this._dndDecorationIds = this._editor.deltaDecorations(this._dndDecorationIds, newDecorations);
        this._editor.revealPosition(position, 1 /* Immediate */ );
    }
    _removeDecoration() {
        this._dndDecorationIds = this._editor.deltaDecorations(this._dndDecorationIds, []);
    }
    _hitContent(target) {
        return target.type === 6 /* CONTENT_TEXT */  || target.type === 7 /* CONTENT_EMPTY */ ;
    }
    _hitMargin(target) {
        return target.type === 2 /* GUTTER_GLYPH_MARGIN */  || target.type === 3 /* GUTTER_LINE_NUMBERS */  || target.type === 4 /* GUTTER_LINE_DECORATIONS */ ;
    }
    dispose() {
        this._removeDecoration();
        this._dragSelection = null;
        this._mouseDown = false;
        this._modifierPressed = false;
        super.dispose();
    }
    constructor(editor){
        super();
        this._editor = editor;
        this._register(this._editor.onMouseDown((e)=>this._onEditorMouseDown(e)));
        this._register(this._editor.onMouseUp((e)=>this._onEditorMouseUp(e)));
        this._register(this._editor.onMouseDrag((e)=>this._onEditorMouseDrag(e)));
        this._register(this._editor.onMouseDrop((e)=>this._onEditorMouseDrop(e)));
        this._register(this._editor.onMouseDropCanceled(()=>this._onEditorMouseDropCanceled()));
        this._register(this._editor.onKeyDown((e)=>this.onEditorKeyDown(e)));
        this._register(this._editor.onKeyUp((e)=>this.onEditorKeyUp(e)));
        this._register(this._editor.onDidBlurEditorWidget(()=>this.onEditorBlur()));
        this._register(this._editor.onDidBlurEditorText(()=>this.onEditorBlur()));
        this._dndDecorationIds = [];
        this._mouseDown = false;
        this._modifierPressed = false;
        this._dragSelection = null;
    }
}
$8f94db4ed72ccb1a$export$809c28265265f08e.ID = "editor.contrib.dragAndDrop";
$8f94db4ed72ccb1a$export$809c28265265f08e.TRIGGER_KEY_VALUE = (0, $1d81R.isMacintosh) ? 6 /* Alt */  : 5 /* Ctrl */ ;
$8f94db4ed72ccb1a$export$809c28265265f08e._DECORATION_OPTIONS = (0, $g88WD.ModelDecorationOptions).register({
    description: "dnd-target",
    className: "dnd-target"
});
(0, $gGOeQ.registerEditorContribution)($8f94db4ed72ccb1a$export$809c28265265f08e.ID, $8f94db4ed72ccb1a$export$809c28265265f08e);


var $9d3f26ffc33207eb$exports = {};

$parcel$export($9d3f26ffc33207eb$exports, "CommonFindController", function () { return $9d3f26ffc33207eb$export$3190f9a23ad62166; }, function (v) { return $9d3f26ffc33207eb$export$3190f9a23ad62166 = v; });

var $eFOsn = parcelRequire("eFOsn");

var $atiRx = parcelRequire("atiRx");

var $9TEeL = parcelRequire("9TEeL");

var $gGOeQ = parcelRequire("gGOeQ");

var $bdLce = parcelRequire("bdLce");

var $4xCD7 = parcelRequire("4xCD7");

var $eFOsn = parcelRequire("eFOsn");

var $atiRx = parcelRequire("atiRx");

var $8iWNC = parcelRequire("8iWNC");

var $8qXsZ = parcelRequire("8qXsZ");

var $3HpR4 = parcelRequire("3HpR4");

var $cz0c7 = parcelRequire("cz0c7");

var $767Zi = parcelRequire("767Zi");

var $3HpR4 = parcelRequire("3HpR4");

var $bbATZ = parcelRequire("bbATZ");

var $g88WD = parcelRequire("g88WD");

var $3XYy8 = parcelRequire("3XYy8");

var $fUTzO = parcelRequire("fUTzO");
class $0cd4499d8283fd5c$export$bd754614700a28d5 {
    dispose() {
        this._editor.deltaDecorations(this._allDecorations(), []);
        this._decorations = [];
        this._overviewRulerApproximateDecorations = [];
        this._findScopeDecorationIds = [];
        this._rangeHighlightDecorationId = null;
        this._highlightedDecorationId = null;
    }
    reset() {
        this._decorations = [];
        this._overviewRulerApproximateDecorations = [];
        this._findScopeDecorationIds = [];
        this._rangeHighlightDecorationId = null;
        this._highlightedDecorationId = null;
    }
    getCount() {
        return this._decorations.length;
    }
    /** @deprecated use getFindScopes to support multiple selections */ getFindScope() {
        if (this._findScopeDecorationIds[0]) return this._editor.getModel().getDecorationRange(this._findScopeDecorationIds[0]);
        return null;
    }
    getFindScopes() {
        if (this._findScopeDecorationIds.length) {
            const scopes = this._findScopeDecorationIds.map((findScopeDecorationId)=>this._editor.getModel().getDecorationRange(findScopeDecorationId)).filter((element)=>!!element);
            if (scopes.length) return scopes;
        }
        return null;
    }
    getStartPosition() {
        return this._startPosition;
    }
    setStartPosition(newStartPosition) {
        this._startPosition = newStartPosition;
        this.setCurrentFindMatch(null);
    }
    _getDecorationIndex(decorationId) {
        const index = this._decorations.indexOf(decorationId);
        if (index >= 0) return index + 1;
        return 1;
    }
    getCurrentMatchesPosition(desiredRange) {
        let candidates = this._editor.getModel().getDecorationsInRange(desiredRange);
        for (const candidate of candidates){
            const candidateOpts = candidate.options;
            if (candidateOpts === $0cd4499d8283fd5c$export$bd754614700a28d5._FIND_MATCH_DECORATION || candidateOpts === $0cd4499d8283fd5c$export$bd754614700a28d5._CURRENT_FIND_MATCH_DECORATION) return this._getDecorationIndex(candidate.id);
        }
        // We don't know the current match position, so returns zero to show '?' in find widget
        return 0;
    }
    setCurrentFindMatch(nextMatch) {
        let newCurrentDecorationId = null;
        let matchPosition = 0;
        if (nextMatch) for(let i = 0, len = this._decorations.length; i < len; i++){
            let range = this._editor.getModel().getDecorationRange(this._decorations[i]);
            if (nextMatch.equalsRange(range)) {
                newCurrentDecorationId = this._decorations[i];
                matchPosition = i + 1;
                break;
            }
        }
        if (this._highlightedDecorationId !== null || newCurrentDecorationId !== null) this._editor.changeDecorations((changeAccessor)=>{
            if (this._highlightedDecorationId !== null) {
                changeAccessor.changeDecorationOptions(this._highlightedDecorationId, $0cd4499d8283fd5c$export$bd754614700a28d5._FIND_MATCH_DECORATION);
                this._highlightedDecorationId = null;
            }
            if (newCurrentDecorationId !== null) {
                this._highlightedDecorationId = newCurrentDecorationId;
                changeAccessor.changeDecorationOptions(this._highlightedDecorationId, $0cd4499d8283fd5c$export$bd754614700a28d5._CURRENT_FIND_MATCH_DECORATION);
            }
            if (this._rangeHighlightDecorationId !== null) {
                changeAccessor.removeDecoration(this._rangeHighlightDecorationId);
                this._rangeHighlightDecorationId = null;
            }
            if (newCurrentDecorationId !== null) {
                let rng = this._editor.getModel().getDecorationRange(newCurrentDecorationId);
                if (rng.startLineNumber !== rng.endLineNumber && rng.endColumn === 1) {
                    let lineBeforeEnd = rng.endLineNumber - 1;
                    let lineBeforeEndMaxColumn = this._editor.getModel().getLineMaxColumn(lineBeforeEnd);
                    rng = new (0, $3HpR4.Range)(rng.startLineNumber, rng.startColumn, lineBeforeEnd, lineBeforeEndMaxColumn);
                }
                this._rangeHighlightDecorationId = changeAccessor.addDecoration(rng, $0cd4499d8283fd5c$export$bd754614700a28d5._RANGE_HIGHLIGHT_DECORATION);
            }
        });
        return matchPosition;
    }
    set(findMatches, findScopes) {
        this._editor.changeDecorations((accessor)=>{
            let findMatchesOptions = $0cd4499d8283fd5c$export$bd754614700a28d5._FIND_MATCH_DECORATION;
            let newOverviewRulerApproximateDecorations = [];
            if (findMatches.length > 1000) {
                // we go into a mode where the overview ruler gets "approximate" decorations
                // the reason is that the overview ruler paints all the decorations in the file and we don't want to cause freezes
                findMatchesOptions = $0cd4499d8283fd5c$export$bd754614700a28d5._FIND_MATCH_NO_OVERVIEW_DECORATION;
                // approximate a distance in lines where matches should be merged
                const lineCount = this._editor.getModel().getLineCount();
                const height = this._editor.getLayoutInfo().height;
                const approxPixelsPerLine = height / lineCount;
                const mergeLinesDelta = Math.max(2, Math.ceil(3 / approxPixelsPerLine));
                // merge decorations as much as possible
                let prevStartLineNumber = findMatches[0].range.startLineNumber;
                let prevEndLineNumber = findMatches[0].range.endLineNumber;
                for(let i = 1, len = findMatches.length; i < len; i++){
                    const range = findMatches[i].range;
                    if (prevEndLineNumber + mergeLinesDelta >= range.startLineNumber) {
                        if (range.endLineNumber > prevEndLineNumber) prevEndLineNumber = range.endLineNumber;
                    } else {
                        newOverviewRulerApproximateDecorations.push({
                            range: new (0, $3HpR4.Range)(prevStartLineNumber, 1, prevEndLineNumber, 1),
                            options: $0cd4499d8283fd5c$export$bd754614700a28d5._FIND_MATCH_ONLY_OVERVIEW_DECORATION
                        });
                        prevStartLineNumber = range.startLineNumber;
                        prevEndLineNumber = range.endLineNumber;
                    }
                }
                newOverviewRulerApproximateDecorations.push({
                    range: new (0, $3HpR4.Range)(prevStartLineNumber, 1, prevEndLineNumber, 1),
                    options: $0cd4499d8283fd5c$export$bd754614700a28d5._FIND_MATCH_ONLY_OVERVIEW_DECORATION
                });
            }
            // Find matches
            let newFindMatchesDecorations = new Array(findMatches.length);
            for(let i1 = 0, len1 = findMatches.length; i1 < len1; i1++)newFindMatchesDecorations[i1] = {
                range: findMatches[i1].range,
                options: findMatchesOptions
            };
            this._decorations = accessor.deltaDecorations(this._decorations, newFindMatchesDecorations);
            // Overview ruler approximate decorations
            this._overviewRulerApproximateDecorations = accessor.deltaDecorations(this._overviewRulerApproximateDecorations, newOverviewRulerApproximateDecorations);
            // Range highlight
            if (this._rangeHighlightDecorationId) {
                accessor.removeDecoration(this._rangeHighlightDecorationId);
                this._rangeHighlightDecorationId = null;
            }
            // Find scope
            if (this._findScopeDecorationIds.length) {
                this._findScopeDecorationIds.forEach((findScopeDecorationId)=>accessor.removeDecoration(findScopeDecorationId));
                this._findScopeDecorationIds = [];
            }
            if (findScopes === null || findScopes === void 0 ? void 0 : findScopes.length) this._findScopeDecorationIds = findScopes.map((findScope)=>accessor.addDecoration(findScope, $0cd4499d8283fd5c$export$bd754614700a28d5._FIND_SCOPE_DECORATION));
        });
    }
    matchBeforePosition(position) {
        if (this._decorations.length === 0) return null;
        for(let i = this._decorations.length - 1; i >= 0; i--){
            let decorationId = this._decorations[i];
            let r = this._editor.getModel().getDecorationRange(decorationId);
            if (!r || r.endLineNumber > position.lineNumber) continue;
            if (r.endLineNumber < position.lineNumber) return r;
            if (r.endColumn > position.column) continue;
            return r;
        }
        return this._editor.getModel().getDecorationRange(this._decorations[this._decorations.length - 1]);
    }
    matchAfterPosition(position) {
        if (this._decorations.length === 0) return null;
        for(let i = 0, len = this._decorations.length; i < len; i++){
            let decorationId = this._decorations[i];
            let r = this._editor.getModel().getDecorationRange(decorationId);
            if (!r || r.startLineNumber < position.lineNumber) continue;
            if (r.startLineNumber > position.lineNumber) return r;
            if (r.startColumn < position.column) continue;
            return r;
        }
        return this._editor.getModel().getDecorationRange(this._decorations[0]);
    }
    _allDecorations() {
        let result = [];
        result = result.concat(this._decorations);
        result = result.concat(this._overviewRulerApproximateDecorations);
        if (this._findScopeDecorationIds.length) result.push(...this._findScopeDecorationIds);
        if (this._rangeHighlightDecorationId) result.push(this._rangeHighlightDecorationId);
        return result;
    }
    constructor(editor){
        this._editor = editor;
        this._decorations = [];
        this._overviewRulerApproximateDecorations = [];
        this._findScopeDecorationIds = [];
        this._rangeHighlightDecorationId = null;
        this._highlightedDecorationId = null;
        this._startPosition = this._editor.getPosition();
    }
}
$0cd4499d8283fd5c$export$bd754614700a28d5._CURRENT_FIND_MATCH_DECORATION = (0, $g88WD.ModelDecorationOptions).register({
    description: "current-find-match",
    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ ,
    zIndex: 13,
    className: "currentFindMatch",
    showIfCollapsed: true,
    overviewRuler: {
        color: (0, $fUTzO.themeColorFromId)((0, $3XYy8.overviewRulerFindMatchForeground)),
        position: (0, $bbATZ.OverviewRulerLane).Center
    },
    minimap: {
        color: (0, $fUTzO.themeColorFromId)((0, $3XYy8.minimapFindMatch)),
        position: (0, $bbATZ.MinimapPosition).Inline
    }
});
$0cd4499d8283fd5c$export$bd754614700a28d5._FIND_MATCH_DECORATION = (0, $g88WD.ModelDecorationOptions).register({
    description: "find-match",
    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ ,
    zIndex: 10,
    className: "findMatch",
    showIfCollapsed: true,
    overviewRuler: {
        color: (0, $fUTzO.themeColorFromId)((0, $3XYy8.overviewRulerFindMatchForeground)),
        position: (0, $bbATZ.OverviewRulerLane).Center
    },
    minimap: {
        color: (0, $fUTzO.themeColorFromId)((0, $3XYy8.minimapFindMatch)),
        position: (0, $bbATZ.MinimapPosition).Inline
    }
});
$0cd4499d8283fd5c$export$bd754614700a28d5._FIND_MATCH_NO_OVERVIEW_DECORATION = (0, $g88WD.ModelDecorationOptions).register({
    description: "find-match-no-overview",
    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ ,
    className: "findMatch",
    showIfCollapsed: true
});
$0cd4499d8283fd5c$export$bd754614700a28d5._FIND_MATCH_ONLY_OVERVIEW_DECORATION = (0, $g88WD.ModelDecorationOptions).register({
    description: "find-match-only-overview",
    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ ,
    overviewRuler: {
        color: (0, $fUTzO.themeColorFromId)((0, $3XYy8.overviewRulerFindMatchForeground)),
        position: (0, $bbATZ.OverviewRulerLane).Center
    }
});
$0cd4499d8283fd5c$export$bd754614700a28d5._RANGE_HIGHLIGHT_DECORATION = (0, $g88WD.ModelDecorationOptions).register({
    description: "find-range-highlight",
    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ ,
    className: "rangeHighlight",
    isWholeLine: true
});
$0cd4499d8283fd5c$export$bd754614700a28d5._FIND_SCOPE_DECORATION = (0, $g88WD.ModelDecorationOptions).register({
    description: "find-scope",
    className: "findScope",
    isWholeLine: true
});



var $3HpR4 = parcelRequire("3HpR4");
class $b6ce15d8303e61f2$export$3f7edd8e0e87094f {
    getEditOperations(model, builder) {
        if (this._ranges.length > 0) {
            // Collect all edit operations
            let ops = [];
            for(let i = 0; i < this._ranges.length; i++)ops.push({
                range: this._ranges[i],
                text: this._replaceStrings[i]
            });
            // Sort them in ascending order by range starts
            ops.sort((o1, o2)=>{
                return (0, $3HpR4.Range).compareRangesUsingStarts(o1.range, o2.range);
            });
            // Merge operations that touch each other
            let resultOps = [];
            let previousOp = ops[0];
            for(let i1 = 1; i1 < ops.length; i1++)if (previousOp.range.endLineNumber === ops[i1].range.startLineNumber && previousOp.range.endColumn === ops[i1].range.startColumn) {
                // These operations are one after another and can be merged
                previousOp.range = previousOp.range.plusRange(ops[i1].range);
                previousOp.text = previousOp.text + ops[i1].text;
            } else {
                resultOps.push(previousOp);
                previousOp = ops[i1];
            }
            resultOps.push(previousOp);
            for (const op of resultOps)builder.addEditOperation(op.range, op.text);
        }
        this._trackedEditorSelectionId = builder.trackSelection(this._editorSelection);
    }
    computeCursorState(model, helper) {
        return helper.getTrackedSelection(this._trackedEditorSelectionId);
    }
    constructor(editorSelection, ranges, replaceStrings){
        this._editorSelection = editorSelection;
        this._ranges = ranges;
        this._replaceStrings = replaceStrings;
        this._trackedEditorSelectionId = null;
    }
}



var $9TEeL = parcelRequire("9TEeL");
function $882d546209fa3611$export$f007c37acc80e042(matches, pattern) {
    if (matches && matches[0] !== "") {
        const containsHyphens = $882d546209fa3611$var$validateSpecificSpecialCharacter(matches, pattern, "-");
        const containsUnderscores = $882d546209fa3611$var$validateSpecificSpecialCharacter(matches, pattern, "_");
        if (containsHyphens && !containsUnderscores) return $882d546209fa3611$var$buildReplaceStringForSpecificSpecialCharacter(matches, pattern, "-");
        else if (!containsHyphens && containsUnderscores) return $882d546209fa3611$var$buildReplaceStringForSpecificSpecialCharacter(matches, pattern, "_");
        if (matches[0].toUpperCase() === matches[0]) return pattern.toUpperCase();
        else if (matches[0].toLowerCase() === matches[0]) return pattern.toLowerCase();
        else if ($9TEeL.containsUppercaseCharacter(matches[0][0]) && pattern.length > 0) return pattern[0].toUpperCase() + pattern.substr(1);
        else if (matches[0][0].toUpperCase() !== matches[0][0] && pattern.length > 0) return pattern[0].toLowerCase() + pattern.substr(1);
        else // we don't understand its pattern yet.
        return pattern;
    } else return pattern;
}
function $882d546209fa3611$var$validateSpecificSpecialCharacter(matches, pattern, specialCharacter) {
    const doesContainSpecialCharacter = matches[0].indexOf(specialCharacter) !== -1 && pattern.indexOf(specialCharacter) !== -1;
    return doesContainSpecialCharacter && matches[0].split(specialCharacter).length === pattern.split(specialCharacter).length;
}
function $882d546209fa3611$var$buildReplaceStringForSpecificSpecialCharacter(matches, pattern, specialCharacter) {
    const splitPatternAtSpecialCharacter = pattern.split(specialCharacter);
    const splitMatchAtSpecialCharacter = matches[0].split(specialCharacter);
    let replaceString = "";
    splitPatternAtSpecialCharacter.forEach((splitValue, index)=>{
        replaceString += $882d546209fa3611$export$f007c37acc80e042([
            splitMatchAtSpecialCharacter[index]
        ], splitValue) + specialCharacter;
    });
    return replaceString.slice(0, -1);
}


/**
 * Assigned when the replace pattern is entirely static.
 */ class $64f27750b5a53e8a$var$StaticValueReplacePattern {
    constructor(staticValue){
        this.staticValue = staticValue;
        this.kind = 0 /* StaticValue */ ;
    }
}
/**
 * Assigned when the replace pattern has replacement patterns.
 */ class $64f27750b5a53e8a$var$DynamicPiecesReplacePattern {
    constructor(pieces){
        this.pieces = pieces;
        this.kind = 1 /* DynamicPieces */ ;
    }
}
class $64f27750b5a53e8a$export$512648940a758bce {
    static fromStaticValue(value) {
        return new $64f27750b5a53e8a$export$512648940a758bce([
            $64f27750b5a53e8a$export$1454288cb32b9472.staticValue(value)
        ]);
    }
    get hasReplacementPatterns() {
        return this._state.kind === 1 /* DynamicPieces */ ;
    }
    buildReplaceString(matches, preserveCase) {
        if (this._state.kind === 0 /* StaticValue */ ) {
            if (preserveCase) return (0, $882d546209fa3611$export$f007c37acc80e042)(matches, this._state.staticValue);
            else return this._state.staticValue;
        }
        let result = "";
        for(let i = 0, len = this._state.pieces.length; i < len; i++){
            let piece = this._state.pieces[i];
            if (piece.staticValue !== null) {
                // static value ReplacePiece
                result += piece.staticValue;
                continue;
            }
            // match index ReplacePiece
            let match = $64f27750b5a53e8a$export$512648940a758bce._substitute(piece.matchIndex, matches);
            if (piece.caseOps !== null && piece.caseOps.length > 0) {
                let repl = [];
                let lenOps = piece.caseOps.length;
                let opIdx = 0;
                for(let idx = 0, len1 = match.length; idx < len1; idx++){
                    if (opIdx >= lenOps) {
                        repl.push(match.slice(idx));
                        break;
                    }
                    switch(piece.caseOps[opIdx]){
                        case "U":
                            repl.push(match[idx].toUpperCase());
                            break;
                        case "u":
                            repl.push(match[idx].toUpperCase());
                            opIdx++;
                            break;
                        case "L":
                            repl.push(match[idx].toLowerCase());
                            break;
                        case "l":
                            repl.push(match[idx].toLowerCase());
                            opIdx++;
                            break;
                        default:
                            repl.push(match[idx]);
                    }
                }
                match = repl.join("");
            }
            result += match;
        }
        return result;
    }
    static _substitute(matchIndex, matches) {
        if (matches === null) return "";
        if (matchIndex === 0) return matches[0];
        let remainder = "";
        while(matchIndex > 0){
            if (matchIndex < matches.length) {
                // A match can be undefined
                let match = matches[matchIndex] || "";
                return match + remainder;
            }
            remainder = String(matchIndex % 10) + remainder;
            matchIndex = Math.floor(matchIndex / 10);
        }
        return "$" + remainder;
    }
    constructor(pieces){
        if (!pieces || pieces.length === 0) this._state = new $64f27750b5a53e8a$var$StaticValueReplacePattern("");
        else if (pieces.length === 1 && pieces[0].staticValue !== null) this._state = new $64f27750b5a53e8a$var$StaticValueReplacePattern(pieces[0].staticValue);
        else this._state = new $64f27750b5a53e8a$var$DynamicPiecesReplacePattern(pieces);
    }
}
class $64f27750b5a53e8a$export$1454288cb32b9472 {
    static staticValue(value) {
        return new $64f27750b5a53e8a$export$1454288cb32b9472(value, -1, null);
    }
    static caseOps(index, caseOps) {
        return new $64f27750b5a53e8a$export$1454288cb32b9472(null, index, caseOps);
    }
    constructor(staticValue, matchIndex, caseOps){
        this.staticValue = staticValue;
        this.matchIndex = matchIndex;
        if (!caseOps || caseOps.length === 0) this.caseOps = null;
        else this.caseOps = caseOps.slice(0);
    }
}
class $64f27750b5a53e8a$var$ReplacePieceBuilder {
    emitUnchanged(toCharIndex) {
        this._emitStatic(this._source.substring(this._lastCharIndex, toCharIndex));
        this._lastCharIndex = toCharIndex;
    }
    emitStatic(value, toCharIndex) {
        this._emitStatic(value);
        this._lastCharIndex = toCharIndex;
    }
    _emitStatic(value) {
        if (value.length === 0) return;
        this._currentStaticPiece += value;
    }
    emitMatchIndex(index, toCharIndex, caseOps) {
        if (this._currentStaticPiece.length !== 0) {
            this._result[this._resultLen++] = $64f27750b5a53e8a$export$1454288cb32b9472.staticValue(this._currentStaticPiece);
            this._currentStaticPiece = "";
        }
        this._result[this._resultLen++] = $64f27750b5a53e8a$export$1454288cb32b9472.caseOps(index, caseOps);
        this._lastCharIndex = toCharIndex;
    }
    finalize() {
        this.emitUnchanged(this._source.length);
        if (this._currentStaticPiece.length !== 0) {
            this._result[this._resultLen++] = $64f27750b5a53e8a$export$1454288cb32b9472.staticValue(this._currentStaticPiece);
            this._currentStaticPiece = "";
        }
        return new $64f27750b5a53e8a$export$512648940a758bce(this._result);
    }
    constructor(source){
        this._source = source;
        this._lastCharIndex = 0;
        this._result = [];
        this._resultLen = 0;
        this._currentStaticPiece = "";
    }
}
function $64f27750b5a53e8a$export$ca668b7a7924cbca(replaceString) {
    if (!replaceString || replaceString.length === 0) return new $64f27750b5a53e8a$export$512648940a758bce(null);
    let caseOps = [];
    let result = new $64f27750b5a53e8a$var$ReplacePieceBuilder(replaceString);
    for(let i = 0, len = replaceString.length; i < len; i++){
        let chCode = replaceString.charCodeAt(i);
        if (chCode === 92 /* Backslash */ ) {
            // move to next char
            i++;
            if (i >= len) break;
            let nextChCode = replaceString.charCodeAt(i);
            // let replaceWithCharacter: string | null = null;
            switch(nextChCode){
                case 92 /* Backslash */ :
                    // \\ => inserts a "\"
                    result.emitUnchanged(i - 1);
                    result.emitStatic("\\", i + 1);
                    break;
                case 110 /* n */ :
                    // \n => inserts a LF
                    result.emitUnchanged(i - 1);
                    result.emitStatic("\n", i + 1);
                    break;
                case 116 /* t */ :
                    // \t => inserts a TAB
                    result.emitUnchanged(i - 1);
                    result.emitStatic("	", i + 1);
                    break;
                // Case modification of string replacements, patterned after Boost, but only applied
                // to the replacement text, not subsequent content.
                case 117 /* u */ :
                // \u => upper-cases one character.
                case 85 /* U */ :
                // \U => upper-cases ALL following characters.
                case 108 /* l */ :
                // \l => lower-cases one character.
                case 76 /* L */ :
                    // \L => lower-cases ALL following characters.
                    result.emitUnchanged(i - 1);
                    result.emitStatic("", i + 1);
                    caseOps.push(String.fromCharCode(nextChCode));
                    break;
            }
            continue;
        }
        if (chCode === 36 /* DollarSign */ ) {
            // move to next char
            i++;
            if (i >= len) break;
            let nextChCode1 = replaceString.charCodeAt(i);
            if (nextChCode1 === 36 /* DollarSign */ ) {
                // $$ => inserts a "$"
                result.emitUnchanged(i - 1);
                result.emitStatic("$", i + 1);
                continue;
            }
            if (nextChCode1 === 48 /* Digit0 */  || nextChCode1 === 38 /* Ampersand */ ) {
                // $& and $0 => inserts the matched substring.
                result.emitUnchanged(i - 1);
                result.emitMatchIndex(0, i + 1, caseOps);
                caseOps.length = 0;
                continue;
            }
            if (49 /* Digit1 */  <= nextChCode1 && nextChCode1 <= 57 /* Digit9 */ ) {
                // $n
                let matchIndex = nextChCode1 - 48 /* Digit0 */ ;
                // peek next char to probe for $nn
                if (i + 1 < len) {
                    let nextNextChCode = replaceString.charCodeAt(i + 1);
                    if (48 /* Digit0 */  <= nextNextChCode && nextNextChCode <= 57 /* Digit9 */ ) {
                        // $nn
                        // move to next char
                        i++;
                        matchIndex = matchIndex * 10 + (nextNextChCode - 48 /* Digit0 */ );
                        result.emitUnchanged(i - 2);
                        result.emitMatchIndex(matchIndex, i + 1, caseOps);
                        caseOps.length = 0;
                        continue;
                    }
                }
                result.emitUnchanged(i - 1);
                result.emitMatchIndex(matchIndex, i + 1, caseOps);
                caseOps.length = 0;
                continue;
            }
        }
    }
    return result.finalize();
}



var $bRtox = parcelRequire("bRtox");
const $47228890541ada23$export$bc27e4192c4ca2b8 = new (0, $bRtox.RawContextKey)("findWidgetVisible", false);
const $47228890541ada23$export$1bcc3ed82148a8b9 = new (0, $bRtox.RawContextKey)("findInputFocussed", false);
const $47228890541ada23$export$1b9f123cc9b71d78 = new (0, $bRtox.RawContextKey)("replaceInputFocussed", false);
const $47228890541ada23$export$2fe068521df792d6 = {
    primary: 545 /* KeyC */ ,
    mac: {
        primary: 2593 /* KeyC */ 
    }
};
const $47228890541ada23$export$cc2b8eb9ab15ca30 = {
    primary: 565 /* KeyW */ ,
    mac: {
        primary: 2613 /* KeyW */ 
    }
};
const $47228890541ada23$export$7c479f7cdbb6d55e = {
    primary: 560 /* KeyR */ ,
    mac: {
        primary: 2608 /* KeyR */ 
    }
};
const $47228890541ada23$export$a02b1f674b6f16d3 = {
    primary: 554 /* KeyL */ ,
    mac: {
        primary: 2602 /* KeyL */ 
    }
};
const $47228890541ada23$export$68ae9fdc5844d61a = {
    primary: 558 /* KeyP */ ,
    mac: {
        primary: 2606 /* KeyP */ 
    }
};
const $47228890541ada23$export$a4fc1be778636938 = {
    StartFindAction: "actions.find",
    StartFindWithSelection: "actions.findWithSelection",
    StartFindWithArgs: "editor.actions.findWithArgs",
    NextMatchFindAction: "editor.action.nextMatchFindAction",
    PreviousMatchFindAction: "editor.action.previousMatchFindAction",
    NextSelectionMatchFindAction: "editor.action.nextSelectionMatchFindAction",
    PreviousSelectionMatchFindAction: "editor.action.previousSelectionMatchFindAction",
    StartFindReplaceAction: "editor.action.startFindReplaceAction",
    CloseFindWidgetCommand: "closeFindWidget",
    ToggleCaseSensitiveCommand: "toggleFindCaseSensitive",
    ToggleWholeWordCommand: "toggleFindWholeWord",
    ToggleRegexCommand: "toggleFindRegex",
    ToggleSearchScopeCommand: "toggleFindInSelection",
    TogglePreserveCaseCommand: "togglePreserveCase",
    ReplaceOneAction: "editor.action.replaceOne",
    ReplaceAllAction: "editor.action.replaceAll",
    SelectAllMatchesAction: "editor.action.selectAllMatches"
};
const $47228890541ada23$export$79640dbfb07f50a4 = 19999;
const $47228890541ada23$var$RESEARCH_DELAY = 240;
class $47228890541ada23$export$2aaa4f42000d804d {
    dispose() {
        this._isDisposed = true;
        (0, $atiRx.dispose)(this._startSearchingTimer);
        this._toDispose.dispose();
    }
    _onStateChanged(e) {
        if (this._isDisposed) // The find model is disposed during a find state changed event
        return;
        if (!this._editor.hasModel()) // The find model will be disposed momentarily
        return;
        if (e.searchString || e.isReplaceRevealed || e.isRegex || e.wholeWord || e.matchCase || e.searchScope) {
            let model = this._editor.getModel();
            if (model.isTooLargeForSyncing()) {
                this._startSearchingTimer.cancel();
                this._startSearchingTimer.setIfNotSet(()=>{
                    if (e.searchScope) this.research(e.moveCursor, this._state.searchScope);
                    else this.research(e.moveCursor);
                }, $47228890541ada23$var$RESEARCH_DELAY);
            } else if (e.searchScope) this.research(e.moveCursor, this._state.searchScope);
            else this.research(e.moveCursor);
        }
    }
    static _getSearchRange(model, findScope) {
        // If we have set now or before a find scope, use it for computing the search range
        if (findScope) return findScope;
        return model.getFullModelRange();
    }
    research(moveCursor, newFindScope) {
        let findScopes = null;
        if (typeof newFindScope !== "undefined") {
            if (newFindScope !== null) {
                if (!Array.isArray(newFindScope)) findScopes = [
                    newFindScope
                ];
                else findScopes = newFindScope;
            }
        } else findScopes = this._decorations.getFindScopes();
        if (findScopes !== null) findScopes = findScopes.map((findScope)=>{
            if (findScope.startLineNumber !== findScope.endLineNumber) {
                let endLineNumber = findScope.endLineNumber;
                if (findScope.endColumn === 1) endLineNumber = endLineNumber - 1;
                return new (0, $3HpR4.Range)(findScope.startLineNumber, 1, endLineNumber, this._editor.getModel().getLineMaxColumn(endLineNumber));
            }
            return findScope;
        });
        let findMatches = this._findMatches(findScopes, false, $47228890541ada23$export$79640dbfb07f50a4);
        this._decorations.set(findMatches, findScopes);
        const editorSelection = this._editor.getSelection();
        let currentMatchesPosition = this._decorations.getCurrentMatchesPosition(editorSelection);
        if (currentMatchesPosition === 0 && findMatches.length > 0) {
            // current selection is not on top of a match
            // try to find its nearest result from the top of the document
            const matchAfterSelection = (0, $4xCD7.findFirstInSorted)(findMatches.map((match)=>match.range), (range)=>(0, $3HpR4.Range).compareRangesUsingStarts(range, editorSelection) >= 0);
            currentMatchesPosition = matchAfterSelection > 0 ? matchAfterSelection - 1 + 1 /** match position is one based */  : currentMatchesPosition;
        }
        this._state.changeMatchInfo(currentMatchesPosition, this._decorations.getCount(), undefined);
        if (moveCursor && this._editor.getOption(35 /* find */ ).cursorMoveOnType) this._moveToNextMatch(this._decorations.getStartPosition());
    }
    _hasMatches() {
        return this._state.matchesCount > 0;
    }
    _cannotFind() {
        if (!this._hasMatches()) {
            let findScope = this._decorations.getFindScope();
            if (findScope) // Reveal the selection so user is reminded that 'selection find' is on.
            this._editor.revealRangeInCenterIfOutsideViewport(findScope, 0 /* Smooth */ );
            return true;
        }
        return false;
    }
    _setCurrentFindMatch(match) {
        let matchesPosition = this._decorations.setCurrentFindMatch(match);
        this._state.changeMatchInfo(matchesPosition, this._decorations.getCount(), match);
        this._editor.setSelection(match);
        this._editor.revealRangeInCenterIfOutsideViewport(match, 0 /* Smooth */ );
    }
    _prevSearchPosition(before) {
        let isUsingLineStops = this._state.isRegex && (this._state.searchString.indexOf("^") >= 0 || this._state.searchString.indexOf("$") >= 0);
        let { lineNumber: lineNumber , column: column  } = before;
        let model = this._editor.getModel();
        if (isUsingLineStops || column === 1) {
            if (lineNumber === 1) lineNumber = model.getLineCount();
            else lineNumber--;
            column = model.getLineMaxColumn(lineNumber);
        } else column--;
        return new (0, $8qXsZ.Position)(lineNumber, column);
    }
    _moveToPrevMatch(before, isRecursed = false) {
        if (!this._state.canNavigateBack()) {
            // we are beyond the first matched find result
            // instead of doing nothing, we should refocus the first item
            const nextMatchRange = this._decorations.matchAfterPosition(before);
            if (nextMatchRange) this._setCurrentFindMatch(nextMatchRange);
            return;
        }
        if (this._decorations.getCount() < $47228890541ada23$export$79640dbfb07f50a4) {
            let prevMatchRange = this._decorations.matchBeforePosition(before);
            if (prevMatchRange && prevMatchRange.isEmpty() && prevMatchRange.getStartPosition().equals(before)) {
                before = this._prevSearchPosition(before);
                prevMatchRange = this._decorations.matchBeforePosition(before);
            }
            if (prevMatchRange) this._setCurrentFindMatch(prevMatchRange);
            return;
        }
        if (this._cannotFind()) return;
        let findScope = this._decorations.getFindScope();
        let searchRange = $47228890541ada23$export$2aaa4f42000d804d._getSearchRange(this._editor.getModel(), findScope);
        // ...(----)...|...
        if (searchRange.getEndPosition().isBefore(before)) before = searchRange.getEndPosition();
        // ...|...(----)...
        if (before.isBefore(searchRange.getStartPosition())) before = searchRange.getEndPosition();
        let { lineNumber: lineNumber , column: column  } = before;
        let model = this._editor.getModel();
        let position = new (0, $8qXsZ.Position)(lineNumber, column);
        let prevMatch = model.findPreviousMatch(this._state.searchString, position, this._state.isRegex, this._state.matchCase, this._state.wholeWord ? this._editor.getOption(116 /* wordSeparators */ ) : null, false);
        if (prevMatch && prevMatch.range.isEmpty() && prevMatch.range.getStartPosition().equals(position)) {
            // Looks like we're stuck at this position, unacceptable!
            position = this._prevSearchPosition(position);
            prevMatch = model.findPreviousMatch(this._state.searchString, position, this._state.isRegex, this._state.matchCase, this._state.wholeWord ? this._editor.getOption(116 /* wordSeparators */ ) : null, false);
        }
        if (!prevMatch) // there is precisely one match and selection is on top of it
        return;
        if (!isRecursed && !searchRange.containsRange(prevMatch.range)) return this._moveToPrevMatch(prevMatch.range.getStartPosition(), true);
        this._setCurrentFindMatch(prevMatch.range);
    }
    moveToPrevMatch() {
        this._moveToPrevMatch(this._editor.getSelection().getStartPosition());
    }
    _nextSearchPosition(after) {
        let isUsingLineStops = this._state.isRegex && (this._state.searchString.indexOf("^") >= 0 || this._state.searchString.indexOf("$") >= 0);
        let { lineNumber: lineNumber , column: column  } = after;
        let model = this._editor.getModel();
        if (isUsingLineStops || column === model.getLineMaxColumn(lineNumber)) {
            if (lineNumber === model.getLineCount()) lineNumber = 1;
            else lineNumber++;
            column = 1;
        } else column++;
        return new (0, $8qXsZ.Position)(lineNumber, column);
    }
    _moveToNextMatch(after) {
        if (!this._state.canNavigateForward()) {
            // we are beyond the last matched find result
            // instead of doing nothing, we should refocus the last item
            const prevMatchRange = this._decorations.matchBeforePosition(after);
            if (prevMatchRange) this._setCurrentFindMatch(prevMatchRange);
            return;
        }
        if (this._decorations.getCount() < $47228890541ada23$export$79640dbfb07f50a4) {
            let nextMatchRange = this._decorations.matchAfterPosition(after);
            if (nextMatchRange && nextMatchRange.isEmpty() && nextMatchRange.getStartPosition().equals(after)) {
                // Looks like we're stuck at this position, unacceptable!
                after = this._nextSearchPosition(after);
                nextMatchRange = this._decorations.matchAfterPosition(after);
            }
            if (nextMatchRange) this._setCurrentFindMatch(nextMatchRange);
            return;
        }
        let nextMatch = this._getNextMatch(after, false, true);
        if (nextMatch) this._setCurrentFindMatch(nextMatch.range);
    }
    _getNextMatch(after, captureMatches, forceMove, isRecursed = false) {
        if (this._cannotFind()) return null;
        let findScope = this._decorations.getFindScope();
        let searchRange = $47228890541ada23$export$2aaa4f42000d804d._getSearchRange(this._editor.getModel(), findScope);
        // ...(----)...|...
        if (searchRange.getEndPosition().isBefore(after)) after = searchRange.getStartPosition();
        // ...|...(----)...
        if (after.isBefore(searchRange.getStartPosition())) after = searchRange.getStartPosition();
        let { lineNumber: lineNumber , column: column  } = after;
        let model = this._editor.getModel();
        let position = new (0, $8qXsZ.Position)(lineNumber, column);
        let nextMatch = model.findNextMatch(this._state.searchString, position, this._state.isRegex, this._state.matchCase, this._state.wholeWord ? this._editor.getOption(116 /* wordSeparators */ ) : null, captureMatches);
        if (forceMove && nextMatch && nextMatch.range.isEmpty() && nextMatch.range.getStartPosition().equals(position)) {
            // Looks like we're stuck at this position, unacceptable!
            position = this._nextSearchPosition(position);
            nextMatch = model.findNextMatch(this._state.searchString, position, this._state.isRegex, this._state.matchCase, this._state.wholeWord ? this._editor.getOption(116 /* wordSeparators */ ) : null, captureMatches);
        }
        if (!nextMatch) // there is precisely one match and selection is on top of it
        return null;
        if (!isRecursed && !searchRange.containsRange(nextMatch.range)) return this._getNextMatch(nextMatch.range.getEndPosition(), captureMatches, forceMove, true);
        return nextMatch;
    }
    moveToNextMatch() {
        this._moveToNextMatch(this._editor.getSelection().getEndPosition());
    }
    _getReplacePattern() {
        if (this._state.isRegex) return (0, $64f27750b5a53e8a$export$ca668b7a7924cbca)(this._state.replaceString);
        return (0, $64f27750b5a53e8a$export$512648940a758bce).fromStaticValue(this._state.replaceString);
    }
    replace() {
        if (!this._hasMatches()) return;
        let replacePattern = this._getReplacePattern();
        let selection = this._editor.getSelection();
        let nextMatch = this._getNextMatch(selection.getStartPosition(), true, false);
        if (nextMatch) {
            if (selection.equalsRange(nextMatch.range)) {
                // selection sits on a find match => replace it!
                let replaceString = replacePattern.buildReplaceString(nextMatch.matches, this._state.preserveCase);
                let command = new (0, $8iWNC.ReplaceCommand)(selection, replaceString);
                this._executeEditorCommand("replace", command);
                this._decorations.setStartPosition(new (0, $8qXsZ.Position)(selection.startLineNumber, selection.startColumn + replaceString.length));
                this.research(true);
            } else {
                this._decorations.setStartPosition(this._editor.getPosition());
                this._setCurrentFindMatch(nextMatch.range);
            }
        }
    }
    _findMatches(findScopes, captureMatches, limitResultCount) {
        const searchRanges = (findScopes || [
            null
        ]).map((scope)=>$47228890541ada23$export$2aaa4f42000d804d._getSearchRange(this._editor.getModel(), scope));
        return this._editor.getModel().findMatches(this._state.searchString, searchRanges, this._state.isRegex, this._state.matchCase, this._state.wholeWord ? this._editor.getOption(116 /* wordSeparators */ ) : null, captureMatches, limitResultCount);
    }
    replaceAll() {
        if (!this._hasMatches()) return;
        const findScopes = this._decorations.getFindScopes();
        if (findScopes === null && this._state.matchesCount >= $47228890541ada23$export$79640dbfb07f50a4) // Doing a replace on the entire file that is over ${MATCHES_LIMIT} matches
        this._largeReplaceAll();
        else this._regularReplaceAll(findScopes);
        this.research(false);
    }
    _largeReplaceAll() {
        const searchParams = new (0, $767Zi.SearchParams)(this._state.searchString, this._state.isRegex, this._state.matchCase, this._state.wholeWord ? this._editor.getOption(116 /* wordSeparators */ ) : null);
        const searchData = searchParams.parseSearchRequest();
        if (!searchData) return;
        let searchRegex = searchData.regex;
        if (!searchRegex.multiline) {
            let mod = "mu";
            if (searchRegex.ignoreCase) mod += "i";
            if (searchRegex.global) mod += "g";
            searchRegex = new RegExp(searchRegex.source, mod);
        }
        const model = this._editor.getModel();
        const modelText = model.getValue(1 /* LF */ );
        const fullModelRange = model.getFullModelRange();
        const replacePattern = this._getReplacePattern();
        let resultText;
        const preserveCase = this._state.preserveCase;
        if (replacePattern.hasReplacementPatterns || preserveCase) resultText = modelText.replace(searchRegex, function() {
            return replacePattern.buildReplaceString(arguments, preserveCase);
        });
        else resultText = modelText.replace(searchRegex, replacePattern.buildReplaceString(null, preserveCase));
        let command = new (0, $8iWNC.ReplaceCommandThatPreservesSelection)(fullModelRange, resultText, this._editor.getSelection());
        this._executeEditorCommand("replaceAll", command);
    }
    _regularReplaceAll(findScopes) {
        const replacePattern = this._getReplacePattern();
        // Get all the ranges (even more than the highlighted ones)
        let matches = this._findMatches(findScopes, replacePattern.hasReplacementPatterns || this._state.preserveCase, 1073741824 /* MAX_SAFE_SMALL_INTEGER */ );
        let replaceStrings = [];
        for(let i = 0, len = matches.length; i < len; i++)replaceStrings[i] = replacePattern.buildReplaceString(matches[i].matches, this._state.preserveCase);
        let command = new (0, $b6ce15d8303e61f2$export$3f7edd8e0e87094f)(this._editor.getSelection(), matches.map((m)=>m.range), replaceStrings);
        this._executeEditorCommand("replaceAll", command);
    }
    selectAllMatches() {
        if (!this._hasMatches()) return;
        let findScopes = this._decorations.getFindScopes();
        // Get all the ranges (even more than the highlighted ones)
        let matches = this._findMatches(findScopes, false, 1073741824 /* MAX_SAFE_SMALL_INTEGER */ );
        let selections = matches.map((m)=>new (0, $cz0c7.Selection)(m.range.startLineNumber, m.range.startColumn, m.range.endLineNumber, m.range.endColumn));
        // If one of the ranges is the editor selection, then maintain it as primary
        let editorSelection = this._editor.getSelection();
        for(let i = 0, len = selections.length; i < len; i++){
            let sel = selections[i];
            if (sel.equalsRange(editorSelection)) {
                selections = [
                    editorSelection
                ].concat(selections.slice(0, i)).concat(selections.slice(i + 1));
                break;
            }
        }
        this._editor.setSelections(selections);
    }
    _executeEditorCommand(source, command) {
        try {
            this._ignoreModelContentChanged = true;
            this._editor.pushUndoStop();
            this._editor.executeCommand(source, command);
            this._editor.pushUndoStop();
        } finally{
            this._ignoreModelContentChanged = false;
        }
    }
    constructor(editor, state){
        this._toDispose = new (0, $atiRx.DisposableStore)();
        this._editor = editor;
        this._state = state;
        this._isDisposed = false;
        this._startSearchingTimer = new (0, $eFOsn.TimeoutTimer)();
        this._decorations = new (0, $0cd4499d8283fd5c$export$bd754614700a28d5)(editor);
        this._toDispose.add(this._decorations);
        this._updateDecorationsScheduler = new (0, $eFOsn.RunOnceScheduler)(()=>this.research(false), 100);
        this._toDispose.add(this._updateDecorationsScheduler);
        this._toDispose.add(this._editor.onDidChangeCursorPosition((e)=>{
            if (e.reason === 3 /* Explicit */  || e.reason === 5 /* Undo */  || e.reason === 6 /* Redo */ ) this._decorations.setStartPosition(this._editor.getPosition());
        }));
        this._ignoreModelContentChanged = false;
        this._toDispose.add(this._editor.onDidChangeModelContent((e)=>{
            if (this._ignoreModelContentChanged) return;
            if (e.isFlush) // a model.setValue() was called
            this._decorations.reset();
            this._decorations.setStartPosition(this._editor.getPosition());
            this._updateDecorationsScheduler.schedule();
        }));
        this._toDispose.add(this._state.onFindReplaceStateChange((e)=>this._onStateChanged(e)));
        this.research(false, this._state.searchScope);
    }
}



var $jOYcd = parcelRequire("jOYcd");

var $5Bh2C = parcelRequire("5Bh2C");

var $8HDYc = parcelRequire("8HDYc");

var $6yffc = parcelRequire("6yffc");

var $fSvkC = parcelRequire("fSvkC");

const $eabed60f85f968b5$var$defaultOpts = {
    inputActiveOptionBorder: (0, $6yffc.Color).fromHex("#007ACC00"),
    inputActiveOptionForeground: (0, $6yffc.Color).fromHex("#FFFFFF"),
    inputActiveOptionBackground: (0, $6yffc.Color).fromHex("#0E639C50")
};
class $eabed60f85f968b5$export$48513f6b9f8ce62d extends (0, $5Bh2C.Widget) {
    get enabled() {
        return this.domNode.getAttribute("aria-disabled") !== "true";
    }
    focus() {
        this.domNode.focus();
    }
    get checked() {
        return this._checked;
    }
    set checked(newIsChecked) {
        this._checked = newIsChecked;
        this.domNode.setAttribute("aria-checked", String(this._checked));
        this.domNode.classList.toggle("checked", this._checked);
        this.applyStyles();
    }
    width() {
        return 22 /* icon width */ ;
    }
    style(styles) {
        if (styles.inputActiveOptionBorder) this._opts.inputActiveOptionBorder = styles.inputActiveOptionBorder;
        if (styles.inputActiveOptionForeground) this._opts.inputActiveOptionForeground = styles.inputActiveOptionForeground;
        if (styles.inputActiveOptionBackground) this._opts.inputActiveOptionBackground = styles.inputActiveOptionBackground;
        this.applyStyles();
    }
    applyStyles() {
        if (this.domNode) {
            this.domNode.style.borderColor = this._checked && this._opts.inputActiveOptionBorder ? this._opts.inputActiveOptionBorder.toString() : "";
            this.domNode.style.color = this._checked && this._opts.inputActiveOptionForeground ? this._opts.inputActiveOptionForeground.toString() : "inherit";
            this.domNode.style.backgroundColor = this._checked && this._opts.inputActiveOptionBackground ? this._opts.inputActiveOptionBackground.toString() : "";
        }
    }
    enable() {
        this.domNode.setAttribute("aria-disabled", String(false));
    }
    disable() {
        this.domNode.setAttribute("aria-disabled", String(true));
    }
    constructor(opts){
        super();
        this._onChange = this._register(new (0, $fSvkC.Emitter)());
        this.onChange = this._onChange.event;
        this._onKeyDown = this._register(new (0, $fSvkC.Emitter)());
        this.onKeyDown = this._onKeyDown.event;
        this._opts = Object.assign(Object.assign({}, $eabed60f85f968b5$var$defaultOpts), opts);
        this._checked = this._opts.isChecked;
        const classes = [
            "monaco-custom-checkbox"
        ];
        if (this._opts.icon) classes.push(...(0, $8HDYc.CSSIcon).asClassNameArray(this._opts.icon));
        if (this._opts.actionClassName) classes.push(...this._opts.actionClassName.split(" "));
        if (this._checked) classes.push("checked");
        this.domNode = document.createElement("div");
        this.domNode.title = this._opts.title;
        this.domNode.classList.add(...classes);
        if (!this._opts.notFocusable) this.domNode.tabIndex = 0;
        this.domNode.setAttribute("role", "checkbox");
        this.domNode.setAttribute("aria-checked", String(this._checked));
        this.domNode.setAttribute("aria-label", this._opts.title);
        this.applyStyles();
        this.onclick(this.domNode, (ev)=>{
            this.checked = !this._checked;
            this._onChange.fire(false);
            ev.preventDefault();
        });
        this.ignoreGesture(this.domNode);
        this.onkeydown(this.domNode, (keyboardEvent)=>{
            if (keyboardEvent.keyCode === 10 /* Space */  || keyboardEvent.keyCode === 3 /* Enter */ ) {
                this.checked = !this._checked;
                this._onChange.fire(true);
                keyboardEvent.preventDefault();
                return;
            }
            this._onKeyDown.fire(keyboardEvent);
        });
    }
}



var $8HDYc = parcelRequire("8HDYc");

var $58WHl = parcelRequire("58WHl");
const $37dced00adf0298e$var$NLS_CASE_SENSITIVE_CHECKBOX_LABEL = $58WHl.localize("caseDescription", "Match Case");
const $37dced00adf0298e$var$NLS_WHOLE_WORD_CHECKBOX_LABEL = $58WHl.localize("wordsDescription", "Match Whole Word");
const $37dced00adf0298e$var$NLS_REGEX_CHECKBOX_LABEL = $58WHl.localize("regexDescription", "Use Regular Expression");
class $37dced00adf0298e$export$35c8b2120be2442f extends (0, $eabed60f85f968b5$export$48513f6b9f8ce62d) {
    constructor(opts){
        super({
            icon: (0, $8HDYc.Codicon).caseSensitive,
            title: $37dced00adf0298e$var$NLS_CASE_SENSITIVE_CHECKBOX_LABEL + opts.appendTitle,
            isChecked: opts.isChecked,
            inputActiveOptionBorder: opts.inputActiveOptionBorder,
            inputActiveOptionForeground: opts.inputActiveOptionForeground,
            inputActiveOptionBackground: opts.inputActiveOptionBackground
        });
    }
}
class $37dced00adf0298e$export$ac12d23e9f4ae591 extends (0, $eabed60f85f968b5$export$48513f6b9f8ce62d) {
    constructor(opts){
        super({
            icon: (0, $8HDYc.Codicon).wholeWord,
            title: $37dced00adf0298e$var$NLS_WHOLE_WORD_CHECKBOX_LABEL + opts.appendTitle,
            isChecked: opts.isChecked,
            inputActiveOptionBorder: opts.inputActiveOptionBorder,
            inputActiveOptionForeground: opts.inputActiveOptionForeground,
            inputActiveOptionBackground: opts.inputActiveOptionBackground
        });
    }
}
class $37dced00adf0298e$export$4e97f692e737273e extends (0, $eabed60f85f968b5$export$48513f6b9f8ce62d) {
    constructor(opts){
        super({
            icon: (0, $8HDYc.Codicon).regex,
            title: $37dced00adf0298e$var$NLS_REGEX_CHECKBOX_LABEL + opts.appendTitle,
            isChecked: opts.isChecked,
            inputActiveOptionBorder: opts.inputActiveOptionBorder,
            inputActiveOptionForeground: opts.inputActiveOptionForeground,
            inputActiveOptionBackground: opts.inputActiveOptionBackground
        });
    }
}



var $5Bh2C = parcelRequire("5Bh2C");

var $eFOsn = parcelRequire("eFOsn");


var $3XYy8 = parcelRequire("3XYy8");

var $fUTzO = parcelRequire("fUTzO");
class $b85a15a8ad51d9ec$export$2ff720b27319038e extends (0, $5Bh2C.Widget) {
    _keybindingLabelFor(actionId) {
        let kb = this._keybindingService.lookupKeybinding(actionId);
        if (!kb) return "";
        return ` (${kb.getLabel()})`;
    }
    dispose() {
        this._editor.removeOverlayWidget(this);
        super.dispose();
    }
    // ----- IOverlayWidget API
    getId() {
        return $b85a15a8ad51d9ec$export$2ff720b27319038e.ID;
    }
    getDomNode() {
        return this._domNode;
    }
    getPosition() {
        return {
            preference: 0 /* TOP_RIGHT_CORNER */ 
        };
    }
    highlightFindOptions() {
        this._revealTemporarily();
    }
    _revealTemporarily() {
        this._show();
        this._hideSoon.schedule();
    }
    _onMouseOut() {
        this._hideSoon.schedule();
    }
    _onMouseOver() {
        this._hideSoon.cancel();
    }
    _show() {
        if (this._isVisible) return;
        this._isVisible = true;
        this._domNode.style.display = "block";
    }
    _hide() {
        if (!this._isVisible) return;
        this._isVisible = false;
        this._domNode.style.display = "none";
    }
    _applyTheme(theme) {
        let inputStyles = {
            inputActiveOptionBorder: theme.getColor((0, $3XYy8.inputActiveOptionBorder)),
            inputActiveOptionForeground: theme.getColor((0, $3XYy8.inputActiveOptionForeground)),
            inputActiveOptionBackground: theme.getColor((0, $3XYy8.inputActiveOptionBackground))
        };
        this.caseSensitive.style(inputStyles);
        this.wholeWords.style(inputStyles);
        this.regex.style(inputStyles);
    }
    constructor(editor, state, keybindingService, themeService){
        super();
        this._hideSoon = this._register(new (0, $eFOsn.RunOnceScheduler)(()=>this._hide(), 2000));
        this._isVisible = false;
        this._editor = editor;
        this._state = state;
        this._keybindingService = keybindingService;
        this._domNode = document.createElement("div");
        this._domNode.className = "findOptionsWidget";
        this._domNode.style.display = "none";
        this._domNode.style.top = "10px";
        this._domNode.setAttribute("role", "presentation");
        this._domNode.setAttribute("aria-hidden", "true");
        const inputActiveOptionBorderColor = themeService.getColorTheme().getColor((0, $3XYy8.inputActiveOptionBorder));
        const inputActiveOptionForegroundColor = themeService.getColorTheme().getColor((0, $3XYy8.inputActiveOptionForeground));
        const inputActiveOptionBackgroundColor = themeService.getColorTheme().getColor((0, $3XYy8.inputActiveOptionBackground));
        this.caseSensitive = this._register(new (0, $37dced00adf0298e$export$35c8b2120be2442f)({
            appendTitle: this._keybindingLabelFor((0, $47228890541ada23$export$a4fc1be778636938).ToggleCaseSensitiveCommand),
            isChecked: this._state.matchCase,
            inputActiveOptionBorder: inputActiveOptionBorderColor,
            inputActiveOptionForeground: inputActiveOptionForegroundColor,
            inputActiveOptionBackground: inputActiveOptionBackgroundColor
        }));
        this._domNode.appendChild(this.caseSensitive.domNode);
        this._register(this.caseSensitive.onChange(()=>{
            this._state.change({
                matchCase: this.caseSensitive.checked
            }, false);
        }));
        this.wholeWords = this._register(new (0, $37dced00adf0298e$export$ac12d23e9f4ae591)({
            appendTitle: this._keybindingLabelFor((0, $47228890541ada23$export$a4fc1be778636938).ToggleWholeWordCommand),
            isChecked: this._state.wholeWord,
            inputActiveOptionBorder: inputActiveOptionBorderColor,
            inputActiveOptionForeground: inputActiveOptionForegroundColor,
            inputActiveOptionBackground: inputActiveOptionBackgroundColor
        }));
        this._domNode.appendChild(this.wholeWords.domNode);
        this._register(this.wholeWords.onChange(()=>{
            this._state.change({
                wholeWord: this.wholeWords.checked
            }, false);
        }));
        this.regex = this._register(new (0, $37dced00adf0298e$export$4e97f692e737273e)({
            appendTitle: this._keybindingLabelFor((0, $47228890541ada23$export$a4fc1be778636938).ToggleRegexCommand),
            isChecked: this._state.isRegex,
            inputActiveOptionBorder: inputActiveOptionBorderColor,
            inputActiveOptionForeground: inputActiveOptionForegroundColor,
            inputActiveOptionBackground: inputActiveOptionBackgroundColor
        }));
        this._domNode.appendChild(this.regex.domNode);
        this._register(this.regex.onChange(()=>{
            this._state.change({
                isRegex: this.regex.checked
            }, false);
        }));
        this._editor.addOverlayWidget(this);
        this._register(this._state.onFindReplaceStateChange((e)=>{
            let somethingChanged = false;
            if (e.isRegex) {
                this.regex.checked = this._state.isRegex;
                somethingChanged = true;
            }
            if (e.wholeWord) {
                this.wholeWords.checked = this._state.wholeWord;
                somethingChanged = true;
            }
            if (e.matchCase) {
                this.caseSensitive.checked = this._state.matchCase;
                somethingChanged = true;
            }
            if (!this._state.isRevealed && somethingChanged) this._revealTemporarily();
        }));
        this._register($jOYcd.addDisposableNonBubblingMouseOutListener(this._domNode, (e)=>this._onMouseOut()));
        this._register($jOYcd.addDisposableListener(this._domNode, "mouseover", (e)=>this._onMouseOver()));
        this._applyTheme(themeService.getColorTheme());
        this._register(themeService.onDidColorThemeChange(this._applyTheme.bind(this)));
    }
}
$b85a15a8ad51d9ec$export$2ff720b27319038e.ID = "editor.contrib.findOptionsWidget";
(0, $fUTzO.registerThemingParticipant)((theme, collector)=>{
    const widgetBackground = theme.getColor((0, $3XYy8.editorWidgetBackground));
    if (widgetBackground) collector.addRule(`.monaco-editor .findOptionsWidget { background-color: ${widgetBackground}; }`);
    const widgetForeground = theme.getColor((0, $3XYy8.editorWidgetForeground));
    if (widgetForeground) collector.addRule(`.monaco-editor .findOptionsWidget { color: ${widgetForeground}; }`);
    const widgetShadowColor = theme.getColor((0, $3XYy8.widgetShadow));
    if (widgetShadowColor) collector.addRule(`.monaco-editor .findOptionsWidget { box-shadow: 0 0 8px 2px ${widgetShadowColor}; }`);
    const hcBorder = theme.getColor((0, $3XYy8.contrastBorder));
    if (hcBorder) collector.addRule(`.monaco-editor .findOptionsWidget { border: 2px solid ${hcBorder}; }`);
});



var $fSvkC = parcelRequire("fSvkC");

var $atiRx = parcelRequire("atiRx");

var $3HpR4 = parcelRequire("3HpR4");

function $02f6bde02aede8a3$var$effectiveOptionValue(override, value) {
    if (override === 1 /* True */ ) return true;
    if (override === 2 /* False */ ) return false;
    return value;
}
class $02f6bde02aede8a3$export$134b1d8b9bc10076 extends (0, $atiRx.Disposable) {
    get searchString() {
        return this._searchString;
    }
    get replaceString() {
        return this._replaceString;
    }
    get isRevealed() {
        return this._isRevealed;
    }
    get isReplaceRevealed() {
        return this._isReplaceRevealed;
    }
    get isRegex() {
        return $02f6bde02aede8a3$var$effectiveOptionValue(this._isRegexOverride, this._isRegex);
    }
    get wholeWord() {
        return $02f6bde02aede8a3$var$effectiveOptionValue(this._wholeWordOverride, this._wholeWord);
    }
    get matchCase() {
        return $02f6bde02aede8a3$var$effectiveOptionValue(this._matchCaseOverride, this._matchCase);
    }
    get preserveCase() {
        return $02f6bde02aede8a3$var$effectiveOptionValue(this._preserveCaseOverride, this._preserveCase);
    }
    get actualIsRegex() {
        return this._isRegex;
    }
    get actualWholeWord() {
        return this._wholeWord;
    }
    get actualMatchCase() {
        return this._matchCase;
    }
    get actualPreserveCase() {
        return this._preserveCase;
    }
    get searchScope() {
        return this._searchScope;
    }
    get matchesPosition() {
        return this._matchesPosition;
    }
    get matchesCount() {
        return this._matchesCount;
    }
    get currentMatch() {
        return this._currentMatch;
    }
    changeMatchInfo(matchesPosition, matchesCount, currentMatch) {
        let changeEvent = {
            moveCursor: false,
            updateHistory: false,
            searchString: false,
            replaceString: false,
            isRevealed: false,
            isReplaceRevealed: false,
            isRegex: false,
            wholeWord: false,
            matchCase: false,
            preserveCase: false,
            searchScope: false,
            matchesPosition: false,
            matchesCount: false,
            currentMatch: false,
            loop: false
        };
        let somethingChanged = false;
        if (matchesCount === 0) matchesPosition = 0;
        if (matchesPosition > matchesCount) matchesPosition = matchesCount;
        if (this._matchesPosition !== matchesPosition) {
            this._matchesPosition = matchesPosition;
            changeEvent.matchesPosition = true;
            somethingChanged = true;
        }
        if (this._matchesCount !== matchesCount) {
            this._matchesCount = matchesCount;
            changeEvent.matchesCount = true;
            somethingChanged = true;
        }
        if (typeof currentMatch !== "undefined") {
            if (!(0, $3HpR4.Range).equalsRange(this._currentMatch, currentMatch)) {
                this._currentMatch = currentMatch;
                changeEvent.currentMatch = true;
                somethingChanged = true;
            }
        }
        if (somethingChanged) this._onFindReplaceStateChange.fire(changeEvent);
    }
    change(newState, moveCursor, updateHistory = true) {
        var _a;
        let changeEvent = {
            moveCursor: moveCursor,
            updateHistory: updateHistory,
            searchString: false,
            replaceString: false,
            isRevealed: false,
            isReplaceRevealed: false,
            isRegex: false,
            wholeWord: false,
            matchCase: false,
            preserveCase: false,
            searchScope: false,
            matchesPosition: false,
            matchesCount: false,
            currentMatch: false,
            loop: false
        };
        let somethingChanged = false;
        const oldEffectiveIsRegex = this.isRegex;
        const oldEffectiveWholeWords = this.wholeWord;
        const oldEffectiveMatchCase = this.matchCase;
        const oldEffectivePreserveCase = this.preserveCase;
        if (typeof newState.searchString !== "undefined") {
            if (this._searchString !== newState.searchString) {
                this._searchString = newState.searchString;
                changeEvent.searchString = true;
                somethingChanged = true;
            }
        }
        if (typeof newState.replaceString !== "undefined") {
            if (this._replaceString !== newState.replaceString) {
                this._replaceString = newState.replaceString;
                changeEvent.replaceString = true;
                somethingChanged = true;
            }
        }
        if (typeof newState.isRevealed !== "undefined") {
            if (this._isRevealed !== newState.isRevealed) {
                this._isRevealed = newState.isRevealed;
                changeEvent.isRevealed = true;
                somethingChanged = true;
            }
        }
        if (typeof newState.isReplaceRevealed !== "undefined") {
            if (this._isReplaceRevealed !== newState.isReplaceRevealed) {
                this._isReplaceRevealed = newState.isReplaceRevealed;
                changeEvent.isReplaceRevealed = true;
                somethingChanged = true;
            }
        }
        if (typeof newState.isRegex !== "undefined") this._isRegex = newState.isRegex;
        if (typeof newState.wholeWord !== "undefined") this._wholeWord = newState.wholeWord;
        if (typeof newState.matchCase !== "undefined") this._matchCase = newState.matchCase;
        if (typeof newState.preserveCase !== "undefined") this._preserveCase = newState.preserveCase;
        if (typeof newState.searchScope !== "undefined") {
            if (!((_a = newState.searchScope) === null || _a === void 0 ? void 0 : _a.every((newSearchScope)=>{
                var _a;
                return (_a = this._searchScope) === null || _a === void 0 ? void 0 : _a.some((existingSearchScope)=>{
                    return !(0, $3HpR4.Range).equalsRange(existingSearchScope, newSearchScope);
                });
            }))) {
                this._searchScope = newState.searchScope;
                changeEvent.searchScope = true;
                somethingChanged = true;
            }
        }
        if (typeof newState.loop !== "undefined") {
            if (this._loop !== newState.loop) {
                this._loop = newState.loop;
                changeEvent.loop = true;
                somethingChanged = true;
            }
        }
        // Overrides get set when they explicitly come in and get reset anytime something else changes
        this._isRegexOverride = typeof newState.isRegexOverride !== "undefined" ? newState.isRegexOverride : 0 /* NotSet */ ;
        this._wholeWordOverride = typeof newState.wholeWordOverride !== "undefined" ? newState.wholeWordOverride : 0 /* NotSet */ ;
        this._matchCaseOverride = typeof newState.matchCaseOverride !== "undefined" ? newState.matchCaseOverride : 0 /* NotSet */ ;
        this._preserveCaseOverride = typeof newState.preserveCaseOverride !== "undefined" ? newState.preserveCaseOverride : 0 /* NotSet */ ;
        if (oldEffectiveIsRegex !== this.isRegex) {
            somethingChanged = true;
            changeEvent.isRegex = true;
        }
        if (oldEffectiveWholeWords !== this.wholeWord) {
            somethingChanged = true;
            changeEvent.wholeWord = true;
        }
        if (oldEffectiveMatchCase !== this.matchCase) {
            somethingChanged = true;
            changeEvent.matchCase = true;
        }
        if (oldEffectivePreserveCase !== this.preserveCase) {
            somethingChanged = true;
            changeEvent.preserveCase = true;
        }
        if (somethingChanged) this._onFindReplaceStateChange.fire(changeEvent);
    }
    canNavigateBack() {
        return this.canNavigateInLoop() || this.matchesPosition !== 1;
    }
    canNavigateForward() {
        return this.canNavigateInLoop() || this.matchesPosition < this.matchesCount;
    }
    canNavigateInLoop() {
        return this._loop || this.matchesCount >= (0, $47228890541ada23$export$79640dbfb07f50a4);
    }
    constructor(){
        super();
        this._onFindReplaceStateChange = this._register(new (0, $fSvkC.Emitter)());
        this.onFindReplaceStateChange = this._onFindReplaceStateChange.event;
        this._searchString = "";
        this._replaceString = "";
        this._isRevealed = false;
        this._isReplaceRevealed = false;
        this._isRegex = false;
        this._isRegexOverride = 0 /* NotSet */ ;
        this._wholeWord = false;
        this._wholeWordOverride = 0 /* NotSet */ ;
        this._matchCase = false;
        this._matchCaseOverride = 0 /* NotSet */ ;
        this._preserveCase = false;
        this._preserveCaseOverride = 0 /* NotSet */ ;
        this._searchScope = null;
        this._matchesPosition = 0;
        this._matchesCount = 0;
        this._currentMatch = null;
        this._loop = true;
    }
}


var $37c6fc1e651081a1$exports = {};

$parcel$export($37c6fc1e651081a1$exports, "FindWidget", function () { return $37c6fc1e651081a1$export$94cf213bcf83d48e; }, function (v) { return $37c6fc1e651081a1$export$94cf213bcf83d48e = v; });

var $jOYcd = parcelRequire("jOYcd");

var $cVmYb = parcelRequire("cVmYb");


var $4icNR = parcelRequire("4icNR");

var $5Bh2C = parcelRequire("5Bh2C");

var $eFOsn = parcelRequire("eFOsn");

var $8HDYc = parcelRequire("8HDYc");

var $g0782 = parcelRequire("g0782");

var $atiRx = parcelRequire("atiRx");

var $1d81R = parcelRequire("1d81R");

var $9TEeL = parcelRequire("9TEeL");


var $3HpR4 = parcelRequire("3HpR4");


var $58WHl = parcelRequire("58WHl");
var $8585abb691d41047$exports = {};

$parcel$export($8585abb691d41047$exports, "ContextScopedFindInput", function () { return $8585abb691d41047$export$8b5d5813b2156e74; }, function (v) { return $8585abb691d41047$export$8b5d5813b2156e74 = v; });
$parcel$export($8585abb691d41047$exports, "ContextScopedReplaceInput", function () { return $8585abb691d41047$export$da3bae0145835d60; }, function (v) { return $8585abb691d41047$export$da3bae0145835d60 = v; });

var $jOYcd = parcelRequire("jOYcd");


var $9lT51 = parcelRequire("9lT51");

var $5Bh2C = parcelRequire("5Bh2C");

var $fSvkC = parcelRequire("fSvkC");


var $58WHl = parcelRequire("58WHl");
const $20806666aebd578d$var$NLS_DEFAULT_LABEL = $58WHl.localize("defaultLabel", "input");
class $20806666aebd578d$export$5f83bd776c0a7f6f extends (0, $5Bh2C.Widget) {
    enable() {
        this.domNode.classList.remove("disabled");
        this.inputBox.enable();
        this.regex.enable();
        this.wholeWords.enable();
        this.caseSensitive.enable();
    }
    disable() {
        this.domNode.classList.add("disabled");
        this.inputBox.disable();
        this.regex.disable();
        this.wholeWords.disable();
        this.caseSensitive.disable();
    }
    setFocusInputOnOptionClick(value) {
        this.fixFocusOnOptionClickEnabled = value;
    }
    setEnabled(enabled) {
        if (enabled) this.enable();
        else this.disable();
    }
    getValue() {
        return this.inputBox.value;
    }
    setValue(value) {
        if (this.inputBox.value !== value) this.inputBox.value = value;
    }
    style(styles) {
        this.inputActiveOptionBorder = styles.inputActiveOptionBorder;
        this.inputActiveOptionForeground = styles.inputActiveOptionForeground;
        this.inputActiveOptionBackground = styles.inputActiveOptionBackground;
        this.inputBackground = styles.inputBackground;
        this.inputForeground = styles.inputForeground;
        this.inputBorder = styles.inputBorder;
        this.inputValidationInfoBackground = styles.inputValidationInfoBackground;
        this.inputValidationInfoForeground = styles.inputValidationInfoForeground;
        this.inputValidationInfoBorder = styles.inputValidationInfoBorder;
        this.inputValidationWarningBackground = styles.inputValidationWarningBackground;
        this.inputValidationWarningForeground = styles.inputValidationWarningForeground;
        this.inputValidationWarningBorder = styles.inputValidationWarningBorder;
        this.inputValidationErrorBackground = styles.inputValidationErrorBackground;
        this.inputValidationErrorForeground = styles.inputValidationErrorForeground;
        this.inputValidationErrorBorder = styles.inputValidationErrorBorder;
        this.applyStyles();
    }
    applyStyles() {
        if (this.domNode) {
            const checkBoxStyles = {
                inputActiveOptionBorder: this.inputActiveOptionBorder,
                inputActiveOptionForeground: this.inputActiveOptionForeground,
                inputActiveOptionBackground: this.inputActiveOptionBackground
            };
            this.regex.style(checkBoxStyles);
            this.wholeWords.style(checkBoxStyles);
            this.caseSensitive.style(checkBoxStyles);
            const inputBoxStyles = {
                inputBackground: this.inputBackground,
                inputForeground: this.inputForeground,
                inputBorder: this.inputBorder,
                inputValidationInfoBackground: this.inputValidationInfoBackground,
                inputValidationInfoForeground: this.inputValidationInfoForeground,
                inputValidationInfoBorder: this.inputValidationInfoBorder,
                inputValidationWarningBackground: this.inputValidationWarningBackground,
                inputValidationWarningForeground: this.inputValidationWarningForeground,
                inputValidationWarningBorder: this.inputValidationWarningBorder,
                inputValidationErrorBackground: this.inputValidationErrorBackground,
                inputValidationErrorForeground: this.inputValidationErrorForeground,
                inputValidationErrorBorder: this.inputValidationErrorBorder
            };
            this.inputBox.style(inputBoxStyles);
        }
    }
    select() {
        this.inputBox.select();
    }
    focus() {
        this.inputBox.focus();
    }
    getCaseSensitive() {
        return this.caseSensitive.checked;
    }
    setCaseSensitive(value) {
        this.caseSensitive.checked = value;
    }
    getWholeWords() {
        return this.wholeWords.checked;
    }
    setWholeWords(value) {
        this.wholeWords.checked = value;
    }
    getRegex() {
        return this.regex.checked;
    }
    setRegex(value) {
        this.regex.checked = value;
        this.validate();
    }
    focusOnCaseSensitive() {
        this.caseSensitive.focus();
    }
    highlightFindOptions() {
        this.domNode.classList.remove("highlight-" + this._lastHighlightFindOptions);
        this._lastHighlightFindOptions = 1 - this._lastHighlightFindOptions;
        this.domNode.classList.add("highlight-" + this._lastHighlightFindOptions);
    }
    validate() {
        this.inputBox.validate();
    }
    clearMessage() {
        this.inputBox.hideMessage();
    }
    constructor(parent, contextViewProvider, _showOptionButtons, options){
        super();
        this._showOptionButtons = _showOptionButtons;
        this.fixFocusOnOptionClickEnabled = true;
        this.imeSessionInProgress = false;
        this._onDidOptionChange = this._register(new (0, $fSvkC.Emitter)());
        this.onDidOptionChange = this._onDidOptionChange.event;
        this._onKeyDown = this._register(new (0, $fSvkC.Emitter)());
        this.onKeyDown = this._onKeyDown.event;
        this._onMouseDown = this._register(new (0, $fSvkC.Emitter)());
        this.onMouseDown = this._onMouseDown.event;
        this._onInput = this._register(new (0, $fSvkC.Emitter)());
        this._onKeyUp = this._register(new (0, $fSvkC.Emitter)());
        this._onCaseSensitiveKeyDown = this._register(new (0, $fSvkC.Emitter)());
        this.onCaseSensitiveKeyDown = this._onCaseSensitiveKeyDown.event;
        this._onRegexKeyDown = this._register(new (0, $fSvkC.Emitter)());
        this.onRegexKeyDown = this._onRegexKeyDown.event;
        this._lastHighlightFindOptions = 0;
        this.contextViewProvider = contextViewProvider;
        this.placeholder = options.placeholder || "";
        this.validation = options.validation;
        this.label = options.label || $20806666aebd578d$var$NLS_DEFAULT_LABEL;
        this.inputActiveOptionBorder = options.inputActiveOptionBorder;
        this.inputActiveOptionForeground = options.inputActiveOptionForeground;
        this.inputActiveOptionBackground = options.inputActiveOptionBackground;
        this.inputBackground = options.inputBackground;
        this.inputForeground = options.inputForeground;
        this.inputBorder = options.inputBorder;
        this.inputValidationInfoBorder = options.inputValidationInfoBorder;
        this.inputValidationInfoBackground = options.inputValidationInfoBackground;
        this.inputValidationInfoForeground = options.inputValidationInfoForeground;
        this.inputValidationWarningBorder = options.inputValidationWarningBorder;
        this.inputValidationWarningBackground = options.inputValidationWarningBackground;
        this.inputValidationWarningForeground = options.inputValidationWarningForeground;
        this.inputValidationErrorBorder = options.inputValidationErrorBorder;
        this.inputValidationErrorBackground = options.inputValidationErrorBackground;
        this.inputValidationErrorForeground = options.inputValidationErrorForeground;
        const appendCaseSensitiveLabel = options.appendCaseSensitiveLabel || "";
        const appendWholeWordsLabel = options.appendWholeWordsLabel || "";
        const appendRegexLabel = options.appendRegexLabel || "";
        const history = options.history || [];
        const flexibleHeight = !!options.flexibleHeight;
        const flexibleWidth = !!options.flexibleWidth;
        const flexibleMaxHeight = options.flexibleMaxHeight;
        this.domNode = document.createElement("div");
        this.domNode.classList.add("monaco-findInput");
        this.inputBox = this._register(new (0, $9lT51.HistoryInputBox)(this.domNode, this.contextViewProvider, {
            placeholder: this.placeholder || "",
            ariaLabel: this.label || "",
            validationOptions: {
                validation: this.validation
            },
            inputBackground: this.inputBackground,
            inputForeground: this.inputForeground,
            inputBorder: this.inputBorder,
            inputValidationInfoBackground: this.inputValidationInfoBackground,
            inputValidationInfoForeground: this.inputValidationInfoForeground,
            inputValidationInfoBorder: this.inputValidationInfoBorder,
            inputValidationWarningBackground: this.inputValidationWarningBackground,
            inputValidationWarningForeground: this.inputValidationWarningForeground,
            inputValidationWarningBorder: this.inputValidationWarningBorder,
            inputValidationErrorBackground: this.inputValidationErrorBackground,
            inputValidationErrorForeground: this.inputValidationErrorForeground,
            inputValidationErrorBorder: this.inputValidationErrorBorder,
            history: history,
            showHistoryHint: options.showHistoryHint,
            flexibleHeight: flexibleHeight,
            flexibleWidth: flexibleWidth,
            flexibleMaxHeight: flexibleMaxHeight
        }));
        this.regex = this._register(new (0, $37dced00adf0298e$export$4e97f692e737273e)({
            appendTitle: appendRegexLabel,
            isChecked: false,
            inputActiveOptionBorder: this.inputActiveOptionBorder,
            inputActiveOptionForeground: this.inputActiveOptionForeground,
            inputActiveOptionBackground: this.inputActiveOptionBackground
        }));
        this._register(this.regex.onChange((viaKeyboard)=>{
            this._onDidOptionChange.fire(viaKeyboard);
            if (!viaKeyboard && this.fixFocusOnOptionClickEnabled) this.inputBox.focus();
            this.validate();
        }));
        this._register(this.regex.onKeyDown((e)=>{
            this._onRegexKeyDown.fire(e);
        }));
        this.wholeWords = this._register(new (0, $37dced00adf0298e$export$ac12d23e9f4ae591)({
            appendTitle: appendWholeWordsLabel,
            isChecked: false,
            inputActiveOptionBorder: this.inputActiveOptionBorder,
            inputActiveOptionForeground: this.inputActiveOptionForeground,
            inputActiveOptionBackground: this.inputActiveOptionBackground
        }));
        this._register(this.wholeWords.onChange((viaKeyboard)=>{
            this._onDidOptionChange.fire(viaKeyboard);
            if (!viaKeyboard && this.fixFocusOnOptionClickEnabled) this.inputBox.focus();
            this.validate();
        }));
        this.caseSensitive = this._register(new (0, $37dced00adf0298e$export$35c8b2120be2442f)({
            appendTitle: appendCaseSensitiveLabel,
            isChecked: false,
            inputActiveOptionBorder: this.inputActiveOptionBorder,
            inputActiveOptionForeground: this.inputActiveOptionForeground,
            inputActiveOptionBackground: this.inputActiveOptionBackground
        }));
        this._register(this.caseSensitive.onChange((viaKeyboard)=>{
            this._onDidOptionChange.fire(viaKeyboard);
            if (!viaKeyboard && this.fixFocusOnOptionClickEnabled) this.inputBox.focus();
            this.validate();
        }));
        this._register(this.caseSensitive.onKeyDown((e)=>{
            this._onCaseSensitiveKeyDown.fire(e);
        }));
        if (this._showOptionButtons) this.inputBox.paddingRight = this.caseSensitive.width() + this.wholeWords.width() + this.regex.width();
        // Arrow-Key support to navigate between options
        let indexes = [
            this.caseSensitive.domNode,
            this.wholeWords.domNode,
            this.regex.domNode
        ];
        this.onkeydown(this.domNode, (event)=>{
            if (event.equals(15 /* LeftArrow */ ) || event.equals(17 /* RightArrow */ ) || event.equals(9 /* Escape */ )) {
                let index = indexes.indexOf(document.activeElement);
                if (index >= 0) {
                    let newIndex = -1;
                    if (event.equals(17 /* RightArrow */ )) newIndex = (index + 1) % indexes.length;
                    else if (event.equals(15 /* LeftArrow */ )) {
                        if (index === 0) newIndex = indexes.length - 1;
                        else newIndex = index - 1;
                    }
                    if (event.equals(9 /* Escape */ )) {
                        indexes[index].blur();
                        this.inputBox.focus();
                    } else if (newIndex >= 0) indexes[newIndex].focus();
                    $jOYcd.EventHelper.stop(event, true);
                }
            }
        });
        let controls = document.createElement("div");
        controls.className = "controls";
        controls.style.display = this._showOptionButtons ? "block" : "none";
        controls.appendChild(this.caseSensitive.domNode);
        controls.appendChild(this.wholeWords.domNode);
        controls.appendChild(this.regex.domNode);
        this.domNode.appendChild(controls);
        if (parent) parent.appendChild(this.domNode);
        this._register($jOYcd.addDisposableListener(this.inputBox.inputElement, "compositionstart", (e)=>{
            this.imeSessionInProgress = true;
        }));
        this._register($jOYcd.addDisposableListener(this.inputBox.inputElement, "compositionend", (e)=>{
            this.imeSessionInProgress = false;
            this._onInput.fire();
        }));
        this.onkeydown(this.inputBox.inputElement, (e)=>this._onKeyDown.fire(e));
        this.onkeyup(this.inputBox.inputElement, (e)=>this._onKeyUp.fire(e));
        this.oninput(this.inputBox.inputElement, (e)=>this._onInput.fire());
        this.onmousedown(this.inputBox.inputElement, (e)=>this._onMouseDown.fire(e));
    }
}



var $jOYcd = parcelRequire("jOYcd");


var $9lT51 = parcelRequire("9lT51");

var $5Bh2C = parcelRequire("5Bh2C");

var $8HDYc = parcelRequire("8HDYc");

var $fSvkC = parcelRequire("fSvkC");


var $58WHl = parcelRequire("58WHl");
const $7634818b8f2d9180$var$NLS_DEFAULT_LABEL = $58WHl.localize("defaultLabel", "input");
const $7634818b8f2d9180$var$NLS_PRESERVE_CASE_LABEL = $58WHl.localize("label.preserveCaseCheckbox", "Preserve Case");
class $7634818b8f2d9180$export$f90d5d340cad4785 extends (0, $eabed60f85f968b5$export$48513f6b9f8ce62d) {
    constructor(opts){
        super({
            // TODO: does this need its own icon?
            icon: (0, $8HDYc.Codicon).preserveCase,
            title: $7634818b8f2d9180$var$NLS_PRESERVE_CASE_LABEL + opts.appendTitle,
            isChecked: opts.isChecked,
            inputActiveOptionBorder: opts.inputActiveOptionBorder,
            inputActiveOptionForeground: opts.inputActiveOptionForeground,
            inputActiveOptionBackground: opts.inputActiveOptionBackground
        });
    }
}
class $7634818b8f2d9180$export$3bdc90548a25210c extends (0, $5Bh2C.Widget) {
    enable() {
        this.domNode.classList.remove("disabled");
        this.inputBox.enable();
        this.preserveCase.enable();
    }
    disable() {
        this.domNode.classList.add("disabled");
        this.inputBox.disable();
        this.preserveCase.disable();
    }
    setEnabled(enabled) {
        if (enabled) this.enable();
        else this.disable();
    }
    style(styles) {
        this.inputActiveOptionBorder = styles.inputActiveOptionBorder;
        this.inputActiveOptionForeground = styles.inputActiveOptionForeground;
        this.inputActiveOptionBackground = styles.inputActiveOptionBackground;
        this.inputBackground = styles.inputBackground;
        this.inputForeground = styles.inputForeground;
        this.inputBorder = styles.inputBorder;
        this.inputValidationInfoBackground = styles.inputValidationInfoBackground;
        this.inputValidationInfoForeground = styles.inputValidationInfoForeground;
        this.inputValidationInfoBorder = styles.inputValidationInfoBorder;
        this.inputValidationWarningBackground = styles.inputValidationWarningBackground;
        this.inputValidationWarningForeground = styles.inputValidationWarningForeground;
        this.inputValidationWarningBorder = styles.inputValidationWarningBorder;
        this.inputValidationErrorBackground = styles.inputValidationErrorBackground;
        this.inputValidationErrorForeground = styles.inputValidationErrorForeground;
        this.inputValidationErrorBorder = styles.inputValidationErrorBorder;
        this.applyStyles();
    }
    applyStyles() {
        if (this.domNode) {
            const checkBoxStyles = {
                inputActiveOptionBorder: this.inputActiveOptionBorder,
                inputActiveOptionForeground: this.inputActiveOptionForeground,
                inputActiveOptionBackground: this.inputActiveOptionBackground
            };
            this.preserveCase.style(checkBoxStyles);
            const inputBoxStyles = {
                inputBackground: this.inputBackground,
                inputForeground: this.inputForeground,
                inputBorder: this.inputBorder,
                inputValidationInfoBackground: this.inputValidationInfoBackground,
                inputValidationInfoForeground: this.inputValidationInfoForeground,
                inputValidationInfoBorder: this.inputValidationInfoBorder,
                inputValidationWarningBackground: this.inputValidationWarningBackground,
                inputValidationWarningForeground: this.inputValidationWarningForeground,
                inputValidationWarningBorder: this.inputValidationWarningBorder,
                inputValidationErrorBackground: this.inputValidationErrorBackground,
                inputValidationErrorForeground: this.inputValidationErrorForeground,
                inputValidationErrorBorder: this.inputValidationErrorBorder
            };
            this.inputBox.style(inputBoxStyles);
        }
    }
    select() {
        this.inputBox.select();
    }
    focus() {
        this.inputBox.focus();
    }
    getPreserveCase() {
        return this.preserveCase.checked;
    }
    setPreserveCase(value) {
        this.preserveCase.checked = value;
    }
    focusOnPreserve() {
        this.preserveCase.focus();
    }
    validate() {
        if (this.inputBox) this.inputBox.validate();
    }
    set width(newWidth) {
        this.inputBox.paddingRight = this.cachedOptionsWidth;
        this.inputBox.width = newWidth;
        this.domNode.style.width = newWidth + "px";
    }
    dispose() {
        super.dispose();
    }
    constructor(parent, contextViewProvider, _showOptionButtons, options){
        super();
        this._showOptionButtons = _showOptionButtons;
        this.fixFocusOnOptionClickEnabled = true;
        this.cachedOptionsWidth = 0;
        this._onDidOptionChange = this._register(new (0, $fSvkC.Emitter)());
        this.onDidOptionChange = this._onDidOptionChange.event;
        this._onKeyDown = this._register(new (0, $fSvkC.Emitter)());
        this.onKeyDown = this._onKeyDown.event;
        this._onMouseDown = this._register(new (0, $fSvkC.Emitter)());
        this._onInput = this._register(new (0, $fSvkC.Emitter)());
        this._onKeyUp = this._register(new (0, $fSvkC.Emitter)());
        this._onPreserveCaseKeyDown = this._register(new (0, $fSvkC.Emitter)());
        this.onPreserveCaseKeyDown = this._onPreserveCaseKeyDown.event;
        this.contextViewProvider = contextViewProvider;
        this.placeholder = options.placeholder || "";
        this.validation = options.validation;
        this.label = options.label || $7634818b8f2d9180$var$NLS_DEFAULT_LABEL;
        this.inputActiveOptionBorder = options.inputActiveOptionBorder;
        this.inputActiveOptionForeground = options.inputActiveOptionForeground;
        this.inputActiveOptionBackground = options.inputActiveOptionBackground;
        this.inputBackground = options.inputBackground;
        this.inputForeground = options.inputForeground;
        this.inputBorder = options.inputBorder;
        this.inputValidationInfoBorder = options.inputValidationInfoBorder;
        this.inputValidationInfoBackground = options.inputValidationInfoBackground;
        this.inputValidationInfoForeground = options.inputValidationInfoForeground;
        this.inputValidationWarningBorder = options.inputValidationWarningBorder;
        this.inputValidationWarningBackground = options.inputValidationWarningBackground;
        this.inputValidationWarningForeground = options.inputValidationWarningForeground;
        this.inputValidationErrorBorder = options.inputValidationErrorBorder;
        this.inputValidationErrorBackground = options.inputValidationErrorBackground;
        this.inputValidationErrorForeground = options.inputValidationErrorForeground;
        const appendPreserveCaseLabel = options.appendPreserveCaseLabel || "";
        const history = options.history || [];
        const flexibleHeight = !!options.flexibleHeight;
        const flexibleWidth = !!options.flexibleWidth;
        const flexibleMaxHeight = options.flexibleMaxHeight;
        this.domNode = document.createElement("div");
        this.domNode.classList.add("monaco-findInput");
        this.inputBox = this._register(new (0, $9lT51.HistoryInputBox)(this.domNode, this.contextViewProvider, {
            ariaLabel: this.label || "",
            placeholder: this.placeholder || "",
            validationOptions: {
                validation: this.validation
            },
            inputBackground: this.inputBackground,
            inputForeground: this.inputForeground,
            inputBorder: this.inputBorder,
            inputValidationInfoBackground: this.inputValidationInfoBackground,
            inputValidationInfoForeground: this.inputValidationInfoForeground,
            inputValidationInfoBorder: this.inputValidationInfoBorder,
            inputValidationWarningBackground: this.inputValidationWarningBackground,
            inputValidationWarningForeground: this.inputValidationWarningForeground,
            inputValidationWarningBorder: this.inputValidationWarningBorder,
            inputValidationErrorBackground: this.inputValidationErrorBackground,
            inputValidationErrorForeground: this.inputValidationErrorForeground,
            inputValidationErrorBorder: this.inputValidationErrorBorder,
            history: history,
            showHistoryHint: options.showHistoryHint,
            flexibleHeight: flexibleHeight,
            flexibleWidth: flexibleWidth,
            flexibleMaxHeight: flexibleMaxHeight
        }));
        this.preserveCase = this._register(new $7634818b8f2d9180$export$f90d5d340cad4785({
            appendTitle: appendPreserveCaseLabel,
            isChecked: false,
            inputActiveOptionBorder: this.inputActiveOptionBorder,
            inputActiveOptionForeground: this.inputActiveOptionForeground,
            inputActiveOptionBackground: this.inputActiveOptionBackground
        }));
        this._register(this.preserveCase.onChange((viaKeyboard)=>{
            this._onDidOptionChange.fire(viaKeyboard);
            if (!viaKeyboard && this.fixFocusOnOptionClickEnabled) this.inputBox.focus();
            this.validate();
        }));
        this._register(this.preserveCase.onKeyDown((e)=>{
            this._onPreserveCaseKeyDown.fire(e);
        }));
        if (this._showOptionButtons) this.cachedOptionsWidth = this.preserveCase.width();
        else this.cachedOptionsWidth = 0;
        // Arrow-Key support to navigate between options
        let indexes = [
            this.preserveCase.domNode
        ];
        this.onkeydown(this.domNode, (event)=>{
            if (event.equals(15 /* LeftArrow */ ) || event.equals(17 /* RightArrow */ ) || event.equals(9 /* Escape */ )) {
                let index = indexes.indexOf(document.activeElement);
                if (index >= 0) {
                    let newIndex = -1;
                    if (event.equals(17 /* RightArrow */ )) newIndex = (index + 1) % indexes.length;
                    else if (event.equals(15 /* LeftArrow */ )) {
                        if (index === 0) newIndex = indexes.length - 1;
                        else newIndex = index - 1;
                    }
                    if (event.equals(9 /* Escape */ )) {
                        indexes[index].blur();
                        this.inputBox.focus();
                    } else if (newIndex >= 0) indexes[newIndex].focus();
                    $jOYcd.EventHelper.stop(event, true);
                }
            }
        });
        let controls = document.createElement("div");
        controls.className = "controls";
        controls.style.display = this._showOptionButtons ? "block" : "none";
        controls.appendChild(this.preserveCase.domNode);
        this.domNode.appendChild(controls);
        if (parent) parent.appendChild(this.domNode);
        this.onkeydown(this.inputBox.inputElement, (e)=>this._onKeyDown.fire(e));
        this.onkeyup(this.inputBox.inputElement, (e)=>this._onKeyUp.fire(e));
        this.oninput(this.inputBox.inputElement, (e)=>this._onInput.fire());
        this.onmousedown(this.inputBox.inputElement, (e)=>this._onMouseDown.fire(e));
    }
}



var $bRtox = parcelRequire("bRtox");

var $cczLz = parcelRequire("cczLz");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $8585abb691d41047$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $8585abb691d41047$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
const $8585abb691d41047$export$c267ff7f08858c20 = "historyNavigationWidget";
const $8585abb691d41047$var$HistoryNavigationForwardsEnablementContext = "historyNavigationForwardsEnabled";
const $8585abb691d41047$var$HistoryNavigationBackwardsEnablementContext = "historyNavigationBackwardsEnabled";
function $8585abb691d41047$var$bindContextScopedWidget(contextKeyService, widget, contextKey) {
    new (0, $bRtox.RawContextKey)(contextKey, widget).bindTo(contextKeyService);
}
function $8585abb691d41047$var$createWidgetScopedContextKeyService(contextKeyService, widget) {
    return contextKeyService.createScoped(widget.target);
}
function $8585abb691d41047$var$getContextScopedWidget(contextKeyService, contextKey) {
    return contextKeyService.getContext(document.activeElement).getValue(contextKey);
}
function $8585abb691d41047$export$9e7f879f78a6e9b2(contextKeyService, widget) {
    const scopedContextKeyService = $8585abb691d41047$var$createWidgetScopedContextKeyService(contextKeyService, widget);
    $8585abb691d41047$var$bindContextScopedWidget(scopedContextKeyService, widget, $8585abb691d41047$export$c267ff7f08858c20);
    const historyNavigationForwardsEnablement = new (0, $bRtox.RawContextKey)($8585abb691d41047$var$HistoryNavigationForwardsEnablementContext, true).bindTo(scopedContextKeyService);
    const historyNavigationBackwardsEnablement = new (0, $bRtox.RawContextKey)($8585abb691d41047$var$HistoryNavigationBackwardsEnablementContext, true).bindTo(scopedContextKeyService);
    return {
        scopedContextKeyService: scopedContextKeyService,
        historyNavigationForwardsEnablement: historyNavigationForwardsEnablement,
        historyNavigationBackwardsEnablement: historyNavigationBackwardsEnablement
    };
}
let $8585abb691d41047$export$8b5d5813b2156e74 = class ContextScopedFindInput extends (0, $20806666aebd578d$export$5f83bd776c0a7f6f) {
    constructor(container, contextViewProvider, options, contextKeyService, showFindOptions = false){
        super(container, contextViewProvider, showFindOptions, options);
        this._register($8585abb691d41047$export$9e7f879f78a6e9b2(contextKeyService, {
            target: this.inputBox.element,
            historyNavigator: this.inputBox
        }).scopedContextKeyService);
    }
};
$8585abb691d41047$export$8b5d5813b2156e74 = $8585abb691d41047$var$__decorate([
    $8585abb691d41047$var$__param(3, (0, $bRtox.IContextKeyService))
], $8585abb691d41047$export$8b5d5813b2156e74);
let $8585abb691d41047$export$da3bae0145835d60 = class ContextScopedReplaceInput extends (0, $7634818b8f2d9180$export$3bdc90548a25210c) {
    constructor(container, contextViewProvider, options, contextKeyService, showReplaceOptions = false){
        super(container, contextViewProvider, showReplaceOptions, options);
        this._register($8585abb691d41047$export$9e7f879f78a6e9b2(contextKeyService, {
            target: this.inputBox.element,
            historyNavigator: this.inputBox
        }).scopedContextKeyService);
    }
};
$8585abb691d41047$export$da3bae0145835d60 = $8585abb691d41047$var$__decorate([
    $8585abb691d41047$var$__param(3, (0, $bRtox.IContextKeyService))
], $8585abb691d41047$export$da3bae0145835d60);
(0, $cczLz.KeybindingsRegistry).registerCommandAndKeybindingRule({
    id: "history.showPrevious",
    weight: 200 /* WorkbenchContrib */ ,
    when: (0, $bRtox.ContextKeyExpr).and((0, $bRtox.ContextKeyExpr).has($8585abb691d41047$export$c267ff7f08858c20), (0, $bRtox.ContextKeyExpr).equals($8585abb691d41047$var$HistoryNavigationBackwardsEnablementContext, true), (0, $abf46e0ea17ab20d$exports.Context).Visible.isEqualTo(false)),
    primary: 16 /* UpArrow */ ,
    secondary: [
        528 /* UpArrow */ 
    ],
    handler: (accessor)=>{
        const widget = $8585abb691d41047$var$getContextScopedWidget(accessor.get((0, $bRtox.IContextKeyService)), $8585abb691d41047$export$c267ff7f08858c20);
        if (widget) {
            const historyInputBox = widget.historyNavigator;
            historyInputBox.showPreviousValue();
        }
    }
});
(0, $cczLz.KeybindingsRegistry).registerCommandAndKeybindingRule({
    id: "history.showNext",
    weight: 200 /* WorkbenchContrib */ ,
    when: (0, $bRtox.ContextKeyExpr).and((0, $bRtox.ContextKeyExpr).has($8585abb691d41047$export$c267ff7f08858c20), (0, $bRtox.ContextKeyExpr).equals($8585abb691d41047$var$HistoryNavigationForwardsEnablementContext, true), (0, $abf46e0ea17ab20d$exports.Context).Visible.isEqualTo(false)),
    primary: 18 /* DownArrow */ ,
    secondary: [
        530 /* DownArrow */ 
    ],
    handler: (accessor)=>{
        const widget = $8585abb691d41047$var$getContextScopedWidget(accessor.get((0, $bRtox.IContextKeyService)), $8585abb691d41047$export$c267ff7f08858c20);
        if (widget) {
            const historyInputBox = widget.historyNavigator;
            historyInputBox.showNextValue();
        }
    }
});


function $3079996ae782d842$export$94614604caa08aab(keybindingService) {
    var _a, _b;
    return ((_a = keybindingService.lookupKeybinding("history.showPrevious")) === null || _a === void 0 ? void 0 : _a.getElectronAccelerator()) === "Up" && ((_b = keybindingService.lookupKeybinding("history.showNext")) === null || _b === void 0 ? void 0 : _b.getElectronAccelerator()) === "Down";
}



var $3XYy8 = parcelRequire("3XYy8");

var $iValS = parcelRequire("iValS");

var $fUTzO = parcelRequire("fUTzO");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $37c6fc1e651081a1$var$__awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const $37c6fc1e651081a1$var$findSelectionIcon = (0, $iValS.registerIcon)("find-selection", (0, $8HDYc.Codicon).selection, $58WHl.localize("findSelectionIcon", "Icon for 'Find in Selection' in the editor find widget."));
const $37c6fc1e651081a1$var$findCollapsedIcon = (0, $iValS.registerIcon)("find-collapsed", (0, $8HDYc.Codicon).chevronRight, $58WHl.localize("findCollapsedIcon", "Icon to indicate that the editor find widget is collapsed."));
const $37c6fc1e651081a1$var$findExpandedIcon = (0, $iValS.registerIcon)("find-expanded", (0, $8HDYc.Codicon).chevronDown, $58WHl.localize("findExpandedIcon", "Icon to indicate that the editor find widget is expanded."));
const $37c6fc1e651081a1$export$83ee554109a27042 = (0, $iValS.registerIcon)("find-replace", (0, $8HDYc.Codicon).replace, $58WHl.localize("findReplaceIcon", "Icon for 'Replace' in the editor find widget."));
const $37c6fc1e651081a1$export$9c63c939bdf63145 = (0, $iValS.registerIcon)("find-replace-all", (0, $8HDYc.Codicon).replaceAll, $58WHl.localize("findReplaceAllIcon", "Icon for 'Replace All' in the editor find widget."));
const $37c6fc1e651081a1$export$cd8ded1ad8462604 = (0, $iValS.registerIcon)("find-previous-match", (0, $8HDYc.Codicon).arrowUp, $58WHl.localize("findPreviousMatchIcon", "Icon for 'Find Previous' in the editor find widget."));
const $37c6fc1e651081a1$export$3b49e6223142e6cb = (0, $iValS.registerIcon)("find-next-match", (0, $8HDYc.Codicon).arrowDown, $58WHl.localize("findNextMatchIcon", "Icon for 'Find Next' in the editor find widget."));
const $37c6fc1e651081a1$var$NLS_FIND_INPUT_LABEL = $58WHl.localize("label.find", "Find");
const $37c6fc1e651081a1$var$NLS_FIND_INPUT_PLACEHOLDER = $58WHl.localize("placeholder.find", "Find");
const $37c6fc1e651081a1$var$NLS_PREVIOUS_MATCH_BTN_LABEL = $58WHl.localize("label.previousMatchButton", "Previous Match");
const $37c6fc1e651081a1$var$NLS_NEXT_MATCH_BTN_LABEL = $58WHl.localize("label.nextMatchButton", "Next Match");
const $37c6fc1e651081a1$var$NLS_TOGGLE_SELECTION_FIND_TITLE = $58WHl.localize("label.toggleSelectionFind", "Find in Selection");
const $37c6fc1e651081a1$var$NLS_CLOSE_BTN_LABEL = $58WHl.localize("label.closeButton", "Close");
const $37c6fc1e651081a1$var$NLS_REPLACE_INPUT_LABEL = $58WHl.localize("label.replace", "Replace");
const $37c6fc1e651081a1$var$NLS_REPLACE_INPUT_PLACEHOLDER = $58WHl.localize("placeholder.replace", "Replace");
const $37c6fc1e651081a1$var$NLS_REPLACE_BTN_LABEL = $58WHl.localize("label.replaceButton", "Replace");
const $37c6fc1e651081a1$var$NLS_REPLACE_ALL_BTN_LABEL = $58WHl.localize("label.replaceAllButton", "Replace All");
const $37c6fc1e651081a1$var$NLS_TOGGLE_REPLACE_MODE_BTN_LABEL = $58WHl.localize("label.toggleReplaceButton", "Toggle Replace");
const $37c6fc1e651081a1$var$NLS_MATCHES_COUNT_LIMIT_TITLE = $58WHl.localize("title.matchesCountLimit", "Only the first {0} results are highlighted, but all find operations work on the entire text.", (0, $47228890541ada23$export$79640dbfb07f50a4));
const $37c6fc1e651081a1$export$db048e36c0077c43 = $58WHl.localize("label.matchesLocation", "{0} of {1}");
const $37c6fc1e651081a1$export$5e23834a190f34c5 = $58WHl.localize("label.noResults", "No results");
const $37c6fc1e651081a1$var$FIND_WIDGET_INITIAL_WIDTH = 419;
const $37c6fc1e651081a1$var$PART_WIDTH = 275;
const $37c6fc1e651081a1$var$FIND_INPUT_AREA_WIDTH = $37c6fc1e651081a1$var$PART_WIDTH - 54;
let $37c6fc1e651081a1$var$MAX_MATCHES_COUNT_WIDTH = 69;
// let FIND_ALL_CONTROLS_WIDTH = 17/** Find Input margin-left */ + (MAX_MATCHES_COUNT_WIDTH + 3 + 1) /** Match Results */ + 23 /** Button */ * 4 + 2/** sash */;
const $37c6fc1e651081a1$var$FIND_INPUT_AREA_HEIGHT = 33; // The height of Find Widget when Replace Input is not visible.
const $37c6fc1e651081a1$var$ctrlEnterReplaceAllWarningPromptedKey = "ctrlEnterReplaceAll.windows.donotask";
const $37c6fc1e651081a1$var$ctrlKeyMod = $1d81R.isMacintosh ? 256 /* WinCtrl */  : 2048 /* CtrlCmd */ ;
class $37c6fc1e651081a1$export$70830c157adafe3e {
    constructor(afterLineNumber){
        this.afterLineNumber = afterLineNumber;
        this.heightInPx = $37c6fc1e651081a1$var$FIND_INPUT_AREA_HEIGHT;
        this.suppressMouseDown = false;
        this.domNode = document.createElement("div");
        this.domNode.className = "dock-find-viewzone";
    }
}
function $37c6fc1e651081a1$var$stopPropagationForMultiLineUpwards(event, value, textarea) {
    const isMultiline = !!value.match(/\n/);
    if (textarea && isMultiline && textarea.selectionStart > 0) {
        event.stopPropagation();
        return;
    }
}
function $37c6fc1e651081a1$var$stopPropagationForMultiLineDownwards(event, value, textarea) {
    const isMultiline = !!value.match(/\n/);
    if (textarea && isMultiline && textarea.selectionEnd < textarea.value.length) {
        event.stopPropagation();
        return;
    }
}
class $37c6fc1e651081a1$export$94cf213bcf83d48e extends (0, $5Bh2C.Widget) {
    // ----- IOverlayWidget API
    getId() {
        return $37c6fc1e651081a1$export$94cf213bcf83d48e.ID;
    }
    getDomNode() {
        return this._domNode;
    }
    getPosition() {
        if (this._isVisible) return {
            preference: 0 /* TOP_RIGHT_CORNER */ 
        };
        return null;
    }
    // ----- React to state changes
    _onStateChanged(e) {
        if (e.searchString) {
            try {
                this._ignoreChangeEvent = true;
                this._findInput.setValue(this._state.searchString);
            } finally{
                this._ignoreChangeEvent = false;
            }
            this._updateButtons();
        }
        if (e.replaceString) this._replaceInput.inputBox.value = this._state.replaceString;
        if (e.isRevealed) {
            if (this._state.isRevealed) this._reveal();
            else this._hide(true);
        }
        if (e.isReplaceRevealed) {
            if (this._state.isReplaceRevealed) {
                if (!this._codeEditor.getOption(80 /* readOnly */ ) && !this._isReplaceVisible) {
                    this._isReplaceVisible = true;
                    this._replaceInput.width = $jOYcd.getTotalWidth(this._findInput.domNode);
                    this._updateButtons();
                    this._replaceInput.inputBox.layout();
                }
            } else if (this._isReplaceVisible) {
                this._isReplaceVisible = false;
                this._updateButtons();
            }
        }
        if ((e.isRevealed || e.isReplaceRevealed) && (this._state.isRevealed || this._state.isReplaceRevealed)) {
            if (this._tryUpdateHeight()) this._showViewZone();
        }
        if (e.isRegex) this._findInput.setRegex(this._state.isRegex);
        if (e.wholeWord) this._findInput.setWholeWords(this._state.wholeWord);
        if (e.matchCase) this._findInput.setCaseSensitive(this._state.matchCase);
        if (e.preserveCase) this._replaceInput.setPreserveCase(this._state.preserveCase);
        if (e.searchScope) {
            if (this._state.searchScope) this._toggleSelectionFind.checked = true;
            else this._toggleSelectionFind.checked = false;
            this._updateToggleSelectionFindButton();
        }
        if (e.searchString || e.matchesCount || e.matchesPosition) {
            let showRedOutline = this._state.searchString.length > 0 && this._state.matchesCount === 0;
            this._domNode.classList.toggle("no-results", showRedOutline);
            this._updateMatchesCount();
            this._updateButtons();
        }
        if (e.searchString || e.currentMatch) this._layoutViewZone();
        if (e.updateHistory) this._delayedUpdateHistory();
        if (e.loop) this._updateButtons();
    }
    _delayedUpdateHistory() {
        this._updateHistoryDelayer.trigger(this._updateHistory.bind(this)).then(undefined, (0, $g0782.onUnexpectedError));
    }
    _updateHistory() {
        if (this._state.searchString) this._findInput.inputBox.addToHistory();
        if (this._state.replaceString) this._replaceInput.inputBox.addToHistory();
    }
    _updateMatchesCount() {
        this._matchesCount.style.minWidth = $37c6fc1e651081a1$var$MAX_MATCHES_COUNT_WIDTH + "px";
        if (this._state.matchesCount >= (0, $47228890541ada23$export$79640dbfb07f50a4)) this._matchesCount.title = $37c6fc1e651081a1$var$NLS_MATCHES_COUNT_LIMIT_TITLE;
        else this._matchesCount.title = "";
        // remove previous content
        if (this._matchesCount.firstChild) this._matchesCount.removeChild(this._matchesCount.firstChild);
        let label;
        if (this._state.matchesCount > 0) {
            let matchesCount = String(this._state.matchesCount);
            if (this._state.matchesCount >= (0, $47228890541ada23$export$79640dbfb07f50a4)) matchesCount += "+";
            let matchesPosition = String(this._state.matchesPosition);
            if (matchesPosition === "0") matchesPosition = "?";
            label = $9TEeL.format($37c6fc1e651081a1$export$db048e36c0077c43, matchesPosition, matchesCount);
        } else label = $37c6fc1e651081a1$export$5e23834a190f34c5;
        this._matchesCount.appendChild(document.createTextNode(label));
        (0, $cVmYb.alert)(this._getAriaLabel(label, this._state.currentMatch, this._state.searchString));
        $37c6fc1e651081a1$var$MAX_MATCHES_COUNT_WIDTH = Math.max($37c6fc1e651081a1$var$MAX_MATCHES_COUNT_WIDTH, this._matchesCount.clientWidth);
    }
    // ----- actions
    _getAriaLabel(label, currentMatch, searchString) {
        if (label === $37c6fc1e651081a1$export$5e23834a190f34c5) return searchString === "" ? $58WHl.localize("ariaSearchNoResultEmpty", "{0} found", label) : $58WHl.localize("ariaSearchNoResult", "{0} found for '{1}'", label, searchString);
        if (currentMatch) {
            const ariaLabel = $58WHl.localize("ariaSearchNoResultWithLineNum", "{0} found for '{1}', at {2}", label, searchString, currentMatch.startLineNumber + ":" + currentMatch.startColumn);
            const model = this._codeEditor.getModel();
            if (model && currentMatch.startLineNumber <= model.getLineCount() && currentMatch.startLineNumber >= 1) {
                const lineContent = model.getLineContent(currentMatch.startLineNumber);
                return `${lineContent}, ${ariaLabel}`;
            }
            return ariaLabel;
        }
        return $58WHl.localize("ariaSearchNoResultWithLineNumNoCurrentMatch", "{0} found for '{1}'", label, searchString);
    }
    /**
     * If 'selection find' is ON we should not disable the button (its function is to cancel 'selection find').
     * If 'selection find' is OFF we enable the button only if there is a selection.
     */ _updateToggleSelectionFindButton() {
        let selection = this._codeEditor.getSelection();
        let isSelection = selection ? selection.startLineNumber !== selection.endLineNumber || selection.startColumn !== selection.endColumn : false;
        let isChecked = this._toggleSelectionFind.checked;
        if (this._isVisible && (isChecked || isSelection)) this._toggleSelectionFind.enable();
        else this._toggleSelectionFind.disable();
    }
    _updateButtons() {
        this._findInput.setEnabled(this._isVisible);
        this._replaceInput.setEnabled(this._isVisible && this._isReplaceVisible);
        this._updateToggleSelectionFindButton();
        this._closeBtn.setEnabled(this._isVisible);
        let findInputIsNonEmpty = this._state.searchString.length > 0;
        let matchesCount = this._state.matchesCount ? true : false;
        this._prevBtn.setEnabled(this._isVisible && findInputIsNonEmpty && matchesCount && this._state.canNavigateBack());
        this._nextBtn.setEnabled(this._isVisible && findInputIsNonEmpty && matchesCount && this._state.canNavigateForward());
        this._replaceBtn.setEnabled(this._isVisible && this._isReplaceVisible && findInputIsNonEmpty);
        this._replaceAllBtn.setEnabled(this._isVisible && this._isReplaceVisible && findInputIsNonEmpty);
        this._domNode.classList.toggle("replaceToggled", this._isReplaceVisible);
        this._toggleReplaceBtn.setExpanded(this._isReplaceVisible);
        let canReplace = !this._codeEditor.getOption(80 /* readOnly */ );
        this._toggleReplaceBtn.setEnabled(this._isVisible && canReplace);
    }
    _reveal() {
        this._revealTimeouts.forEach((e)=>{
            clearTimeout(e);
        });
        this._revealTimeouts = [];
        if (!this._isVisible) {
            this._isVisible = true;
            const selection = this._codeEditor.getSelection();
            switch(this._codeEditor.getOption(35 /* find */ ).autoFindInSelection){
                case "always":
                    this._toggleSelectionFind.checked = true;
                    break;
                case "never":
                    this._toggleSelectionFind.checked = false;
                    break;
                case "multiline":
                    const isSelectionMultipleLine = !!selection && selection.startLineNumber !== selection.endLineNumber;
                    this._toggleSelectionFind.checked = isSelectionMultipleLine;
                    break;
                default:
                    break;
            }
            this._tryUpdateWidgetWidth();
            this._updateButtons();
            this._revealTimeouts.push(setTimeout(()=>{
                this._domNode.classList.add("visible");
                this._domNode.setAttribute("aria-hidden", "false");
            }, 0));
            // validate query again as it's being dismissed when we hide the find widget.
            this._revealTimeouts.push(setTimeout(()=>{
                this._findInput.validate();
            }, 200));
            this._codeEditor.layoutOverlayWidget(this);
            let adjustEditorScrollTop = true;
            if (this._codeEditor.getOption(35 /* find */ ).seedSearchStringFromSelection && selection) {
                const domNode = this._codeEditor.getDomNode();
                if (domNode) {
                    const editorCoords = $jOYcd.getDomNodePagePosition(domNode);
                    const startCoords = this._codeEditor.getScrolledVisiblePosition(selection.getStartPosition());
                    const startLeft = editorCoords.left + (startCoords ? startCoords.left : 0);
                    const startTop = startCoords ? startCoords.top : 0;
                    if (this._viewZone && startTop < this._viewZone.heightInPx) {
                        if (selection.endLineNumber > selection.startLineNumber) adjustEditorScrollTop = false;
                        const leftOfFindWidget = $jOYcd.getTopLeftOffset(this._domNode).left;
                        if (startLeft > leftOfFindWidget) adjustEditorScrollTop = false;
                        const endCoords = this._codeEditor.getScrolledVisiblePosition(selection.getEndPosition());
                        const endLeft = editorCoords.left + (endCoords ? endCoords.left : 0);
                        if (endLeft > leftOfFindWidget) adjustEditorScrollTop = false;
                    }
                }
            }
            this._showViewZone(adjustEditorScrollTop);
        }
    }
    _hide(focusTheEditor) {
        this._revealTimeouts.forEach((e)=>{
            clearTimeout(e);
        });
        this._revealTimeouts = [];
        if (this._isVisible) {
            this._isVisible = false;
            this._updateButtons();
            this._domNode.classList.remove("visible");
            this._domNode.setAttribute("aria-hidden", "true");
            this._findInput.clearMessage();
            if (focusTheEditor) this._codeEditor.focus();
            this._codeEditor.layoutOverlayWidget(this);
            this._removeViewZone();
        }
    }
    _layoutViewZone(targetScrollTop) {
        const addExtraSpaceOnTop = this._codeEditor.getOption(35 /* find */ ).addExtraSpaceOnTop;
        if (!addExtraSpaceOnTop) {
            this._removeViewZone();
            return;
        }
        if (!this._isVisible) return;
        const viewZone = this._viewZone;
        if (this._viewZoneId !== undefined || !viewZone) return;
        this._codeEditor.changeViewZones((accessor)=>{
            viewZone.heightInPx = this._getHeight();
            this._viewZoneId = accessor.addZone(viewZone);
            // scroll top adjust to make sure the editor doesn't scroll when adding viewzone at the beginning.
            this._codeEditor.setScrollTop(targetScrollTop || this._codeEditor.getScrollTop() + viewZone.heightInPx);
        });
    }
    _showViewZone(adjustScroll = true) {
        if (!this._isVisible) return;
        const addExtraSpaceOnTop = this._codeEditor.getOption(35 /* find */ ).addExtraSpaceOnTop;
        if (!addExtraSpaceOnTop) return;
        if (this._viewZone === undefined) this._viewZone = new $37c6fc1e651081a1$export$70830c157adafe3e(0);
        const viewZone = this._viewZone;
        this._codeEditor.changeViewZones((accessor)=>{
            if (this._viewZoneId !== undefined) {
                // the view zone already exists, we need to update the height
                const newHeight = this._getHeight();
                if (newHeight === viewZone.heightInPx) return;
                let scrollAdjustment = newHeight - viewZone.heightInPx;
                viewZone.heightInPx = newHeight;
                accessor.layoutZone(this._viewZoneId);
                if (adjustScroll) this._codeEditor.setScrollTop(this._codeEditor.getScrollTop() + scrollAdjustment);
                return;
            } else {
                let scrollAdjustment1 = this._getHeight();
                // if the editor has top padding, factor that into the zone height
                scrollAdjustment1 -= this._codeEditor.getOption(74 /* padding */ ).top;
                if (scrollAdjustment1 <= 0) return;
                viewZone.heightInPx = scrollAdjustment1;
                this._viewZoneId = accessor.addZone(viewZone);
                if (adjustScroll) this._codeEditor.setScrollTop(this._codeEditor.getScrollTop() + scrollAdjustment1);
            }
        });
    }
    _removeViewZone() {
        this._codeEditor.changeViewZones((accessor)=>{
            if (this._viewZoneId !== undefined) {
                accessor.removeZone(this._viewZoneId);
                this._viewZoneId = undefined;
                if (this._viewZone) {
                    this._codeEditor.setScrollTop(this._codeEditor.getScrollTop() - this._viewZone.heightInPx);
                    this._viewZone = undefined;
                }
            }
        });
    }
    _applyTheme(theme) {
        let inputStyles = {
            inputActiveOptionBorder: theme.getColor((0, $3XYy8.inputActiveOptionBorder)),
            inputActiveOptionBackground: theme.getColor((0, $3XYy8.inputActiveOptionBackground)),
            inputActiveOptionForeground: theme.getColor((0, $3XYy8.inputActiveOptionForeground)),
            inputBackground: theme.getColor((0, $3XYy8.inputBackground)),
            inputForeground: theme.getColor((0, $3XYy8.inputForeground)),
            inputBorder: theme.getColor((0, $3XYy8.inputBorder)),
            inputValidationInfoBackground: theme.getColor((0, $3XYy8.inputValidationInfoBackground)),
            inputValidationInfoForeground: theme.getColor((0, $3XYy8.inputValidationInfoForeground)),
            inputValidationInfoBorder: theme.getColor((0, $3XYy8.inputValidationInfoBorder)),
            inputValidationWarningBackground: theme.getColor((0, $3XYy8.inputValidationWarningBackground)),
            inputValidationWarningForeground: theme.getColor((0, $3XYy8.inputValidationWarningForeground)),
            inputValidationWarningBorder: theme.getColor((0, $3XYy8.inputValidationWarningBorder)),
            inputValidationErrorBackground: theme.getColor((0, $3XYy8.inputValidationErrorBackground)),
            inputValidationErrorForeground: theme.getColor((0, $3XYy8.inputValidationErrorForeground)),
            inputValidationErrorBorder: theme.getColor((0, $3XYy8.inputValidationErrorBorder))
        };
        this._findInput.style(inputStyles);
        this._replaceInput.style(inputStyles);
        this._toggleSelectionFind.style(inputStyles);
    }
    _tryUpdateWidgetWidth() {
        if (!this._isVisible) return;
        if (!$jOYcd.isInDOM(this._domNode)) // the widget is not in the DOM
        return;
        const layoutInfo = this._codeEditor.getLayoutInfo();
        const editorContentWidth = layoutInfo.contentWidth;
        if (editorContentWidth <= 0) {
            // for example, diff view original editor
            this._domNode.classList.add("hiddenEditor");
            return;
        } else if (this._domNode.classList.contains("hiddenEditor")) this._domNode.classList.remove("hiddenEditor");
        const editorWidth = layoutInfo.width;
        const minimapWidth = layoutInfo.minimap.minimapWidth;
        let collapsedFindWidget = false;
        let reducedFindWidget = false;
        let narrowFindWidget = false;
        if (this._resized) {
            let widgetWidth = $jOYcd.getTotalWidth(this._domNode);
            if (widgetWidth > $37c6fc1e651081a1$var$FIND_WIDGET_INITIAL_WIDTH) {
                // as the widget is resized by users, we may need to change the max width of the widget as the editor width changes.
                this._domNode.style.maxWidth = `${editorWidth - 28 - minimapWidth - 15}px`;
                this._replaceInput.width = $jOYcd.getTotalWidth(this._findInput.domNode);
                return;
            }
        }
        if ($37c6fc1e651081a1$var$FIND_WIDGET_INITIAL_WIDTH + 28 + minimapWidth >= editorWidth) reducedFindWidget = true;
        if ($37c6fc1e651081a1$var$FIND_WIDGET_INITIAL_WIDTH + 28 + minimapWidth - $37c6fc1e651081a1$var$MAX_MATCHES_COUNT_WIDTH >= editorWidth) narrowFindWidget = true;
        if ($37c6fc1e651081a1$var$FIND_WIDGET_INITIAL_WIDTH + 28 + minimapWidth - $37c6fc1e651081a1$var$MAX_MATCHES_COUNT_WIDTH >= editorWidth + 50) collapsedFindWidget = true;
        this._domNode.classList.toggle("collapsed-find-widget", collapsedFindWidget);
        this._domNode.classList.toggle("narrow-find-widget", narrowFindWidget);
        this._domNode.classList.toggle("reduced-find-widget", reducedFindWidget);
        if (!narrowFindWidget && !collapsedFindWidget) // the minimal left offset of findwidget is 15px.
        this._domNode.style.maxWidth = `${editorWidth - 28 - minimapWidth - 15}px`;
        if (this._resized) {
            this._findInput.inputBox.layout();
            let findInputWidth = this._findInput.inputBox.element.clientWidth;
            if (findInputWidth > 0) this._replaceInput.width = findInputWidth;
        } else if (this._isReplaceVisible) this._replaceInput.width = $jOYcd.getTotalWidth(this._findInput.domNode);
    }
    _getHeight() {
        let totalheight = 0;
        // find input margin top
        totalheight += 4;
        // find input height
        totalheight += this._findInput.inputBox.height + 2 /** input box border */ ;
        if (this._isReplaceVisible) {
            // replace input margin
            totalheight += 4;
            totalheight += this._replaceInput.inputBox.height + 2 /** input box border */ ;
        }
        // margin bottom
        totalheight += 4;
        return totalheight;
    }
    _tryUpdateHeight() {
        const totalHeight = this._getHeight();
        if (this._cachedHeight !== null && this._cachedHeight === totalHeight) return false;
        this._cachedHeight = totalHeight;
        this._domNode.style.height = `${totalHeight}px`;
        return true;
    }
    // ----- Public
    focusFindInput() {
        this._findInput.select();
        // Edge browser requires focus() in addition to select()
        this._findInput.focus();
    }
    focusReplaceInput() {
        this._replaceInput.select();
        // Edge browser requires focus() in addition to select()
        this._replaceInput.focus();
    }
    highlightFindOptions() {
        this._findInput.highlightFindOptions();
    }
    _updateSearchScope() {
        if (!this._codeEditor.hasModel()) return;
        if (this._toggleSelectionFind.checked) {
            let selections = this._codeEditor.getSelections();
            selections.map((selection)=>{
                if (selection.endColumn === 1 && selection.endLineNumber > selection.startLineNumber) selection = selection.setEndPosition(selection.endLineNumber - 1, this._codeEditor.getModel().getLineMaxColumn(selection.endLineNumber - 1));
                const currentMatch = this._state.currentMatch;
                if (selection.startLineNumber !== selection.endLineNumber) {
                    if (!(0, $3HpR4.Range).equalsRange(selection, currentMatch)) return selection;
                }
                return null;
            }).filter((element)=>!!element);
            if (selections.length) this._state.change({
                searchScope: selections
            }, true);
        }
    }
    _onFindInputMouseDown(e) {
        // on linux, middle key does pasting.
        if (e.middleButton) e.stopPropagation();
    }
    _onFindInputKeyDown(e) {
        if (e.equals($37c6fc1e651081a1$var$ctrlKeyMod | 3 /* Enter */ )) {
            if (this._keybindingService.dispatchEvent(e, e.target)) {
                e.preventDefault();
                return;
            } else {
                this._findInput.inputBox.insertAtCursor("\n");
                e.preventDefault();
                return;
            }
        }
        if (e.equals(2 /* Tab */ )) {
            if (this._isReplaceVisible) this._replaceInput.focus();
            else this._findInput.focusOnCaseSensitive();
            e.preventDefault();
            return;
        }
        if (e.equals(2066 /* DownArrow */ )) {
            this._codeEditor.focus();
            e.preventDefault();
            return;
        }
        if (e.equals(16 /* UpArrow */ )) return $37c6fc1e651081a1$var$stopPropagationForMultiLineUpwards(e, this._findInput.getValue(), this._findInput.domNode.querySelector("textarea"));
        if (e.equals(18 /* DownArrow */ )) return $37c6fc1e651081a1$var$stopPropagationForMultiLineDownwards(e, this._findInput.getValue(), this._findInput.domNode.querySelector("textarea"));
    }
    _onReplaceInputKeyDown(e) {
        if (e.equals($37c6fc1e651081a1$var$ctrlKeyMod | 3 /* Enter */ )) {
            if (this._keybindingService.dispatchEvent(e, e.target)) {
                e.preventDefault();
                return;
            } else {
                if ($1d81R.isWindows && $1d81R.isNative && !this._ctrlEnterReplaceAllWarningPrompted) {
                    // this is the first time when users press Ctrl + Enter to replace all
                    this._notificationService.info($58WHl.localize("ctrlEnter.keybindingChanged", "Ctrl+Enter now inserts line break instead of replacing all. You can modify the keybinding for editor.action.replaceAll to override this behavior."));
                    this._ctrlEnterReplaceAllWarningPrompted = true;
                    this._storageService.store($37c6fc1e651081a1$var$ctrlEnterReplaceAllWarningPromptedKey, true, 0 /* GLOBAL */ , 0 /* USER */ );
                }
                this._replaceInput.inputBox.insertAtCursor("\n");
                e.preventDefault();
                return;
            }
        }
        if (e.equals(2 /* Tab */ )) {
            this._findInput.focusOnCaseSensitive();
            e.preventDefault();
            return;
        }
        if (e.equals(1026 /* Tab */ )) {
            this._findInput.focus();
            e.preventDefault();
            return;
        }
        if (e.equals(2066 /* DownArrow */ )) {
            this._codeEditor.focus();
            e.preventDefault();
            return;
        }
        if (e.equals(16 /* UpArrow */ )) return $37c6fc1e651081a1$var$stopPropagationForMultiLineUpwards(e, this._replaceInput.inputBox.value, this._replaceInput.inputBox.element.querySelector("textarea"));
        if (e.equals(18 /* DownArrow */ )) return $37c6fc1e651081a1$var$stopPropagationForMultiLineDownwards(e, this._replaceInput.inputBox.value, this._replaceInput.inputBox.element.querySelector("textarea"));
    }
    // ----- sash
    getVerticalSashLeft(_sash) {
        return 0;
    }
    // ----- initialization
    _keybindingLabelFor(actionId) {
        let kb = this._keybindingService.lookupKeybinding(actionId);
        if (!kb) return "";
        return ` (${kb.getLabel()})`;
    }
    _buildDomNode() {
        const flexibleHeight = true;
        const flexibleWidth = true;
        // Find input
        this._findInput = this._register(new (0, $8585abb691d41047$exports.ContextScopedFindInput)(null, this._contextViewProvider, {
            width: $37c6fc1e651081a1$var$FIND_INPUT_AREA_WIDTH,
            label: $37c6fc1e651081a1$var$NLS_FIND_INPUT_LABEL,
            placeholder: $37c6fc1e651081a1$var$NLS_FIND_INPUT_PLACEHOLDER,
            appendCaseSensitiveLabel: this._keybindingLabelFor((0, $47228890541ada23$export$a4fc1be778636938).ToggleCaseSensitiveCommand),
            appendWholeWordsLabel: this._keybindingLabelFor((0, $47228890541ada23$export$a4fc1be778636938).ToggleWholeWordCommand),
            appendRegexLabel: this._keybindingLabelFor((0, $47228890541ada23$export$a4fc1be778636938).ToggleRegexCommand),
            validation: (value)=>{
                if (value.length === 0 || !this._findInput.getRegex()) return null;
                try {
                    // use `g` and `u` which are also used by the TextModel search
                    new RegExp(value, "gu");
                    return null;
                } catch (e) {
                    return {
                        content: e.message
                    };
                }
            },
            flexibleHeight: flexibleHeight,
            flexibleWidth: flexibleWidth,
            flexibleMaxHeight: 118,
            showHistoryHint: ()=>(0, $3079996ae782d842$export$94614604caa08aab)(this._keybindingService)
        }, this._contextKeyService, true));
        this._findInput.setRegex(!!this._state.isRegex);
        this._findInput.setCaseSensitive(!!this._state.matchCase);
        this._findInput.setWholeWords(!!this._state.wholeWord);
        this._register(this._findInput.onKeyDown((e)=>this._onFindInputKeyDown(e)));
        this._register(this._findInput.inputBox.onDidChange(()=>{
            if (this._ignoreChangeEvent) return;
            this._state.change({
                searchString: this._findInput.getValue()
            }, true);
        }));
        this._register(this._findInput.onDidOptionChange(()=>{
            this._state.change({
                isRegex: this._findInput.getRegex(),
                wholeWord: this._findInput.getWholeWords(),
                matchCase: this._findInput.getCaseSensitive()
            }, true);
        }));
        this._register(this._findInput.onCaseSensitiveKeyDown((e)=>{
            if (e.equals(1026 /* Tab */ )) {
                if (this._isReplaceVisible) {
                    this._replaceInput.focus();
                    e.preventDefault();
                }
            }
        }));
        this._register(this._findInput.onRegexKeyDown((e)=>{
            if (e.equals(2 /* Tab */ )) {
                if (this._isReplaceVisible) {
                    this._replaceInput.focusOnPreserve();
                    e.preventDefault();
                }
            }
        }));
        this._register(this._findInput.inputBox.onDidHeightChange((e)=>{
            if (this._tryUpdateHeight()) this._showViewZone();
        }));
        if ($1d81R.isLinux) this._register(this._findInput.onMouseDown((e)=>this._onFindInputMouseDown(e)));
        this._matchesCount = document.createElement("div");
        this._matchesCount.className = "matchesCount";
        this._updateMatchesCount();
        // Previous button
        this._prevBtn = this._register(new $37c6fc1e651081a1$export$627052cf4bde93a4({
            label: $37c6fc1e651081a1$var$NLS_PREVIOUS_MATCH_BTN_LABEL + this._keybindingLabelFor((0, $47228890541ada23$export$a4fc1be778636938).PreviousMatchFindAction),
            icon: $37c6fc1e651081a1$export$cd8ded1ad8462604,
            onTrigger: ()=>{
                this._codeEditor.getAction((0, $47228890541ada23$export$a4fc1be778636938).PreviousMatchFindAction).run().then(undefined, (0, $g0782.onUnexpectedError));
            }
        }));
        // Next button
        this._nextBtn = this._register(new $37c6fc1e651081a1$export$627052cf4bde93a4({
            label: $37c6fc1e651081a1$var$NLS_NEXT_MATCH_BTN_LABEL + this._keybindingLabelFor((0, $47228890541ada23$export$a4fc1be778636938).NextMatchFindAction),
            icon: $37c6fc1e651081a1$export$3b49e6223142e6cb,
            onTrigger: ()=>{
                this._codeEditor.getAction((0, $47228890541ada23$export$a4fc1be778636938).NextMatchFindAction).run().then(undefined, (0, $g0782.onUnexpectedError));
            }
        }));
        let findPart = document.createElement("div");
        findPart.className = "find-part";
        findPart.appendChild(this._findInput.domNode);
        const actionsContainer = document.createElement("div");
        actionsContainer.className = "find-actions";
        findPart.appendChild(actionsContainer);
        actionsContainer.appendChild(this._matchesCount);
        actionsContainer.appendChild(this._prevBtn.domNode);
        actionsContainer.appendChild(this._nextBtn.domNode);
        // Toggle selection button
        this._toggleSelectionFind = this._register(new (0, $eabed60f85f968b5$export$48513f6b9f8ce62d)({
            icon: $37c6fc1e651081a1$var$findSelectionIcon,
            title: $37c6fc1e651081a1$var$NLS_TOGGLE_SELECTION_FIND_TITLE + this._keybindingLabelFor((0, $47228890541ada23$export$a4fc1be778636938).ToggleSearchScopeCommand),
            isChecked: false
        }));
        this._register(this._toggleSelectionFind.onChange(()=>{
            if (this._toggleSelectionFind.checked) {
                if (this._codeEditor.hasModel()) {
                    let selections = this._codeEditor.getSelections();
                    selections.map((selection)=>{
                        if (selection.endColumn === 1 && selection.endLineNumber > selection.startLineNumber) selection = selection.setEndPosition(selection.endLineNumber - 1, this._codeEditor.getModel().getLineMaxColumn(selection.endLineNumber - 1));
                        if (!selection.isEmpty()) return selection;
                        return null;
                    }).filter((element)=>!!element);
                    if (selections.length) this._state.change({
                        searchScope: selections
                    }, true);
                }
            } else this._state.change({
                searchScope: null
            }, true);
        }));
        actionsContainer.appendChild(this._toggleSelectionFind.domNode);
        // Close button
        this._closeBtn = this._register(new $37c6fc1e651081a1$export$627052cf4bde93a4({
            label: $37c6fc1e651081a1$var$NLS_CLOSE_BTN_LABEL + this._keybindingLabelFor((0, $47228890541ada23$export$a4fc1be778636938).CloseFindWidgetCommand),
            icon: (0, $iValS.widgetClose),
            onTrigger: ()=>{
                this._state.change({
                    isRevealed: false,
                    searchScope: null
                }, false);
            },
            onKeyDown: (e)=>{
                if (e.equals(2 /* Tab */ )) {
                    if (this._isReplaceVisible) {
                        if (this._replaceBtn.isEnabled()) this._replaceBtn.focus();
                        else this._codeEditor.focus();
                        e.preventDefault();
                    }
                }
            }
        }));
        actionsContainer.appendChild(this._closeBtn.domNode);
        // Replace input
        this._replaceInput = this._register(new (0, $8585abb691d41047$exports.ContextScopedReplaceInput)(null, undefined, {
            label: $37c6fc1e651081a1$var$NLS_REPLACE_INPUT_LABEL,
            placeholder: $37c6fc1e651081a1$var$NLS_REPLACE_INPUT_PLACEHOLDER,
            appendPreserveCaseLabel: this._keybindingLabelFor((0, $47228890541ada23$export$a4fc1be778636938).TogglePreserveCaseCommand),
            history: [],
            flexibleHeight: flexibleHeight,
            flexibleWidth: flexibleWidth,
            flexibleMaxHeight: 118,
            showHistoryHint: ()=>(0, $3079996ae782d842$export$94614604caa08aab)(this._keybindingService)
        }, this._contextKeyService, true));
        this._replaceInput.setPreserveCase(!!this._state.preserveCase);
        this._register(this._replaceInput.onKeyDown((e)=>this._onReplaceInputKeyDown(e)));
        this._register(this._replaceInput.inputBox.onDidChange(()=>{
            this._state.change({
                replaceString: this._replaceInput.inputBox.value
            }, false);
        }));
        this._register(this._replaceInput.inputBox.onDidHeightChange((e)=>{
            if (this._isReplaceVisible && this._tryUpdateHeight()) this._showViewZone();
        }));
        this._register(this._replaceInput.onDidOptionChange(()=>{
            this._state.change({
                preserveCase: this._replaceInput.getPreserveCase()
            }, true);
        }));
        this._register(this._replaceInput.onPreserveCaseKeyDown((e)=>{
            if (e.equals(2 /* Tab */ )) {
                if (this._prevBtn.isEnabled()) this._prevBtn.focus();
                else if (this._nextBtn.isEnabled()) this._nextBtn.focus();
                else if (this._toggleSelectionFind.enabled) this._toggleSelectionFind.focus();
                else if (this._closeBtn.isEnabled()) this._closeBtn.focus();
                e.preventDefault();
            }
        }));
        // Replace one button
        this._replaceBtn = this._register(new $37c6fc1e651081a1$export$627052cf4bde93a4({
            label: $37c6fc1e651081a1$var$NLS_REPLACE_BTN_LABEL + this._keybindingLabelFor((0, $47228890541ada23$export$a4fc1be778636938).ReplaceOneAction),
            icon: $37c6fc1e651081a1$export$83ee554109a27042,
            onTrigger: ()=>{
                this._controller.replace();
            },
            onKeyDown: (e)=>{
                if (e.equals(1026 /* Tab */ )) {
                    this._closeBtn.focus();
                    e.preventDefault();
                }
            }
        }));
        // Replace all button
        this._replaceAllBtn = this._register(new $37c6fc1e651081a1$export$627052cf4bde93a4({
            label: $37c6fc1e651081a1$var$NLS_REPLACE_ALL_BTN_LABEL + this._keybindingLabelFor((0, $47228890541ada23$export$a4fc1be778636938).ReplaceAllAction),
            icon: $37c6fc1e651081a1$export$9c63c939bdf63145,
            onTrigger: ()=>{
                this._controller.replaceAll();
            }
        }));
        let replacePart = document.createElement("div");
        replacePart.className = "replace-part";
        replacePart.appendChild(this._replaceInput.domNode);
        const replaceActionsContainer = document.createElement("div");
        replaceActionsContainer.className = "replace-actions";
        replacePart.appendChild(replaceActionsContainer);
        replaceActionsContainer.appendChild(this._replaceBtn.domNode);
        replaceActionsContainer.appendChild(this._replaceAllBtn.domNode);
        // Toggle replace button
        this._toggleReplaceBtn = this._register(new $37c6fc1e651081a1$export$627052cf4bde93a4({
            label: $37c6fc1e651081a1$var$NLS_TOGGLE_REPLACE_MODE_BTN_LABEL,
            className: "codicon toggle left",
            onTrigger: ()=>{
                this._state.change({
                    isReplaceRevealed: !this._isReplaceVisible
                }, false);
                if (this._isReplaceVisible) {
                    this._replaceInput.width = $jOYcd.getTotalWidth(this._findInput.domNode);
                    this._replaceInput.inputBox.layout();
                }
                this._showViewZone();
            }
        }));
        this._toggleReplaceBtn.setExpanded(this._isReplaceVisible);
        // Widget
        this._domNode = document.createElement("div");
        this._domNode.className = "editor-widget find-widget";
        this._domNode.setAttribute("aria-hidden", "true");
        // We need to set this explicitly, otherwise on IE11, the width inheritence of flex doesn't work.
        this._domNode.style.width = `${$37c6fc1e651081a1$var$FIND_WIDGET_INITIAL_WIDTH}px`;
        this._domNode.appendChild(this._toggleReplaceBtn.domNode);
        this._domNode.appendChild(findPart);
        this._domNode.appendChild(replacePart);
        this._resizeSash = new (0, $4icNR.Sash)(this._domNode, this, {
            orientation: 0 /* VERTICAL */ ,
            size: 2
        });
        this._resized = false;
        let originalWidth = $37c6fc1e651081a1$var$FIND_WIDGET_INITIAL_WIDTH;
        this._register(this._resizeSash.onDidStart(()=>{
            originalWidth = $jOYcd.getTotalWidth(this._domNode);
        }));
        this._register(this._resizeSash.onDidChange((evt)=>{
            this._resized = true;
            let width = originalWidth + evt.startX - evt.currentX;
            if (width < $37c6fc1e651081a1$var$FIND_WIDGET_INITIAL_WIDTH) // narrow down the find widget should be handled by CSS.
            return;
            const maxWidth = parseFloat($jOYcd.getComputedStyle(this._domNode).maxWidth) || 0;
            if (width > maxWidth) return;
            this._domNode.style.width = `${width}px`;
            if (this._isReplaceVisible) this._replaceInput.width = $jOYcd.getTotalWidth(this._findInput.domNode);
            this._findInput.inputBox.layout();
            this._tryUpdateHeight();
        }));
        this._register(this._resizeSash.onDidReset(()=>{
            // users double click on the sash
            const currentWidth = $jOYcd.getTotalWidth(this._domNode);
            if (currentWidth < $37c6fc1e651081a1$var$FIND_WIDGET_INITIAL_WIDTH) // The editor is narrow and the width of the find widget is controlled fully by CSS.
            return;
            let width = $37c6fc1e651081a1$var$FIND_WIDGET_INITIAL_WIDTH;
            if (!this._resized || currentWidth === $37c6fc1e651081a1$var$FIND_WIDGET_INITIAL_WIDTH) {
                // 1. never resized before, double click should maximizes it
                // 2. users resized it already but its width is the same as default
                const layoutInfo = this._codeEditor.getLayoutInfo();
                width = layoutInfo.width - 28 - layoutInfo.minimap.minimapWidth - 15;
                this._resized = true;
            }
            this._domNode.style.width = `${width}px`;
            if (this._isReplaceVisible) this._replaceInput.width = $jOYcd.getTotalWidth(this._findInput.domNode);
            this._findInput.inputBox.layout();
        }));
    }
    updateAccessibilitySupport() {
        const value = this._codeEditor.getOption(2 /* accessibilitySupport */ );
        this._findInput.setFocusInputOnOptionClick(value !== 2 /* Enabled */ );
    }
    constructor(codeEditor, controller, state, contextViewProvider, keybindingService, contextKeyService, themeService, storageService, notificationService){
        super();
        this._cachedHeight = null;
        this._revealTimeouts = [];
        this._codeEditor = codeEditor;
        this._controller = controller;
        this._state = state;
        this._contextViewProvider = contextViewProvider;
        this._keybindingService = keybindingService;
        this._contextKeyService = contextKeyService;
        this._storageService = storageService;
        this._notificationService = notificationService;
        this._ctrlEnterReplaceAllWarningPrompted = !!storageService.getBoolean($37c6fc1e651081a1$var$ctrlEnterReplaceAllWarningPromptedKey, 0 /* GLOBAL */ );
        this._isVisible = false;
        this._isReplaceVisible = false;
        this._ignoreChangeEvent = false;
        this._updateHistoryDelayer = new (0, $eFOsn.Delayer)(500);
        this._register((0, $atiRx.toDisposable)(()=>this._updateHistoryDelayer.cancel()));
        this._register(this._state.onFindReplaceStateChange((e)=>this._onStateChanged(e)));
        this._buildDomNode();
        this._updateButtons();
        this._tryUpdateWidgetWidth();
        this._findInput.inputBox.layout();
        this._register(this._codeEditor.onDidChangeConfiguration((e)=>{
            if (e.hasChanged(80 /* readOnly */ )) {
                if (this._codeEditor.getOption(80 /* readOnly */ )) // Hide replace part if editor becomes read only
                this._state.change({
                    isReplaceRevealed: false
                }, false);
                this._updateButtons();
            }
            if (e.hasChanged(130 /* layoutInfo */ )) this._tryUpdateWidgetWidth();
            if (e.hasChanged(2 /* accessibilitySupport */ )) this.updateAccessibilitySupport();
            if (e.hasChanged(35 /* find */ )) {
                const addExtraSpaceOnTop = this._codeEditor.getOption(35 /* find */ ).addExtraSpaceOnTop;
                if (addExtraSpaceOnTop && !this._viewZone) {
                    this._viewZone = new $37c6fc1e651081a1$export$70830c157adafe3e(0);
                    this._showViewZone();
                }
                if (!addExtraSpaceOnTop && this._viewZone) this._removeViewZone();
            }
        }));
        this.updateAccessibilitySupport();
        this._register(this._codeEditor.onDidChangeCursorSelection(()=>{
            if (this._isVisible) this._updateToggleSelectionFindButton();
        }));
        this._register(this._codeEditor.onDidFocusEditorWidget(()=>$37c6fc1e651081a1$var$__awaiter(this, void 0, void 0, function*() {
                if (this._isVisible) {
                    let globalBufferTerm = yield this._controller.getGlobalBufferTerm();
                    if (globalBufferTerm && globalBufferTerm !== this._state.searchString) {
                        this._state.change({
                            searchString: globalBufferTerm
                        }, false);
                        this._findInput.select();
                    }
                }
            })));
        this._findInputFocused = (0, $47228890541ada23$export$1bcc3ed82148a8b9).bindTo(contextKeyService);
        this._findFocusTracker = this._register($jOYcd.trackFocus(this._findInput.inputBox.inputElement));
        this._register(this._findFocusTracker.onDidFocus(()=>{
            this._findInputFocused.set(true);
            this._updateSearchScope();
        }));
        this._register(this._findFocusTracker.onDidBlur(()=>{
            this._findInputFocused.set(false);
        }));
        this._replaceInputFocused = (0, $47228890541ada23$export$1b9f123cc9b71d78).bindTo(contextKeyService);
        this._replaceFocusTracker = this._register($jOYcd.trackFocus(this._replaceInput.inputBox.inputElement));
        this._register(this._replaceFocusTracker.onDidFocus(()=>{
            this._replaceInputFocused.set(true);
            this._updateSearchScope();
        }));
        this._register(this._replaceFocusTracker.onDidBlur(()=>{
            this._replaceInputFocused.set(false);
        }));
        this._codeEditor.addOverlayWidget(this);
        if (this._codeEditor.getOption(35 /* find */ ).addExtraSpaceOnTop) this._viewZone = new $37c6fc1e651081a1$export$70830c157adafe3e(0); // Put it before the first line then users can scroll beyond the first line.
        this._applyTheme(themeService.getColorTheme());
        this._register(themeService.onDidColorThemeChange(this._applyTheme.bind(this)));
        this._register(this._codeEditor.onDidChangeModel(()=>{
            if (!this._isVisible) return;
            this._viewZoneId = undefined;
        }));
        this._register(this._codeEditor.onDidScrollChange((e)=>{
            if (e.scrollTopChanged) {
                this._layoutViewZone();
                return;
            }
            // for other scroll changes, layout the viewzone in next tick to avoid ruining current rendering.
            setTimeout(()=>{
                this._layoutViewZone();
            }, 0);
        }));
    }
}
$37c6fc1e651081a1$export$94cf213bcf83d48e.ID = "editor.contrib.findWidget";
class $37c6fc1e651081a1$export$627052cf4bde93a4 extends (0, $5Bh2C.Widget) {
    get domNode() {
        return this._domNode;
    }
    isEnabled() {
        return this._domNode.tabIndex >= 0;
    }
    focus() {
        this._domNode.focus();
    }
    setEnabled(enabled) {
        this._domNode.classList.toggle("disabled", !enabled);
        this._domNode.setAttribute("aria-disabled", String(!enabled));
        this._domNode.tabIndex = enabled ? 0 : -1;
    }
    setExpanded(expanded) {
        this._domNode.setAttribute("aria-expanded", String(!!expanded));
        if (expanded) {
            this._domNode.classList.remove(...(0, $fUTzO.ThemeIcon).asClassNameArray($37c6fc1e651081a1$var$findCollapsedIcon));
            this._domNode.classList.add(...(0, $fUTzO.ThemeIcon).asClassNameArray($37c6fc1e651081a1$var$findExpandedIcon));
        } else {
            this._domNode.classList.remove(...(0, $fUTzO.ThemeIcon).asClassNameArray($37c6fc1e651081a1$var$findExpandedIcon));
            this._domNode.classList.add(...(0, $fUTzO.ThemeIcon).asClassNameArray($37c6fc1e651081a1$var$findCollapsedIcon));
        }
    }
    constructor(opts){
        super();
        this._opts = opts;
        let className = "button";
        if (this._opts.className) className = className + " " + this._opts.className;
        if (this._opts.icon) className = className + " " + (0, $fUTzO.ThemeIcon).asClassName(this._opts.icon);
        this._domNode = document.createElement("div");
        this._domNode.title = this._opts.label;
        this._domNode.tabIndex = 0;
        this._domNode.className = className;
        this._domNode.setAttribute("role", "button");
        this._domNode.setAttribute("aria-label", this._opts.label);
        this.onclick(this._domNode, (e)=>{
            this._opts.onTrigger();
            e.preventDefault();
        });
        this.onkeydown(this._domNode, (e)=>{
            if (e.equals(10 /* Space */ ) || e.equals(3 /* Enter */ )) {
                this._opts.onTrigger();
                e.preventDefault();
                return;
            }
            if (this._opts.onKeyDown) this._opts.onKeyDown(e);
        });
    }
}
// theming
(0, $fUTzO.registerThemingParticipant)((theme, collector)=>{
    const addBackgroundColorRule = (selector, color)=>{
        if (color) collector.addRule(`.monaco-editor ${selector} { background-color: ${color}; }`);
    };
    addBackgroundColorRule(".findMatch", theme.getColor((0, $3XYy8.editorFindMatchHighlight)));
    addBackgroundColorRule(".currentFindMatch", theme.getColor((0, $3XYy8.editorFindMatch)));
    addBackgroundColorRule(".findScope", theme.getColor((0, $3XYy8.editorFindRangeHighlight)));
    const widgetBackground = theme.getColor((0, $3XYy8.editorWidgetBackground));
    addBackgroundColorRule(".find-widget", widgetBackground);
    const widgetShadowColor = theme.getColor((0, $3XYy8.widgetShadow));
    if (widgetShadowColor) collector.addRule(`.monaco-editor .find-widget { box-shadow: 0 0 8px 2px ${widgetShadowColor}; }`);
    const findMatchHighlightBorder = theme.getColor((0, $3XYy8.editorFindMatchHighlightBorder));
    if (findMatchHighlightBorder) collector.addRule(`.monaco-editor .findMatch { border: 1px ${theme.type === "hc" ? "dotted" : "solid"} ${findMatchHighlightBorder}; box-sizing: border-box; }`);
    const findMatchBorder = theme.getColor((0, $3XYy8.editorFindMatchBorder));
    if (findMatchBorder) collector.addRule(`.monaco-editor .currentFindMatch { border: 2px solid ${findMatchBorder}; padding: 1px; box-sizing: border-box; }`);
    const findRangeHighlightBorder = theme.getColor((0, $3XYy8.editorFindRangeHighlightBorder));
    if (findRangeHighlightBorder) collector.addRule(`.monaco-editor .findScope { border: 1px ${theme.type === "hc" ? "dashed" : "solid"} ${findRangeHighlightBorder}; }`);
    const hcBorder = theme.getColor((0, $3XYy8.contrastBorder));
    if (hcBorder) collector.addRule(`.monaco-editor .find-widget { border: 1px solid ${hcBorder}; }`);
    const foreground = theme.getColor((0, $3XYy8.editorWidgetForeground));
    if (foreground) collector.addRule(`.monaco-editor .find-widget { color: ${foreground}; }`);
    const error = theme.getColor((0, $3XYy8.errorForeground));
    if (error) collector.addRule(`.monaco-editor .find-widget.no-results .matchesCount { color: ${error}; }`);
    const resizeBorderBackground = theme.getColor((0, $3XYy8.editorWidgetResizeBorder));
    if (resizeBorderBackground) collector.addRule(`.monaco-editor .find-widget .monaco-sash { background-color: ${resizeBorderBackground}; }`);
    else {
        const border = theme.getColor((0, $3XYy8.editorWidgetBorder));
        if (border) collector.addRule(`.monaco-editor .find-widget .monaco-sash { background-color: ${border}; }`);
    }
    // Action bars
    const toolbarHoverBackgroundColor = theme.getColor((0, $3XYy8.toolbarHoverBackground));
    if (toolbarHoverBackgroundColor) collector.addRule(`
		.monaco-editor .find-widget .button:not(.disabled):hover,
		.monaco-editor .find-widget .codicon-find-selection:hover {
			background-color: ${toolbarHoverBackgroundColor} !important;
		}
	`);
    // This rule is used to override the outline color for synthetic-focus find input.
    const focusOutline = theme.getColor((0, $3XYy8.focusBorder));
    if (focusOutline) collector.addRule(`.monaco-editor .find-widget .monaco-inputbox.synthetic-focus { outline-color: ${focusOutline}; }`);
});



var $58WHl = parcelRequire("58WHl");

var $2IxgH = parcelRequire("2IxgH");

var $lkKTA = parcelRequire("lkKTA");

var $bRtox = parcelRequire("bRtox");

var $jINLy = parcelRequire("jINLy");

var $gY9wc = parcelRequire("gY9wc");

var $dgZ0t = parcelRequire("dgZ0t");

var $6XVdL = parcelRequire("6XVdL");

var $fUTzO = parcelRequire("fUTzO");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $9d3f26ffc33207eb$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $9d3f26ffc33207eb$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var $9d3f26ffc33207eb$var$__awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const $9d3f26ffc33207eb$var$SEARCH_STRING_MAX_LENGTH = 524288;
function $9d3f26ffc33207eb$export$422517c0cd4e3d9f(editor, seedSearchStringFromSelection = "single", seedSearchStringFromNonEmptySelection = false) {
    if (!editor.hasModel()) return null;
    const selection = editor.getSelection();
    // if selection spans multiple lines, default search string to empty
    if (seedSearchStringFromSelection === "single" && selection.startLineNumber === selection.endLineNumber || seedSearchStringFromSelection === "multiple") {
        if (selection.isEmpty()) {
            const wordAtPosition = editor.getConfiguredWordAtPosition(selection.getStartPosition());
            if (wordAtPosition && false === seedSearchStringFromNonEmptySelection) return wordAtPosition.word;
        } else {
            if (editor.getModel().getValueLengthInRange(selection) < $9d3f26ffc33207eb$var$SEARCH_STRING_MAX_LENGTH) return editor.getModel().getValueInRange(selection);
        }
    }
    return null;
}
let $9d3f26ffc33207eb$export$3190f9a23ad62166 = class CommonFindController extends (0, $atiRx.Disposable) {
    get editor() {
        return this._editor;
    }
    static get(editor) {
        return editor.getContribution(CommonFindController.ID);
    }
    dispose() {
        this.disposeModel();
        super.dispose();
    }
    disposeModel() {
        if (this._model) {
            this._model.dispose();
            this._model = null;
        }
    }
    _onStateChanged(e) {
        this.saveQueryState(e);
        if (e.isRevealed) {
            if (this._state.isRevealed) this._findWidgetVisible.set(true);
            else {
                this._findWidgetVisible.reset();
                this.disposeModel();
            }
        }
        if (e.searchString) this.setGlobalBufferTerm(this._state.searchString);
    }
    saveQueryState(e) {
        if (e.isRegex) this._storageService.store("editor.isRegex", this._state.actualIsRegex, 1 /* WORKSPACE */ , 0 /* USER */ );
        if (e.wholeWord) this._storageService.store("editor.wholeWord", this._state.actualWholeWord, 1 /* WORKSPACE */ , 0 /* USER */ );
        if (e.matchCase) this._storageService.store("editor.matchCase", this._state.actualMatchCase, 1 /* WORKSPACE */ , 0 /* USER */ );
        if (e.preserveCase) this._storageService.store("editor.preserveCase", this._state.actualPreserveCase, 1 /* WORKSPACE */ , 0 /* USER */ );
    }
    loadQueryState() {
        this._state.change({
            matchCase: this._storageService.getBoolean("editor.matchCase", 1 /* WORKSPACE */ , this._state.matchCase),
            wholeWord: this._storageService.getBoolean("editor.wholeWord", 1 /* WORKSPACE */ , this._state.wholeWord),
            isRegex: this._storageService.getBoolean("editor.isRegex", 1 /* WORKSPACE */ , this._state.isRegex),
            preserveCase: this._storageService.getBoolean("editor.preserveCase", 1 /* WORKSPACE */ , this._state.preserveCase)
        }, false);
    }
    isFindInputFocused() {
        return !!(0, $47228890541ada23$export$1bcc3ed82148a8b9).getValue(this._contextKeyService);
    }
    getState() {
        return this._state;
    }
    closeFindWidget() {
        this._state.change({
            isRevealed: false,
            searchScope: null
        }, false);
        this._editor.focus();
    }
    toggleCaseSensitive() {
        this._state.change({
            matchCase: !this._state.matchCase
        }, false);
        if (!this._state.isRevealed) this.highlightFindOptions();
    }
    toggleWholeWords() {
        this._state.change({
            wholeWord: !this._state.wholeWord
        }, false);
        if (!this._state.isRevealed) this.highlightFindOptions();
    }
    toggleRegex() {
        this._state.change({
            isRegex: !this._state.isRegex
        }, false);
        if (!this._state.isRevealed) this.highlightFindOptions();
    }
    togglePreserveCase() {
        this._state.change({
            preserveCase: !this._state.preserveCase
        }, false);
        if (!this._state.isRevealed) this.highlightFindOptions();
    }
    toggleSearchScope() {
        if (this._state.searchScope) this._state.change({
            searchScope: null
        }, true);
        else if (this._editor.hasModel()) {
            let selections = this._editor.getSelections();
            selections.map((selection)=>{
                if (selection.endColumn === 1 && selection.endLineNumber > selection.startLineNumber) selection = selection.setEndPosition(selection.endLineNumber - 1, this._editor.getModel().getLineMaxColumn(selection.endLineNumber - 1));
                if (!selection.isEmpty()) return selection;
                return null;
            }).filter((element)=>!!element);
            if (selections.length) this._state.change({
                searchScope: selections
            }, true);
        }
    }
    setSearchString(searchString) {
        if (this._state.isRegex) searchString = $9TEeL.escapeRegExpCharacters(searchString);
        this._state.change({
            searchString: searchString
        }, false);
    }
    highlightFindOptions(ignoreWhenVisible = false) {
    // overwritten in subclass
    }
    _start(opts, newState) {
        return $9d3f26ffc33207eb$var$__awaiter(this, void 0, void 0, function*() {
            this.disposeModel();
            if (!this._editor.hasModel()) // cannot do anything with an editor that doesn't have a model...
            return;
            let stateChanges = Object.assign(Object.assign({}, newState), {
                isRevealed: true
            });
            if (opts.seedSearchStringFromSelection === "single") {
                let selectionSearchString = $9d3f26ffc33207eb$export$422517c0cd4e3d9f(this._editor, opts.seedSearchStringFromSelection, opts.seedSearchStringFromNonEmptySelection);
                if (selectionSearchString) {
                    if (this._state.isRegex) stateChanges.searchString = $9TEeL.escapeRegExpCharacters(selectionSearchString);
                    else stateChanges.searchString = selectionSearchString;
                }
            } else if (opts.seedSearchStringFromSelection === "multiple" && !opts.updateSearchScope) {
                let selectionSearchString1 = $9d3f26ffc33207eb$export$422517c0cd4e3d9f(this._editor, opts.seedSearchStringFromSelection);
                if (selectionSearchString1) stateChanges.searchString = selectionSearchString1;
            }
            if (!stateChanges.searchString && opts.seedSearchStringFromGlobalClipboard) {
                let selectionSearchString2 = yield this.getGlobalBufferTerm();
                if (!this._editor.hasModel()) // the editor has lost its model in the meantime
                return;
                if (selectionSearchString2) stateChanges.searchString = selectionSearchString2;
            }
            // Overwrite isReplaceRevealed
            if (opts.forceRevealReplace || stateChanges.isReplaceRevealed) stateChanges.isReplaceRevealed = true;
            else if (!this._findWidgetVisible.get()) stateChanges.isReplaceRevealed = false;
            if (opts.updateSearchScope) {
                let currentSelections = this._editor.getSelections();
                if (currentSelections.some((selection)=>!selection.isEmpty())) stateChanges.searchScope = currentSelections;
            }
            stateChanges.loop = opts.loop;
            this._state.change(stateChanges, false);
            if (!this._model) this._model = new (0, $47228890541ada23$export$2aaa4f42000d804d)(this._editor, this._state);
        });
    }
    start(opts, newState) {
        return this._start(opts, newState);
    }
    moveToNextMatch() {
        if (this._model) {
            this._model.moveToNextMatch();
            return true;
        }
        return false;
    }
    moveToPrevMatch() {
        if (this._model) {
            this._model.moveToPrevMatch();
            return true;
        }
        return false;
    }
    replace() {
        if (this._model) {
            this._model.replace();
            return true;
        }
        return false;
    }
    replaceAll() {
        if (this._model) {
            this._model.replaceAll();
            return true;
        }
        return false;
    }
    selectAllMatches() {
        if (this._model) {
            this._model.selectAllMatches();
            this._editor.focus();
            return true;
        }
        return false;
    }
    getGlobalBufferTerm() {
        return $9d3f26ffc33207eb$var$__awaiter(this, void 0, void 0, function*() {
            if (this._editor.getOption(35 /* find */ ).globalFindClipboard && this._editor.hasModel() && !this._editor.getModel().isTooLargeForSyncing()) return this._clipboardService.readFindText();
            return "";
        });
    }
    setGlobalBufferTerm(text) {
        if (this._editor.getOption(35 /* find */ ).globalFindClipboard && this._editor.hasModel() && !this._editor.getModel().isTooLargeForSyncing()) // intentionally not awaited
        this._clipboardService.writeFindText(text);
    }
    constructor(editor, contextKeyService, storageService, clipboardService){
        super();
        this._editor = editor;
        this._findWidgetVisible = (0, $47228890541ada23$export$bc27e4192c4ca2b8).bindTo(contextKeyService);
        this._contextKeyService = contextKeyService;
        this._storageService = storageService;
        this._clipboardService = clipboardService;
        this._updateHistoryDelayer = new (0, $eFOsn.Delayer)(500);
        this._state = this._register(new (0, $02f6bde02aede8a3$export$134b1d8b9bc10076)());
        this.loadQueryState();
        this._register(this._state.onFindReplaceStateChange((e)=>this._onStateChanged(e)));
        this._model = null;
        this._register(this._editor.onDidChangeModel(()=>{
            let shouldRestartFind = this._editor.getModel() && this._state.isRevealed;
            this.disposeModel();
            this._state.change({
                searchScope: null,
                matchCase: this._storageService.getBoolean("editor.matchCase", 1 /* WORKSPACE */ , false),
                wholeWord: this._storageService.getBoolean("editor.wholeWord", 1 /* WORKSPACE */ , false),
                isRegex: this._storageService.getBoolean("editor.isRegex", 1 /* WORKSPACE */ , false),
                preserveCase: this._storageService.getBoolean("editor.preserveCase", 1 /* WORKSPACE */ , false)
            }, false);
            if (shouldRestartFind) this._start({
                forceRevealReplace: false,
                seedSearchStringFromSelection: "none",
                seedSearchStringFromNonEmptySelection: false,
                seedSearchStringFromGlobalClipboard: false,
                shouldFocus: 0 /* NoFocusChange */ ,
                shouldAnimate: false,
                updateSearchScope: false,
                loop: this._editor.getOption(35 /* find */ ).loop
            });
        }));
    }
};
$9d3f26ffc33207eb$export$3190f9a23ad62166.ID = "editor.contrib.findController";
$9d3f26ffc33207eb$export$3190f9a23ad62166 = $9d3f26ffc33207eb$var$__decorate([
    $9d3f26ffc33207eb$var$__param(1, (0, $bRtox.IContextKeyService)),
    $9d3f26ffc33207eb$var$__param(2, (0, $6XVdL.IStorageService)),
    $9d3f26ffc33207eb$var$__param(3, (0, $lkKTA.IClipboardService))
], $9d3f26ffc33207eb$export$3190f9a23ad62166);
let $9d3f26ffc33207eb$export$dbc27728234951c5 = class FindController extends $9d3f26ffc33207eb$export$3190f9a23ad62166 {
    _start(opts, newState) {
        const _super = Object.create(null, {
            _start: {
                get: ()=>super._start
            }
        });
        return $9d3f26ffc33207eb$var$__awaiter(this, void 0, void 0, function*() {
            if (!this._widget) this._createFindWidget();
            const selection = this._editor.getSelection();
            let updateSearchScope = false;
            switch(this._editor.getOption(35 /* find */ ).autoFindInSelection){
                case "always":
                    updateSearchScope = true;
                    break;
                case "never":
                    updateSearchScope = false;
                    break;
                case "multiline":
                    const isSelectionMultipleLine = !!selection && selection.startLineNumber !== selection.endLineNumber;
                    updateSearchScope = isSelectionMultipleLine;
                    break;
                default:
                    break;
            }
            opts.updateSearchScope = opts.updateSearchScope || updateSearchScope;
            yield _super._start.call(this, opts, newState);
            if (this._widget) {
                if (opts.shouldFocus === 2 /* FocusReplaceInput */ ) this._widget.focusReplaceInput();
                else if (opts.shouldFocus === 1 /* FocusFindInput */ ) this._widget.focusFindInput();
            }
        });
    }
    highlightFindOptions(ignoreWhenVisible = false) {
        if (!this._widget) this._createFindWidget();
        if (this._state.isRevealed && !ignoreWhenVisible) this._widget.highlightFindOptions();
        else this._findOptionsWidget.highlightFindOptions();
    }
    _createFindWidget() {
        this._widget = this._register(new (0, $37c6fc1e651081a1$exports.FindWidget)(this._editor, this, this._state, this._contextViewService, this._keybindingService, this._contextKeyService, this._themeService, this._storageService, this._notificationService));
        this._findOptionsWidget = this._register(new (0, $b85a15a8ad51d9ec$export$2ff720b27319038e)(this._editor, this._state, this._keybindingService, this._themeService));
    }
    constructor(editor, _contextViewService, _contextKeyService, _keybindingService, _themeService, _notificationService, _storageService, clipboardService){
        super(editor, _contextKeyService, _storageService, clipboardService);
        this._contextViewService = _contextViewService;
        this._keybindingService = _keybindingService;
        this._themeService = _themeService;
        this._notificationService = _notificationService;
        this._widget = null;
        this._findOptionsWidget = null;
    }
};
$9d3f26ffc33207eb$export$dbc27728234951c5 = $9d3f26ffc33207eb$var$__decorate([
    $9d3f26ffc33207eb$var$__param(1, (0, $jINLy.IContextViewService)),
    $9d3f26ffc33207eb$var$__param(2, (0, $bRtox.IContextKeyService)),
    $9d3f26ffc33207eb$var$__param(3, (0, $gY9wc.IKeybindingService)),
    $9d3f26ffc33207eb$var$__param(4, (0, $fUTzO.IThemeService)),
    $9d3f26ffc33207eb$var$__param(5, (0, $dgZ0t.INotificationService)),
    $9d3f26ffc33207eb$var$__param(6, (0, $6XVdL.IStorageService)),
    $9d3f26ffc33207eb$var$__param(7, (0, $lkKTA.IClipboardService))
], $9d3f26ffc33207eb$export$dbc27728234951c5);
const $9d3f26ffc33207eb$export$ad7d9d55cc8c7ec4 = (0, $gGOeQ.registerMultiEditorAction)(new (0, $gGOeQ.MultiEditorAction)({
    id: (0, $47228890541ada23$export$a4fc1be778636938).StartFindAction,
    label: $58WHl.localize("startFindAction", "Find"),
    alias: "Find",
    precondition: (0, $bRtox.ContextKeyExpr).or((0, $bdLce.EditorContextKeys).focus, (0, $bRtox.ContextKeyExpr).has("editorIsOpen")),
    kbOpts: {
        kbExpr: null,
        primary: 2084 /* KeyF */ ,
        weight: 100 /* EditorContrib */ 
    },
    menuOpts: {
        menuId: (0, $2IxgH.MenuId).MenubarEditMenu,
        group: "3_find",
        title: $58WHl.localize({
            key: "miFind",
            comment: [
                "&& denotes a mnemonic"
            ]
        }, "&&Find"),
        order: 1
    }
}));
$9d3f26ffc33207eb$export$ad7d9d55cc8c7ec4.addImplementation(0, (accessor, editor, args)=>{
    const controller = $9d3f26ffc33207eb$export$3190f9a23ad62166.get(editor);
    if (!controller) return false;
    return controller.start({
        forceRevealReplace: false,
        seedSearchStringFromSelection: editor.getOption(35 /* find */ ).seedSearchStringFromSelection !== "never" ? "single" : "none",
        seedSearchStringFromNonEmptySelection: editor.getOption(35 /* find */ ).seedSearchStringFromSelection === "selection",
        seedSearchStringFromGlobalClipboard: editor.getOption(35 /* find */ ).globalFindClipboard,
        shouldFocus: 1 /* FocusFindInput */ ,
        shouldAnimate: true,
        updateSearchScope: false,
        loop: editor.getOption(35 /* find */ ).loop
    });
});
const $9d3f26ffc33207eb$var$findArgDescription = {
    description: "Open a new In-Editor Find Widget.",
    args: [
        {
            name: "Open a new In-Editor Find Widget args",
            schema: {
                properties: {
                    searchString: {
                        type: "string"
                    },
                    replaceString: {
                        type: "string"
                    },
                    regex: {
                        type: "boolean"
                    },
                    regexOverride: {
                        type: "number",
                        description: $58WHl.localize("actions.find.isRegexOverride", 'Overrides "Use Regular Expression" flag.\nThe flag will not be saved for the future.\n0: Do Nothing\n1: True\n2: False')
                    },
                    wholeWord: {
                        type: "boolean"
                    },
                    wholeWordOverride: {
                        type: "number",
                        description: $58WHl.localize("actions.find.wholeWordOverride", 'Overrides "Match Whole Word" flag.\nThe flag will not be saved for the future.\n0: Do Nothing\n1: True\n2: False')
                    },
                    matchCase: {
                        type: "boolean"
                    },
                    matchCaseOverride: {
                        type: "number",
                        description: $58WHl.localize("actions.find.matchCaseOverride", 'Overrides "Math Case" flag.\nThe flag will not be saved for the future.\n0: Do Nothing\n1: True\n2: False')
                    },
                    preserveCase: {
                        type: "boolean"
                    },
                    preserveCaseOverride: {
                        type: "number",
                        description: $58WHl.localize("actions.find.preserveCaseOverride", 'Overrides "Preserve Case" flag.\nThe flag will not be saved for the future.\n0: Do Nothing\n1: True\n2: False')
                    },
                    findInSelection: {
                        type: "boolean"
                    }
                }
            }
        }
    ]
};
class $9d3f26ffc33207eb$export$50897d92f96d7044 extends (0, $gGOeQ.EditorAction) {
    run(accessor, editor, args) {
        return $9d3f26ffc33207eb$var$__awaiter(this, void 0, void 0, function*() {
            let controller = $9d3f26ffc33207eb$export$3190f9a23ad62166.get(editor);
            if (controller) {
                const newState = args ? {
                    searchString: args.searchString,
                    replaceString: args.replaceString,
                    isReplaceRevealed: args.replaceString !== undefined,
                    isRegex: args.isRegex,
                    // isRegexOverride: args.regexOverride,
                    wholeWord: args.matchWholeWord,
                    // wholeWordOverride: args.wholeWordOverride,
                    matchCase: args.isCaseSensitive,
                    // matchCaseOverride: args.matchCaseOverride,
                    preserveCase: args.preserveCase
                } : {};
                yield controller.start({
                    forceRevealReplace: false,
                    seedSearchStringFromSelection: controller.getState().searchString.length === 0 && editor.getOption(35 /* find */ ).seedSearchStringFromSelection !== "never" ? "single" : "none",
                    seedSearchStringFromNonEmptySelection: editor.getOption(35 /* find */ ).seedSearchStringFromSelection === "selection",
                    seedSearchStringFromGlobalClipboard: true,
                    shouldFocus: 1 /* FocusFindInput */ ,
                    shouldAnimate: true,
                    updateSearchScope: (args === null || args === void 0 ? void 0 : args.findInSelection) || false,
                    loop: editor.getOption(35 /* find */ ).loop
                }, newState);
                controller.setGlobalBufferTerm(controller.getState().searchString);
            }
        });
    }
    constructor(){
        super({
            id: (0, $47228890541ada23$export$a4fc1be778636938).StartFindWithArgs,
            label: $58WHl.localize("startFindWithArgsAction", "Find With Arguments"),
            alias: "Find With Arguments",
            precondition: undefined,
            kbOpts: {
                kbExpr: null,
                primary: 0,
                weight: 100 /* EditorContrib */ 
            },
            description: $9d3f26ffc33207eb$var$findArgDescription
        });
    }
}
class $9d3f26ffc33207eb$export$10b87301fa70db4b extends (0, $gGOeQ.EditorAction) {
    run(accessor, editor) {
        return $9d3f26ffc33207eb$var$__awaiter(this, void 0, void 0, function*() {
            let controller = $9d3f26ffc33207eb$export$3190f9a23ad62166.get(editor);
            if (controller) {
                yield controller.start({
                    forceRevealReplace: false,
                    seedSearchStringFromSelection: "multiple",
                    seedSearchStringFromNonEmptySelection: false,
                    seedSearchStringFromGlobalClipboard: false,
                    shouldFocus: 0 /* NoFocusChange */ ,
                    shouldAnimate: true,
                    updateSearchScope: false,
                    loop: editor.getOption(35 /* find */ ).loop
                });
                controller.setGlobalBufferTerm(controller.getState().searchString);
            }
        });
    }
    constructor(){
        super({
            id: (0, $47228890541ada23$export$a4fc1be778636938).StartFindWithSelection,
            label: $58WHl.localize("startFindWithSelectionAction", "Find With Selection"),
            alias: "Find With Selection",
            precondition: undefined,
            kbOpts: {
                kbExpr: null,
                primary: 0,
                mac: {
                    primary: 2083 /* KeyE */ 
                },
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
class $9d3f26ffc33207eb$export$c8e1d3a731dd2486 extends (0, $gGOeQ.EditorAction) {
    run(accessor, editor) {
        return $9d3f26ffc33207eb$var$__awaiter(this, void 0, void 0, function*() {
            let controller = $9d3f26ffc33207eb$export$3190f9a23ad62166.get(editor);
            if (controller && !this._run(controller)) {
                yield controller.start({
                    forceRevealReplace: false,
                    seedSearchStringFromSelection: controller.getState().searchString.length === 0 && editor.getOption(35 /* find */ ).seedSearchStringFromSelection !== "never" ? "single" : "none",
                    seedSearchStringFromNonEmptySelection: editor.getOption(35 /* find */ ).seedSearchStringFromSelection === "selection",
                    seedSearchStringFromGlobalClipboard: true,
                    shouldFocus: 0 /* NoFocusChange */ ,
                    shouldAnimate: true,
                    updateSearchScope: false,
                    loop: editor.getOption(35 /* find */ ).loop
                });
                this._run(controller);
            }
        });
    }
}
class $9d3f26ffc33207eb$export$bb259a3f5c713849 extends $9d3f26ffc33207eb$export$c8e1d3a731dd2486 {
    _run(controller) {
        const result = controller.moveToNextMatch();
        if (result) {
            controller.editor.pushUndoStop();
            return true;
        }
        return false;
    }
    constructor(){
        super({
            id: (0, $47228890541ada23$export$a4fc1be778636938).NextMatchFindAction,
            label: $58WHl.localize("findNextMatchAction", "Find Next"),
            alias: "Find Next",
            precondition: undefined,
            kbOpts: [
                {
                    kbExpr: (0, $bdLce.EditorContextKeys).focus,
                    primary: 61 /* F3 */ ,
                    mac: {
                        primary: 2085 /* KeyG */ ,
                        secondary: [
                            61 /* F3 */ 
                        ]
                    },
                    weight: 100 /* EditorContrib */ 
                },
                {
                    kbExpr: (0, $bRtox.ContextKeyExpr).and((0, $bdLce.EditorContextKeys).focus, (0, $47228890541ada23$export$1bcc3ed82148a8b9)),
                    primary: 3 /* Enter */ ,
                    weight: 100 /* EditorContrib */ 
                }
            ]
        });
    }
}
class $9d3f26ffc33207eb$export$8a68aa4082c051b6 extends $9d3f26ffc33207eb$export$c8e1d3a731dd2486 {
    _run(controller) {
        return controller.moveToPrevMatch();
    }
    constructor(){
        super({
            id: (0, $47228890541ada23$export$a4fc1be778636938).PreviousMatchFindAction,
            label: $58WHl.localize("findPreviousMatchAction", "Find Previous"),
            alias: "Find Previous",
            precondition: undefined,
            kbOpts: [
                {
                    kbExpr: (0, $bdLce.EditorContextKeys).focus,
                    primary: 1085 /* F3 */ ,
                    mac: {
                        primary: 3109 /* KeyG */ ,
                        secondary: [
                            1085 /* F3 */ 
                        ]
                    },
                    weight: 100 /* EditorContrib */ 
                },
                {
                    kbExpr: (0, $bRtox.ContextKeyExpr).and((0, $bdLce.EditorContextKeys).focus, (0, $47228890541ada23$export$1bcc3ed82148a8b9)),
                    primary: 1027 /* Enter */ ,
                    weight: 100 /* EditorContrib */ 
                }
            ]
        });
    }
}
class $9d3f26ffc33207eb$export$f33491a7c7af78c3 extends (0, $gGOeQ.EditorAction) {
    run(accessor, editor) {
        return $9d3f26ffc33207eb$var$__awaiter(this, void 0, void 0, function*() {
            let controller = $9d3f26ffc33207eb$export$3190f9a23ad62166.get(editor);
            if (!controller) return;
            const seedSearchStringFromNonEmptySelection = editor.getOption(35 /* find */ ).seedSearchStringFromSelection === "selection";
            let selectionSearchString = null;
            if (editor.getOption(35 /* find */ ).seedSearchStringFromSelection !== "never") selectionSearchString = $9d3f26ffc33207eb$export$422517c0cd4e3d9f(editor, "single", seedSearchStringFromNonEmptySelection);
            if (selectionSearchString) controller.setSearchString(selectionSearchString);
            if (!this._run(controller)) {
                yield controller.start({
                    forceRevealReplace: false,
                    seedSearchStringFromSelection: editor.getOption(35 /* find */ ).seedSearchStringFromSelection !== "never" ? "single" : "none",
                    seedSearchStringFromNonEmptySelection: seedSearchStringFromNonEmptySelection,
                    seedSearchStringFromGlobalClipboard: false,
                    shouldFocus: 0 /* NoFocusChange */ ,
                    shouldAnimate: true,
                    updateSearchScope: false,
                    loop: editor.getOption(35 /* find */ ).loop
                });
                this._run(controller);
            }
        });
    }
}
class $9d3f26ffc33207eb$export$8d1cf515c2a7b450 extends $9d3f26ffc33207eb$export$f33491a7c7af78c3 {
    _run(controller) {
        return controller.moveToNextMatch();
    }
    constructor(){
        super({
            id: (0, $47228890541ada23$export$a4fc1be778636938).NextSelectionMatchFindAction,
            label: $58WHl.localize("nextSelectionMatchFindAction", "Find Next Selection"),
            alias: "Find Next Selection",
            precondition: undefined,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).focus,
                primary: 2109 /* F3 */ ,
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
class $9d3f26ffc33207eb$export$d9df193ecc80bb53 extends $9d3f26ffc33207eb$export$f33491a7c7af78c3 {
    _run(controller) {
        return controller.moveToPrevMatch();
    }
    constructor(){
        super({
            id: (0, $47228890541ada23$export$a4fc1be778636938).PreviousSelectionMatchFindAction,
            label: $58WHl.localize("previousSelectionMatchFindAction", "Find Previous Selection"),
            alias: "Find Previous Selection",
            precondition: undefined,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).focus,
                primary: 3133 /* F3 */ ,
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
const $9d3f26ffc33207eb$export$134326ec389b328d = (0, $gGOeQ.registerMultiEditorAction)(new (0, $gGOeQ.MultiEditorAction)({
    id: (0, $47228890541ada23$export$a4fc1be778636938).StartFindReplaceAction,
    label: $58WHl.localize("startReplace", "Replace"),
    alias: "Replace",
    precondition: (0, $bRtox.ContextKeyExpr).or((0, $bdLce.EditorContextKeys).focus, (0, $bRtox.ContextKeyExpr).has("editorIsOpen")),
    kbOpts: {
        kbExpr: null,
        primary: 2086 /* KeyH */ ,
        mac: {
            primary: 2596 /* KeyF */ 
        },
        weight: 100 /* EditorContrib */ 
    },
    menuOpts: {
        menuId: (0, $2IxgH.MenuId).MenubarEditMenu,
        group: "3_find",
        title: $58WHl.localize({
            key: "miReplace",
            comment: [
                "&& denotes a mnemonic"
            ]
        }, "&&Replace"),
        order: 2
    }
}));
$9d3f26ffc33207eb$export$134326ec389b328d.addImplementation(0, (accessor, editor, args)=>{
    if (!editor.hasModel() || editor.getOption(80 /* readOnly */ )) return false;
    const controller = $9d3f26ffc33207eb$export$3190f9a23ad62166.get(editor);
    if (!controller) return false;
    const currentSelection = editor.getSelection();
    const findInputFocused = controller.isFindInputFocused();
    // we only seed search string from selection when the current selection is single line and not empty,
    // + the find input is not focused
    const seedSearchStringFromSelection = !currentSelection.isEmpty() && currentSelection.startLineNumber === currentSelection.endLineNumber && editor.getOption(35 /* find */ ).seedSearchStringFromSelection !== "never" && !findInputFocused;
    /*
    * if the existing search string in find widget is empty and we don't seed search string from selection, it means the Find Input is still empty, so we should focus the Find Input instead of Replace Input.

    * findInputFocused true -> seedSearchStringFromSelection false, FocusReplaceInput
    * findInputFocused false, seedSearchStringFromSelection true FocusReplaceInput
    * findInputFocused false seedSearchStringFromSelection false FocusFindInput
    */ const shouldFocus = findInputFocused || seedSearchStringFromSelection ? 2 /* FocusReplaceInput */  : 1 /* FocusFindInput */ ;
    return controller.start({
        forceRevealReplace: true,
        seedSearchStringFromSelection: seedSearchStringFromSelection ? "single" : "none",
        seedSearchStringFromNonEmptySelection: editor.getOption(35 /* find */ ).seedSearchStringFromSelection === "selection",
        seedSearchStringFromGlobalClipboard: editor.getOption(35 /* find */ ).seedSearchStringFromSelection !== "never",
        shouldFocus: shouldFocus,
        shouldAnimate: true,
        updateSearchScope: false,
        loop: editor.getOption(35 /* find */ ).loop
    });
});
(0, $gGOeQ.registerEditorContribution)($9d3f26ffc33207eb$export$3190f9a23ad62166.ID, $9d3f26ffc33207eb$export$dbc27728234951c5);
(0, $gGOeQ.registerEditorAction)($9d3f26ffc33207eb$export$50897d92f96d7044);
(0, $gGOeQ.registerEditorAction)($9d3f26ffc33207eb$export$10b87301fa70db4b);
(0, $gGOeQ.registerEditorAction)($9d3f26ffc33207eb$export$bb259a3f5c713849);
(0, $gGOeQ.registerEditorAction)($9d3f26ffc33207eb$export$8a68aa4082c051b6);
(0, $gGOeQ.registerEditorAction)($9d3f26ffc33207eb$export$8d1cf515c2a7b450);
(0, $gGOeQ.registerEditorAction)($9d3f26ffc33207eb$export$d9df193ecc80bb53);
const $9d3f26ffc33207eb$var$FindCommand = (0, $gGOeQ.EditorCommand).bindToContribution($9d3f26ffc33207eb$export$3190f9a23ad62166.get);
(0, $gGOeQ.registerEditorCommand)(new $9d3f26ffc33207eb$var$FindCommand({
    id: (0, $47228890541ada23$export$a4fc1be778636938).CloseFindWidgetCommand,
    precondition: (0, $47228890541ada23$export$bc27e4192c4ca2b8),
    handler: (x)=>x.closeFindWidget(),
    kbOpts: {
        weight: 105,
        kbExpr: (0, $bRtox.ContextKeyExpr).and((0, $bdLce.EditorContextKeys).focus, (0, $bRtox.ContextKeyExpr).not("isComposing")),
        primary: 9 /* Escape */ ,
        secondary: [
            1033 /* Escape */ 
        ]
    }
}));
(0, $gGOeQ.registerEditorCommand)(new $9d3f26ffc33207eb$var$FindCommand({
    id: (0, $47228890541ada23$export$a4fc1be778636938).ToggleCaseSensitiveCommand,
    precondition: undefined,
    handler: (x)=>x.toggleCaseSensitive(),
    kbOpts: {
        weight: 105,
        kbExpr: (0, $bdLce.EditorContextKeys).focus,
        primary: (0, $47228890541ada23$export$2fe068521df792d6).primary,
        mac: (0, $47228890541ada23$export$2fe068521df792d6).mac,
        win: (0, $47228890541ada23$export$2fe068521df792d6).win,
        linux: (0, $47228890541ada23$export$2fe068521df792d6).linux
    }
}));
(0, $gGOeQ.registerEditorCommand)(new $9d3f26ffc33207eb$var$FindCommand({
    id: (0, $47228890541ada23$export$a4fc1be778636938).ToggleWholeWordCommand,
    precondition: undefined,
    handler: (x)=>x.toggleWholeWords(),
    kbOpts: {
        weight: 105,
        kbExpr: (0, $bdLce.EditorContextKeys).focus,
        primary: (0, $47228890541ada23$export$cc2b8eb9ab15ca30).primary,
        mac: (0, $47228890541ada23$export$cc2b8eb9ab15ca30).mac,
        win: (0, $47228890541ada23$export$cc2b8eb9ab15ca30).win,
        linux: (0, $47228890541ada23$export$cc2b8eb9ab15ca30).linux
    }
}));
(0, $gGOeQ.registerEditorCommand)(new $9d3f26ffc33207eb$var$FindCommand({
    id: (0, $47228890541ada23$export$a4fc1be778636938).ToggleRegexCommand,
    precondition: undefined,
    handler: (x)=>x.toggleRegex(),
    kbOpts: {
        weight: 105,
        kbExpr: (0, $bdLce.EditorContextKeys).focus,
        primary: (0, $47228890541ada23$export$7c479f7cdbb6d55e).primary,
        mac: (0, $47228890541ada23$export$7c479f7cdbb6d55e).mac,
        win: (0, $47228890541ada23$export$7c479f7cdbb6d55e).win,
        linux: (0, $47228890541ada23$export$7c479f7cdbb6d55e).linux
    }
}));
(0, $gGOeQ.registerEditorCommand)(new $9d3f26ffc33207eb$var$FindCommand({
    id: (0, $47228890541ada23$export$a4fc1be778636938).ToggleSearchScopeCommand,
    precondition: undefined,
    handler: (x)=>x.toggleSearchScope(),
    kbOpts: {
        weight: 105,
        kbExpr: (0, $bdLce.EditorContextKeys).focus,
        primary: (0, $47228890541ada23$export$a02b1f674b6f16d3).primary,
        mac: (0, $47228890541ada23$export$a02b1f674b6f16d3).mac,
        win: (0, $47228890541ada23$export$a02b1f674b6f16d3).win,
        linux: (0, $47228890541ada23$export$a02b1f674b6f16d3).linux
    }
}));
(0, $gGOeQ.registerEditorCommand)(new $9d3f26ffc33207eb$var$FindCommand({
    id: (0, $47228890541ada23$export$a4fc1be778636938).TogglePreserveCaseCommand,
    precondition: undefined,
    handler: (x)=>x.togglePreserveCase(),
    kbOpts: {
        weight: 105,
        kbExpr: (0, $bdLce.EditorContextKeys).focus,
        primary: (0, $47228890541ada23$export$68ae9fdc5844d61a).primary,
        mac: (0, $47228890541ada23$export$68ae9fdc5844d61a).mac,
        win: (0, $47228890541ada23$export$68ae9fdc5844d61a).win,
        linux: (0, $47228890541ada23$export$68ae9fdc5844d61a).linux
    }
}));
(0, $gGOeQ.registerEditorCommand)(new $9d3f26ffc33207eb$var$FindCommand({
    id: (0, $47228890541ada23$export$a4fc1be778636938).ReplaceOneAction,
    precondition: (0, $47228890541ada23$export$bc27e4192c4ca2b8),
    handler: (x)=>x.replace(),
    kbOpts: {
        weight: 105,
        kbExpr: (0, $bdLce.EditorContextKeys).focus,
        primary: 3094 /* Digit1 */ 
    }
}));
(0, $gGOeQ.registerEditorCommand)(new $9d3f26ffc33207eb$var$FindCommand({
    id: (0, $47228890541ada23$export$a4fc1be778636938).ReplaceOneAction,
    precondition: (0, $47228890541ada23$export$bc27e4192c4ca2b8),
    handler: (x)=>x.replace(),
    kbOpts: {
        weight: 105,
        kbExpr: (0, $bRtox.ContextKeyExpr).and((0, $bdLce.EditorContextKeys).focus, (0, $47228890541ada23$export$1b9f123cc9b71d78)),
        primary: 3 /* Enter */ 
    }
}));
(0, $gGOeQ.registerEditorCommand)(new $9d3f26ffc33207eb$var$FindCommand({
    id: (0, $47228890541ada23$export$a4fc1be778636938).ReplaceAllAction,
    precondition: (0, $47228890541ada23$export$bc27e4192c4ca2b8),
    handler: (x)=>x.replaceAll(),
    kbOpts: {
        weight: 105,
        kbExpr: (0, $bdLce.EditorContextKeys).focus,
        primary: 2563 /* Enter */ 
    }
}));
(0, $gGOeQ.registerEditorCommand)(new $9d3f26ffc33207eb$var$FindCommand({
    id: (0, $47228890541ada23$export$a4fc1be778636938).ReplaceAllAction,
    precondition: (0, $47228890541ada23$export$bc27e4192c4ca2b8),
    handler: (x)=>x.replaceAll(),
    kbOpts: {
        weight: 105,
        kbExpr: (0, $bRtox.ContextKeyExpr).and((0, $bdLce.EditorContextKeys).focus, (0, $47228890541ada23$export$1b9f123cc9b71d78)),
        primary: undefined,
        mac: {
            primary: 2051 /* Enter */ 
        }
    }
}));
(0, $gGOeQ.registerEditorCommand)(new $9d3f26ffc33207eb$var$FindCommand({
    id: (0, $47228890541ada23$export$a4fc1be778636938).SelectAllMatchesAction,
    precondition: (0, $47228890541ada23$export$bc27e4192c4ca2b8),
    handler: (x)=>x.selectAllMatches(),
    kbOpts: {
        weight: 105,
        kbExpr: (0, $bdLce.EditorContextKeys).focus,
        primary: 515 /* Enter */ 
    }
}));


var $d6b7f21e4173727c$exports = {};

var $eFOsn = parcelRequire("eFOsn");

var $g0782 = parcelRequire("g0782");

var $fQtIR = parcelRequire("fQtIR");

var $atiRx = parcelRequire("atiRx");

var $9TEeL = parcelRequire("9TEeL");

var $3ICxR = parcelRequire("3ICxR");


var $iVwSq = parcelRequire("iVwSq");

var $gGOeQ = parcelRequire("gGOeQ");

var $bdLce = parcelRequire("bdLce");

var $eKhCe = parcelRequire("eKhCe");

var $9wt9e = parcelRequire("9wt9e");

var $fSvkC = parcelRequire("fSvkC");
const $f1624c7ecd1d4781$export$4dac98cf97cec411 = 0xFFFF;
const $f1624c7ecd1d4781$export$ccaa8b63109dc601 = 0xFFFFFF;
const $f1624c7ecd1d4781$var$MASK_INDENT = 0xFF000000;
class $f1624c7ecd1d4781$export$79a27591b52924cb {
    ensureParentIndices() {
        if (!this._parentsComputed) {
            this._parentsComputed = true;
            let parentIndexes = [];
            let isInsideLast = (startLineNumber, endLineNumber)=>{
                let index = parentIndexes[parentIndexes.length - 1];
                return this.getStartLineNumber(index) <= startLineNumber && this.getEndLineNumber(index) >= endLineNumber;
            };
            for(let i = 0, len = this._startIndexes.length; i < len; i++){
                let startLineNumber = this._startIndexes[i];
                let endLineNumber = this._endIndexes[i];
                if (startLineNumber > $f1624c7ecd1d4781$export$ccaa8b63109dc601 || endLineNumber > $f1624c7ecd1d4781$export$ccaa8b63109dc601) throw new Error("startLineNumber or endLineNumber must not exceed " + $f1624c7ecd1d4781$export$ccaa8b63109dc601);
                while(parentIndexes.length > 0 && !isInsideLast(startLineNumber, endLineNumber))parentIndexes.pop();
                let parentIndex = parentIndexes.length > 0 ? parentIndexes[parentIndexes.length - 1] : -1;
                parentIndexes.push(i);
                this._startIndexes[i] = startLineNumber + ((parentIndex & 0xFF) << 24);
                this._endIndexes[i] = endLineNumber + ((parentIndex & 0xFF00) << 16);
            }
        }
    }
    get length() {
        return this._startIndexes.length;
    }
    getStartLineNumber(index) {
        return this._startIndexes[index] & $f1624c7ecd1d4781$export$ccaa8b63109dc601;
    }
    getEndLineNumber(index) {
        return this._endIndexes[index] & $f1624c7ecd1d4781$export$ccaa8b63109dc601;
    }
    getType(index) {
        return this._types ? this._types[index] : undefined;
    }
    hasTypes() {
        return !!this._types;
    }
    isCollapsed(index) {
        let arrayIndex = index / 32 | 0;
        let bit = index % 32;
        return (this._collapseStates[arrayIndex] & 1 << bit) !== 0;
    }
    setCollapsed(index, newState) {
        let arrayIndex = index / 32 | 0;
        let bit = index % 32;
        let value = this._collapseStates[arrayIndex];
        if (newState) this._collapseStates[arrayIndex] = value | 1 << bit;
        else this._collapseStates[arrayIndex] = value & ~(1 << bit);
    }
    setCollapsedAllOfType(type, newState) {
        let hasChanged = false;
        if (this._types) {
            for(let i = 0; i < this._types.length; i++)if (this._types[i] === type) {
                this.setCollapsed(i, newState);
                hasChanged = true;
            }
        }
        return hasChanged;
    }
    toRegion(index) {
        return new $f1624c7ecd1d4781$export$6b90bd4afbaa93a9(this, index);
    }
    getParentIndex(index) {
        this.ensureParentIndices();
        let parent = ((this._startIndexes[index] & $f1624c7ecd1d4781$var$MASK_INDENT) >>> 24) + ((this._endIndexes[index] & $f1624c7ecd1d4781$var$MASK_INDENT) >>> 16);
        if (parent === $f1624c7ecd1d4781$export$4dac98cf97cec411) return -1;
        return parent;
    }
    contains(index, line) {
        return this.getStartLineNumber(index) <= line && this.getEndLineNumber(index) >= line;
    }
    findIndex(line) {
        let low = 0, high = this._startIndexes.length;
        if (high === 0) return -1; // no children
        while(low < high){
            let mid = Math.floor((low + high) / 2);
            if (line < this.getStartLineNumber(mid)) high = mid;
            else low = mid + 1;
        }
        return low - 1;
    }
    findRange(line) {
        let index = this.findIndex(line);
        if (index >= 0) {
            let endLineNumber = this.getEndLineNumber(index);
            if (endLineNumber >= line) return index;
            index = this.getParentIndex(index);
            while(index !== -1){
                if (this.contains(index, line)) return index;
                index = this.getParentIndex(index);
            }
        }
        return -1;
    }
    toString() {
        let res = [];
        for(let i = 0; i < this.length; i++)res[i] = `[${this.isCollapsed(i) ? "+" : "-"}] ${this.getStartLineNumber(i)}/${this.getEndLineNumber(i)}`;
        return res.join(", ");
    }
    constructor(startIndexes, endIndexes, types){
        if (startIndexes.length !== endIndexes.length || startIndexes.length > $f1624c7ecd1d4781$export$4dac98cf97cec411) throw new Error("invalid startIndexes or endIndexes size");
        this._startIndexes = startIndexes;
        this._endIndexes = endIndexes;
        this._collapseStates = new Uint32Array(Math.ceil(startIndexes.length / 32));
        this._types = types;
        this._parentsComputed = false;
    }
}
class $f1624c7ecd1d4781$export$6b90bd4afbaa93a9 {
    get startLineNumber() {
        return this.ranges.getStartLineNumber(this.index);
    }
    get endLineNumber() {
        return this.ranges.getEndLineNumber(this.index);
    }
    get regionIndex() {
        return this.index;
    }
    get parentIndex() {
        return this.ranges.getParentIndex(this.index);
    }
    get isCollapsed() {
        return this.ranges.isCollapsed(this.index);
    }
    containedBy(range) {
        return range.startLineNumber <= this.startLineNumber && range.endLineNumber >= this.endLineNumber;
    }
    containsLine(lineNumber) {
        return this.startLineNumber <= lineNumber && lineNumber <= this.endLineNumber;
    }
    constructor(ranges, index){
        this.ranges = ranges;
        this.index = index;
    }
}


class $8b35a10f74bd273a$export$342aae847b5a9075 {
    get regions() {
        return this._regions;
    }
    get textModel() {
        return this._textModel;
    }
    get isInitialized() {
        return this._isInitialized;
    }
    toggleCollapseState(toggledRegions) {
        if (!toggledRegions.length) return;
        toggledRegions = toggledRegions.sort((r1, r2)=>r1.regionIndex - r2.regionIndex);
        const processed = {};
        this._decorationProvider.changeDecorations((accessor)=>{
            let k = 0; // index from [0 ... this.regions.length]
            let dirtyRegionEndLine = -1; // end of the range where decorations need to be updated
            let lastHiddenLine = -1; // the end of the last hidden lines
            const updateDecorationsUntil = (index)=>{
                while(k < index){
                    const endLineNumber = this._regions.getEndLineNumber(k);
                    const isCollapsed = this._regions.isCollapsed(k);
                    if (endLineNumber <= dirtyRegionEndLine) accessor.changeDecorationOptions(this._editorDecorationIds[k], this._decorationProvider.getDecorationOption(isCollapsed, endLineNumber <= lastHiddenLine));
                    if (isCollapsed && endLineNumber > lastHiddenLine) lastHiddenLine = endLineNumber;
                    k++;
                }
            };
            for (let region of toggledRegions){
                let index = region.regionIndex;
                let editorDecorationId = this._editorDecorationIds[index];
                if (editorDecorationId && !processed[editorDecorationId]) {
                    processed[editorDecorationId] = true;
                    updateDecorationsUntil(index); // update all decorations up to current index using the old dirtyRegionEndLine
                    let newCollapseState = !this._regions.isCollapsed(index);
                    this._regions.setCollapsed(index, newCollapseState);
                    dirtyRegionEndLine = Math.max(dirtyRegionEndLine, this._regions.getEndLineNumber(index));
                }
            }
            updateDecorationsUntil(this._regions.length);
        });
        this._updateEventEmitter.fire({
            model: this,
            collapseStateChanged: toggledRegions
        });
    }
    update(newRegions, blockedLineNumers = []) {
        let newEditorDecorations = [];
        let isBlocked = (startLineNumber, endLineNumber)=>{
            for (let blockedLineNumber of blockedLineNumers){
                if (startLineNumber < blockedLineNumber && blockedLineNumber <= endLineNumber) return true;
            }
            return false;
        };
        let lastHiddenLine = -1;
        let initRange = (index, isCollapsed)=>{
            const startLineNumber = newRegions.getStartLineNumber(index);
            const endLineNumber = newRegions.getEndLineNumber(index);
            if (!isCollapsed) isCollapsed = newRegions.isCollapsed(index);
            if (isCollapsed && isBlocked(startLineNumber, endLineNumber)) isCollapsed = false;
            newRegions.setCollapsed(index, isCollapsed);
            const maxColumn = this._textModel.getLineMaxColumn(startLineNumber);
            const decorationRange = {
                startLineNumber: startLineNumber,
                startColumn: Math.max(maxColumn - 1, 1),
                endLineNumber: startLineNumber,
                endColumn: maxColumn
            };
            newEditorDecorations.push({
                range: decorationRange,
                options: this._decorationProvider.getDecorationOption(isCollapsed, endLineNumber <= lastHiddenLine)
            });
            if (isCollapsed && endLineNumber > lastHiddenLine) lastHiddenLine = endLineNumber;
        };
        let i = 0;
        let nextCollapsed = ()=>{
            while(i < this._regions.length){
                let isCollapsed = this._regions.isCollapsed(i);
                i++;
                if (isCollapsed) return i - 1;
            }
            return -1;
        };
        let k = 0;
        let collapsedIndex = nextCollapsed();
        while(collapsedIndex !== -1 && k < newRegions.length){
            // get the latest range
            let decRange = this._textModel.getDecorationRange(this._editorDecorationIds[collapsedIndex]);
            if (decRange) {
                let collapsedStartLineNumber = decRange.startLineNumber;
                if (decRange.startColumn === Math.max(decRange.endColumn - 1, 1) && this._textModel.getLineMaxColumn(collapsedStartLineNumber) === decRange.endColumn) while(k < newRegions.length){
                    let startLineNumber = newRegions.getStartLineNumber(k);
                    if (collapsedStartLineNumber >= startLineNumber) {
                        initRange(k, collapsedStartLineNumber === startLineNumber);
                        k++;
                    } else break;
                }
            }
            collapsedIndex = nextCollapsed();
        }
        while(k < newRegions.length){
            initRange(k, false);
            k++;
        }
        this._editorDecorationIds = this._decorationProvider.deltaDecorations(this._editorDecorationIds, newEditorDecorations);
        this._regions = newRegions;
        this._isInitialized = true;
        this._updateEventEmitter.fire({
            model: this
        });
    }
    /**
     * Collapse state memento, for persistence only
     */ getMemento() {
        let collapsedRanges = [];
        for(let i = 0; i < this._regions.length; i++)if (this._regions.isCollapsed(i)) {
            let range = this._textModel.getDecorationRange(this._editorDecorationIds[i]);
            if (range) {
                let startLineNumber = range.startLineNumber;
                let endLineNumber = range.endLineNumber + this._regions.getEndLineNumber(i) - this._regions.getStartLineNumber(i);
                collapsedRanges.push({
                    startLineNumber: startLineNumber,
                    endLineNumber: endLineNumber
                });
            }
        }
        if (collapsedRanges.length > 0) return collapsedRanges;
        return undefined;
    }
    /**
     * Apply persisted state, for persistence only
     */ applyMemento(state) {
        if (!Array.isArray(state)) return;
        let toToogle = [];
        for (let range of state){
            let region = this.getRegionAtLine(range.startLineNumber);
            if (region && !region.isCollapsed) toToogle.push(region);
        }
        this.toggleCollapseState(toToogle);
    }
    dispose() {
        this._decorationProvider.deltaDecorations(this._editorDecorationIds, []);
    }
    getAllRegionsAtLine(lineNumber, filter) {
        let result = [];
        if (this._regions) {
            let index = this._regions.findRange(lineNumber);
            let level = 1;
            while(index >= 0){
                let current = this._regions.toRegion(index);
                if (!filter || filter(current, level)) result.push(current);
                level++;
                index = current.parentIndex;
            }
        }
        return result;
    }
    getRegionAtLine(lineNumber) {
        if (this._regions) {
            let index = this._regions.findRange(lineNumber);
            if (index >= 0) return this._regions.toRegion(index);
        }
        return null;
    }
    getRegionsInside(region, filter) {
        let result = [];
        let index = region ? region.regionIndex + 1 : 0;
        let endLineNumber = region ? region.endLineNumber : Number.MAX_VALUE;
        if (filter && filter.length === 2) {
            const levelStack = [];
            for(let i = index, len = this._regions.length; i < len; i++){
                let current = this._regions.toRegion(i);
                if (this._regions.getStartLineNumber(i) < endLineNumber) {
                    while(levelStack.length > 0 && !current.containedBy(levelStack[levelStack.length - 1]))levelStack.pop();
                    levelStack.push(current);
                    if (filter(current, levelStack.length)) result.push(current);
                } else break;
            }
        } else for(let i1 = index, len1 = this._regions.length; i1 < len1; i1++){
            let current1 = this._regions.toRegion(i1);
            if (this._regions.getStartLineNumber(i1) < endLineNumber) {
                if (!filter || filter(current1)) result.push(current1);
            } else break;
        }
        return result;
    }
    constructor(textModel, decorationProvider){
        this._updateEventEmitter = new (0, $fSvkC.Emitter)();
        this.onDidChange = this._updateEventEmitter.event;
        this._textModel = textModel;
        this._decorationProvider = decorationProvider;
        this._regions = new (0, $f1624c7ecd1d4781$export$79a27591b52924cb)(new Uint32Array(0), new Uint32Array(0));
        this._editorDecorationIds = [];
        this._isInitialized = false;
    }
}
function $8b35a10f74bd273a$export$6008f8f734d0336a(foldingModel, levels, lineNumbers) {
    let toToggle = [];
    for (let lineNumber of lineNumbers){
        let region = foldingModel.getRegionAtLine(lineNumber);
        if (region) {
            const doCollapse = !region.isCollapsed;
            toToggle.push(region);
            if (levels > 1) {
                let regionsInside = foldingModel.getRegionsInside(region, (r, level)=>r.isCollapsed !== doCollapse && level < levels);
                toToggle.push(...regionsInside);
            }
        }
    }
    foldingModel.toggleCollapseState(toToggle);
}
function $8b35a10f74bd273a$export$1ef41fe66cd8530(foldingModel, doCollapse, levels = Number.MAX_VALUE, lineNumbers) {
    let toToggle = [];
    if (lineNumbers && lineNumbers.length > 0) for (let lineNumber of lineNumbers){
        let region = foldingModel.getRegionAtLine(lineNumber);
        if (region) {
            if (region.isCollapsed !== doCollapse) toToggle.push(region);
            if (levels > 1) {
                let regionsInside = foldingModel.getRegionsInside(region, (r, level)=>r.isCollapsed !== doCollapse && level < levels);
                toToggle.push(...regionsInside);
            }
        }
    }
    else {
        let regionsInside1 = foldingModel.getRegionsInside(null, (r, level)=>r.isCollapsed !== doCollapse && level < levels);
        toToggle.push(...regionsInside1);
    }
    foldingModel.toggleCollapseState(toToggle);
}
function $8b35a10f74bd273a$export$50a013aaf999fe15(foldingModel, doCollapse, levels, lineNumbers) {
    let toToggle = [];
    for (let lineNumber of lineNumbers){
        let regions = foldingModel.getAllRegionsAtLine(lineNumber, (region, level)=>region.isCollapsed !== doCollapse && level <= levels);
        toToggle.push(...regions);
    }
    foldingModel.toggleCollapseState(toToggle);
}
function $8b35a10f74bd273a$export$e1cae19974cbbf8b(foldingModel, doCollapse, lineNumbers) {
    let toToggle = [];
    for (let lineNumber of lineNumbers){
        let regions = foldingModel.getAllRegionsAtLine(lineNumber, (region)=>region.isCollapsed !== doCollapse);
        if (regions.length > 0) toToggle.push(regions[0]);
    }
    foldingModel.toggleCollapseState(toToggle);
}
function $8b35a10f74bd273a$export$3f9d91c844738bc6(foldingModel, foldLevel, doCollapse, blockedLineNumbers) {
    let filter = (region, level)=>level === foldLevel && region.isCollapsed !== doCollapse && !blockedLineNumbers.some((line)=>region.containsLine(line));
    let toToggle = foldingModel.getRegionsInside(null, filter);
    foldingModel.toggleCollapseState(toToggle);
}
function $8b35a10f74bd273a$export$13292d9dd11d6b4f(foldingModel, doCollapse, blockedLineNumbers) {
    let filteredRegions = [];
    for (let lineNumber of blockedLineNumbers)filteredRegions.push(foldingModel.getAllRegionsAtLine(lineNumber, undefined)[0]);
    let filter = (region)=>filteredRegions.every((filteredRegion)=>!filteredRegion.containedBy(region) && !region.containedBy(filteredRegion)) && region.isCollapsed !== doCollapse;
    let toToggle = foldingModel.getRegionsInside(null, filter);
    foldingModel.toggleCollapseState(toToggle);
}
function $8b35a10f74bd273a$export$acbcc757d0e877b(foldingModel, regExp, doCollapse) {
    let editorModel = foldingModel.textModel;
    let regions = foldingModel.regions;
    let toToggle = [];
    for(let i = regions.length - 1; i >= 0; i--)if (doCollapse !== regions.isCollapsed(i)) {
        let startLineNumber = regions.getStartLineNumber(i);
        if (regExp.test(editorModel.getLineContent(startLineNumber))) toToggle.push(regions.toRegion(i));
    }
    foldingModel.toggleCollapseState(toToggle);
}
function $8b35a10f74bd273a$export$ce3950edac996729(foldingModel, type, doCollapse) {
    let regions = foldingModel.regions;
    let toToggle = [];
    for(let i = regions.length - 1; i >= 0; i--)if (doCollapse !== regions.isCollapsed(i) && type === regions.getType(i)) toToggle.push(regions.toRegion(i));
    foldingModel.toggleCollapseState(toToggle);
}
function $8b35a10f74bd273a$export$19eab21a9895dbc4(lineNumber, foldingModel) {
    let startLineNumber = null;
    let foldingRegion = foldingModel.getRegionAtLine(lineNumber);
    if (foldingRegion !== null) {
        startLineNumber = foldingRegion.startLineNumber;
        // If current line is not the start of the current fold, go to top line of current fold. If not, go to parent fold
        if (lineNumber === startLineNumber) {
            let parentFoldingIdx = foldingRegion.parentIndex;
            if (parentFoldingIdx !== -1) startLineNumber = foldingModel.regions.getStartLineNumber(parentFoldingIdx);
            else startLineNumber = null;
        }
    }
    return startLineNumber;
}
function $8b35a10f74bd273a$export$9e804e9f47adba4e(lineNumber, foldingModel) {
    let foldingRegion = foldingModel.getRegionAtLine(lineNumber);
    // If on the folding range start line, go to previous sibling.
    if (foldingRegion !== null && foldingRegion.startLineNumber === lineNumber) {
        // If current line is not the start of the current fold, go to top line of current fold. If not, go to previous fold.
        if (lineNumber !== foldingRegion.startLineNumber) return foldingRegion.startLineNumber;
        else {
            // Find min line number to stay within parent.
            let expectedParentIndex = foldingRegion.parentIndex;
            let minLineNumber = 0;
            if (expectedParentIndex !== -1) minLineNumber = foldingModel.regions.getStartLineNumber(foldingRegion.parentIndex);
            // Find fold at same level.
            while(foldingRegion !== null){
                if (foldingRegion.regionIndex > 0) {
                    foldingRegion = foldingModel.regions.toRegion(foldingRegion.regionIndex - 1);
                    // Keep at same level.
                    if (foldingRegion.startLineNumber <= minLineNumber) return null;
                    else if (foldingRegion.parentIndex === expectedParentIndex) return foldingRegion.startLineNumber;
                } else return null;
            }
        }
    } else // Go to last fold that's before the current line.
    if (foldingModel.regions.length > 0) {
        foldingRegion = foldingModel.regions.toRegion(foldingModel.regions.length - 1);
        while(foldingRegion !== null){
            // Found fold before current line.
            if (foldingRegion.startLineNumber < lineNumber) return foldingRegion.startLineNumber;
            if (foldingRegion.regionIndex > 0) foldingRegion = foldingModel.regions.toRegion(foldingRegion.regionIndex - 1);
            else foldingRegion = null;
        }
    }
    return null;
}
function $8b35a10f74bd273a$export$3164a73fda220264(lineNumber, foldingModel) {
    let foldingRegion = foldingModel.getRegionAtLine(lineNumber);
    // If on the folding range start line, go to next sibling.
    if (foldingRegion !== null && foldingRegion.startLineNumber === lineNumber) {
        // Find max line number to stay within parent.
        let expectedParentIndex = foldingRegion.parentIndex;
        let maxLineNumber = 0;
        if (expectedParentIndex !== -1) maxLineNumber = foldingModel.regions.getEndLineNumber(foldingRegion.parentIndex);
        else if (foldingModel.regions.length === 0) return null;
        else maxLineNumber = foldingModel.regions.getEndLineNumber(foldingModel.regions.length - 1);
        // Find fold at same level.
        while(foldingRegion !== null){
            if (foldingRegion.regionIndex < foldingModel.regions.length) {
                foldingRegion = foldingModel.regions.toRegion(foldingRegion.regionIndex + 1);
                // Keep at same level.
                if (foldingRegion.startLineNumber >= maxLineNumber) return null;
                else if (foldingRegion.parentIndex === expectedParentIndex) return foldingRegion.startLineNumber;
            } else return null;
        }
    } else // Go to first fold that's after the current line.
    if (foldingModel.regions.length > 0) {
        foldingRegion = foldingModel.regions.toRegion(0);
        while(foldingRegion !== null){
            // Found fold after current line.
            if (foldingRegion.startLineNumber > lineNumber) return foldingRegion.startLineNumber;
            if (foldingRegion.regionIndex < foldingModel.regions.length) foldingRegion = foldingModel.regions.toRegion(foldingRegion.regionIndex + 1);
            else foldingRegion = null;
        }
    }
    return null;
}



var $4xCD7 = parcelRequire("4xCD7");

var $fSvkC = parcelRequire("fSvkC");

var $3HpR4 = parcelRequire("3HpR4");

var $fvZCP = parcelRequire("fvZCP");
class $5630a6e002feb7d1$export$87e89ef1cf49f2d {
    get onDidChange() {
        return this._updateEventEmitter.event;
    }
    get hiddenRanges() {
        return this._hiddenRanges;
    }
    notifyChangeModelContent(e) {
        if (this._hiddenRanges.length && !this._hasLineChanges) this._hasLineChanges = e.changes.some((change)=>{
            return change.range.endLineNumber !== change.range.startLineNumber || (0, $fvZCP.countEOL)(change.text)[0] !== 0;
        });
    }
    updateHiddenRanges() {
        let updateHiddenAreas = false;
        let newHiddenAreas = [];
        let i = 0; // index into hidden
        let k = 0;
        let lastCollapsedStart = Number.MAX_VALUE;
        let lastCollapsedEnd = -1;
        let ranges = this._foldingModel.regions;
        for(; i < ranges.length; i++){
            if (!ranges.isCollapsed(i)) continue;
            let startLineNumber = ranges.getStartLineNumber(i) + 1; // the first line is not hidden
            let endLineNumber = ranges.getEndLineNumber(i);
            if (lastCollapsedStart <= startLineNumber && endLineNumber <= lastCollapsedEnd) continue;
            if (!updateHiddenAreas && k < this._hiddenRanges.length && this._hiddenRanges[k].startLineNumber === startLineNumber && this._hiddenRanges[k].endLineNumber === endLineNumber) {
                // reuse the old ranges
                newHiddenAreas.push(this._hiddenRanges[k]);
                k++;
            } else {
                updateHiddenAreas = true;
                newHiddenAreas.push(new (0, $3HpR4.Range)(startLineNumber, 1, endLineNumber, 1));
            }
            lastCollapsedStart = startLineNumber;
            lastCollapsedEnd = endLineNumber;
        }
        if (this._hasLineChanges || updateHiddenAreas || k < this._hiddenRanges.length) this.applyHiddenRanges(newHiddenAreas);
    }
    applyMemento(state) {
        if (!Array.isArray(state) || state.length === 0) return false;
        let hiddenRanges = [];
        for (let r of state){
            if (!r.startLineNumber || !r.endLineNumber) return false;
            hiddenRanges.push(new (0, $3HpR4.Range)(r.startLineNumber + 1, 1, r.endLineNumber, 1));
        }
        this.applyHiddenRanges(hiddenRanges);
        return true;
    }
    /**
     * Collapse state memento, for persistence only, only used if folding model is not yet initialized
     */ getMemento() {
        return this._hiddenRanges.map((r)=>({
                startLineNumber: r.startLineNumber - 1,
                endLineNumber: r.endLineNumber
            }));
    }
    applyHiddenRanges(newHiddenAreas) {
        this._hiddenRanges = newHiddenAreas;
        this._hasLineChanges = false;
        this._updateEventEmitter.fire(newHiddenAreas);
    }
    hasRanges() {
        return this._hiddenRanges.length > 0;
    }
    isHidden(line) {
        return $5630a6e002feb7d1$var$findRange(this._hiddenRanges, line) !== null;
    }
    adjustSelections(selections) {
        let hasChanges = false;
        let editorModel = this._foldingModel.textModel;
        let lastRange = null;
        let adjustLine = (line)=>{
            if (!lastRange || !$5630a6e002feb7d1$var$isInside(line, lastRange)) lastRange = $5630a6e002feb7d1$var$findRange(this._hiddenRanges, line);
            if (lastRange) return lastRange.startLineNumber - 1;
            return null;
        };
        for(let i = 0, len = selections.length; i < len; i++){
            let selection = selections[i];
            let adjustedStartLine = adjustLine(selection.startLineNumber);
            if (adjustedStartLine) {
                selection = selection.setStartPosition(adjustedStartLine, editorModel.getLineMaxColumn(adjustedStartLine));
                hasChanges = true;
            }
            let adjustedEndLine = adjustLine(selection.endLineNumber);
            if (adjustedEndLine) {
                selection = selection.setEndPosition(adjustedEndLine, editorModel.getLineMaxColumn(adjustedEndLine));
                hasChanges = true;
            }
            selections[i] = selection;
        }
        return hasChanges;
    }
    dispose() {
        if (this.hiddenRanges.length > 0) {
            this._hiddenRanges = [];
            this._updateEventEmitter.fire(this._hiddenRanges);
        }
        if (this._foldingModelListener) {
            this._foldingModelListener.dispose();
            this._foldingModelListener = null;
        }
    }
    constructor(model){
        this._updateEventEmitter = new (0, $fSvkC.Emitter)();
        this._hasLineChanges = false;
        this._foldingModel = model;
        this._foldingModelListener = model.onDidChange((_)=>this.updateHiddenRanges());
        this._hiddenRanges = [];
        if (model.regions.length) this.updateHiddenRanges();
    }
}
function $5630a6e002feb7d1$var$isInside(line, range) {
    return line >= range.startLineNumber && line <= range.endLineNumber;
}
function $5630a6e002feb7d1$var$findRange(ranges, line) {
    let i = (0, $4xCD7.findFirstInSorted)(ranges, (r)=>line < r.startLineNumber) - 1;
    if (i >= 0 && ranges[i].endLineNumber >= line) return ranges[i];
    return null;
}



var $g88WD = parcelRequire("g88WD");

var $9wt9e = parcelRequire("9wt9e");

const $163f2d1dd6d0927c$var$MAX_FOLDING_REGIONS_FOR_INDENT_LIMIT = 5000;
const $163f2d1dd6d0927c$export$c733f741c9154923 = "indent";
class $163f2d1dd6d0927c$export$c6761242dbde8f79 {
    dispose() {}
    compute(cancelationToken) {
        let foldingRules = (0, $9wt9e.LanguageConfigurationRegistry).getFoldingRules(this.editorModel.getLanguageId());
        let offSide = foldingRules && !!foldingRules.offSide;
        let markers = foldingRules && foldingRules.markers;
        return Promise.resolve($163f2d1dd6d0927c$export$a7fcbe01d14a5fd9(this.editorModel, offSide, markers));
    }
    constructor(editorModel){
        this.editorModel = editorModel;
        this.id = $163f2d1dd6d0927c$export$c733f741c9154923;
    }
}
class $163f2d1dd6d0927c$export$eb0bed8ad121fa0e {
    insertFirst(startLineNumber, endLineNumber, indent) {
        if (startLineNumber > (0, $f1624c7ecd1d4781$export$ccaa8b63109dc601) || endLineNumber > (0, $f1624c7ecd1d4781$export$ccaa8b63109dc601)) return;
        let index = this._length;
        this._startIndexes[index] = startLineNumber;
        this._endIndexes[index] = endLineNumber;
        this._length++;
        if (indent < 1000) this._indentOccurrences[indent] = (this._indentOccurrences[indent] || 0) + 1;
    }
    toIndentRanges(model) {
        if (this._length <= this._foldingRangesLimit) {
            // reverse and create arrays of the exact length
            let startIndexes = new Uint32Array(this._length);
            let endIndexes = new Uint32Array(this._length);
            for(let i = this._length - 1, k = 0; i >= 0; i--, k++){
                startIndexes[k] = this._startIndexes[i];
                endIndexes[k] = this._endIndexes[i];
            }
            return new (0, $f1624c7ecd1d4781$export$79a27591b52924cb)(startIndexes, endIndexes);
        } else {
            let entries = 0;
            let maxIndent = this._indentOccurrences.length;
            for(let i1 = 0; i1 < this._indentOccurrences.length; i1++){
                let n = this._indentOccurrences[i1];
                if (n) {
                    if (n + entries > this._foldingRangesLimit) {
                        maxIndent = i1;
                        break;
                    }
                    entries += n;
                }
            }
            const tabSize = model.getOptions().tabSize;
            // reverse and create arrays of the exact length
            let startIndexes1 = new Uint32Array(this._foldingRangesLimit);
            let endIndexes1 = new Uint32Array(this._foldingRangesLimit);
            for(let i2 = this._length - 1, k1 = 0; i2 >= 0; i2--){
                let startIndex = this._startIndexes[i2];
                let lineContent = model.getLineContent(startIndex);
                let indent = (0, $g88WD.TextModel).computeIndentLevel(lineContent, tabSize);
                if (indent < maxIndent || indent === maxIndent && (entries++) < this._foldingRangesLimit) {
                    startIndexes1[k1] = startIndex;
                    endIndexes1[k1] = this._endIndexes[i2];
                    k1++;
                }
            }
            return new (0, $f1624c7ecd1d4781$export$79a27591b52924cb)(startIndexes1, endIndexes1);
        }
    }
    constructor(foldingRangesLimit){
        this._startIndexes = [];
        this._endIndexes = [];
        this._indentOccurrences = [];
        this._length = 0;
        this._foldingRangesLimit = foldingRangesLimit;
    }
}
function $163f2d1dd6d0927c$export$a7fcbe01d14a5fd9(model, offSide, markers, foldingRangesLimit = $163f2d1dd6d0927c$var$MAX_FOLDING_REGIONS_FOR_INDENT_LIMIT) {
    const tabSize = model.getOptions().tabSize;
    let result = new $163f2d1dd6d0927c$export$eb0bed8ad121fa0e(foldingRangesLimit);
    let pattern = undefined;
    if (markers) pattern = new RegExp(`(${markers.start.source})|(?:${markers.end.source})`);
    let previousRegions = [];
    let line = model.getLineCount() + 1;
    previousRegions.push({
        indent: -1,
        endAbove: line,
        line: line
    }); // sentinel, to make sure there's at least one entry
    for(let line1 = model.getLineCount(); line1 > 0; line1--){
        let lineContent = model.getLineContent(line1);
        let indent = (0, $g88WD.TextModel).computeIndentLevel(lineContent, tabSize);
        let previous = previousRegions[previousRegions.length - 1];
        if (indent === -1) {
            if (offSide) // for offSide languages, empty lines are associated to the previous block
            // note: the next block is already written to the results, so this only
            // impacts the end position of the block before
            previous.endAbove = line1;
            continue; // only whitespace
        }
        let m;
        if (pattern && (m = lineContent.match(pattern))) {
            // folding pattern match
            if (m[1]) {
                // discard all regions until the folding pattern
                let i = previousRegions.length - 1;
                while(i > 0 && previousRegions[i].indent !== -2)i--;
                if (i > 0) {
                    previousRegions.length = i + 1;
                    previous = previousRegions[i];
                    // new folding range from pattern, includes the end line
                    result.insertFirst(line1, previous.line, indent);
                    previous.line = line1;
                    previous.indent = indent;
                    previous.endAbove = line1;
                    continue;
                }
            } else {
                previousRegions.push({
                    indent: -2,
                    endAbove: line1,
                    line: line1
                });
                continue;
            }
        }
        if (previous.indent > indent) {
            // discard all regions with larger indent
            do {
                previousRegions.pop();
                previous = previousRegions[previousRegions.length - 1];
            }while (previous.indent > indent);
            // new folding range
            let endLineNumber = previous.endAbove - 1;
            if (endLineNumber - line1 >= 1) result.insertFirst(line1, endLineNumber, indent);
        }
        if (previous.indent === indent) previous.endAbove = line1;
        else // new region with a bigger indent
        previousRegions.push({
            indent: indent,
            endAbove: line1,
            line: line1
        });
    }
    return result.toIndentRanges(model);
}



var $g0782 = parcelRequire("g0782");

var $atiRx = parcelRequire("atiRx");

const $e97789ead6678e08$var$MAX_FOLDING_REGIONS = 5000;
const $e97789ead6678e08$var$foldingContext = {};
const $e97789ead6678e08$export$643d29553f216197 = "syntax";
class $e97789ead6678e08$export$409cdd7e50053250 {
    compute(cancellationToken) {
        return $e97789ead6678e08$var$collectSyntaxRanges(this.providers, this.editorModel, cancellationToken).then((ranges)=>{
            if (ranges) {
                let res = $e97789ead6678e08$export$468fc32e82949676(ranges, this.limit);
                return res;
            }
            return null;
        });
    }
    dispose() {
        var _a;
        (_a = this.disposables) === null || _a === void 0 || _a.dispose();
    }
    constructor(editorModel, providers, handleFoldingRangesChange, limit = $e97789ead6678e08$var$MAX_FOLDING_REGIONS){
        this.editorModel = editorModel;
        this.providers = providers;
        this.limit = limit;
        this.id = $e97789ead6678e08$export$643d29553f216197;
        for (const provider of providers)if (typeof provider.onDidChange === "function") {
            if (!this.disposables) this.disposables = new (0, $atiRx.DisposableStore)();
            this.disposables.add(provider.onDidChange(handleFoldingRangesChange));
        }
    }
}
function $e97789ead6678e08$var$collectSyntaxRanges(providers, model, cancellationToken) {
    let rangeData = null;
    let promises = providers.map((provider, i)=>{
        return Promise.resolve(provider.provideFoldingRanges(model, $e97789ead6678e08$var$foldingContext, cancellationToken)).then((ranges)=>{
            if (cancellationToken.isCancellationRequested) return;
            if (Array.isArray(ranges)) {
                if (!Array.isArray(rangeData)) rangeData = [];
                let nLines = model.getLineCount();
                for (let r of ranges)if (r.start > 0 && r.end > r.start && r.end <= nLines) rangeData.push({
                    start: r.start,
                    end: r.end,
                    rank: i,
                    kind: r.kind
                });
            }
        }, (0, $g0782.onUnexpectedExternalError));
    });
    return Promise.all(promises).then((_)=>{
        return rangeData;
    });
}
class $e97789ead6678e08$export$eb0bed8ad121fa0e {
    add(startLineNumber, endLineNumber, type, nestingLevel) {
        if (startLineNumber > (0, $f1624c7ecd1d4781$export$ccaa8b63109dc601) || endLineNumber > (0, $f1624c7ecd1d4781$export$ccaa8b63109dc601)) return;
        let index = this._length;
        this._startIndexes[index] = startLineNumber;
        this._endIndexes[index] = endLineNumber;
        this._nestingLevels[index] = nestingLevel;
        this._types[index] = type;
        this._length++;
        if (nestingLevel < 30) this._nestingLevelCounts[nestingLevel] = (this._nestingLevelCounts[nestingLevel] || 0) + 1;
    }
    toIndentRanges() {
        if (this._length <= this._foldingRangesLimit) {
            let startIndexes = new Uint32Array(this._length);
            let endIndexes = new Uint32Array(this._length);
            for(let i = 0; i < this._length; i++){
                startIndexes[i] = this._startIndexes[i];
                endIndexes[i] = this._endIndexes[i];
            }
            return new (0, $f1624c7ecd1d4781$export$79a27591b52924cb)(startIndexes, endIndexes, this._types);
        } else {
            let entries = 0;
            let maxLevel = this._nestingLevelCounts.length;
            for(let i1 = 0; i1 < this._nestingLevelCounts.length; i1++){
                let n = this._nestingLevelCounts[i1];
                if (n) {
                    if (n + entries > this._foldingRangesLimit) {
                        maxLevel = i1;
                        break;
                    }
                    entries += n;
                }
            }
            let startIndexes1 = new Uint32Array(this._foldingRangesLimit);
            let endIndexes1 = new Uint32Array(this._foldingRangesLimit);
            let types = [];
            for(let i2 = 0, k = 0; i2 < this._length; i2++){
                let level = this._nestingLevels[i2];
                if (level < maxLevel || level === maxLevel && (entries++) < this._foldingRangesLimit) {
                    startIndexes1[k] = this._startIndexes[i2];
                    endIndexes1[k] = this._endIndexes[i2];
                    types[k] = this._types[i2];
                    k++;
                }
            }
            return new (0, $f1624c7ecd1d4781$export$79a27591b52924cb)(startIndexes1, endIndexes1, types);
        }
    }
    constructor(foldingRangesLimit){
        this._startIndexes = [];
        this._endIndexes = [];
        this._nestingLevels = [];
        this._nestingLevelCounts = [];
        this._types = [];
        this._length = 0;
        this._foldingRangesLimit = foldingRangesLimit;
    }
}
function $e97789ead6678e08$export$468fc32e82949676(rangeData, limit) {
    let sorted = rangeData.sort((d1, d2)=>{
        let diff = d1.start - d2.start;
        if (diff === 0) diff = d1.rank - d2.rank;
        return diff;
    });
    let collector = new $e97789ead6678e08$export$eb0bed8ad121fa0e(limit);
    let top = undefined;
    let previous = [];
    for (let entry of sorted){
        if (!top) {
            top = entry;
            collector.add(entry.start, entry.end, entry.kind && entry.kind.value, previous.length);
        } else if (entry.start > top.start) {
            if (entry.end <= top.end) {
                previous.push(top);
                top = entry;
                collector.add(entry.start, entry.end, entry.kind && entry.kind.value, previous.length);
            } else {
                if (entry.start > top.end) {
                    do top = previous.pop();
                    while (top && entry.start > top.end);
                    if (top) previous.push(top);
                    top = entry;
                }
                collector.add(entry.start, entry.end, entry.kind && entry.kind.value, previous.length);
            }
        }
    }
    return collector.toIndentRanges();
}


const $9d6b74da77b76d67$export$d107d20bbf4762c = "init";
class $9d6b74da77b76d67$export$3f2af55879f1f5cb {
    dispose() {
        if (this.decorationIds) {
            this.editorModel.deltaDecorations(this.decorationIds, []);
            this.decorationIds = undefined;
        }
        if (typeof this.timeout === "number") {
            clearTimeout(this.timeout);
            this.timeout = undefined;
        }
    }
    compute(cancelationToken) {
        let foldingRangeData = [];
        if (this.decorationIds) for (let id of this.decorationIds){
            let range = this.editorModel.getDecorationRange(id);
            if (range) foldingRangeData.push({
                start: range.startLineNumber,
                end: range.endLineNumber,
                rank: 1
            });
        }
        return Promise.resolve((0, $e97789ead6678e08$export$468fc32e82949676)(foldingRangeData, Number.MAX_VALUE));
    }
    constructor(editorModel, initialRanges, onTimeout, timeoutTime){
        this.editorModel = editorModel;
        this.id = $9d6b74da77b76d67$export$d107d20bbf4762c;
        if (initialRanges.length) {
            let toDecorationRange = (range)=>{
                return {
                    range: {
                        startLineNumber: range.startLineNumber,
                        startColumn: 0,
                        endLineNumber: range.endLineNumber,
                        endColumn: editorModel.getLineLength(range.endLineNumber)
                    },
                    options: {
                        description: "folding-initializing-range-provider",
                        stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ 
                    }
                };
            };
            this.decorationIds = editorModel.deltaDecorations([], initialRanges.map(toDecorationRange));
            this.timeout = setTimeout(onTimeout, timeoutTime);
        }
    }
}



var $58WHl = parcelRequire("58WHl");

var $bRtox = parcelRequire("bRtox");

var $3XYy8 = parcelRequire("3XYy8");

var $fUTzO = parcelRequire("fUTzO");

var $8HDYc = parcelRequire("8HDYc");

var $g88WD = parcelRequire("g88WD");

var $58WHl = parcelRequire("58WHl");

var $iValS = parcelRequire("iValS");

var $fUTzO = parcelRequire("fUTzO");
const $5fb46c3996945b00$export$885051cbe6b7e954 = (0, $iValS.registerIcon)("folding-expanded", (0, $8HDYc.Codicon).chevronDown, (0, $58WHl.localize)("foldingExpandedIcon", "Icon for expanded ranges in the editor glyph margin."));
const $5fb46c3996945b00$export$91aea75f1008558b = (0, $iValS.registerIcon)("folding-collapsed", (0, $8HDYc.Codicon).chevronRight, (0, $58WHl.localize)("foldingCollapsedIcon", "Icon for collapsed ranges in the editor glyph margin."));
class $5fb46c3996945b00$export$efeea4b4f3021f6b {
    getDecorationOption(isCollapsed, isHidden) {
        if (isHidden) return $5fb46c3996945b00$export$efeea4b4f3021f6b.HIDDEN_RANGE_DECORATION;
        if (isCollapsed) return this.showFoldingHighlights ? $5fb46c3996945b00$export$efeea4b4f3021f6b.COLLAPSED_HIGHLIGHTED_VISUAL_DECORATION : $5fb46c3996945b00$export$efeea4b4f3021f6b.COLLAPSED_VISUAL_DECORATION;
        else if (this.autoHideFoldingControls) return $5fb46c3996945b00$export$efeea4b4f3021f6b.EXPANDED_AUTO_HIDE_VISUAL_DECORATION;
        else return $5fb46c3996945b00$export$efeea4b4f3021f6b.EXPANDED_VISUAL_DECORATION;
    }
    deltaDecorations(oldDecorations, newDecorations) {
        return this.editor.deltaDecorations(oldDecorations, newDecorations);
    }
    changeDecorations(callback) {
        return this.editor.changeDecorations(callback);
    }
    constructor(editor){
        this.editor = editor;
        this.autoHideFoldingControls = true;
        this.showFoldingHighlights = true;
    }
}
$5fb46c3996945b00$export$efeea4b4f3021f6b.COLLAPSED_VISUAL_DECORATION = (0, $g88WD.ModelDecorationOptions).register({
    description: "folding-collapsed-visual-decoration",
    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ ,
    afterContentClassName: "inline-folded",
    isWholeLine: true,
    firstLineDecorationClassName: (0, $fUTzO.ThemeIcon).asClassName($5fb46c3996945b00$export$91aea75f1008558b)
});
$5fb46c3996945b00$export$efeea4b4f3021f6b.COLLAPSED_HIGHLIGHTED_VISUAL_DECORATION = (0, $g88WD.ModelDecorationOptions).register({
    description: "folding-collapsed-highlighted-visual-decoration",
    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ ,
    afterContentClassName: "inline-folded",
    className: "folded-background",
    isWholeLine: true,
    firstLineDecorationClassName: (0, $fUTzO.ThemeIcon).asClassName($5fb46c3996945b00$export$91aea75f1008558b)
});
$5fb46c3996945b00$export$efeea4b4f3021f6b.EXPANDED_AUTO_HIDE_VISUAL_DECORATION = (0, $g88WD.ModelDecorationOptions).register({
    description: "folding-expanded-auto-hide-visual-decoration",
    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ ,
    isWholeLine: true,
    firstLineDecorationClassName: (0, $fUTzO.ThemeIcon).asClassName($5fb46c3996945b00$export$885051cbe6b7e954)
});
$5fb46c3996945b00$export$efeea4b4f3021f6b.EXPANDED_VISUAL_DECORATION = (0, $g88WD.ModelDecorationOptions).register({
    description: "folding-expanded-visual-decoration",
    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ ,
    isWholeLine: true,
    firstLineDecorationClassName: "alwaysShowFoldIcons " + (0, $fUTzO.ThemeIcon).asClassName($5fb46c3996945b00$export$885051cbe6b7e954)
});
$5fb46c3996945b00$export$efeea4b4f3021f6b.HIDDEN_RANGE_DECORATION = (0, $g88WD.ModelDecorationOptions).register({
    description: "folding-hidden-range-decoration",
    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ 
});



/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $d6b7f21e4173727c$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $d6b7f21e4173727c$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
const $d6b7f21e4173727c$var$CONTEXT_FOLDING_ENABLED = new (0, $bRtox.RawContextKey)("foldingEnabled", false);
let $d6b7f21e4173727c$export$5d4a7ec5ea2624d8 = class FoldingController extends (0, $atiRx.Disposable) {
    static get(editor) {
        return editor.getContribution(FoldingController.ID);
    }
    /**
     * Store view state.
     */ saveViewState() {
        let model = this.editor.getModel();
        if (!model || !this._isEnabled || model.isTooLargeForTokenization()) return {};
        if (this.foldingModel) {
            let collapsedRegions = this.foldingModel.isInitialized ? this.foldingModel.getMemento() : this.hiddenRangeModel.getMemento();
            let provider = this.rangeProvider ? this.rangeProvider.id : undefined;
            return {
                collapsedRegions: collapsedRegions,
                lineCount: model.getLineCount(),
                provider: provider,
                foldedImports: this._currentModelHasFoldedImports
            };
        }
        return undefined;
    }
    /**
     * Restore view state.
     */ restoreViewState(state) {
        let model = this.editor.getModel();
        if (!model || !this._isEnabled || model.isTooLargeForTokenization() || !this.hiddenRangeModel) return;
        if (!state || state.lineCount !== model.getLineCount()) return;
        this._currentModelHasFoldedImports = !!state.foldedImports;
        if (!state.collapsedRegions) return;
        if (state.provider === (0, $e97789ead6678e08$export$643d29553f216197) || state.provider === (0, $9d6b74da77b76d67$export$d107d20bbf4762c)) this.foldingStateMemento = state;
        const collapsedRegions = state.collapsedRegions;
        // set the hidden ranges right away, before waiting for the folding model.
        if (this.hiddenRangeModel.applyMemento(collapsedRegions)) {
            const foldingModel = this.getFoldingModel();
            if (foldingModel) foldingModel.then((foldingModel)=>{
                if (foldingModel) {
                    this._restoringViewState = true;
                    try {
                        foldingModel.applyMemento(collapsedRegions);
                    } finally{
                        this._restoringViewState = false;
                    }
                }
            }).then(undefined, (0, $g0782.onUnexpectedError));
        }
    }
    onModelChanged() {
        this.localToDispose.clear();
        let model = this.editor.getModel();
        if (!this._isEnabled || !model || model.isTooLargeForTokenization()) // huge files get no view model, so they cannot support hidden areas
        return;
        this._currentModelHasFoldedImports = false;
        this.foldingModel = new (0, $8b35a10f74bd273a$export$342aae847b5a9075)(model, this.foldingDecorationProvider);
        this.localToDispose.add(this.foldingModel);
        this.hiddenRangeModel = new (0, $5630a6e002feb7d1$export$87e89ef1cf49f2d)(this.foldingModel);
        this.localToDispose.add(this.hiddenRangeModel);
        this.localToDispose.add(this.hiddenRangeModel.onDidChange((hr)=>this.onHiddenRangesChanges(hr)));
        this.updateScheduler = new (0, $eFOsn.Delayer)(200);
        this.cursorChangedScheduler = new (0, $eFOsn.RunOnceScheduler)(()=>this.revealCursor(), 200);
        this.localToDispose.add(this.cursorChangedScheduler);
        this.localToDispose.add((0, $eKhCe.FoldingRangeProviderRegistry).onDidChange(()=>this.onFoldingStrategyChanged()));
        this.localToDispose.add(this.editor.onDidChangeModelLanguageConfiguration(()=>this.onFoldingStrategyChanged())); // covers model language changes as well
        this.localToDispose.add(this.editor.onDidChangeModelContent((e)=>this.onDidChangeModelContent(e)));
        this.localToDispose.add(this.editor.onDidChangeCursorPosition(()=>this.onCursorPositionChanged()));
        this.localToDispose.add(this.editor.onMouseDown((e)=>this.onEditorMouseDown(e)));
        this.localToDispose.add(this.editor.onMouseUp((e)=>this.onEditorMouseUp(e)));
        this.localToDispose.add({
            dispose: ()=>{
                if (this.foldingRegionPromise) {
                    this.foldingRegionPromise.cancel();
                    this.foldingRegionPromise = null;
                }
                if (this.updateScheduler) this.updateScheduler.cancel();
                this.updateScheduler = null;
                this.foldingModel = null;
                this.foldingModelPromise = null;
                this.hiddenRangeModel = null;
                this.cursorChangedScheduler = null;
                this.foldingStateMemento = null;
                if (this.rangeProvider) this.rangeProvider.dispose();
                this.rangeProvider = null;
            }
        });
        this.triggerFoldingModelChanged();
    }
    onFoldingStrategyChanged() {
        if (this.rangeProvider) this.rangeProvider.dispose();
        this.rangeProvider = null;
        this.triggerFoldingModelChanged();
    }
    getRangeProvider(editorModel) {
        if (this.rangeProvider) return this.rangeProvider;
        this.rangeProvider = new (0, $163f2d1dd6d0927c$export$c6761242dbde8f79)(editorModel); // fallback
        if (this._useFoldingProviders && this.foldingModel) {
            let foldingProviders = (0, $eKhCe.FoldingRangeProviderRegistry).ordered(this.foldingModel.textModel);
            if (foldingProviders.length === 0 && this.foldingStateMemento && this.foldingStateMemento.collapsedRegions) {
                const rangeProvider = this.rangeProvider = new (0, $9d6b74da77b76d67$export$3f2af55879f1f5cb)(editorModel, this.foldingStateMemento.collapsedRegions, ()=>{
                    // if after 30 the InitializingRangeProvider is still not replaced, force a refresh
                    this.foldingStateMemento = null;
                    this.onFoldingStrategyChanged();
                }, 30000);
                return rangeProvider; // keep memento in case there are still no foldingProviders on the next request.
            } else if (foldingProviders.length > 0) this.rangeProvider = new (0, $e97789ead6678e08$export$409cdd7e50053250)(editorModel, foldingProviders, ()=>this.triggerFoldingModelChanged());
        }
        this.foldingStateMemento = null;
        return this.rangeProvider;
    }
    getFoldingModel() {
        return this.foldingModelPromise;
    }
    onDidChangeModelContent(e) {
        var _a;
        (_a = this.hiddenRangeModel) === null || _a === void 0 || _a.notifyChangeModelContent(e);
        this.triggerFoldingModelChanged();
    }
    triggerFoldingModelChanged() {
        if (this.updateScheduler) {
            if (this.foldingRegionPromise) {
                this.foldingRegionPromise.cancel();
                this.foldingRegionPromise = null;
            }
            this.foldingModelPromise = this.updateScheduler.trigger(()=>{
                const foldingModel = this.foldingModel;
                if (!foldingModel) return null;
                const provider = this.getRangeProvider(foldingModel.textModel);
                let foldingRegionPromise = this.foldingRegionPromise = (0, $eFOsn.createCancelablePromise)((token)=>provider.compute(token));
                return foldingRegionPromise.then((foldingRanges)=>{
                    if (foldingRanges && foldingRegionPromise === this.foldingRegionPromise) {
                        let scrollState;
                        if (this._foldingImportsByDefault && !this._currentModelHasFoldedImports) {
                            const hasChanges = foldingRanges.setCollapsedAllOfType((0, $eKhCe.FoldingRangeKind).Imports.value, true);
                            if (hasChanges) {
                                scrollState = (0, $iVwSq.StableEditorScrollState).capture(this.editor);
                                this._currentModelHasFoldedImports = hasChanges;
                            }
                        }
                        // some cursors might have moved into hidden regions, make sure they are in expanded regions
                        let selections = this.editor.getSelections();
                        let selectionLineNumbers = selections ? selections.map((s)=>s.startLineNumber) : [];
                        foldingModel.update(foldingRanges, selectionLineNumbers);
                        if (scrollState) scrollState.restore(this.editor);
                    }
                    return foldingModel;
                });
            }).then(undefined, (err)=>{
                (0, $g0782.onUnexpectedError)(err);
                return null;
            });
        }
    }
    onHiddenRangesChanges(hiddenRanges) {
        if (this.hiddenRangeModel && hiddenRanges.length && !this._restoringViewState) {
            let selections = this.editor.getSelections();
            if (selections) {
                if (this.hiddenRangeModel.adjustSelections(selections)) this.editor.setSelections(selections);
            }
        }
        this.editor.setHiddenAreas(hiddenRanges);
    }
    onCursorPositionChanged() {
        if (this.hiddenRangeModel && this.hiddenRangeModel.hasRanges()) this.cursorChangedScheduler.schedule();
    }
    revealCursor() {
        const foldingModel = this.getFoldingModel();
        if (!foldingModel) return;
        foldingModel.then((foldingModel)=>{
            if (foldingModel) {
                let selections = this.editor.getSelections();
                if (selections && selections.length > 0) {
                    let toToggle = [];
                    for (let selection of selections){
                        let lineNumber = selection.selectionStartLineNumber;
                        if (this.hiddenRangeModel && this.hiddenRangeModel.isHidden(lineNumber)) toToggle.push(...foldingModel.getAllRegionsAtLine(lineNumber, (r)=>r.isCollapsed && lineNumber > r.startLineNumber));
                    }
                    if (toToggle.length) {
                        foldingModel.toggleCollapseState(toToggle);
                        this.reveal(selections[0].getPosition());
                    }
                }
            }
        }).then(undefined, (0, $g0782.onUnexpectedError));
    }
    onEditorMouseDown(e) {
        this.mouseDownInfo = null;
        if (!this.hiddenRangeModel || !e.target || !e.target.range) return;
        if (!e.event.leftButton && !e.event.middleButton) return;
        const range = e.target.range;
        let iconClicked = false;
        switch(e.target.type){
            case 4 /* GUTTER_LINE_DECORATIONS */ :
                const data = e.target.detail;
                const offsetLeftInGutter = e.target.element.offsetLeft;
                const gutterOffsetX = data.offsetX - offsetLeftInGutter;
                // const gutterOffsetX = data.offsetX - data.glyphMarginWidth - data.lineNumbersWidth - data.glyphMarginLeft;
                // TODO@joao TODO@alex TODO@martin this is such that we don't collide with dirty diff
                if (gutterOffsetX < 5) return;
                iconClicked = true;
                break;
            case 7 /* CONTENT_EMPTY */ :
                if (this._unfoldOnClickAfterEndOfLine && this.hiddenRangeModel.hasRanges()) {
                    const data1 = e.target.detail;
                    if (!data1.isAfterLines) break;
                }
                return;
            case 6 /* CONTENT_TEXT */ :
                if (this.hiddenRangeModel.hasRanges()) {
                    let model = this.editor.getModel();
                    if (model && range.startColumn === model.getLineMaxColumn(range.startLineNumber)) break;
                }
                return;
            default:
                return;
        }
        this.mouseDownInfo = {
            lineNumber: range.startLineNumber,
            iconClicked: iconClicked
        };
    }
    onEditorMouseUp(e) {
        const foldingModel = this.getFoldingModel();
        if (!foldingModel || !this.mouseDownInfo || !e.target) return;
        let lineNumber = this.mouseDownInfo.lineNumber;
        let iconClicked = this.mouseDownInfo.iconClicked;
        let range = e.target.range;
        if (!range || range.startLineNumber !== lineNumber) return;
        if (iconClicked) {
            if (e.target.type !== 4 /* GUTTER_LINE_DECORATIONS */ ) return;
        } else {
            let model = this.editor.getModel();
            if (!model || range.startColumn !== model.getLineMaxColumn(lineNumber)) return;
        }
        foldingModel.then((foldingModel)=>{
            if (foldingModel) {
                let region = foldingModel.getRegionAtLine(lineNumber);
                if (region && region.startLineNumber === lineNumber) {
                    let isCollapsed = region.isCollapsed;
                    if (iconClicked || isCollapsed) {
                        let surrounding = e.event.altKey;
                        let toToggle = [];
                        if (surrounding) {
                            let filter = (otherRegion)=>!otherRegion.containedBy(region) && !region.containedBy(otherRegion);
                            let toMaybeToggle = foldingModel.getRegionsInside(null, filter);
                            for (const r of toMaybeToggle)if (r.isCollapsed) toToggle.push(r);
                            // if any surrounding regions are folded, unfold those. Otherwise, fold all surrounding
                            if (toToggle.length === 0) toToggle = toMaybeToggle;
                        } else {
                            let recursive = e.event.middleButton || e.event.shiftKey;
                            if (recursive) {
                                for (const r1 of foldingModel.getRegionsInside(region))if (r1.isCollapsed === isCollapsed) toToggle.push(r1);
                            }
                            // when recursive, first only collapse all children. If all are already folded or there are no children, also fold parent.
                            if (isCollapsed || !recursive || toToggle.length === 0) toToggle.push(region);
                        }
                        foldingModel.toggleCollapseState(toToggle);
                        this.reveal({
                            lineNumber: lineNumber,
                            column: 1
                        });
                    }
                }
            }
        }).then(undefined, (0, $g0782.onUnexpectedError));
    }
    reveal(position) {
        this.editor.revealPositionInCenterIfOutsideViewport(position, 0 /* Smooth */ );
    }
    constructor(editor, contextKeyService){
        super();
        this.contextKeyService = contextKeyService;
        this.localToDispose = this._register(new (0, $atiRx.DisposableStore)());
        this.editor = editor;
        const options = this.editor.getOptions();
        this._isEnabled = options.get(37 /* folding */ );
        this._useFoldingProviders = options.get(38 /* foldingStrategy */ ) !== "indentation";
        this._unfoldOnClickAfterEndOfLine = options.get(41 /* unfoldOnClickAfterEndOfLine */ );
        this._restoringViewState = false;
        this._currentModelHasFoldedImports = false;
        this._foldingImportsByDefault = options.get(40 /* foldingImportsByDefault */ );
        this.foldingModel = null;
        this.hiddenRangeModel = null;
        this.rangeProvider = null;
        this.foldingRegionPromise = null;
        this.foldingStateMemento = null;
        this.foldingModelPromise = null;
        this.updateScheduler = null;
        this.cursorChangedScheduler = null;
        this.mouseDownInfo = null;
        this.foldingDecorationProvider = new (0, $5fb46c3996945b00$export$efeea4b4f3021f6b)(editor);
        this.foldingDecorationProvider.autoHideFoldingControls = options.get(98 /* showFoldingControls */ ) === "mouseover";
        this.foldingDecorationProvider.showFoldingHighlights = options.get(39 /* foldingHighlight */ );
        this.foldingEnabled = $d6b7f21e4173727c$var$CONTEXT_FOLDING_ENABLED.bindTo(this.contextKeyService);
        this.foldingEnabled.set(this._isEnabled);
        this._register(this.editor.onDidChangeModel(()=>this.onModelChanged()));
        this._register(this.editor.onDidChangeConfiguration((e)=>{
            if (e.hasChanged(37 /* folding */ )) {
                this._isEnabled = this.editor.getOptions().get(37 /* folding */ );
                this.foldingEnabled.set(this._isEnabled);
                this.onModelChanged();
            }
            if (e.hasChanged(98 /* showFoldingControls */ ) || e.hasChanged(39 /* foldingHighlight */ )) {
                const options = this.editor.getOptions();
                this.foldingDecorationProvider.autoHideFoldingControls = options.get(98 /* showFoldingControls */ ) === "mouseover";
                this.foldingDecorationProvider.showFoldingHighlights = options.get(39 /* foldingHighlight */ );
                this.triggerFoldingModelChanged();
            }
            if (e.hasChanged(38 /* foldingStrategy */ )) {
                this._useFoldingProviders = this.editor.getOptions().get(38 /* foldingStrategy */ ) !== "indentation";
                this.onFoldingStrategyChanged();
            }
            if (e.hasChanged(41 /* unfoldOnClickAfterEndOfLine */ )) this._unfoldOnClickAfterEndOfLine = this.editor.getOptions().get(41 /* unfoldOnClickAfterEndOfLine */ );
            if (e.hasChanged(40 /* foldingImportsByDefault */ )) this._foldingImportsByDefault = this.editor.getOptions().get(40 /* foldingImportsByDefault */ );
        }));
        this.onModelChanged();
    }
};
$d6b7f21e4173727c$export$5d4a7ec5ea2624d8.ID = "editor.contrib.folding";
$d6b7f21e4173727c$export$5d4a7ec5ea2624d8 = $d6b7f21e4173727c$var$__decorate([
    $d6b7f21e4173727c$var$__param(1, (0, $bRtox.IContextKeyService))
], $d6b7f21e4173727c$export$5d4a7ec5ea2624d8);
class $d6b7f21e4173727c$var$FoldingAction extends (0, $gGOeQ.EditorAction) {
    runEditorCommand(accessor, editor, args) {
        let foldingController = $d6b7f21e4173727c$export$5d4a7ec5ea2624d8.get(editor);
        if (!foldingController) return;
        let foldingModelPromise = foldingController.getFoldingModel();
        if (foldingModelPromise) {
            this.reportTelemetry(accessor, editor);
            return foldingModelPromise.then((foldingModel)=>{
                if (foldingModel) {
                    this.invoke(foldingController, foldingModel, editor, args);
                    const selection = editor.getSelection();
                    if (selection) foldingController.reveal(selection.getStartPosition());
                }
            });
        }
    }
    getSelectedLines(editor) {
        let selections = editor.getSelections();
        return selections ? selections.map((s)=>s.startLineNumber) : [];
    }
    getLineNumbers(args, editor) {
        if (args && args.selectionLines) return args.selectionLines.map((l)=>l + 1); // to 0-bases line numbers
        return this.getSelectedLines(editor);
    }
    run(_accessor, _editor) {}
}
function $d6b7f21e4173727c$var$foldingArgumentsConstraint(args) {
    if (!$3ICxR.isUndefined(args)) {
        if (!$3ICxR.isObject(args)) return false;
        const foldingArgs = args;
        if (!$3ICxR.isUndefined(foldingArgs.levels) && !$3ICxR.isNumber(foldingArgs.levels)) return false;
        if (!$3ICxR.isUndefined(foldingArgs.direction) && !$3ICxR.isString(foldingArgs.direction)) return false;
        if (!$3ICxR.isUndefined(foldingArgs.selectionLines) && (!$3ICxR.isArray(foldingArgs.selectionLines) || !foldingArgs.selectionLines.every($3ICxR.isNumber))) return false;
    }
    return true;
}
class $d6b7f21e4173727c$var$UnfoldAction extends $d6b7f21e4173727c$var$FoldingAction {
    invoke(_foldingController, foldingModel, editor, args) {
        let levels = args && args.levels || 1;
        let lineNumbers = this.getLineNumbers(args, editor);
        if (args && args.direction === "up") (0, $8b35a10f74bd273a$export$50a013aaf999fe15)(foldingModel, false, levels, lineNumbers);
        else (0, $8b35a10f74bd273a$export$1ef41fe66cd8530)(foldingModel, false, levels, lineNumbers);
    }
    constructor(){
        super({
            id: "editor.unfold",
            label: $58WHl.localize("unfoldAction.label", "Unfold"),
            alias: "Unfold",
            precondition: $d6b7f21e4173727c$var$CONTEXT_FOLDING_ENABLED,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: 3161 /* BracketRight */ ,
                mac: {
                    primary: 2649 /* BracketRight */ 
                },
                weight: 100 /* EditorContrib */ 
            },
            description: {
                description: "Unfold the content in the editor",
                args: [
                    {
                        name: "Unfold editor argument",
                        description: `Property-value pairs that can be passed through this argument:
						* 'levels': Number of levels to unfold. If not set, defaults to 1.
						* 'direction': If 'up', unfold given number of levels up otherwise unfolds down.
						* 'selectionLines': The start lines (0-based) of the editor selections to apply the unfold action to. If not set, the active selection(s) will be used.
						`,
                        constraint: $d6b7f21e4173727c$var$foldingArgumentsConstraint,
                        schema: {
                            "type": "object",
                            "properties": {
                                "levels": {
                                    "type": "number",
                                    "default": 1
                                },
                                "direction": {
                                    "type": "string",
                                    "enum": [
                                        "up",
                                        "down"
                                    ],
                                    "default": "down"
                                },
                                "selectionLines": {
                                    "type": "array",
                                    "items": {
                                        "type": "number"
                                    }
                                }
                            }
                        }
                    }
                ]
            }
        });
    }
}
class $d6b7f21e4173727c$var$UnFoldRecursivelyAction extends $d6b7f21e4173727c$var$FoldingAction {
    invoke(_foldingController, foldingModel, editor, _args) {
        (0, $8b35a10f74bd273a$export$1ef41fe66cd8530)(foldingModel, false, Number.MAX_VALUE, this.getSelectedLines(editor));
    }
    constructor(){
        super({
            id: "editor.unfoldRecursively",
            label: $58WHl.localize("unFoldRecursivelyAction.label", "Unfold Recursively"),
            alias: "Unfold Recursively",
            precondition: $d6b7f21e4173727c$var$CONTEXT_FOLDING_ENABLED,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: (0, $fQtIR.KeyChord)(2089 /* KeyK */ , 2137 /* BracketRight */ ),
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
class $d6b7f21e4173727c$var$FoldAction extends $d6b7f21e4173727c$var$FoldingAction {
    invoke(_foldingController, foldingModel, editor, args) {
        let lineNumbers = this.getLineNumbers(args, editor);
        const levels = args && args.levels;
        const direction = args && args.direction;
        if (typeof levels !== "number" && typeof direction !== "string") // fold the region at the location or if already collapsed, the first uncollapsed parent instead.
        (0, $8b35a10f74bd273a$export$e1cae19974cbbf8b)(foldingModel, true, lineNumbers);
        else if (direction === "up") (0, $8b35a10f74bd273a$export$50a013aaf999fe15)(foldingModel, true, levels || 1, lineNumbers);
        else (0, $8b35a10f74bd273a$export$1ef41fe66cd8530)(foldingModel, true, levels || 1, lineNumbers);
    }
    constructor(){
        super({
            id: "editor.fold",
            label: $58WHl.localize("foldAction.label", "Fold"),
            alias: "Fold",
            precondition: $d6b7f21e4173727c$var$CONTEXT_FOLDING_ENABLED,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: 3159 /* BracketLeft */ ,
                mac: {
                    primary: 2647 /* BracketLeft */ 
                },
                weight: 100 /* EditorContrib */ 
            },
            description: {
                description: "Fold the content in the editor",
                args: [
                    {
                        name: "Fold editor argument",
                        description: `Property-value pairs that can be passed through this argument:
							* 'levels': Number of levels to fold.
							* 'direction': If 'up', folds given number of levels up otherwise folds down.
							* 'selectionLines': The start lines (0-based) of the editor selections to apply the fold action to. If not set, the active selection(s) will be used.
							If no levels or direction is set, folds the region at the locations or if already collapsed, the first uncollapsed parent instead.
						`,
                        constraint: $d6b7f21e4173727c$var$foldingArgumentsConstraint,
                        schema: {
                            "type": "object",
                            "properties": {
                                "levels": {
                                    "type": "number"
                                },
                                "direction": {
                                    "type": "string",
                                    "enum": [
                                        "up",
                                        "down"
                                    ]
                                },
                                "selectionLines": {
                                    "type": "array",
                                    "items": {
                                        "type": "number"
                                    }
                                }
                            }
                        }
                    }
                ]
            }
        });
    }
}
class $d6b7f21e4173727c$var$ToggleFoldAction extends $d6b7f21e4173727c$var$FoldingAction {
    invoke(_foldingController, foldingModel, editor) {
        let selectedLines = this.getSelectedLines(editor);
        (0, $8b35a10f74bd273a$export$6008f8f734d0336a)(foldingModel, 1, selectedLines);
    }
    constructor(){
        super({
            id: "editor.toggleFold",
            label: $58WHl.localize("toggleFoldAction.label", "Toggle Fold"),
            alias: "Toggle Fold",
            precondition: $d6b7f21e4173727c$var$CONTEXT_FOLDING_ENABLED,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: (0, $fQtIR.KeyChord)(2089 /* KeyK */ , 2090 /* KeyL */ ),
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
class $d6b7f21e4173727c$var$FoldRecursivelyAction extends $d6b7f21e4173727c$var$FoldingAction {
    invoke(_foldingController, foldingModel, editor) {
        let selectedLines = this.getSelectedLines(editor);
        (0, $8b35a10f74bd273a$export$1ef41fe66cd8530)(foldingModel, true, Number.MAX_VALUE, selectedLines);
    }
    constructor(){
        super({
            id: "editor.foldRecursively",
            label: $58WHl.localize("foldRecursivelyAction.label", "Fold Recursively"),
            alias: "Fold Recursively",
            precondition: $d6b7f21e4173727c$var$CONTEXT_FOLDING_ENABLED,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: (0, $fQtIR.KeyChord)(2089 /* KeyK */ , 2135 /* BracketLeft */ ),
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
class $d6b7f21e4173727c$var$FoldAllBlockCommentsAction extends $d6b7f21e4173727c$var$FoldingAction {
    invoke(_foldingController, foldingModel, editor) {
        if (foldingModel.regions.hasTypes()) (0, $8b35a10f74bd273a$export$ce3950edac996729)(foldingModel, (0, $eKhCe.FoldingRangeKind).Comment.value, true);
        else {
            const editorModel = editor.getModel();
            if (!editorModel) return;
            const comments = (0, $9wt9e.LanguageConfigurationRegistry).getComments(editorModel.getLanguageId());
            if (comments && comments.blockCommentStartToken) {
                let regExp = new RegExp("^\\s*" + (0, $9TEeL.escapeRegExpCharacters)(comments.blockCommentStartToken));
                (0, $8b35a10f74bd273a$export$acbcc757d0e877b)(foldingModel, regExp, true);
            }
        }
    }
    constructor(){
        super({
            id: "editor.foldAllBlockComments",
            label: $58WHl.localize("foldAllBlockComments.label", "Fold All Block Comments"),
            alias: "Fold All Block Comments",
            precondition: $d6b7f21e4173727c$var$CONTEXT_FOLDING_ENABLED,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: (0, $fQtIR.KeyChord)(2089 /* KeyK */ , 2133 /* Slash */ ),
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
class $d6b7f21e4173727c$var$FoldAllRegionsAction extends $d6b7f21e4173727c$var$FoldingAction {
    invoke(_foldingController, foldingModel, editor) {
        if (foldingModel.regions.hasTypes()) (0, $8b35a10f74bd273a$export$ce3950edac996729)(foldingModel, (0, $eKhCe.FoldingRangeKind).Region.value, true);
        else {
            const editorModel = editor.getModel();
            if (!editorModel) return;
            const foldingRules = (0, $9wt9e.LanguageConfigurationRegistry).getFoldingRules(editorModel.getLanguageId());
            if (foldingRules && foldingRules.markers && foldingRules.markers.start) {
                let regExp = new RegExp(foldingRules.markers.start);
                (0, $8b35a10f74bd273a$export$acbcc757d0e877b)(foldingModel, regExp, true);
            }
        }
    }
    constructor(){
        super({
            id: "editor.foldAllMarkerRegions",
            label: $58WHl.localize("foldAllMarkerRegions.label", "Fold All Regions"),
            alias: "Fold All Regions",
            precondition: $d6b7f21e4173727c$var$CONTEXT_FOLDING_ENABLED,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: (0, $fQtIR.KeyChord)(2089 /* KeyK */ , 2077 /* Digit8 */ ),
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
class $d6b7f21e4173727c$var$UnfoldAllRegionsAction extends $d6b7f21e4173727c$var$FoldingAction {
    invoke(_foldingController, foldingModel, editor) {
        if (foldingModel.regions.hasTypes()) (0, $8b35a10f74bd273a$export$ce3950edac996729)(foldingModel, (0, $eKhCe.FoldingRangeKind).Region.value, false);
        else {
            const editorModel = editor.getModel();
            if (!editorModel) return;
            const foldingRules = (0, $9wt9e.LanguageConfigurationRegistry).getFoldingRules(editorModel.getLanguageId());
            if (foldingRules && foldingRules.markers && foldingRules.markers.start) {
                let regExp = new RegExp(foldingRules.markers.start);
                (0, $8b35a10f74bd273a$export$acbcc757d0e877b)(foldingModel, regExp, false);
            }
        }
    }
    constructor(){
        super({
            id: "editor.unfoldAllMarkerRegions",
            label: $58WHl.localize("unfoldAllMarkerRegions.label", "Unfold All Regions"),
            alias: "Unfold All Regions",
            precondition: $d6b7f21e4173727c$var$CONTEXT_FOLDING_ENABLED,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: (0, $fQtIR.KeyChord)(2089 /* KeyK */ , 2078 /* Digit9 */ ),
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
class $d6b7f21e4173727c$var$FoldAllRegionsExceptAction extends $d6b7f21e4173727c$var$FoldingAction {
    invoke(_foldingController, foldingModel, editor) {
        let selectedLines = this.getSelectedLines(editor);
        (0, $8b35a10f74bd273a$export$13292d9dd11d6b4f)(foldingModel, true, selectedLines);
    }
    constructor(){
        super({
            id: "editor.foldAllExcept",
            label: $58WHl.localize("foldAllExcept.label", "Fold All Regions Except Selected"),
            alias: "Fold All Regions Except Selected",
            precondition: $d6b7f21e4173727c$var$CONTEXT_FOLDING_ENABLED,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: (0, $fQtIR.KeyChord)(2089 /* KeyK */ , 2131 /* Minus */ ),
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
class $d6b7f21e4173727c$var$UnfoldAllRegionsExceptAction extends $d6b7f21e4173727c$var$FoldingAction {
    invoke(_foldingController, foldingModel, editor) {
        let selectedLines = this.getSelectedLines(editor);
        (0, $8b35a10f74bd273a$export$13292d9dd11d6b4f)(foldingModel, false, selectedLines);
    }
    constructor(){
        super({
            id: "editor.unfoldAllExcept",
            label: $58WHl.localize("unfoldAllExcept.label", "Unfold All Regions Except Selected"),
            alias: "Unfold All Regions Except Selected",
            precondition: $d6b7f21e4173727c$var$CONTEXT_FOLDING_ENABLED,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: (0, $fQtIR.KeyChord)(2089 /* KeyK */ , 2129 /* Equal */ ),
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
class $d6b7f21e4173727c$var$FoldAllAction extends $d6b7f21e4173727c$var$FoldingAction {
    invoke(_foldingController, foldingModel, _editor) {
        (0, $8b35a10f74bd273a$export$1ef41fe66cd8530)(foldingModel, true);
    }
    constructor(){
        super({
            id: "editor.foldAll",
            label: $58WHl.localize("foldAllAction.label", "Fold All"),
            alias: "Fold All",
            precondition: $d6b7f21e4173727c$var$CONTEXT_FOLDING_ENABLED,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: (0, $fQtIR.KeyChord)(2089 /* KeyK */ , 2069 /* Digit0 */ ),
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
class $d6b7f21e4173727c$var$UnfoldAllAction extends $d6b7f21e4173727c$var$FoldingAction {
    invoke(_foldingController, foldingModel, _editor) {
        (0, $8b35a10f74bd273a$export$1ef41fe66cd8530)(foldingModel, false);
    }
    constructor(){
        super({
            id: "editor.unfoldAll",
            label: $58WHl.localize("unfoldAllAction.label", "Unfold All"),
            alias: "Unfold All",
            precondition: $d6b7f21e4173727c$var$CONTEXT_FOLDING_ENABLED,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: (0, $fQtIR.KeyChord)(2089 /* KeyK */ , 2088 /* KeyJ */ ),
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
class $d6b7f21e4173727c$var$FoldLevelAction extends $d6b7f21e4173727c$var$FoldingAction {
    getFoldingLevel() {
        return parseInt(this.id.substr($d6b7f21e4173727c$var$FoldLevelAction.ID_PREFIX.length));
    }
    invoke(_foldingController, foldingModel, editor) {
        (0, $8b35a10f74bd273a$export$3f9d91c844738bc6)(foldingModel, this.getFoldingLevel(), true, this.getSelectedLines(editor));
    }
}
$d6b7f21e4173727c$var$FoldLevelAction.ID_PREFIX = "editor.foldLevel";
$d6b7f21e4173727c$var$FoldLevelAction.ID = (level)=>$d6b7f21e4173727c$var$FoldLevelAction.ID_PREFIX + level;
/** Action to go to the parent fold of current line */ class $d6b7f21e4173727c$var$GotoParentFoldAction extends $d6b7f21e4173727c$var$FoldingAction {
    invoke(_foldingController, foldingModel, editor) {
        let selectedLines = this.getSelectedLines(editor);
        if (selectedLines.length > 0) {
            let startLineNumber = (0, $8b35a10f74bd273a$export$19eab21a9895dbc4)(selectedLines[0], foldingModel);
            if (startLineNumber !== null) editor.setSelection({
                startLineNumber: startLineNumber,
                startColumn: 1,
                endLineNumber: startLineNumber,
                endColumn: 1
            });
        }
    }
    constructor(){
        super({
            id: "editor.gotoParentFold",
            label: $58WHl.localize("gotoParentFold.label", "Go to Parent Fold"),
            alias: "Go to Parent Fold",
            precondition: $d6b7f21e4173727c$var$CONTEXT_FOLDING_ENABLED,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
/** Action to go to the previous fold of current line */ class $d6b7f21e4173727c$var$GotoPreviousFoldAction extends $d6b7f21e4173727c$var$FoldingAction {
    invoke(_foldingController, foldingModel, editor) {
        let selectedLines = this.getSelectedLines(editor);
        if (selectedLines.length > 0) {
            let startLineNumber = (0, $8b35a10f74bd273a$export$9e804e9f47adba4e)(selectedLines[0], foldingModel);
            if (startLineNumber !== null) editor.setSelection({
                startLineNumber: startLineNumber,
                startColumn: 1,
                endLineNumber: startLineNumber,
                endColumn: 1
            });
        }
    }
    constructor(){
        super({
            id: "editor.gotoPreviousFold",
            label: $58WHl.localize("gotoPreviousFold.label", "Go to Previous Folding Range"),
            alias: "Go to Previous Folding Range",
            precondition: $d6b7f21e4173727c$var$CONTEXT_FOLDING_ENABLED,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
/** Action to go to the next fold of current line */ class $d6b7f21e4173727c$var$GotoNextFoldAction extends $d6b7f21e4173727c$var$FoldingAction {
    invoke(_foldingController, foldingModel, editor) {
        let selectedLines = this.getSelectedLines(editor);
        if (selectedLines.length > 0) {
            let startLineNumber = (0, $8b35a10f74bd273a$export$3164a73fda220264)(selectedLines[0], foldingModel);
            if (startLineNumber !== null) editor.setSelection({
                startLineNumber: startLineNumber,
                startColumn: 1,
                endLineNumber: startLineNumber,
                endColumn: 1
            });
        }
    }
    constructor(){
        super({
            id: "editor.gotoNextFold",
            label: $58WHl.localize("gotoNextFold.label", "Go to Next Folding Range"),
            alias: "Go to Next Folding Range",
            precondition: $d6b7f21e4173727c$var$CONTEXT_FOLDING_ENABLED,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
(0, $gGOeQ.registerEditorContribution)($d6b7f21e4173727c$export$5d4a7ec5ea2624d8.ID, $d6b7f21e4173727c$export$5d4a7ec5ea2624d8);
(0, $gGOeQ.registerEditorAction)($d6b7f21e4173727c$var$UnfoldAction);
(0, $gGOeQ.registerEditorAction)($d6b7f21e4173727c$var$UnFoldRecursivelyAction);
(0, $gGOeQ.registerEditorAction)($d6b7f21e4173727c$var$FoldAction);
(0, $gGOeQ.registerEditorAction)($d6b7f21e4173727c$var$FoldRecursivelyAction);
(0, $gGOeQ.registerEditorAction)($d6b7f21e4173727c$var$FoldAllAction);
(0, $gGOeQ.registerEditorAction)($d6b7f21e4173727c$var$UnfoldAllAction);
(0, $gGOeQ.registerEditorAction)($d6b7f21e4173727c$var$FoldAllBlockCommentsAction);
(0, $gGOeQ.registerEditorAction)($d6b7f21e4173727c$var$FoldAllRegionsAction);
(0, $gGOeQ.registerEditorAction)($d6b7f21e4173727c$var$UnfoldAllRegionsAction);
(0, $gGOeQ.registerEditorAction)($d6b7f21e4173727c$var$FoldAllRegionsExceptAction);
(0, $gGOeQ.registerEditorAction)($d6b7f21e4173727c$var$UnfoldAllRegionsExceptAction);
(0, $gGOeQ.registerEditorAction)($d6b7f21e4173727c$var$ToggleFoldAction);
(0, $gGOeQ.registerEditorAction)($d6b7f21e4173727c$var$GotoParentFoldAction);
(0, $gGOeQ.registerEditorAction)($d6b7f21e4173727c$var$GotoPreviousFoldAction);
(0, $gGOeQ.registerEditorAction)($d6b7f21e4173727c$var$GotoNextFoldAction);
for(let i = 1; i <= 7; i++)(0, $gGOeQ.registerInstantiatedEditorAction)(new $d6b7f21e4173727c$var$FoldLevelAction({
    id: $d6b7f21e4173727c$var$FoldLevelAction.ID(i),
    label: $58WHl.localize("foldLevelAction.label", "Fold Level {0}", i),
    alias: `Fold Level ${i}`,
    precondition: $d6b7f21e4173727c$var$CONTEXT_FOLDING_ENABLED,
    kbOpts: {
        kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
        primary: (0, $fQtIR.KeyChord)(2089 /* KeyK */ , 2048 /* CtrlCmd */  | 21 /* Digit0 */  + i),
        weight: 100 /* EditorContrib */ 
    }
}));
const $d6b7f21e4173727c$export$ed7a24ff104b487d = (0, $3XYy8.registerColor)("editor.foldBackground", {
    light: (0, $3XYy8.transparent)((0, $3XYy8.editorSelectionBackground), 0.3),
    dark: (0, $3XYy8.transparent)((0, $3XYy8.editorSelectionBackground), 0.3),
    hc: null
}, $58WHl.localize("foldBackgroundBackground", "Background color behind folded ranges. The color must not be opaque so as not to hide underlying decorations."), true);
const $d6b7f21e4173727c$export$6151789bef279b02 = (0, $3XYy8.registerColor)("editorGutter.foldingControlForeground", {
    dark: (0, $3XYy8.iconForeground),
    light: (0, $3XYy8.iconForeground),
    hc: (0, $3XYy8.iconForeground)
}, $58WHl.localize("editorGutter.foldingControlForeground", "Color of the folding control in the editor gutter."));
(0, $fUTzO.registerThemingParticipant)((theme, collector)=>{
    const foldBackground = theme.getColor($d6b7f21e4173727c$export$ed7a24ff104b487d);
    if (foldBackground) collector.addRule(`.monaco-editor .folded-background { background-color: ${foldBackground}; }`);
    const editorFoldColor = theme.getColor($d6b7f21e4173727c$export$6151789bef279b02);
    if (editorFoldColor) collector.addRule(`
		.monaco-editor .cldr${(0, $fUTzO.ThemeIcon).asCSSSelector((0, $5fb46c3996945b00$export$885051cbe6b7e954))},
		.monaco-editor .cldr${(0, $fUTzO.ThemeIcon).asCSSSelector((0, $5fb46c3996945b00$export$91aea75f1008558b))} {
			color: ${editorFoldColor} !important;
		}
		`);
});



var $gGOeQ = parcelRequire("gGOeQ");

var $jp7s1 = parcelRequire("jp7s1");

var $58WHl = parcelRequire("58WHl");
class $a703fb89fe1a05d7$var$EditorFontZoomIn extends (0, $gGOeQ.EditorAction) {
    run(accessor, editor) {
        (0, $jp7s1.EditorZoom).setZoomLevel((0, $jp7s1.EditorZoom).getZoomLevel() + 1);
    }
    constructor(){
        super({
            id: "editor.action.fontZoomIn",
            label: $58WHl.localize("EditorFontZoomIn.label", "Editor Font Zoom In"),
            alias: "Editor Font Zoom In",
            precondition: undefined
        });
    }
}
class $a703fb89fe1a05d7$var$EditorFontZoomOut extends (0, $gGOeQ.EditorAction) {
    run(accessor, editor) {
        (0, $jp7s1.EditorZoom).setZoomLevel((0, $jp7s1.EditorZoom).getZoomLevel() - 1);
    }
    constructor(){
        super({
            id: "editor.action.fontZoomOut",
            label: $58WHl.localize("EditorFontZoomOut.label", "Editor Font Zoom Out"),
            alias: "Editor Font Zoom Out",
            precondition: undefined
        });
    }
}
class $a703fb89fe1a05d7$var$EditorFontZoomReset extends (0, $gGOeQ.EditorAction) {
    run(accessor, editor) {
        (0, $jp7s1.EditorZoom).setZoomLevel(0);
    }
    constructor(){
        super({
            id: "editor.action.fontZoomReset",
            label: $58WHl.localize("EditorFontZoomReset.label", "Editor Font Zoom Reset"),
            alias: "Editor Font Zoom Reset",
            precondition: undefined
        });
    }
}
(0, $gGOeQ.registerEditorAction)($a703fb89fe1a05d7$var$EditorFontZoomIn);
(0, $gGOeQ.registerEditorAction)($a703fb89fe1a05d7$var$EditorFontZoomOut);
(0, $gGOeQ.registerEditorAction)($a703fb89fe1a05d7$var$EditorFontZoomReset);


var $b0d419e7f5e7d6d6$exports = {};

var $4xCD7 = parcelRequire("4xCD7");

var $gnEXx = parcelRequire("gnEXx");

var $g0782 = parcelRequire("g0782");

var $fQtIR = parcelRequire("fQtIR");

var $atiRx = parcelRequire("atiRx");

var $gGOeQ = parcelRequire("gGOeQ");

var $aXAVz = parcelRequire("aXAVz");

var $kv7iV = parcelRequire("kv7iV");

var $3HpR4 = parcelRequire("3HpR4");

var $bdLce = parcelRequire("bdLce");

var $eKhCe = parcelRequire("eKhCe");

var $7N0CJ = parcelRequire("7N0CJ");

var $9xXDe = parcelRequire("9xXDe");

var $h5PeZ = parcelRequire("h5PeZ");

var $58WHl = parcelRequire("58WHl");

var $fAXtX = parcelRequire("fAXtX");

var $bRtox = parcelRequire("bRtox");

var $iZW67 = parcelRequire("iZW67");

var $9xODy = parcelRequire("9xODy");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $b0d419e7f5e7d6d6$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $b0d419e7f5e7d6d6$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var $b0d419e7f5e7d6d6$var$__awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
let $b0d419e7f5e7d6d6$var$FormatOnType = class FormatOnType {
    dispose() {
        this._callOnDispose.dispose();
        this._callOnModel.dispose();
    }
    _update() {
        // clean up
        this._callOnModel.clear();
        // we are disabled
        if (!this._editor.getOption(48 /* formatOnType */ )) return;
        // no model
        if (!this._editor.hasModel()) return;
        const model = this._editor.getModel();
        // no support
        const [support] = (0, $eKhCe.OnTypeFormattingEditProviderRegistry).ordered(model);
        if (!support || !support.autoFormatTriggerCharacters) return;
        // register typing listeners that will trigger the format
        let triggerChars = new (0, $kv7iV.CharacterSet)();
        for (let ch of support.autoFormatTriggerCharacters)triggerChars.add(ch.charCodeAt(0));
        this._callOnModel.add(this._editor.onDidType((text)=>{
            let lastCharCode = text.charCodeAt(text.length - 1);
            if (triggerChars.has(lastCharCode)) this._trigger(String.fromCharCode(lastCharCode));
        }));
    }
    _trigger(ch) {
        if (!this._editor.hasModel()) return;
        if (this._editor.getSelections().length > 1 || !this._editor.getSelection().isEmpty()) return;
        const model = this._editor.getModel();
        const position = this._editor.getPosition();
        let canceled = false;
        // install a listener that checks if edits happens before the
        // position on which we format right now. If so, we won't
        // apply the format edits
        const unbind = this._editor.onDidChangeModelContent((e)=>{
            if (e.isFlush) {
                // a model.setValue() was called
                // cancel only once
                canceled = true;
                unbind.dispose();
                return;
            }
            for(let i = 0, len = e.changes.length; i < len; i++){
                const change = e.changes[i];
                if (change.range.endLineNumber <= position.lineNumber) {
                    // cancel only once
                    canceled = true;
                    unbind.dispose();
                    return;
                }
            }
        });
        (0, $9xXDe.getOnTypeFormattingEdits)(this._workerService, model, position, ch, model.getFormattingOptions()).then((edits)=>{
            unbind.dispose();
            if (canceled) return;
            if ((0, $4xCD7.isNonEmptyArray)(edits)) {
                (0, $h5PeZ.FormattingEdit).execute(this._editor, edits, true);
                (0, $9xXDe.alertFormattingEdits)(edits);
            }
        }, (err)=>{
            unbind.dispose();
            throw err;
        });
    }
    constructor(editor, _workerService){
        this._workerService = _workerService;
        this._callOnDispose = new (0, $atiRx.DisposableStore)();
        this._callOnModel = new (0, $atiRx.DisposableStore)();
        this._editor = editor;
        this._callOnDispose.add(editor.onDidChangeConfiguration(()=>this._update()));
        this._callOnDispose.add(editor.onDidChangeModel(()=>this._update()));
        this._callOnDispose.add(editor.onDidChangeModelLanguage(()=>this._update()));
        this._callOnDispose.add((0, $eKhCe.OnTypeFormattingEditProviderRegistry).onDidChange(this._update, this));
    }
};
$b0d419e7f5e7d6d6$var$FormatOnType.ID = "editor.contrib.autoFormat";
$b0d419e7f5e7d6d6$var$FormatOnType = $b0d419e7f5e7d6d6$var$__decorate([
    $b0d419e7f5e7d6d6$var$__param(1, (0, $7N0CJ.IEditorWorkerService))
], $b0d419e7f5e7d6d6$var$FormatOnType);
let $b0d419e7f5e7d6d6$var$FormatOnPaste = class FormatOnPaste {
    dispose() {
        this._callOnDispose.dispose();
        this._callOnModel.dispose();
    }
    _update() {
        // clean up
        this._callOnModel.clear();
        // we are disabled
        if (!this.editor.getOption(47 /* formatOnPaste */ )) return;
        // no model
        if (!this.editor.hasModel()) return;
        // no formatter
        if (!(0, $eKhCe.DocumentRangeFormattingEditProviderRegistry).has(this.editor.getModel())) return;
        this._callOnModel.add(this.editor.onDidPaste(({ range: range  })=>this._trigger(range)));
    }
    _trigger(range) {
        if (!this.editor.hasModel()) return;
        if (this.editor.getSelections().length > 1) return;
        this._instantiationService.invokeFunction((0, $9xXDe.formatDocumentRangesWithSelectedProvider), this.editor, range, 2 /* Silent */ , (0, $9xODy.Progress).None, (0, $gnEXx.CancellationToken).None).catch((0, $g0782.onUnexpectedError));
    }
    constructor(editor, _instantiationService){
        this.editor = editor;
        this._instantiationService = _instantiationService;
        this._callOnDispose = new (0, $atiRx.DisposableStore)();
        this._callOnModel = new (0, $atiRx.DisposableStore)();
        this._callOnDispose.add(editor.onDidChangeConfiguration(()=>this._update()));
        this._callOnDispose.add(editor.onDidChangeModel(()=>this._update()));
        this._callOnDispose.add(editor.onDidChangeModelLanguage(()=>this._update()));
        this._callOnDispose.add((0, $eKhCe.DocumentRangeFormattingEditProviderRegistry).onDidChange(this._update, this));
    }
};
$b0d419e7f5e7d6d6$var$FormatOnPaste.ID = "editor.contrib.formatOnPaste";
$b0d419e7f5e7d6d6$var$FormatOnPaste = $b0d419e7f5e7d6d6$var$__decorate([
    $b0d419e7f5e7d6d6$var$__param(1, (0, $iZW67.IInstantiationService))
], $b0d419e7f5e7d6d6$var$FormatOnPaste);
class $b0d419e7f5e7d6d6$var$FormatDocumentAction extends (0, $gGOeQ.EditorAction) {
    run(accessor, editor) {
        return $b0d419e7f5e7d6d6$var$__awaiter(this, void 0, void 0, function*() {
            if (editor.hasModel()) {
                const instaService = accessor.get((0, $iZW67.IInstantiationService));
                const progressService = accessor.get((0, $9xODy.IEditorProgressService));
                yield progressService.showWhile(instaService.invokeFunction((0, $9xXDe.formatDocumentWithSelectedProvider), editor, 1 /* Explicit */ , (0, $9xODy.Progress).None, (0, $gnEXx.CancellationToken).None), 250);
            }
        });
    }
    constructor(){
        super({
            id: "editor.action.formatDocument",
            label: $58WHl.localize("formatDocument.label", "Format Document"),
            alias: "Format Document",
            precondition: (0, $bRtox.ContextKeyExpr).and((0, $bdLce.EditorContextKeys).notInCompositeEditor, (0, $bdLce.EditorContextKeys).writable, (0, $bdLce.EditorContextKeys).hasDocumentFormattingProvider),
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: 1572 /* KeyF */ ,
                linux: {
                    primary: 3111 /* KeyI */ 
                },
                weight: 100 /* EditorContrib */ 
            },
            contextMenuOpts: {
                group: "1_modification",
                order: 1.3
            }
        });
    }
}
class $b0d419e7f5e7d6d6$var$FormatSelectionAction extends (0, $gGOeQ.EditorAction) {
    run(accessor, editor) {
        return $b0d419e7f5e7d6d6$var$__awaiter(this, void 0, void 0, function*() {
            if (!editor.hasModel()) return;
            const instaService = accessor.get((0, $iZW67.IInstantiationService));
            const model = editor.getModel();
            const ranges = editor.getSelections().map((range)=>{
                return range.isEmpty() ? new (0, $3HpR4.Range)(range.startLineNumber, 1, range.startLineNumber, model.getLineMaxColumn(range.startLineNumber)) : range;
            });
            const progressService = accessor.get((0, $9xODy.IEditorProgressService));
            yield progressService.showWhile(instaService.invokeFunction((0, $9xXDe.formatDocumentRangesWithSelectedProvider), editor, ranges, 1 /* Explicit */ , (0, $9xODy.Progress).None, (0, $gnEXx.CancellationToken).None), 250);
        });
    }
    constructor(){
        super({
            id: "editor.action.formatSelection",
            label: $58WHl.localize("formatSelection.label", "Format Selection"),
            alias: "Format Selection",
            precondition: (0, $bRtox.ContextKeyExpr).and((0, $bdLce.EditorContextKeys).writable, (0, $bdLce.EditorContextKeys).hasDocumentSelectionFormattingProvider),
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: (0, $fQtIR.KeyChord)(2089 /* KeyK */ , 2084 /* KeyF */ ),
                weight: 100 /* EditorContrib */ 
            },
            contextMenuOpts: {
                when: (0, $bdLce.EditorContextKeys).hasNonEmptySelection,
                group: "1_modification",
                order: 1.31
            }
        });
    }
}
(0, $gGOeQ.registerEditorContribution)($b0d419e7f5e7d6d6$var$FormatOnType.ID, $b0d419e7f5e7d6d6$var$FormatOnType);
(0, $gGOeQ.registerEditorContribution)($b0d419e7f5e7d6d6$var$FormatOnPaste.ID, $b0d419e7f5e7d6d6$var$FormatOnPaste);
(0, $gGOeQ.registerEditorAction)($b0d419e7f5e7d6d6$var$FormatDocumentAction);
(0, $gGOeQ.registerEditorAction)($b0d419e7f5e7d6d6$var$FormatSelectionAction);
// this is the old format action that does both (format document OR format selection)
// and we keep it here such that existing keybinding configurations etc will still work
(0, $fAXtX.CommandsRegistry).registerCommand("editor.action.format", (accessor)=>$b0d419e7f5e7d6d6$var$__awaiter(void 0, void 0, void 0, function*() {
        const editor = accessor.get((0, $aXAVz.ICodeEditorService)).getFocusedCodeEditor();
        if (!editor || !editor.hasModel()) return;
        const commandService = accessor.get((0, $fAXtX.ICommandService));
        if (editor.getSelection().isEmpty()) yield commandService.executeCommand("editor.action.formatDocument");
        else yield commandService.executeCommand("editor.action.formatSelection");
    }));


var $cd4808d243d2f8c1$exports = {};

var $gnEXx = parcelRequire("gnEXx");

var $3ICxR = parcelRequire("3ICxR");

var $7K96x = parcelRequire("7K96x");

var $dwrPd = parcelRequire("dwrPd");

var $iwSMU = parcelRequire("iwSMU");

var $4xCD7 = parcelRequire("4xCD7");

var $gnEXx = parcelRequire("gnEXx");

var $g0782 = parcelRequire("g0782");

var $aTqAJ = parcelRequire("aTqAJ");

var $4HO2P = parcelRequire("4HO2P");

var $3HpR4 = parcelRequire("3HpR4");

var $eKhCe = parcelRequire("eKhCe");

var $lkrXF = parcelRequire("lkrXF");
class $b8d98dd64492c42e$export$3d0d7bb22e2f1e43 {
    remove() {
        if (this.parent) this.parent.children.delete(this.id);
    }
    static findId(candidate, container) {
        // complex id-computation which contains the origin/extension,
        // the parent path, and some dedupe logic when names collide
        let candidateId;
        if (typeof candidate === "string") candidateId = `${container.id}/${candidate}`;
        else {
            candidateId = `${container.id}/${candidate.name}`;
            if (container.children.get(candidateId) !== undefined) candidateId = `${container.id}/${candidate.name}_${candidate.range.startLineNumber}_${candidate.range.startColumn}`;
        }
        let id = candidateId;
        for(let i = 0; container.children.get(id) !== undefined; i++)id = `${candidateId}_${i}`;
        return id;
    }
    static empty(element) {
        return element.children.size === 0;
    }
}
class $b8d98dd64492c42e$export$116fbcc3cc8d593 extends $b8d98dd64492c42e$export$3d0d7bb22e2f1e43 {
    constructor(id, parent, symbol){
        super();
        this.id = id;
        this.parent = parent;
        this.symbol = symbol;
        this.children = new Map();
    }
}
class $b8d98dd64492c42e$export$7979c5ef85019928 extends $b8d98dd64492c42e$export$3d0d7bb22e2f1e43 {
    constructor(id, parent, label, order){
        super();
        this.id = id;
        this.parent = parent;
        this.label = label;
        this.order = order;
        this.children = new Map();
    }
}
class $b8d98dd64492c42e$export$23911836525ed42c extends $b8d98dd64492c42e$export$3d0d7bb22e2f1e43 {
    static create(textModel, token) {
        let key = this._keys.for(textModel, true);
        let data = $b8d98dd64492c42e$export$23911836525ed42c._requests.get(key);
        if (!data) {
            let source = new (0, $gnEXx.CancellationTokenSource)();
            data = {
                promiseCnt: 0,
                source: source,
                promise: $b8d98dd64492c42e$export$23911836525ed42c._create(textModel, source.token),
                model: undefined
            };
            $b8d98dd64492c42e$export$23911836525ed42c._requests.set(key, data);
            // keep moving average of request durations
            const now = Date.now();
            data.promise.then(()=>{
                this._requestDurations.update(textModel, Date.now() - now);
            });
        }
        if (data.model) // resolved -> return data
        return Promise.resolve(data.model);
        // increase usage counter
        data.promiseCnt += 1;
        token.onCancellationRequested(()=>{
            // last -> cancel provider request, remove cached promise
            if (--data.promiseCnt === 0) {
                data.source.cancel();
                $b8d98dd64492c42e$export$23911836525ed42c._requests.delete(key);
            }
        });
        return new Promise((resolve, reject)=>{
            data.promise.then((model)=>{
                data.model = model;
                resolve(model);
            }, (err)=>{
                $b8d98dd64492c42e$export$23911836525ed42c._requests.delete(key);
                reject(err);
            });
        });
    }
    static _create(textModel, token) {
        const cts = new (0, $gnEXx.CancellationTokenSource)(token);
        const result = new $b8d98dd64492c42e$export$23911836525ed42c(textModel.uri);
        const provider = (0, $eKhCe.DocumentSymbolProviderRegistry).ordered(textModel);
        const promises = provider.map((provider, index)=>{
            var _a;
            let id = $b8d98dd64492c42e$export$3d0d7bb22e2f1e43.findId(`provider_${index}`, result);
            let group = new $b8d98dd64492c42e$export$7979c5ef85019928(id, result, (_a = provider.displayName) !== null && _a !== void 0 ? _a : "Unknown Outline Provider", index);
            return Promise.resolve(provider.provideDocumentSymbols(textModel, cts.token)).then((result)=>{
                for (const info of result || [])$b8d98dd64492c42e$export$23911836525ed42c._makeOutlineElement(info, group);
                return group;
            }, (err)=>{
                (0, $g0782.onUnexpectedExternalError)(err);
                return group;
            }).then((group)=>{
                if (!$b8d98dd64492c42e$export$3d0d7bb22e2f1e43.empty(group)) result._groups.set(id, group);
                else group.remove();
            });
        });
        const listener = (0, $eKhCe.DocumentSymbolProviderRegistry).onDidChange(()=>{
            const newProvider = (0, $eKhCe.DocumentSymbolProviderRegistry).ordered(textModel);
            if (!(0, $4xCD7.equals)(newProvider, provider)) cts.cancel();
        });
        return Promise.all(promises).then(()=>{
            if (cts.token.isCancellationRequested && !token.isCancellationRequested) return $b8d98dd64492c42e$export$23911836525ed42c._create(textModel, token);
            else return result._compact();
        }).finally(()=>{
            listener.dispose();
        });
    }
    static _makeOutlineElement(info, container) {
        let id = $b8d98dd64492c42e$export$3d0d7bb22e2f1e43.findId(info, container);
        let res = new $b8d98dd64492c42e$export$116fbcc3cc8d593(id, container, info);
        if (info.children) for (const childInfo of info.children)$b8d98dd64492c42e$export$23911836525ed42c._makeOutlineElement(childInfo, res);
        container.children.set(res.id, res);
    }
    _compact() {
        let count = 0;
        for (const [key, group] of this._groups)if (group.children.size === 0) this._groups.delete(key);
        else count += 1;
        if (count !== 1) //
        this.children = this._groups;
        else {
            // adopt all elements of the first group
            let group1 = (0, $aTqAJ.Iterable).first(this._groups.values());
            for (let [, child] of group1.children){
                child.parent = this;
                this.children.set(child.id, child);
            }
        }
        return this;
    }
    getTopLevelSymbols() {
        const roots = [];
        for (const child of this.children.values())if (child instanceof $b8d98dd64492c42e$export$116fbcc3cc8d593) roots.push(child.symbol);
        else roots.push(...(0, $aTqAJ.Iterable).map(child.children.values(), (child)=>child.symbol));
        return roots.sort((a, b)=>(0, $3HpR4.Range).compareRangesUsingStarts(a.range, b.range));
    }
    asListOfDocumentSymbols() {
        const roots = this.getTopLevelSymbols();
        const bucket = [];
        $b8d98dd64492c42e$export$23911836525ed42c._flattenDocumentSymbols(bucket, roots, "");
        return bucket.sort((a, b)=>(0, $3HpR4.Range).compareRangesUsingStarts(a.range, b.range));
    }
    static _flattenDocumentSymbols(bucket, entries, overrideContainerLabel) {
        for (const entry of entries){
            bucket.push({
                kind: entry.kind,
                tags: entry.tags,
                name: entry.name,
                detail: entry.detail,
                containerName: entry.containerName || overrideContainerLabel,
                range: entry.range,
                selectionRange: entry.selectionRange,
                children: undefined
            });
            // Recurse over children
            if (entry.children) $b8d98dd64492c42e$export$23911836525ed42c._flattenDocumentSymbols(bucket, entry.children, entry.name);
        }
    }
    constructor(uri){
        super();
        this.uri = uri;
        this.id = "root";
        this.parent = undefined;
        this._groups = new Map();
        this.children = new Map();
        this.id = "root";
        this.parent = undefined;
    }
}
$b8d98dd64492c42e$export$23911836525ed42c._requestDurations = new (0, $lkrXF.LanguageFeatureRequestDelays)((0, $eKhCe.DocumentSymbolProviderRegistry), 350);
$b8d98dd64492c42e$export$23911836525ed42c._requests = new (0, $4HO2P.LRUCache)(9, 0.75);
$b8d98dd64492c42e$export$23911836525ed42c._keys = new class {
    for(textModel, version) {
        return `${textModel.id}/${version ? textModel.getVersionId() : ""}/${this._hash((0, $eKhCe.DocumentSymbolProviderRegistry).all(textModel))}`;
    }
    _hash(providers) {
        let result = "";
        for (const provider of providers){
            let n = this._data.get(provider);
            if (typeof n === "undefined") {
                n = this._counter++;
                this._data.set(provider, n);
            }
            result += n;
        }
        return result;
    }
    constructor(){
        this._counter = 1;
        this._data = new WeakMap();
    }
};



var $fAXtX = parcelRequire("fAXtX");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $cd4808d243d2f8c1$var$__awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
function $cd4808d243d2f8c1$export$3f84b717c20d8445(document, flat, token) {
    return $cd4808d243d2f8c1$var$__awaiter(this, void 0, void 0, function*() {
        const model = yield (0, $b8d98dd64492c42e$export$23911836525ed42c).create(document, token);
        return flat ? model.asListOfDocumentSymbols() : model.getTopLevelSymbols();
    });
}
(0, $fAXtX.CommandsRegistry).registerCommand("_executeDocumentSymbolProvider", function(accessor, ...args) {
    return $cd4808d243d2f8c1$var$__awaiter(this, void 0, void 0, function*() {
        const [resource] = args;
        (0, $3ICxR.assertType)((0, $7K96x.URI).isUri(resource));
        const model = accessor.get((0, $dwrPd.IModelService)).getModel(resource);
        if (model) return $cd4808d243d2f8c1$export$3f84b717c20d8445(model, false, (0, $gnEXx.CancellationToken).None);
        const reference = yield accessor.get((0, $iwSMU.ITextModelService)).createModelReference(resource);
        try {
            return yield $cd4808d243d2f8c1$export$3f84b717c20d8445(reference.object.textEditorModel, false, (0, $gnEXx.CancellationToken).None);
        } finally{
            reference.dispose();
        }
    });
});








var $atiRx = parcelRequire("atiRx");

var $9TEeL = parcelRequire("9TEeL");

var $gGOeQ = parcelRequire("gGOeQ");

var $83RkH = parcelRequire("83RkH");

var $13fPA = parcelRequire("13fPA");

var $3HpR4 = parcelRequire("3HpR4");

var $cz0c7 = parcelRequire("cz0c7");

var $bdLce = parcelRequire("bdLce");

var $g88WD = parcelRequire("g88WD");

var $9wt9e = parcelRequire("9wt9e");

var $dwrPd = parcelRequire("dwrPd");
function $405ec4915cf971ad$export$e83f2438bfbc9f9b(str, tabSize) {
    let spacesCnt = 0;
    for(let i = 0; i < str.length; i++)if (str.charAt(i) === "	") spacesCnt += tabSize;
    else spacesCnt++;
    return spacesCnt;
}
function $405ec4915cf971ad$export$f2011d4fc9157d6f(spacesCnt, tabSize, insertSpaces) {
    spacesCnt = spacesCnt < 0 ? 0 : spacesCnt;
    let result = "";
    if (!insertSpaces) {
        let tabsCnt = Math.floor(spacesCnt / tabSize);
        spacesCnt = spacesCnt % tabSize;
        for(let i = 0; i < tabsCnt; i++)result += "	";
    }
    for(let i1 = 0; i1 < spacesCnt; i1++)result += " ";
    return result;
}



var $58WHl = parcelRequire("58WHl");

var $aqUJX = parcelRequire("aqUJX");
function $041fa44dc1f07889$export$b3e439d1bd7f9479(model, startLineNumber, endLineNumber, inheritedIndent) {
    if (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) // Model is empty
    return [];
    const indentationRules = (0, $9wt9e.LanguageConfigurationRegistry).getIndentationRules(model.getLanguageId());
    if (!indentationRules) return [];
    endLineNumber = Math.min(endLineNumber, model.getLineCount());
    // Skip `unIndentedLinePattern` lines
    while(startLineNumber <= endLineNumber){
        if (!indentationRules.unIndentedLinePattern) break;
        let text = model.getLineContent(startLineNumber);
        if (!indentationRules.unIndentedLinePattern.test(text)) break;
        startLineNumber++;
    }
    if (startLineNumber > endLineNumber - 1) return [];
    const { tabSize: tabSize , indentSize: indentSize , insertSpaces: insertSpaces  } = model.getOptions();
    const shiftIndent = (indentation, count)=>{
        count = count || 1;
        return (0, $83RkH.ShiftCommand).shiftIndent(indentation, indentation.length + count, tabSize, indentSize, insertSpaces);
    };
    const unshiftIndent = (indentation, count)=>{
        count = count || 1;
        return (0, $83RkH.ShiftCommand).unshiftIndent(indentation, indentation.length + count, tabSize, indentSize, insertSpaces);
    };
    let indentEdits = [];
    // indentation being passed to lines below
    let globalIndent;
    // Calculate indentation for the first line
    // If there is no passed-in indentation, we use the indentation of the first line as base.
    let currentLineText = model.getLineContent(startLineNumber);
    let adjustedLineContent = currentLineText;
    if (inheritedIndent !== undefined && inheritedIndent !== null) {
        globalIndent = inheritedIndent;
        let oldIndentation = $9TEeL.getLeadingWhitespace(currentLineText);
        adjustedLineContent = globalIndent + currentLineText.substring(oldIndentation.length);
        if (indentationRules.decreaseIndentPattern && indentationRules.decreaseIndentPattern.test(adjustedLineContent)) {
            globalIndent = unshiftIndent(globalIndent);
            adjustedLineContent = globalIndent + currentLineText.substring(oldIndentation.length);
        }
        if (currentLineText !== adjustedLineContent) indentEdits.push((0, $13fPA.EditOperation).replaceMove(new (0, $cz0c7.Selection)(startLineNumber, 1, startLineNumber, oldIndentation.length + 1), (0, $g88WD.TextModel).normalizeIndentation(globalIndent, indentSize, insertSpaces)));
    } else globalIndent = $9TEeL.getLeadingWhitespace(currentLineText);
    // idealIndentForNextLine doesn't equal globalIndent when there is a line matching `indentNextLinePattern`.
    let idealIndentForNextLine = globalIndent;
    if (indentationRules.increaseIndentPattern && indentationRules.increaseIndentPattern.test(adjustedLineContent)) {
        idealIndentForNextLine = shiftIndent(idealIndentForNextLine);
        globalIndent = shiftIndent(globalIndent);
    } else if (indentationRules.indentNextLinePattern && indentationRules.indentNextLinePattern.test(adjustedLineContent)) idealIndentForNextLine = shiftIndent(idealIndentForNextLine);
    startLineNumber++;
    // Calculate indentation adjustment for all following lines
    for(let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++){
        let text1 = model.getLineContent(lineNumber);
        let oldIndentation1 = $9TEeL.getLeadingWhitespace(text1);
        let adjustedLineContent1 = idealIndentForNextLine + text1.substring(oldIndentation1.length);
        if (indentationRules.decreaseIndentPattern && indentationRules.decreaseIndentPattern.test(adjustedLineContent1)) {
            idealIndentForNextLine = unshiftIndent(idealIndentForNextLine);
            globalIndent = unshiftIndent(globalIndent);
        }
        if (oldIndentation1 !== idealIndentForNextLine) indentEdits.push((0, $13fPA.EditOperation).replaceMove(new (0, $cz0c7.Selection)(lineNumber, 1, lineNumber, oldIndentation1.length + 1), (0, $g88WD.TextModel).normalizeIndentation(idealIndentForNextLine, indentSize, insertSpaces)));
        // calculate idealIndentForNextLine
        if (indentationRules.unIndentedLinePattern && indentationRules.unIndentedLinePattern.test(text1)) continue;
        else if (indentationRules.increaseIndentPattern && indentationRules.increaseIndentPattern.test(adjustedLineContent1)) {
            globalIndent = shiftIndent(globalIndent);
            idealIndentForNextLine = globalIndent;
        } else if (indentationRules.indentNextLinePattern && indentationRules.indentNextLinePattern.test(adjustedLineContent1)) idealIndentForNextLine = shiftIndent(idealIndentForNextLine);
        else idealIndentForNextLine = globalIndent;
    }
    return indentEdits;
}
class $041fa44dc1f07889$export$23df39ff30c2cbb4 extends (0, $gGOeQ.EditorAction) {
    run(accessor, editor) {
        let model = editor.getModel();
        if (!model) return;
        let modelOpts = model.getOptions();
        let selection = editor.getSelection();
        if (!selection) return;
        const command = new $041fa44dc1f07889$export$3085c18d982e32ff(selection, modelOpts.tabSize);
        editor.pushUndoStop();
        editor.executeCommands(this.id, [
            command
        ]);
        editor.pushUndoStop();
        model.updateOptions({
            insertSpaces: true
        });
    }
    constructor(){
        super({
            id: $041fa44dc1f07889$export$23df39ff30c2cbb4.ID,
            label: $58WHl.localize("indentationToSpaces", "Convert Indentation to Spaces"),
            alias: "Convert Indentation to Spaces",
            precondition: (0, $bdLce.EditorContextKeys).writable
        });
    }
}
$041fa44dc1f07889$export$23df39ff30c2cbb4.ID = "editor.action.indentationToSpaces";
class $041fa44dc1f07889$export$2bccca385c69c5fb extends (0, $gGOeQ.EditorAction) {
    run(accessor, editor) {
        let model = editor.getModel();
        if (!model) return;
        let modelOpts = model.getOptions();
        let selection = editor.getSelection();
        if (!selection) return;
        const command = new $041fa44dc1f07889$export$2a6e9e59679d870(selection, modelOpts.tabSize);
        editor.pushUndoStop();
        editor.executeCommands(this.id, [
            command
        ]);
        editor.pushUndoStop();
        model.updateOptions({
            insertSpaces: false
        });
    }
    constructor(){
        super({
            id: $041fa44dc1f07889$export$2bccca385c69c5fb.ID,
            label: $58WHl.localize("indentationToTabs", "Convert Indentation to Tabs"),
            alias: "Convert Indentation to Tabs",
            precondition: (0, $bdLce.EditorContextKeys).writable
        });
    }
}
$041fa44dc1f07889$export$2bccca385c69c5fb.ID = "editor.action.indentationToTabs";
class $041fa44dc1f07889$export$80abaa81d6d4fae0 extends (0, $gGOeQ.EditorAction) {
    run(accessor, editor) {
        const quickInputService = accessor.get((0, $aqUJX.IQuickInputService));
        const modelService = accessor.get((0, $dwrPd.IModelService));
        let model = editor.getModel();
        if (!model) return;
        const creationOpts = modelService.getCreationOptions(model.getLanguageId(), model.uri, model.isForSimpleWidget);
        const picks = [
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8
        ].map((n)=>({
                id: n.toString(),
                label: n.toString(),
                // add description for tabSize value set in the configuration
                description: n === creationOpts.tabSize ? $58WHl.localize("configuredTabSize", "Configured Tab Size") : undefined
            }));
        // auto focus the tabSize set for the current editor
        const autoFocusIndex = Math.min(model.getOptions().tabSize - 1, 7);
        setTimeout(()=>{
            quickInputService.pick(picks, {
                placeHolder: $58WHl.localize({
                    key: "selectTabWidth",
                    comment: [
                        "Tab corresponds to the tab key"
                    ]
                }, "Select Tab Size for Current File"),
                activeItem: picks[autoFocusIndex]
            }).then((pick)=>{
                if (pick) {
                    if (model && !model.isDisposed()) model.updateOptions({
                        tabSize: parseInt(pick.label, 10),
                        insertSpaces: this.insertSpaces
                    });
                }
            });
        }, 50 /* quick input is sensitive to being opened so soon after another */ );
    }
    constructor(insertSpaces, opts){
        super(opts);
        this.insertSpaces = insertSpaces;
    }
}
class $041fa44dc1f07889$export$838aef8de6435fda extends $041fa44dc1f07889$export$80abaa81d6d4fae0 {
    constructor(){
        super(false, {
            id: $041fa44dc1f07889$export$838aef8de6435fda.ID,
            label: $58WHl.localize("indentUsingTabs", "Indent Using Tabs"),
            alias: "Indent Using Tabs",
            precondition: undefined
        });
    }
}
$041fa44dc1f07889$export$838aef8de6435fda.ID = "editor.action.indentUsingTabs";
class $041fa44dc1f07889$export$63083e2212f94950 extends $041fa44dc1f07889$export$80abaa81d6d4fae0 {
    constructor(){
        super(true, {
            id: $041fa44dc1f07889$export$63083e2212f94950.ID,
            label: $58WHl.localize("indentUsingSpaces", "Indent Using Spaces"),
            alias: "Indent Using Spaces",
            precondition: undefined
        });
    }
}
$041fa44dc1f07889$export$63083e2212f94950.ID = "editor.action.indentUsingSpaces";
class $041fa44dc1f07889$export$2352183caa01d2b1 extends (0, $gGOeQ.EditorAction) {
    run(accessor, editor) {
        const modelService = accessor.get((0, $dwrPd.IModelService));
        let model = editor.getModel();
        if (!model) return;
        const creationOpts = modelService.getCreationOptions(model.getLanguageId(), model.uri, model.isForSimpleWidget);
        model.detectIndentation(creationOpts.insertSpaces, creationOpts.tabSize);
    }
    constructor(){
        super({
            id: $041fa44dc1f07889$export$2352183caa01d2b1.ID,
            label: $58WHl.localize("detectIndentation", "Detect Indentation from Content"),
            alias: "Detect Indentation from Content",
            precondition: undefined
        });
    }
}
$041fa44dc1f07889$export$2352183caa01d2b1.ID = "editor.action.detectIndentation";
class $041fa44dc1f07889$export$c4e59949ff243a9f extends (0, $gGOeQ.EditorAction) {
    run(accessor, editor) {
        let model = editor.getModel();
        if (!model) return;
        let edits = $041fa44dc1f07889$export$b3e439d1bd7f9479(model, 1, model.getLineCount());
        if (edits.length > 0) {
            editor.pushUndoStop();
            editor.executeEdits(this.id, edits);
            editor.pushUndoStop();
        }
    }
    constructor(){
        super({
            id: "editor.action.reindentlines",
            label: $58WHl.localize("editor.reindentlines", "Reindent Lines"),
            alias: "Reindent Lines",
            precondition: (0, $bdLce.EditorContextKeys).writable
        });
    }
}
class $041fa44dc1f07889$export$3ebdbd7c48e4ea25 extends (0, $gGOeQ.EditorAction) {
    run(accessor, editor) {
        let model = editor.getModel();
        if (!model) return;
        let selections = editor.getSelections();
        if (selections === null) return;
        let edits = [];
        for (let selection of selections){
            let startLineNumber = selection.startLineNumber;
            let endLineNumber = selection.endLineNumber;
            if (startLineNumber !== endLineNumber && selection.endColumn === 1) endLineNumber--;
            if (startLineNumber === 1) {
                if (startLineNumber === endLineNumber) continue;
            } else startLineNumber--;
            let editOperations = $041fa44dc1f07889$export$b3e439d1bd7f9479(model, startLineNumber, endLineNumber);
            edits.push(...editOperations);
        }
        if (edits.length > 0) {
            editor.pushUndoStop();
            editor.executeEdits(this.id, edits);
            editor.pushUndoStop();
        }
    }
    constructor(){
        super({
            id: "editor.action.reindentselectedlines",
            label: $58WHl.localize("editor.reindentselectedlines", "Reindent Selected Lines"),
            alias: "Reindent Selected Lines",
            precondition: (0, $bdLce.EditorContextKeys).writable
        });
    }
}
class $041fa44dc1f07889$export$64afcb2e2db7c353 {
    getEditOperations(model, builder) {
        for (let edit of this._edits)builder.addEditOperation((0, $3HpR4.Range).lift(edit.range), edit.text);
        let selectionIsSet = false;
        if (Array.isArray(this._edits) && this._edits.length === 1 && this._initialSelection.isEmpty()) {
            if (this._edits[0].range.startColumn === this._initialSelection.endColumn && this._edits[0].range.startLineNumber === this._initialSelection.endLineNumber) {
                selectionIsSet = true;
                this._selectionId = builder.trackSelection(this._initialSelection, true);
            } else if (this._edits[0].range.endColumn === this._initialSelection.startColumn && this._edits[0].range.endLineNumber === this._initialSelection.startLineNumber) {
                selectionIsSet = true;
                this._selectionId = builder.trackSelection(this._initialSelection, false);
            }
        }
        if (!selectionIsSet) this._selectionId = builder.trackSelection(this._initialSelection);
    }
    computeCursorState(model, helper) {
        return helper.getTrackedSelection(this._selectionId);
    }
    constructor(edits, initialSelection){
        this._initialSelection = initialSelection;
        this._edits = [];
        this._selectionId = null;
        for (let edit of edits)if (edit.range && typeof edit.text === "string") this._edits.push(edit);
    }
}
class $041fa44dc1f07889$export$6fc01df139454e78 {
    update() {
        // clean up
        this.callOnModel.clear();
        // we are disabled
        if (this.editor.getOption(9 /* autoIndent */ ) < 4 /* Full */  || this.editor.getOption(47 /* formatOnPaste */ )) return;
        // no model
        if (!this.editor.hasModel()) return;
        this.callOnModel.add(this.editor.onDidPaste(({ range: range  })=>{
            this.trigger(range);
        }));
    }
    trigger(range) {
        let selections = this.editor.getSelections();
        if (selections === null || selections.length > 1) return;
        const model = this.editor.getModel();
        if (!model) return;
        if (!model.isCheapToTokenize(range.getStartPosition().lineNumber)) return;
        const autoIndent = this.editor.getOption(9 /* autoIndent */ );
        const { tabSize: tabSize , indentSize: indentSize , insertSpaces: insertSpaces  } = model.getOptions();
        let textEdits = [];
        let indentConverter = {
            shiftIndent: (indentation)=>{
                return (0, $83RkH.ShiftCommand).shiftIndent(indentation, indentation.length + 1, tabSize, indentSize, insertSpaces);
            },
            unshiftIndent: (indentation)=>{
                return (0, $83RkH.ShiftCommand).unshiftIndent(indentation, indentation.length + 1, tabSize, indentSize, insertSpaces);
            }
        };
        let startLineNumber = range.startLineNumber;
        while(startLineNumber <= range.endLineNumber){
            if (this.shouldIgnoreLine(model, startLineNumber)) {
                startLineNumber++;
                continue;
            }
            break;
        }
        if (startLineNumber > range.endLineNumber) return;
        let firstLineText = model.getLineContent(startLineNumber);
        if (!/\S/.test(firstLineText.substring(0, range.startColumn - 1))) {
            const indentOfFirstLine = (0, $9wt9e.LanguageConfigurationRegistry).getGoodIndentForLine(autoIndent, model, model.getLanguageId(), startLineNumber, indentConverter);
            if (indentOfFirstLine !== null) {
                let oldIndentation = $9TEeL.getLeadingWhitespace(firstLineText);
                let newSpaceCnt = $405ec4915cf971ad$export$e83f2438bfbc9f9b(indentOfFirstLine, tabSize);
                let oldSpaceCnt = $405ec4915cf971ad$export$e83f2438bfbc9f9b(oldIndentation, tabSize);
                if (newSpaceCnt !== oldSpaceCnt) {
                    let newIndent = $405ec4915cf971ad$export$f2011d4fc9157d6f(newSpaceCnt, tabSize, insertSpaces);
                    textEdits.push({
                        range: new (0, $3HpR4.Range)(startLineNumber, 1, startLineNumber, oldIndentation.length + 1),
                        text: newIndent
                    });
                    firstLineText = newIndent + firstLineText.substr(oldIndentation.length);
                } else {
                    let indentMetadata = (0, $9wt9e.LanguageConfigurationRegistry).getIndentMetadata(model, startLineNumber);
                    if (indentMetadata === 0 || indentMetadata === 8 /* UNINDENT_MASK */ ) // we paste content into a line where only contains whitespaces
                    // after pasting, the indentation of the first line is already correct
                    // the first line doesn't match any indentation rule
                    // then no-op.
                    return;
                }
            }
        }
        const firstLineNumber = startLineNumber;
        // ignore empty or ignored lines
        while(startLineNumber < range.endLineNumber){
            if (!/\S/.test(model.getLineContent(startLineNumber + 1))) {
                startLineNumber++;
                continue;
            }
            break;
        }
        if (startLineNumber !== range.endLineNumber) {
            let virtualModel = {
                getLineTokens: (lineNumber)=>{
                    return model.getLineTokens(lineNumber);
                },
                getLanguageId: ()=>{
                    return model.getLanguageId();
                },
                getLanguageIdAtPosition: (lineNumber, column)=>{
                    return model.getLanguageIdAtPosition(lineNumber, column);
                },
                getLineContent: (lineNumber)=>{
                    if (lineNumber === firstLineNumber) return firstLineText;
                    else return model.getLineContent(lineNumber);
                }
            };
            let indentOfSecondLine = (0, $9wt9e.LanguageConfigurationRegistry).getGoodIndentForLine(autoIndent, virtualModel, model.getLanguageId(), startLineNumber + 1, indentConverter);
            if (indentOfSecondLine !== null) {
                let newSpaceCntOfSecondLine = $405ec4915cf971ad$export$e83f2438bfbc9f9b(indentOfSecondLine, tabSize);
                let oldSpaceCntOfSecondLine = $405ec4915cf971ad$export$e83f2438bfbc9f9b($9TEeL.getLeadingWhitespace(model.getLineContent(startLineNumber + 1)), tabSize);
                if (newSpaceCntOfSecondLine !== oldSpaceCntOfSecondLine) {
                    let spaceCntOffset = newSpaceCntOfSecondLine - oldSpaceCntOfSecondLine;
                    for(let i = startLineNumber + 1; i <= range.endLineNumber; i++){
                        let lineContent = model.getLineContent(i);
                        let originalIndent = $9TEeL.getLeadingWhitespace(lineContent);
                        let originalSpacesCnt = $405ec4915cf971ad$export$e83f2438bfbc9f9b(originalIndent, tabSize);
                        let newSpacesCnt = originalSpacesCnt + spaceCntOffset;
                        let newIndent1 = $405ec4915cf971ad$export$f2011d4fc9157d6f(newSpacesCnt, tabSize, insertSpaces);
                        if (newIndent1 !== originalIndent) textEdits.push({
                            range: new (0, $3HpR4.Range)(i, 1, i, originalIndent.length + 1),
                            text: newIndent1
                        });
                    }
                }
            }
        }
        if (textEdits.length > 0) {
            this.editor.pushUndoStop();
            let cmd = new $041fa44dc1f07889$export$64afcb2e2db7c353(textEdits, this.editor.getSelection());
            this.editor.executeCommand("autoIndentOnPaste", cmd);
            this.editor.pushUndoStop();
        }
    }
    shouldIgnoreLine(model, lineNumber) {
        model.forceTokenization(lineNumber);
        let nonWhitespaceColumn = model.getLineFirstNonWhitespaceColumn(lineNumber);
        if (nonWhitespaceColumn === 0) return true;
        let tokens = model.getLineTokens(lineNumber);
        if (tokens.getCount() > 0) {
            let firstNonWhitespaceTokenIndex = tokens.findTokenIndexAtOffset(nonWhitespaceColumn);
            if (firstNonWhitespaceTokenIndex >= 0 && tokens.getStandardTokenType(firstNonWhitespaceTokenIndex) === 1 /* Comment */ ) return true;
        }
        return false;
    }
    dispose() {
        this.callOnDispose.dispose();
        this.callOnModel.dispose();
    }
    constructor(editor){
        this.callOnDispose = new (0, $atiRx.DisposableStore)();
        this.callOnModel = new (0, $atiRx.DisposableStore)();
        this.editor = editor;
        this.callOnDispose.add(editor.onDidChangeConfiguration(()=>this.update()));
        this.callOnDispose.add(editor.onDidChangeModel(()=>this.update()));
        this.callOnDispose.add(editor.onDidChangeModelLanguage(()=>this.update()));
    }
}
$041fa44dc1f07889$export$6fc01df139454e78.ID = "editor.contrib.autoIndentOnPaste";
function $041fa44dc1f07889$var$getIndentationEditOperations(model, builder, tabSize, tabsToSpaces) {
    if (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) // Model is empty
    return;
    let spaces = "";
    for(let i = 0; i < tabSize; i++)spaces += " ";
    let spacesRegExp = new RegExp(spaces, "gi");
    for(let lineNumber = 1, lineCount = model.getLineCount(); lineNumber <= lineCount; lineNumber++){
        let lastIndentationColumn = model.getLineFirstNonWhitespaceColumn(lineNumber);
        if (lastIndentationColumn === 0) lastIndentationColumn = model.getLineMaxColumn(lineNumber);
        if (lastIndentationColumn === 1) continue;
        const originalIndentationRange = new (0, $3HpR4.Range)(lineNumber, 1, lineNumber, lastIndentationColumn);
        const originalIndentation = model.getValueInRange(originalIndentationRange);
        const newIndentation = tabsToSpaces ? originalIndentation.replace(/\t/ig, spaces) : originalIndentation.replace(spacesRegExp, "	");
        builder.addEditOperation(originalIndentationRange, newIndentation);
    }
}
class $041fa44dc1f07889$export$3085c18d982e32ff {
    getEditOperations(model, builder) {
        this.selectionId = builder.trackSelection(this.selection);
        $041fa44dc1f07889$var$getIndentationEditOperations(model, builder, this.tabSize, true);
    }
    computeCursorState(model, helper) {
        return helper.getTrackedSelection(this.selectionId);
    }
    constructor(selection, tabSize){
        this.selection = selection;
        this.tabSize = tabSize;
        this.selectionId = null;
    }
}
class $041fa44dc1f07889$export$2a6e9e59679d870 {
    getEditOperations(model, builder) {
        this.selectionId = builder.trackSelection(this.selection);
        $041fa44dc1f07889$var$getIndentationEditOperations(model, builder, this.tabSize, false);
    }
    computeCursorState(model, helper) {
        return helper.getTrackedSelection(this.selectionId);
    }
    constructor(selection, tabSize){
        this.selection = selection;
        this.tabSize = tabSize;
        this.selectionId = null;
    }
}
(0, $gGOeQ.registerEditorContribution)($041fa44dc1f07889$export$6fc01df139454e78.ID, $041fa44dc1f07889$export$6fc01df139454e78);
(0, $gGOeQ.registerEditorAction)($041fa44dc1f07889$export$23df39ff30c2cbb4);
(0, $gGOeQ.registerEditorAction)($041fa44dc1f07889$export$2bccca385c69c5fb);
(0, $gGOeQ.registerEditorAction)($041fa44dc1f07889$export$838aef8de6435fda);
(0, $gGOeQ.registerEditorAction)($041fa44dc1f07889$export$63083e2212f94950);
(0, $gGOeQ.registerEditorAction)($041fa44dc1f07889$export$2352183caa01d2b1);
(0, $gGOeQ.registerEditorAction)($041fa44dc1f07889$export$c4e59949ff243a9f);
(0, $gGOeQ.registerEditorAction)($041fa44dc1f07889$export$3ebdbd7c48e4ea25);


var $aa0751f503dc33ba$exports = {};

var $eFOsn = parcelRequire("eFOsn");

var $gnEXx = parcelRequire("gnEXx");

var $g0782 = parcelRequire("g0782");

var $atiRx = parcelRequire("atiRx");

var $4HO2P = parcelRequire("4HO2P");

var $3ICxR = parcelRequire("3ICxR");

var $7K96x = parcelRequire("7K96x");

var $2tXCm = parcelRequire("2tXCm");

var $gGOeQ = parcelRequire("gGOeQ");

var $3xLkU = parcelRequire("3xLkU");

var $8qXsZ = parcelRequire("8qXsZ");

var $3HpR4 = parcelRequire("3HpR4");

var $eKhCe = parcelRequire("eKhCe");

var $lkrXF = parcelRequire("lkrXF");

var $iwSMU = parcelRequire("iwSMU");

var $fAXtX = parcelRequire("fAXtX");

var $3XYy8 = parcelRequire("3XYy8");

var $fUTzO = parcelRequire("fUTzO");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $aa0751f503dc33ba$var$__awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const $aa0751f503dc33ba$var$MAX_DECORATORS = 1500;
class $aa0751f503dc33ba$var$RequestMap {
    push(model, provider) {
        const value = this._data.get(model.uri);
        if (value === undefined) this._data.set(model.uri, new Set([
            provider
        ]));
        else value.add(provider);
    }
    pop(model, provider) {
        const value = this._data.get(model.uri);
        if (value) {
            value.delete(provider);
            if (value.size === 0) this._data.delete(model.uri);
        }
    }
    has(model, provider) {
        var _a;
        return Boolean((_a = this._data.get(model.uri)) === null || _a === void 0 ? void 0 : _a.has(provider));
    }
    constructor(){
        this._data = new (0, $4HO2P.ResourceMap)();
    }
}
function $aa0751f503dc33ba$export$50bf42d7deea549c(model, ranges, requests, token) {
    return $aa0751f503dc33ba$var$__awaiter(this, void 0, void 0, function*() {
        const all = [];
        const providers = (0, $eKhCe.InlayHintsProviderRegistry).ordered(model).reverse();
        const promises = providers.map((provider)=>ranges.map((range)=>$aa0751f503dc33ba$var$__awaiter(this, void 0, void 0, function*() {
                    try {
                        requests.push(model, provider);
                        const result = yield provider.provideInlayHints(model, range, token);
                        if (result === null || result === void 0 ? void 0 : result.length) all.push(result.filter((hint)=>range.containsPosition(hint.position)));
                    } catch (err) {
                        (0, $g0782.onUnexpectedExternalError)(err);
                    } finally{
                        requests.pop(model, provider);
                    }
                })));
        yield Promise.all(promises.flat());
        return all.flat().sort((a, b)=>(0, $8qXsZ.Position).compare(a.position, b.position));
    });
}
class $aa0751f503dc33ba$var$InlayHintsCache {
    get(model) {
        const key = $aa0751f503dc33ba$var$InlayHintsCache._key(model);
        return this._entries.get(key);
    }
    set(model, value) {
        const key = $aa0751f503dc33ba$var$InlayHintsCache._key(model);
        this._entries.set(key, value);
    }
    static _key(model) {
        return `${model.uri.toString()}/${model.getVersionId()}`;
    }
    constructor(){
        this._entries = new (0, $4HO2P.LRUCache)(50);
    }
}
class $aa0751f503dc33ba$export$c42ac128db3942ca {
    dispose() {
        this._sessionDisposables.dispose();
        this._removeAllDecorations();
        this._disposables.dispose();
    }
    _update() {
        this._sessionDisposables.clear();
        this._removeAllDecorations();
        if (!this._editor.getOption(126 /* inlayHints */ ).enabled) return;
        const model = this._editor.getModel();
        if (!model || !(0, $eKhCe.InlayHintsProviderRegistry).has(model)) return;
        // iff possible, quickly update from cache
        const cached = this._cache.get(model);
        if (cached) this._updateHintsDecorators([
            model.getFullModelRange()
        ], cached);
        const requests = new $aa0751f503dc33ba$var$RequestMap();
        const scheduler = new (0, $eFOsn.RunOnceScheduler)(()=>$aa0751f503dc33ba$var$__awaiter(this, void 0, void 0, function*() {
                const t1 = Date.now();
                const cts = new (0, $gnEXx.CancellationTokenSource)();
                this._sessionDisposables.add((0, $atiRx.toDisposable)(()=>cts.dispose(true)));
                const ranges = this._getHintsRanges();
                const result = yield $aa0751f503dc33ba$export$50bf42d7deea549c(model, ranges, requests, cts.token);
                scheduler.delay = this._getInlayHintsDelays.update(model, Date.now() - t1);
                if (cts.token.isCancellationRequested) return;
                this._updateHintsDecorators(ranges, result);
                this._cache.set(model, Array.from(this._decorationsMetadata.values()).map((obj)=>obj.hint));
            }), this._getInlayHintsDelays.get(model));
        this._sessionDisposables.add(scheduler);
        // update inline hints when content or scroll position changes
        this._sessionDisposables.add(this._editor.onDidChangeModelContent(()=>scheduler.schedule()));
        this._sessionDisposables.add(this._editor.onDidScrollChange(()=>scheduler.schedule()));
        scheduler.schedule();
        // update inline hints when any any provider fires an event
        const providerListener = new (0, $atiRx.DisposableStore)();
        this._sessionDisposables.add(providerListener);
        for (const provider of (0, $eKhCe.InlayHintsProviderRegistry).all(model))if (typeof provider.onDidChangeInlayHints === "function") providerListener.add(provider.onDidChangeInlayHints(()=>{
            if (!requests.has(model, provider)) scheduler.schedule();
        }));
    }
    _getHintsRanges() {
        const extra = 30;
        const model = this._editor.getModel();
        const visibleRanges = this._editor.getVisibleRangesPlusViewportAboveBelow();
        const result = [];
        for (const range of visibleRanges.sort((0, $3HpR4.Range).compareRangesUsingStarts)){
            const extendedRange = model.validateRange(new (0, $3HpR4.Range)(range.startLineNumber - extra, range.startColumn, range.endLineNumber + extra, range.endColumn));
            if (result.length === 0 || !(0, $3HpR4.Range).areIntersectingOrTouching(result[result.length - 1], extendedRange)) result.push(extendedRange);
            else result[result.length - 1] = (0, $3HpR4.Range).plusRange(result[result.length - 1], extendedRange);
        }
        return result;
    }
    _updateHintsDecorators(ranges, hints) {
        const { fontSize: fontSize , fontFamily: fontFamily  } = this._getLayoutInfo();
        const model = this._editor.getModel();
        const newDecorationsData = [];
        const fontFamilyVar = "--code-editorInlayHintsFontFamily";
        this._editor.getContainerDomNode().style.setProperty(fontFamilyVar, fontFamily);
        for (const hint of hints){
            const { text: text , position: position , whitespaceBefore: whitespaceBefore , whitespaceAfter: whitespaceAfter  } = hint;
            const marginBefore = whitespaceBefore ? fontSize / 3 | 0 : 0;
            const marginAfter = whitespaceAfter ? fontSize / 3 | 0 : 0;
            let backgroundColor;
            let color;
            if (hint.kind === (0, $eKhCe.InlayHintKind).Parameter) {
                backgroundColor = (0, $fUTzO.themeColorFromId)((0, $3XYy8.editorInlayHintParameterBackground));
                color = (0, $fUTzO.themeColorFromId)((0, $3XYy8.editorInlayHintParameterForeground));
            } else if (hint.kind === (0, $eKhCe.InlayHintKind).Type) {
                backgroundColor = (0, $fUTzO.themeColorFromId)((0, $3XYy8.editorInlayHintTypeBackground));
                color = (0, $fUTzO.themeColorFromId)((0, $3XYy8.editorInlayHintTypeForeground));
            } else {
                backgroundColor = (0, $fUTzO.themeColorFromId)((0, $3XYy8.editorInlayHintBackground));
                color = (0, $fUTzO.themeColorFromId)((0, $3XYy8.editorInlayHintForeground));
            }
            const classNameRef = this._ruleFactory.createClassNameRef({
                fontSize: `${fontSize}px`,
                margin: `0px ${marginAfter}px 0px ${marginBefore}px`,
                fontFamily: `var(${fontFamilyVar}), ${(0, $3xLkU.EDITOR_FONT_DEFAULTS).fontFamily}`,
                padding: `1px ${Math.max(1, fontSize / 4) | 0}px`,
                borderRadius: `${fontSize / 4 | 0}px`,
                verticalAlign: "middle",
                backgroundColor: backgroundColor,
                color: color
            });
            let direction = "before";
            let range = (0, $3HpR4.Range).fromPositions(position);
            let word = model.getWordAtPosition(position);
            let usesWordRange = false;
            if (word) {
                if (word.endColumn === position.column) {
                    direction = "after";
                    usesWordRange = true;
                    range = $aa0751f503dc33ba$var$wordToRange(word, position.lineNumber);
                } else if (word.startColumn === position.column) {
                    usesWordRange = true;
                    range = $aa0751f503dc33ba$var$wordToRange(word, position.lineNumber);
                }
            }
            newDecorationsData.push({
                decoration: {
                    range: range,
                    options: {
                        [direction]: {
                            content: $aa0751f503dc33ba$var$fixSpace(text),
                            inlineClassNameAffectsLetterSpacing: true,
                            inlineClassName: classNameRef.className
                        },
                        description: "InlayHint",
                        showIfCollapsed: !usesWordRange,
                        stickiness: 0 /* AlwaysGrowsWhenTypingAtEdges */ 
                    }
                },
                classNameRef: classNameRef
            });
            if (newDecorationsData.length > $aa0751f503dc33ba$var$MAX_DECORATORS) break;
        }
        // collect all decoration ids that are affected by the ranges
        // and only update those decorations
        const decorationIdsToReplace = [];
        for (const range1 of ranges)for (const { id: id  } of model.getDecorationsInRange(range1, this._decorationOwnerId, true)){
            const metadata = this._decorationsMetadata.get(id);
            if (metadata) {
                decorationIdsToReplace.push(id);
                metadata.classNameRef.dispose();
                this._decorationsMetadata.delete(id);
            }
        }
        const newDecorationIds = model.deltaDecorations(decorationIdsToReplace, newDecorationsData.map((d)=>d.decoration), this._decorationOwnerId);
        for(let i = 0; i < newDecorationIds.length; i++)this._decorationsMetadata.set(newDecorationIds[i], {
            hint: hints[i],
            classNameRef: newDecorationsData[i].classNameRef
        });
    }
    _getLayoutInfo() {
        const options = this._editor.getOption(126 /* inlayHints */ );
        const editorFontSize = this._editor.getOption(45 /* fontSize */ );
        let fontSize = options.fontSize;
        if (!fontSize || fontSize < 5 || fontSize > editorFontSize) fontSize = editorFontSize * .9 | 0;
        const fontFamily = options.fontFamily || this._editor.getOption(42 /* fontFamily */ );
        return {
            fontSize: fontSize,
            fontFamily: fontFamily
        };
    }
    _removeAllDecorations() {
        this._editor.deltaDecorations(Array.from(this._decorationsMetadata.keys()), []);
        for (let obj of this._decorationsMetadata.values())obj.classNameRef.dispose();
        this._decorationsMetadata.clear();
    }
    constructor(_editor){
        this._editor = _editor;
        this._decorationOwnerId = ++$aa0751f503dc33ba$export$c42ac128db3942ca._decorationOwnerIdPool;
        this._disposables = new (0, $atiRx.DisposableStore)();
        this._sessionDisposables = new (0, $atiRx.DisposableStore)();
        this._getInlayHintsDelays = new (0, $lkrXF.LanguageFeatureRequestDelays)((0, $eKhCe.InlayHintsProviderRegistry), 25, 500);
        this._cache = new $aa0751f503dc33ba$var$InlayHintsCache();
        this._decorationsMetadata = new Map();
        this._ruleFactory = new (0, $2tXCm.DynamicCssRules)(this._editor);
        this._disposables.add((0, $eKhCe.InlayHintsProviderRegistry).onDidChange(()=>this._update()));
        this._disposables.add(_editor.onDidChangeModel(()=>this._update()));
        this._disposables.add(_editor.onDidChangeModelLanguage(()=>this._update()));
        this._disposables.add(_editor.onDidChangeConfiguration((e)=>{
            if (e.hasChanged(126 /* inlayHints */ )) this._update();
        }));
        this._update();
    }
}
$aa0751f503dc33ba$export$c42ac128db3942ca.ID = "editor.contrib.InlayHints";
$aa0751f503dc33ba$export$c42ac128db3942ca._decorationOwnerIdPool = 0;
function $aa0751f503dc33ba$var$wordToRange(word, lineNumber) {
    return new (0, $3HpR4.Range)(lineNumber, word.startColumn, lineNumber, word.endColumn);
}
// Prevents the view from potentially visible whitespace
function $aa0751f503dc33ba$var$fixSpace(str) {
    const noBreakWhitespace = "\xa0";
    return str.replace(/[ \t]/g, noBreakWhitespace);
}
(0, $gGOeQ.registerEditorContribution)($aa0751f503dc33ba$export$c42ac128db3942ca.ID, $aa0751f503dc33ba$export$c42ac128db3942ca);
(0, $fAXtX.CommandsRegistry).registerCommand("_executeInlayHintProvider", (accessor, ...args)=>$aa0751f503dc33ba$var$__awaiter(void 0, void 0, void 0, function*() {
        const [uri, range] = args;
        (0, $3ICxR.assertType)((0, $7K96x.URI).isUri(uri));
        (0, $3ICxR.assertType)((0, $3HpR4.Range).isIRange(range));
        const ref = yield accessor.get((0, $iwSMU.ITextModelService)).createModelReference(uri);
        try {
            const data = yield $aa0751f503dc33ba$export$50bf42d7deea549c(ref.object.textEditorModel, [
                (0, $3HpR4.Range).lift(range)
            ], new $aa0751f503dc33ba$var$RequestMap(), (0, $gnEXx.CancellationToken).None);
            return data;
        } finally{
            ref.dispose();
        }
    }));


var $25df221a5114d031$exports = {};

var $eFOsn = parcelRequire("eFOsn");

var $g0782 = parcelRequire("g0782");

var $iVwSq = parcelRequire("iVwSq");

var $gGOeQ = parcelRequire("gGOeQ");

var $3HpR4 = parcelRequire("3HpR4");

var $cz0c7 = parcelRequire("cz0c7");

var $bdLce = parcelRequire("bdLce");

var $g88WD = parcelRequire("g88WD");

var $7N0CJ = parcelRequire("7N0CJ");

var $dW2jK = parcelRequire("dW2jK");

var $58WHl = parcelRequire("58WHl");

var $fUTzO = parcelRequire("fUTzO");

var $cz0c7 = parcelRequire("cz0c7");
class $b7011eabe928349a$export$9bc9910c55aab12 {
    getEditOperations(model, builder) {
        builder.addTrackedEditOperation(this._editRange, this._text);
    }
    computeCursorState(model, helper) {
        const inverseEditOperations = helper.getInverseEditOperations();
        const srcRange = inverseEditOperations[0].range;
        if (!this._originalSelection.isEmpty()) // Preserve selection and extends to typed text
        return new (0, $cz0c7.Selection)(srcRange.endLineNumber, srcRange.endColumn - this._text.length, srcRange.endLineNumber, srcRange.endColumn);
        return new (0, $cz0c7.Selection)(srcRange.endLineNumber, Math.min(this._originalSelection.positionColumn, srcRange.endColumn), srcRange.endLineNumber, Math.min(this._originalSelection.positionColumn, srcRange.endColumn));
    }
    constructor(editRange, originalSelection, text){
        this._editRange = editRange;
        this._originalSelection = originalSelection;
        this._text = text;
    }
}


/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $25df221a5114d031$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $25df221a5114d031$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
let $25df221a5114d031$var$InPlaceReplaceController = class InPlaceReplaceController {
    static get(editor) {
        return editor.getContribution(InPlaceReplaceController.ID);
    }
    dispose() {}
    run(source, up) {
        // cancel any pending request
        if (this.currentRequest) this.currentRequest.cancel();
        const editorSelection = this.editor.getSelection();
        const model = this.editor.getModel();
        if (!model || !editorSelection) return undefined;
        let selection = editorSelection;
        if (selection.startLineNumber !== selection.endLineNumber) // Can't accept multiline selection
        return undefined;
        const state = new (0, $iVwSq.EditorState)(this.editor, 5 /* Position */ );
        const modelURI = model.uri;
        if (!this.editorWorkerService.canNavigateValueSet(modelURI)) return Promise.resolve(undefined);
        this.currentRequest = (0, $eFOsn.createCancelablePromise)((token)=>this.editorWorkerService.navigateValueSet(modelURI, selection, up));
        return this.currentRequest.then((result)=>{
            if (!result || !result.range || !result.value) // No proper result
            return;
            if (!state.validate(this.editor)) // state has changed
            return;
            // Selection
            let editRange = (0, $3HpR4.Range).lift(result.range);
            let highlightRange = result.range;
            let diff = result.value.length - (selection.endColumn - selection.startColumn);
            // highlight
            highlightRange = {
                startLineNumber: highlightRange.startLineNumber,
                startColumn: highlightRange.startColumn,
                endLineNumber: highlightRange.endLineNumber,
                endColumn: highlightRange.startColumn + result.value.length
            };
            if (diff > 1) selection = new (0, $cz0c7.Selection)(selection.startLineNumber, selection.startColumn, selection.endLineNumber, selection.endColumn + diff - 1);
            // Insert new text
            const command = new (0, $b7011eabe928349a$export$9bc9910c55aab12)(editRange, selection, result.value);
            this.editor.pushUndoStop();
            this.editor.executeCommand(source, command);
            this.editor.pushUndoStop();
            // add decoration
            this.decorationIds = this.editor.deltaDecorations(this.decorationIds, [
                {
                    range: highlightRange,
                    options: InPlaceReplaceController.DECORATION
                }
            ]);
            // remove decoration after delay
            if (this.decorationRemover) this.decorationRemover.cancel();
            this.decorationRemover = (0, $eFOsn.timeout)(350);
            this.decorationRemover.then(()=>this.decorationIds = this.editor.deltaDecorations(this.decorationIds, [])).catch((0, $g0782.onUnexpectedError));
        }).catch((0, $g0782.onUnexpectedError));
    }
    constructor(editor, editorWorkerService){
        this.decorationIds = [];
        this.editor = editor;
        this.editorWorkerService = editorWorkerService;
    }
};
$25df221a5114d031$var$InPlaceReplaceController.ID = "editor.contrib.inPlaceReplaceController";
$25df221a5114d031$var$InPlaceReplaceController.DECORATION = (0, $g88WD.ModelDecorationOptions).register({
    description: "in-place-replace",
    className: "valueSetReplacement"
});
$25df221a5114d031$var$InPlaceReplaceController = $25df221a5114d031$var$__decorate([
    $25df221a5114d031$var$__param(1, (0, $7N0CJ.IEditorWorkerService))
], $25df221a5114d031$var$InPlaceReplaceController);
class $25df221a5114d031$var$InPlaceReplaceUp extends (0, $gGOeQ.EditorAction) {
    run(accessor, editor) {
        const controller = $25df221a5114d031$var$InPlaceReplaceController.get(editor);
        if (!controller) return Promise.resolve(undefined);
        return controller.run(this.id, true);
    }
    constructor(){
        super({
            id: "editor.action.inPlaceReplace.up",
            label: $58WHl.localize("InPlaceReplaceAction.previous.label", "Replace with Previous Value"),
            alias: "Replace with Previous Value",
            precondition: (0, $bdLce.EditorContextKeys).writable,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: 3154 /* Comma */ ,
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
class $25df221a5114d031$var$InPlaceReplaceDown extends (0, $gGOeQ.EditorAction) {
    run(accessor, editor) {
        const controller = $25df221a5114d031$var$InPlaceReplaceController.get(editor);
        if (!controller) return Promise.resolve(undefined);
        return controller.run(this.id, false);
    }
    constructor(){
        super({
            id: "editor.action.inPlaceReplace.down",
            label: $58WHl.localize("InPlaceReplaceAction.next.label", "Replace with Next Value"),
            alias: "Replace with Next Value",
            precondition: (0, $bdLce.EditorContextKeys).writable,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: 3156 /* Period */ ,
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
(0, $gGOeQ.registerEditorContribution)($25df221a5114d031$var$InPlaceReplaceController.ID, $25df221a5114d031$var$InPlaceReplaceController);
(0, $gGOeQ.registerEditorAction)($25df221a5114d031$var$InPlaceReplaceUp);
(0, $gGOeQ.registerEditorAction)($25df221a5114d031$var$InPlaceReplaceDown);
(0, $fUTzO.registerThemingParticipant)((theme, collector)=>{
    const border = theme.getColor((0, $dW2jK.editorBracketMatchBorder));
    if (border) collector.addRule(`.monaco-editor.vs .valueSetReplacement { outline: solid 2px ${border}; }`);
});



var $gGOeQ = parcelRequire("gGOeQ");

var $3Honz = parcelRequire("3Honz");

var $bdLce = parcelRequire("bdLce");

var $58WHl = parcelRequire("58WHl");
class $4b70c4ed96c231d5$export$b138959c3fb78d73 extends (0, $gGOeQ.EditorAction) {
    run(_accessor, editor, args) {
        args = args || {};
        if (!editor.hasModel()) return;
        const viewModel = editor._getViewModel();
        viewModel.model.pushStackElement();
        viewModel.setCursorStates(args.source, 3 /* Explicit */ , (0, $3Honz.CursorMoveCommands).expandLineSelection(viewModel, viewModel.getCursorStates()));
        viewModel.revealPrimaryCursor(args.source, true);
    }
    constructor(){
        super({
            id: "expandLineSelection",
            label: $58WHl.localize("expandLineSelection", "Expand Line Selection"),
            alias: "Expand Line Selection",
            precondition: undefined,
            kbOpts: {
                weight: 0 /* EditorCore */ ,
                kbExpr: (0, $bdLce.EditorContextKeys).textInputFocus,
                primary: 2090 /* KeyL */ 
            }
        });
    }
}
(0, $gGOeQ.registerEditorAction)($4b70c4ed96c231d5$export$b138959c3fb78d73);



var $fQtIR = parcelRequire("fQtIR");

var $5vVxj = parcelRequire("5vVxj");

var $gGOeQ = parcelRequire("gGOeQ");

var $8iWNC = parcelRequire("8iWNC");

var $9TEeL = parcelRequire("9TEeL");

var $13fPA = parcelRequire("13fPA");

var $3HpR4 = parcelRequire("3HpR4");
class $0716f03f3e578c51$export$d5a264e582fa038c {
    getEditOperations(model, builder) {
        let ops = $0716f03f3e578c51$export$a5e50b06a093aab9(model, this._cursors);
        for(let i = 0, len = ops.length; i < len; i++){
            let op = ops[i];
            builder.addEditOperation(op.range, op.text);
        }
        this._selectionId = builder.trackSelection(this._selection);
    }
    computeCursorState(model, helper) {
        return helper.getTrackedSelection(this._selectionId);
    }
    constructor(selection, cursors){
        this._selection = selection;
        this._cursors = cursors;
        this._selectionId = null;
    }
}
function $0716f03f3e578c51$export$a5e50b06a093aab9(model, cursors) {
    // Sort cursors ascending
    cursors.sort((a, b)=>{
        if (a.lineNumber === b.lineNumber) return a.column - b.column;
        return a.lineNumber - b.lineNumber;
    });
    // Reduce multiple cursors on the same line and only keep the last one on the line
    for(let i = cursors.length - 2; i >= 0; i--)if (cursors[i].lineNumber === cursors[i + 1].lineNumber) // Remove cursor at `i`
    cursors.splice(i, 1);
    let r = [];
    let rLen = 0;
    let cursorIndex = 0;
    let cursorLen = cursors.length;
    for(let lineNumber = 1, lineCount = model.getLineCount(); lineNumber <= lineCount; lineNumber++){
        let lineContent = model.getLineContent(lineNumber);
        let maxLineColumn = lineContent.length + 1;
        let minEditColumn = 0;
        if (cursorIndex < cursorLen && cursors[cursorIndex].lineNumber === lineNumber) {
            minEditColumn = cursors[cursorIndex].column;
            cursorIndex++;
            if (minEditColumn === maxLineColumn) continue;
        }
        if (lineContent.length === 0) continue;
        let lastNonWhitespaceIndex = $9TEeL.lastNonWhitespaceIndex(lineContent);
        let fromColumn = 0;
        if (lastNonWhitespaceIndex === -1) // Entire line is whitespace
        fromColumn = 1;
        else if (lastNonWhitespaceIndex !== lineContent.length - 1) // There is trailing whitespace
        fromColumn = lastNonWhitespaceIndex + 2;
        else continue;
        fromColumn = Math.max(minEditColumn, fromColumn);
        r[rLen++] = (0, $13fPA.EditOperation).delete(new (0, $3HpR4.Range)(lineNumber, fromColumn, lineNumber, maxLineColumn));
    }
    return r;
}



var $5P2WC = parcelRequire("5P2WC");

var $13fPA = parcelRequire("13fPA");

var $8qXsZ = parcelRequire("8qXsZ");

var $3HpR4 = parcelRequire("3HpR4");

var $cz0c7 = parcelRequire("cz0c7");

var $bdLce = parcelRequire("bdLce");

var $3HpR4 = parcelRequire("3HpR4");

var $cz0c7 = parcelRequire("cz0c7");
class $fc9ae9d6e5470e67$export$b709865215a86879 {
    getEditOperations(model, builder) {
        let s = this._selection;
        this._startLineNumberDelta = 0;
        this._endLineNumberDelta = 0;
        if (s.startLineNumber < s.endLineNumber && s.endColumn === 1) {
            this._endLineNumberDelta = 1;
            s = s.setEndPosition(s.endLineNumber - 1, model.getLineMaxColumn(s.endLineNumber - 1));
        }
        let sourceLines = [];
        for(let i = s.startLineNumber; i <= s.endLineNumber; i++)sourceLines.push(model.getLineContent(i));
        const sourceText = sourceLines.join("\n");
        if (sourceText === "") // Duplicating empty line
        {
            if (this._isCopyingDown) {
                this._startLineNumberDelta++;
                this._endLineNumberDelta++;
            }
        }
        if (this._noop) builder.addEditOperation(new (0, $3HpR4.Range)(s.endLineNumber, model.getLineMaxColumn(s.endLineNumber), s.endLineNumber + 1, 1), s.endLineNumber === model.getLineCount() ? "" : "\n");
        else if (!this._isCopyingDown) builder.addEditOperation(new (0, $3HpR4.Range)(s.endLineNumber, model.getLineMaxColumn(s.endLineNumber), s.endLineNumber, model.getLineMaxColumn(s.endLineNumber)), "\n" + sourceText);
        else builder.addEditOperation(new (0, $3HpR4.Range)(s.startLineNumber, 1, s.startLineNumber, 1), sourceText + "\n");
        this._selectionId = builder.trackSelection(s);
        this._selectionDirection = this._selection.getDirection();
    }
    computeCursorState(model, helper) {
        let result = helper.getTrackedSelection(this._selectionId);
        if (this._startLineNumberDelta !== 0 || this._endLineNumberDelta !== 0) {
            let startLineNumber = result.startLineNumber;
            let startColumn = result.startColumn;
            let endLineNumber = result.endLineNumber;
            let endColumn = result.endColumn;
            if (this._startLineNumberDelta !== 0) {
                startLineNumber = startLineNumber + this._startLineNumberDelta;
                startColumn = 1;
            }
            if (this._endLineNumberDelta !== 0) {
                endLineNumber = endLineNumber + this._endLineNumberDelta;
                endColumn = 1;
            }
            result = (0, $cz0c7.Selection).createWithDirection(startLineNumber, startColumn, endLineNumber, endColumn, this._selectionDirection);
        }
        return result;
    }
    constructor(selection, isCopyingDown, noop){
        this._selection = selection;
        this._isCopyingDown = isCopyingDown;
        this._noop = noop || false;
        this._selectionDirection = 0 /* LTR */ ;
        this._selectionId = null;
        this._startLineNumberDelta = 0;
        this._endLineNumberDelta = 0;
    }
}



var $9TEeL = parcelRequire("9TEeL");

var $83RkH = parcelRequire("83RkH");

var $3HpR4 = parcelRequire("3HpR4");

var $cz0c7 = parcelRequire("cz0c7");

var $6Wpr8 = parcelRequire("6Wpr8");

var $9wt9e = parcelRequire("9wt9e");

class $fb8521b8ae70c782$export$14a8ecb8bc929c31 {
    getEditOperations(model, builder) {
        let modelLineCount = model.getLineCount();
        if (this._isMovingDown && this._selection.endLineNumber === modelLineCount) {
            this._selectionId = builder.trackSelection(this._selection);
            return;
        }
        if (!this._isMovingDown && this._selection.startLineNumber === 1) {
            this._selectionId = builder.trackSelection(this._selection);
            return;
        }
        this._moveEndPositionDown = false;
        let s = this._selection;
        if (s.startLineNumber < s.endLineNumber && s.endColumn === 1) {
            this._moveEndPositionDown = true;
            s = s.setEndPosition(s.endLineNumber - 1, model.getLineMaxColumn(s.endLineNumber - 1));
        }
        const { tabSize: tabSize , indentSize: indentSize , insertSpaces: insertSpaces  } = model.getOptions();
        let indentConverter = this.buildIndentConverter(tabSize, indentSize, insertSpaces);
        let virtualModel = {
            getLineTokens: (lineNumber)=>{
                return model.getLineTokens(lineNumber);
            },
            getLanguageId: ()=>{
                return model.getLanguageId();
            },
            getLanguageIdAtPosition: (lineNumber, column)=>{
                return model.getLanguageIdAtPosition(lineNumber, column);
            },
            getLineContent: null
        };
        if (s.startLineNumber === s.endLineNumber && model.getLineMaxColumn(s.startLineNumber) === 1) {
            // Current line is empty
            let lineNumber = s.startLineNumber;
            let otherLineNumber = this._isMovingDown ? lineNumber + 1 : lineNumber - 1;
            if (model.getLineMaxColumn(otherLineNumber) === 1) // Other line number is empty too, so no editing is needed
            // Add a no-op to force running by the model
            builder.addEditOperation(new (0, $3HpR4.Range)(1, 1, 1, 1), null);
            else {
                // Type content from other line number on line number
                builder.addEditOperation(new (0, $3HpR4.Range)(lineNumber, 1, lineNumber, 1), model.getLineContent(otherLineNumber));
                // Remove content from other line number
                builder.addEditOperation(new (0, $3HpR4.Range)(otherLineNumber, 1, otherLineNumber, model.getLineMaxColumn(otherLineNumber)), null);
            }
            // Track selection at the other line number
            s = new (0, $cz0c7.Selection)(otherLineNumber, 1, otherLineNumber, 1);
        } else {
            let movingLineNumber;
            let movingLineText;
            if (this._isMovingDown) {
                movingLineNumber = s.endLineNumber + 1;
                movingLineText = model.getLineContent(movingLineNumber);
                // Delete line that needs to be moved
                builder.addEditOperation(new (0, $3HpR4.Range)(movingLineNumber - 1, model.getLineMaxColumn(movingLineNumber - 1), movingLineNumber, model.getLineMaxColumn(movingLineNumber)), null);
                let insertingText = movingLineText;
                if (this.shouldAutoIndent(model, s)) {
                    let movingLineMatchResult = this.matchEnterRule(model, indentConverter, tabSize, movingLineNumber, s.startLineNumber - 1);
                    // if s.startLineNumber - 1 matches onEnter rule, we still honor that.
                    if (movingLineMatchResult !== null) {
                        let oldIndentation = $9TEeL.getLeadingWhitespace(model.getLineContent(movingLineNumber));
                        let newSpaceCnt = movingLineMatchResult + $405ec4915cf971ad$export$e83f2438bfbc9f9b(oldIndentation, tabSize);
                        let newIndentation = $405ec4915cf971ad$export$f2011d4fc9157d6f(newSpaceCnt, tabSize, insertSpaces);
                        insertingText = newIndentation + this.trimLeft(movingLineText);
                    } else {
                        // no enter rule matches, let's check indentatin rules then.
                        virtualModel.getLineContent = (lineNumber)=>{
                            if (lineNumber === s.startLineNumber) return model.getLineContent(movingLineNumber);
                            else return model.getLineContent(lineNumber);
                        };
                        let indentOfMovingLine = (0, $9wt9e.LanguageConfigurationRegistry).getGoodIndentForLine(this._autoIndent, virtualModel, model.getLanguageIdAtPosition(movingLineNumber, 1), s.startLineNumber, indentConverter);
                        if (indentOfMovingLine !== null) {
                            let oldIndentation1 = $9TEeL.getLeadingWhitespace(model.getLineContent(movingLineNumber));
                            let newSpaceCnt1 = $405ec4915cf971ad$export$e83f2438bfbc9f9b(indentOfMovingLine, tabSize);
                            let oldSpaceCnt = $405ec4915cf971ad$export$e83f2438bfbc9f9b(oldIndentation1, tabSize);
                            if (newSpaceCnt1 !== oldSpaceCnt) {
                                let newIndentation1 = $405ec4915cf971ad$export$f2011d4fc9157d6f(newSpaceCnt1, tabSize, insertSpaces);
                                insertingText = newIndentation1 + this.trimLeft(movingLineText);
                            }
                        }
                    }
                    // add edit operations for moving line first to make sure it's executed after we make indentation change
                    // to s.startLineNumber
                    builder.addEditOperation(new (0, $3HpR4.Range)(s.startLineNumber, 1, s.startLineNumber, 1), insertingText + "\n");
                    let ret = this.matchEnterRuleMovingDown(model, indentConverter, tabSize, s.startLineNumber, movingLineNumber, insertingText);
                    // check if the line being moved before matches onEnter rules, if so let's adjust the indentation by onEnter rules.
                    if (ret !== null) {
                        if (ret !== 0) this.getIndentEditsOfMovingBlock(model, builder, s, tabSize, insertSpaces, ret);
                    } else {
                        // it doesn't match onEnter rules, let's check indentation rules then.
                        virtualModel.getLineContent = (lineNumber)=>{
                            if (lineNumber === s.startLineNumber) return insertingText;
                            else if (lineNumber >= s.startLineNumber + 1 && lineNumber <= s.endLineNumber + 1) return model.getLineContent(lineNumber - 1);
                            else return model.getLineContent(lineNumber);
                        };
                        let newIndentatOfMovingBlock = (0, $9wt9e.LanguageConfigurationRegistry).getGoodIndentForLine(this._autoIndent, virtualModel, model.getLanguageIdAtPosition(movingLineNumber, 1), s.startLineNumber + 1, indentConverter);
                        if (newIndentatOfMovingBlock !== null) {
                            const oldIndentation2 = $9TEeL.getLeadingWhitespace(model.getLineContent(s.startLineNumber));
                            const newSpaceCnt2 = $405ec4915cf971ad$export$e83f2438bfbc9f9b(newIndentatOfMovingBlock, tabSize);
                            const oldSpaceCnt1 = $405ec4915cf971ad$export$e83f2438bfbc9f9b(oldIndentation2, tabSize);
                            if (newSpaceCnt2 !== oldSpaceCnt1) {
                                const spaceCntOffset = newSpaceCnt2 - oldSpaceCnt1;
                                this.getIndentEditsOfMovingBlock(model, builder, s, tabSize, insertSpaces, spaceCntOffset);
                            }
                        }
                    }
                } else // Insert line that needs to be moved before
                builder.addEditOperation(new (0, $3HpR4.Range)(s.startLineNumber, 1, s.startLineNumber, 1), insertingText + "\n");
            } else {
                movingLineNumber = s.startLineNumber - 1;
                movingLineText = model.getLineContent(movingLineNumber);
                // Delete line that needs to be moved
                builder.addEditOperation(new (0, $3HpR4.Range)(movingLineNumber, 1, movingLineNumber + 1, 1), null);
                // Insert line that needs to be moved after
                builder.addEditOperation(new (0, $3HpR4.Range)(s.endLineNumber, model.getLineMaxColumn(s.endLineNumber), s.endLineNumber, model.getLineMaxColumn(s.endLineNumber)), "\n" + movingLineText);
                if (this.shouldAutoIndent(model, s)) {
                    virtualModel.getLineContent = (lineNumber)=>{
                        if (lineNumber === movingLineNumber) return model.getLineContent(s.startLineNumber);
                        else return model.getLineContent(lineNumber);
                    };
                    let ret1 = this.matchEnterRule(model, indentConverter, tabSize, s.startLineNumber, s.startLineNumber - 2);
                    // check if s.startLineNumber - 2 matches onEnter rules, if so adjust the moving block by onEnter rules.
                    if (ret1 !== null) {
                        if (ret1 !== 0) this.getIndentEditsOfMovingBlock(model, builder, s, tabSize, insertSpaces, ret1);
                    } else {
                        // it doesn't match any onEnter rule, let's check indentation rules then.
                        let indentOfFirstLine = (0, $9wt9e.LanguageConfigurationRegistry).getGoodIndentForLine(this._autoIndent, virtualModel, model.getLanguageIdAtPosition(s.startLineNumber, 1), movingLineNumber, indentConverter);
                        if (indentOfFirstLine !== null) {
                            // adjust the indentation of the moving block
                            let oldIndent = $9TEeL.getLeadingWhitespace(model.getLineContent(s.startLineNumber));
                            let newSpaceCnt3 = $405ec4915cf971ad$export$e83f2438bfbc9f9b(indentOfFirstLine, tabSize);
                            let oldSpaceCnt2 = $405ec4915cf971ad$export$e83f2438bfbc9f9b(oldIndent, tabSize);
                            if (newSpaceCnt3 !== oldSpaceCnt2) {
                                let spaceCntOffset1 = newSpaceCnt3 - oldSpaceCnt2;
                                this.getIndentEditsOfMovingBlock(model, builder, s, tabSize, insertSpaces, spaceCntOffset1);
                            }
                        }
                    }
                }
            }
        }
        this._selectionId = builder.trackSelection(s);
    }
    buildIndentConverter(tabSize, indentSize, insertSpaces) {
        return {
            shiftIndent: (indentation)=>{
                return (0, $83RkH.ShiftCommand).shiftIndent(indentation, indentation.length + 1, tabSize, indentSize, insertSpaces);
            },
            unshiftIndent: (indentation)=>{
                return (0, $83RkH.ShiftCommand).unshiftIndent(indentation, indentation.length + 1, tabSize, indentSize, insertSpaces);
            }
        };
    }
    parseEnterResult(model, indentConverter, tabSize, line, enter) {
        if (enter) {
            let enterPrefix = enter.indentation;
            if (enter.indentAction === (0, $6Wpr8.IndentAction).None) enterPrefix = enter.indentation + enter.appendText;
            else if (enter.indentAction === (0, $6Wpr8.IndentAction).Indent) enterPrefix = enter.indentation + enter.appendText;
            else if (enter.indentAction === (0, $6Wpr8.IndentAction).IndentOutdent) enterPrefix = enter.indentation;
            else if (enter.indentAction === (0, $6Wpr8.IndentAction).Outdent) enterPrefix = indentConverter.unshiftIndent(enter.indentation) + enter.appendText;
            let movingLineText = model.getLineContent(line);
            if (this.trimLeft(movingLineText).indexOf(this.trimLeft(enterPrefix)) >= 0) {
                let oldIndentation = $9TEeL.getLeadingWhitespace(model.getLineContent(line));
                let newIndentation = $9TEeL.getLeadingWhitespace(enterPrefix);
                let indentMetadataOfMovelingLine = (0, $9wt9e.LanguageConfigurationRegistry).getIndentMetadata(model, line);
                if (indentMetadataOfMovelingLine !== null && indentMetadataOfMovelingLine & 2 /* DECREASE_MASK */ ) newIndentation = indentConverter.unshiftIndent(newIndentation);
                let newSpaceCnt = $405ec4915cf971ad$export$e83f2438bfbc9f9b(newIndentation, tabSize);
                let oldSpaceCnt = $405ec4915cf971ad$export$e83f2438bfbc9f9b(oldIndentation, tabSize);
                return newSpaceCnt - oldSpaceCnt;
            }
        }
        return null;
    }
    /**
     *
     * @param model
     * @param indentConverter
     * @param tabSize
     * @param line the line moving down
     * @param futureAboveLineNumber the line which will be at the `line` position
     * @param futureAboveLineText
     */ matchEnterRuleMovingDown(model, indentConverter, tabSize, line, futureAboveLineNumber, futureAboveLineText) {
        if ($9TEeL.lastNonWhitespaceIndex(futureAboveLineText) >= 0) {
            // break
            let maxColumn = model.getLineMaxColumn(futureAboveLineNumber);
            let enter = (0, $9wt9e.LanguageConfigurationRegistry).getEnterAction(this._autoIndent, model, new (0, $3HpR4.Range)(futureAboveLineNumber, maxColumn, futureAboveLineNumber, maxColumn));
            return this.parseEnterResult(model, indentConverter, tabSize, line, enter);
        } else {
            // go upwards, starting from `line - 1`
            let validPrecedingLine = line - 1;
            while(validPrecedingLine >= 1){
                let lineContent = model.getLineContent(validPrecedingLine);
                let nonWhitespaceIdx = $9TEeL.lastNonWhitespaceIndex(lineContent);
                if (nonWhitespaceIdx >= 0) break;
                validPrecedingLine--;
            }
            if (validPrecedingLine < 1 || line > model.getLineCount()) return null;
            let maxColumn1 = model.getLineMaxColumn(validPrecedingLine);
            let enter1 = (0, $9wt9e.LanguageConfigurationRegistry).getEnterAction(this._autoIndent, model, new (0, $3HpR4.Range)(validPrecedingLine, maxColumn1, validPrecedingLine, maxColumn1));
            return this.parseEnterResult(model, indentConverter, tabSize, line, enter1);
        }
    }
    matchEnterRule(model, indentConverter, tabSize, line, oneLineAbove, previousLineText) {
        let validPrecedingLine = oneLineAbove;
        while(validPrecedingLine >= 1){
            // ship empty lines as empty lines just inherit indentation
            let lineContent;
            if (validPrecedingLine === oneLineAbove && previousLineText !== undefined) lineContent = previousLineText;
            else lineContent = model.getLineContent(validPrecedingLine);
            let nonWhitespaceIdx = $9TEeL.lastNonWhitespaceIndex(lineContent);
            if (nonWhitespaceIdx >= 0) break;
            validPrecedingLine--;
        }
        if (validPrecedingLine < 1 || line > model.getLineCount()) return null;
        let maxColumn = model.getLineMaxColumn(validPrecedingLine);
        let enter = (0, $9wt9e.LanguageConfigurationRegistry).getEnterAction(this._autoIndent, model, new (0, $3HpR4.Range)(validPrecedingLine, maxColumn, validPrecedingLine, maxColumn));
        return this.parseEnterResult(model, indentConverter, tabSize, line, enter);
    }
    trimLeft(str) {
        return str.replace(/^\s+/, "");
    }
    shouldAutoIndent(model, selection) {
        if (this._autoIndent < 4 /* Full */ ) return false;
        // if it's not easy to tokenize, we stop auto indent.
        if (!model.isCheapToTokenize(selection.startLineNumber)) return false;
        let languageAtSelectionStart = model.getLanguageIdAtPosition(selection.startLineNumber, 1);
        let languageAtSelectionEnd = model.getLanguageIdAtPosition(selection.endLineNumber, 1);
        if (languageAtSelectionStart !== languageAtSelectionEnd) return false;
        if ((0, $9wt9e.LanguageConfigurationRegistry).getIndentRulesSupport(languageAtSelectionStart) === null) return false;
        return true;
    }
    getIndentEditsOfMovingBlock(model, builder, s, tabSize, insertSpaces, offset) {
        for(let i = s.startLineNumber; i <= s.endLineNumber; i++){
            let lineContent = model.getLineContent(i);
            let originalIndent = $9TEeL.getLeadingWhitespace(lineContent);
            let originalSpacesCnt = $405ec4915cf971ad$export$e83f2438bfbc9f9b(originalIndent, tabSize);
            let newSpacesCnt = originalSpacesCnt + offset;
            let newIndent = $405ec4915cf971ad$export$f2011d4fc9157d6f(newSpacesCnt, tabSize, insertSpaces);
            if (newIndent !== originalIndent) {
                builder.addEditOperation(new (0, $3HpR4.Range)(i, 1, i, originalIndent.length + 1), newIndent);
                if (i === s.endLineNumber && s.endColumn <= originalIndent.length + 1 && newIndent === "") // as users select part of the original indent white spaces
                // when we adjust the indentation of endLine, we should adjust the cursor position as well.
                this._moveEndLineSelectionShrink = true;
            }
        }
    }
    computeCursorState(model, helper) {
        let result = helper.getTrackedSelection(this._selectionId);
        if (this._moveEndPositionDown) result = result.setEndPosition(result.endLineNumber + 1, 1);
        if (this._moveEndLineSelectionShrink && result.startLineNumber < result.endLineNumber) result = result.setEndPosition(result.endLineNumber, 2);
        return result;
    }
    constructor(selection, isMovingDown, autoIndent){
        this._selection = selection;
        this._isMovingDown = isMovingDown;
        this._autoIndent = autoIndent;
        this._selectionId = null;
        this._moveEndLineSelectionShrink = false;
    }
}



var $13fPA = parcelRequire("13fPA");

var $3HpR4 = parcelRequire("3HpR4");
class $056dea8aecd35b1e$export$ba55b4b15d1da26c {
    static getCollator() {
        if (!$056dea8aecd35b1e$export$ba55b4b15d1da26c._COLLATOR) $056dea8aecd35b1e$export$ba55b4b15d1da26c._COLLATOR = new Intl.Collator();
        return $056dea8aecd35b1e$export$ba55b4b15d1da26c._COLLATOR;
    }
    getEditOperations(model, builder) {
        let op = $056dea8aecd35b1e$var$sortLines(model, this.selection, this.descending);
        if (op) builder.addEditOperation(op.range, op.text);
        this.selectionId = builder.trackSelection(this.selection);
    }
    computeCursorState(model, helper) {
        return helper.getTrackedSelection(this.selectionId);
    }
    static canRun(model, selection, descending) {
        if (model === null) return false;
        let data = $056dea8aecd35b1e$var$getSortData(model, selection, descending);
        if (!data) return false;
        for(let i = 0, len = data.before.length; i < len; i++){
            if (data.before[i] !== data.after[i]) return true;
        }
        return false;
    }
    constructor(selection, descending){
        this.selection = selection;
        this.descending = descending;
        this.selectionId = null;
    }
}
$056dea8aecd35b1e$export$ba55b4b15d1da26c._COLLATOR = null;
function $056dea8aecd35b1e$var$getSortData(model, selection, descending) {
    let startLineNumber = selection.startLineNumber;
    let endLineNumber = selection.endLineNumber;
    if (selection.endColumn === 1) endLineNumber--;
    // Nothing to sort if user didn't select anything.
    if (startLineNumber >= endLineNumber) return null;
    let linesToSort = [];
    // Get the contents of the selection to be sorted.
    for(let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++)linesToSort.push(model.getLineContent(lineNumber));
    let sorted = linesToSort.slice(0);
    sorted.sort($056dea8aecd35b1e$export$ba55b4b15d1da26c.getCollator().compare);
    // If descending, reverse the order.
    if (descending === true) sorted = sorted.reverse();
    return {
        startLineNumber: startLineNumber,
        endLineNumber: endLineNumber,
        before: linesToSort,
        after: sorted
    };
}
/**
 * Generate commands for sorting lines on a model.
 */ function $056dea8aecd35b1e$var$sortLines(model, selection, descending) {
    let data = $056dea8aecd35b1e$var$getSortData(model, selection, descending);
    if (!data) return null;
    return (0, $13fPA.EditOperation).replace(new (0, $3HpR4.Range)(data.startLineNumber, 1, data.endLineNumber, model.getLineMaxColumn(data.endLineNumber)), data.after.join("\n"));
}



var $58WHl = parcelRequire("58WHl");

var $2IxgH = parcelRequire("2IxgH");
// copy lines
class $285d07c988e4f6bb$var$AbstractCopyLinesAction extends (0, $gGOeQ.EditorAction) {
    run(_accessor, editor) {
        if (!editor.hasModel()) return;
        const selections = editor.getSelections().map((selection, index)=>({
                selection: selection,
                index: index,
                ignore: false
            }));
        selections.sort((a, b)=>(0, $3HpR4.Range).compareRangesUsingStarts(a.selection, b.selection));
        // Remove selections that would result in copying the same line
        let prev = selections[0];
        for(let i = 1; i < selections.length; i++){
            const curr = selections[i];
            if (prev.selection.endLineNumber === curr.selection.startLineNumber) {
                // these two selections would copy the same line
                if (prev.index < curr.index) // prev wins
                curr.ignore = true;
                else {
                    // curr wins
                    prev.ignore = true;
                    prev = curr;
                }
            }
        }
        const commands = [];
        for (const selection of selections)commands.push(new (0, $fc9ae9d6e5470e67$export$b709865215a86879)(selection.selection, this.down, selection.ignore));
        editor.pushUndoStop();
        editor.executeCommands(this.id, commands);
        editor.pushUndoStop();
    }
    constructor(down, opts){
        super(opts);
        this.down = down;
    }
}
class $285d07c988e4f6bb$var$CopyLinesUpAction extends $285d07c988e4f6bb$var$AbstractCopyLinesAction {
    constructor(){
        super(false, {
            id: "editor.action.copyLinesUpAction",
            label: $58WHl.localize("lines.copyUp", "Copy Line Up"),
            alias: "Copy Line Up",
            precondition: (0, $bdLce.EditorContextKeys).writable,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: 1552 /* UpArrow */ ,
                linux: {
                    primary: 3600 /* UpArrow */ 
                },
                weight: 100 /* EditorContrib */ 
            },
            menuOpts: {
                menuId: (0, $2IxgH.MenuId).MenubarSelectionMenu,
                group: "2_line",
                title: $58WHl.localize({
                    key: "miCopyLinesUp",
                    comment: [
                        "&& denotes a mnemonic"
                    ]
                }, "&&Copy Line Up"),
                order: 1
            }
        });
    }
}
class $285d07c988e4f6bb$var$CopyLinesDownAction extends $285d07c988e4f6bb$var$AbstractCopyLinesAction {
    constructor(){
        super(true, {
            id: "editor.action.copyLinesDownAction",
            label: $58WHl.localize("lines.copyDown", "Copy Line Down"),
            alias: "Copy Line Down",
            precondition: (0, $bdLce.EditorContextKeys).writable,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: 1554 /* DownArrow */ ,
                linux: {
                    primary: 3602 /* DownArrow */ 
                },
                weight: 100 /* EditorContrib */ 
            },
            menuOpts: {
                menuId: (0, $2IxgH.MenuId).MenubarSelectionMenu,
                group: "2_line",
                title: $58WHl.localize({
                    key: "miCopyLinesDown",
                    comment: [
                        "&& denotes a mnemonic"
                    ]
                }, "Co&&py Line Down"),
                order: 2
            }
        });
    }
}
class $285d07c988e4f6bb$export$3cbca8715f2928a3 extends (0, $gGOeQ.EditorAction) {
    run(accessor, editor, args) {
        if (!editor.hasModel()) return;
        const commands = [];
        const selections = editor.getSelections();
        const model = editor.getModel();
        for (const selection of selections)if (selection.isEmpty()) commands.push(new (0, $fc9ae9d6e5470e67$export$b709865215a86879)(selection, true));
        else {
            const insertSelection = new (0, $cz0c7.Selection)(selection.endLineNumber, selection.endColumn, selection.endLineNumber, selection.endColumn);
            commands.push(new (0, $8iWNC.ReplaceCommandThatSelectsText)(insertSelection, model.getValueInRange(selection)));
        }
        editor.pushUndoStop();
        editor.executeCommands(this.id, commands);
        editor.pushUndoStop();
    }
    constructor(){
        super({
            id: "editor.action.duplicateSelection",
            label: $58WHl.localize("duplicateSelection", "Duplicate Selection"),
            alias: "Duplicate Selection",
            precondition: (0, $bdLce.EditorContextKeys).writable,
            menuOpts: {
                menuId: (0, $2IxgH.MenuId).MenubarSelectionMenu,
                group: "2_line",
                title: $58WHl.localize({
                    key: "miDuplicateSelection",
                    comment: [
                        "&& denotes a mnemonic"
                    ]
                }, "&&Duplicate Selection"),
                order: 5
            }
        });
    }
}
// move lines
class $285d07c988e4f6bb$var$AbstractMoveLinesAction extends (0, $gGOeQ.EditorAction) {
    run(_accessor, editor) {
        let commands = [];
        let selections = editor.getSelections() || [];
        const autoIndent = editor.getOption(9 /* autoIndent */ );
        for (const selection of selections)commands.push(new (0, $fb8521b8ae70c782$export$14a8ecb8bc929c31)(selection, this.down, autoIndent));
        editor.pushUndoStop();
        editor.executeCommands(this.id, commands);
        editor.pushUndoStop();
    }
    constructor(down, opts){
        super(opts);
        this.down = down;
    }
}
class $285d07c988e4f6bb$var$MoveLinesUpAction extends $285d07c988e4f6bb$var$AbstractMoveLinesAction {
    constructor(){
        super(false, {
            id: "editor.action.moveLinesUpAction",
            label: $58WHl.localize("lines.moveUp", "Move Line Up"),
            alias: "Move Line Up",
            precondition: (0, $bdLce.EditorContextKeys).writable,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: 528 /* UpArrow */ ,
                linux: {
                    primary: 528 /* UpArrow */ 
                },
                weight: 100 /* EditorContrib */ 
            },
            menuOpts: {
                menuId: (0, $2IxgH.MenuId).MenubarSelectionMenu,
                group: "2_line",
                title: $58WHl.localize({
                    key: "miMoveLinesUp",
                    comment: [
                        "&& denotes a mnemonic"
                    ]
                }, "Mo&&ve Line Up"),
                order: 3
            }
        });
    }
}
class $285d07c988e4f6bb$var$MoveLinesDownAction extends $285d07c988e4f6bb$var$AbstractMoveLinesAction {
    constructor(){
        super(true, {
            id: "editor.action.moveLinesDownAction",
            label: $58WHl.localize("lines.moveDown", "Move Line Down"),
            alias: "Move Line Down",
            precondition: (0, $bdLce.EditorContextKeys).writable,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: 530 /* DownArrow */ ,
                linux: {
                    primary: 530 /* DownArrow */ 
                },
                weight: 100 /* EditorContrib */ 
            },
            menuOpts: {
                menuId: (0, $2IxgH.MenuId).MenubarSelectionMenu,
                group: "2_line",
                title: $58WHl.localize({
                    key: "miMoveLinesDown",
                    comment: [
                        "&& denotes a mnemonic"
                    ]
                }, "Move &&Line Down"),
                order: 4
            }
        });
    }
}
class $285d07c988e4f6bb$export$e314e63e71893b5f extends (0, $gGOeQ.EditorAction) {
    run(_accessor, editor) {
        const selections = editor.getSelections() || [];
        for (const selection of selections){
            if (!(0, $056dea8aecd35b1e$export$ba55b4b15d1da26c).canRun(editor.getModel(), selection, this.descending)) return;
        }
        let commands = [];
        for(let i = 0, len = selections.length; i < len; i++)commands[i] = new (0, $056dea8aecd35b1e$export$ba55b4b15d1da26c)(selections[i], this.descending);
        editor.pushUndoStop();
        editor.executeCommands(this.id, commands);
        editor.pushUndoStop();
    }
    constructor(descending, opts){
        super(opts);
        this.descending = descending;
    }
}
class $285d07c988e4f6bb$export$ca6d6f27cd0b1546 extends $285d07c988e4f6bb$export$e314e63e71893b5f {
    constructor(){
        super(false, {
            id: "editor.action.sortLinesAscending",
            label: $58WHl.localize("lines.sortAscending", "Sort Lines Ascending"),
            alias: "Sort Lines Ascending",
            precondition: (0, $bdLce.EditorContextKeys).writable
        });
    }
}
class $285d07c988e4f6bb$export$f51f7f4d11319ba2 extends $285d07c988e4f6bb$export$e314e63e71893b5f {
    constructor(){
        super(true, {
            id: "editor.action.sortLinesDescending",
            label: $58WHl.localize("lines.sortDescending", "Sort Lines Descending"),
            alias: "Sort Lines Descending",
            precondition: (0, $bdLce.EditorContextKeys).writable
        });
    }
}
class $285d07c988e4f6bb$export$16d0def50a9fdfd0 extends (0, $gGOeQ.EditorAction) {
    run(_accessor, editor) {
        if (!editor.hasModel()) return;
        let model = editor.getModel();
        if (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) return;
        let edits = [];
        let endCursorState = [];
        let linesDeleted = 0;
        for (let selection of editor.getSelections()){
            let uniqueLines = new Set();
            let lines = [];
            for(let i = selection.startLineNumber; i <= selection.endLineNumber; i++){
                let line = model.getLineContent(i);
                if (uniqueLines.has(line)) continue;
                lines.push(line);
                uniqueLines.add(line);
            }
            let selectionToReplace = new (0, $cz0c7.Selection)(selection.startLineNumber, 1, selection.endLineNumber, model.getLineMaxColumn(selection.endLineNumber));
            let adjustedSelectionStart = selection.startLineNumber - linesDeleted;
            let finalSelection = new (0, $cz0c7.Selection)(adjustedSelectionStart, 1, adjustedSelectionStart + lines.length - 1, lines[lines.length - 1].length);
            edits.push((0, $13fPA.EditOperation).replace(selectionToReplace, lines.join("\n")));
            endCursorState.push(finalSelection);
            linesDeleted += selection.endLineNumber - selection.startLineNumber + 1 - lines.length;
        }
        editor.pushUndoStop();
        editor.executeEdits(this.id, edits, endCursorState);
        editor.pushUndoStop();
    }
    constructor(){
        super({
            id: "editor.action.removeDuplicateLines",
            label: $58WHl.localize("lines.deleteDuplicates", "Delete Duplicate Lines"),
            alias: "Delete Duplicate Lines",
            precondition: (0, $bdLce.EditorContextKeys).writable
        });
    }
}
class $285d07c988e4f6bb$export$7c2a5fb1bcba21da extends (0, $gGOeQ.EditorAction) {
    run(_accessor, editor, args) {
        let cursors = [];
        if (args.reason === "auto-save") // See https://github.com/editorconfig/editorconfig-vscode/issues/47
        // It is very convenient for the editor config extension to invoke this action.
        // So, if we get a reason:'auto-save' passed in, let's preserve cursor positions.
        cursors = (editor.getSelections() || []).map((s)=>new (0, $8qXsZ.Position)(s.positionLineNumber, s.positionColumn));
        let selection = editor.getSelection();
        if (selection === null) return;
        let command = new (0, $0716f03f3e578c51$export$d5a264e582fa038c)(selection, cursors);
        editor.pushUndoStop();
        editor.executeCommands(this.id, [
            command
        ]);
        editor.pushUndoStop();
    }
    constructor(){
        super({
            id: $285d07c988e4f6bb$export$7c2a5fb1bcba21da.ID,
            label: $58WHl.localize("lines.trimTrailingWhitespace", "Trim Trailing Whitespace"),
            alias: "Trim Trailing Whitespace",
            precondition: (0, $bdLce.EditorContextKeys).writable,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: (0, $fQtIR.KeyChord)(2089 /* KeyK */ , 2102 /* KeyX */ ),
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
$285d07c988e4f6bb$export$7c2a5fb1bcba21da.ID = "editor.action.trimTrailingWhitespace";
class $285d07c988e4f6bb$export$a325764c76fc5489 extends (0, $gGOeQ.EditorAction) {
    run(_accessor, editor) {
        if (!editor.hasModel()) return;
        let ops = this._getLinesToRemove(editor);
        let model = editor.getModel();
        if (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) // Model is empty
        return;
        let linesDeleted = 0;
        let edits = [];
        let cursorState = [];
        for(let i = 0, len = ops.length; i < len; i++){
            const op = ops[i];
            let startLineNumber = op.startLineNumber;
            let endLineNumber = op.endLineNumber;
            let startColumn = 1;
            let endColumn = model.getLineMaxColumn(endLineNumber);
            if (endLineNumber < model.getLineCount()) {
                endLineNumber += 1;
                endColumn = 1;
            } else if (startLineNumber > 1) {
                startLineNumber -= 1;
                startColumn = model.getLineMaxColumn(startLineNumber);
            }
            edits.push((0, $13fPA.EditOperation).replace(new (0, $cz0c7.Selection)(startLineNumber, startColumn, endLineNumber, endColumn), ""));
            cursorState.push(new (0, $cz0c7.Selection)(startLineNumber - linesDeleted, op.positionColumn, startLineNumber - linesDeleted, op.positionColumn));
            linesDeleted += op.endLineNumber - op.startLineNumber + 1;
        }
        editor.pushUndoStop();
        editor.executeEdits(this.id, edits, cursorState);
        editor.pushUndoStop();
    }
    _getLinesToRemove(editor) {
        // Construct delete operations
        let operations = editor.getSelections().map((s)=>{
            let endLineNumber = s.endLineNumber;
            if (s.startLineNumber < s.endLineNumber && s.endColumn === 1) endLineNumber -= 1;
            return {
                startLineNumber: s.startLineNumber,
                selectionStartColumn: s.selectionStartColumn,
                endLineNumber: endLineNumber,
                positionColumn: s.positionColumn
            };
        });
        // Sort delete operations
        operations.sort((a, b)=>{
            if (a.startLineNumber === b.startLineNumber) return a.endLineNumber - b.endLineNumber;
            return a.startLineNumber - b.startLineNumber;
        });
        // Merge delete operations which are adjacent or overlapping
        let mergedOperations = [];
        let previousOperation = operations[0];
        for(let i = 1; i < operations.length; i++)if (previousOperation.endLineNumber + 1 >= operations[i].startLineNumber) // Merge current operations into the previous one
        previousOperation.endLineNumber = operations[i].endLineNumber;
        else {
            // Push previous operation
            mergedOperations.push(previousOperation);
            previousOperation = operations[i];
        }
        // Push the last operation
        mergedOperations.push(previousOperation);
        return mergedOperations;
    }
    constructor(){
        super({
            id: "editor.action.deleteLines",
            label: $58WHl.localize("lines.delete", "Delete Line"),
            alias: "Delete Line",
            precondition: (0, $bdLce.EditorContextKeys).writable,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).textInputFocus,
                primary: 3113 /* KeyK */ ,
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
class $285d07c988e4f6bb$export$b16686fff98be8f7 extends (0, $gGOeQ.EditorAction) {
    run(_accessor, editor) {
        const viewModel = editor._getViewModel();
        if (!viewModel) return;
        editor.pushUndoStop();
        editor.executeCommands(this.id, (0, $5P2WC.TypeOperations).indent(viewModel.cursorConfig, editor.getModel(), editor.getSelections()));
        editor.pushUndoStop();
    }
    constructor(){
        super({
            id: "editor.action.indentLines",
            label: $58WHl.localize("lines.indent", "Indent Line"),
            alias: "Indent Line",
            precondition: (0, $bdLce.EditorContextKeys).writable,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: 2137 /* BracketRight */ ,
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
class $285d07c988e4f6bb$var$OutdentLinesAction extends (0, $gGOeQ.EditorAction) {
    run(_accessor, editor) {
        (0, $5vVxj.CoreEditingCommands).Outdent.runEditorCommand(_accessor, editor, null);
    }
    constructor(){
        super({
            id: "editor.action.outdentLines",
            label: $58WHl.localize("lines.outdent", "Outdent Line"),
            alias: "Outdent Line",
            precondition: (0, $bdLce.EditorContextKeys).writable,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: 2135 /* BracketLeft */ ,
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
class $285d07c988e4f6bb$export$db5751c0accc4bcc extends (0, $gGOeQ.EditorAction) {
    run(_accessor, editor) {
        const viewModel = editor._getViewModel();
        if (!viewModel) return;
        editor.pushUndoStop();
        editor.executeCommands(this.id, (0, $5P2WC.TypeOperations).lineInsertBefore(viewModel.cursorConfig, editor.getModel(), editor.getSelections()));
    }
    constructor(){
        super({
            id: "editor.action.insertLineBefore",
            label: $58WHl.localize("lines.insertBefore", "Insert Line Above"),
            alias: "Insert Line Above",
            precondition: (0, $bdLce.EditorContextKeys).writable,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: 3075 /* Enter */ ,
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
class $285d07c988e4f6bb$export$2dd5d09a007eecf5 extends (0, $gGOeQ.EditorAction) {
    run(_accessor, editor) {
        const viewModel = editor._getViewModel();
        if (!viewModel) return;
        editor.pushUndoStop();
        editor.executeCommands(this.id, (0, $5P2WC.TypeOperations).lineInsertAfter(viewModel.cursorConfig, editor.getModel(), editor.getSelections()));
    }
    constructor(){
        super({
            id: "editor.action.insertLineAfter",
            label: $58WHl.localize("lines.insertAfter", "Insert Line Below"),
            alias: "Insert Line Below",
            precondition: (0, $bdLce.EditorContextKeys).writable,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: 2051 /* Enter */ ,
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
class $285d07c988e4f6bb$export$7fdcece70613530e extends (0, $gGOeQ.EditorAction) {
    run(_accessor, editor) {
        if (!editor.hasModel()) return;
        const primaryCursor = editor.getSelection();
        let rangesToDelete = this._getRangesToDelete(editor);
        // merge overlapping selections
        let effectiveRanges = [];
        for(let i = 0, count = rangesToDelete.length - 1; i < count; i++){
            let range = rangesToDelete[i];
            let nextRange = rangesToDelete[i + 1];
            if ((0, $3HpR4.Range).intersectRanges(range, nextRange) === null) effectiveRanges.push(range);
            else rangesToDelete[i + 1] = (0, $3HpR4.Range).plusRange(range, nextRange);
        }
        effectiveRanges.push(rangesToDelete[rangesToDelete.length - 1]);
        let endCursorState = this._getEndCursorState(primaryCursor, effectiveRanges);
        let edits = effectiveRanges.map((range)=>{
            return (0, $13fPA.EditOperation).replace(range, "");
        });
        editor.pushUndoStop();
        editor.executeEdits(this.id, edits, endCursorState);
        editor.pushUndoStop();
    }
}
class $285d07c988e4f6bb$export$9a3834b09b6983ed extends $285d07c988e4f6bb$export$7fdcece70613530e {
    _getEndCursorState(primaryCursor, rangesToDelete) {
        let endPrimaryCursor = null;
        let endCursorState = [];
        let deletedLines = 0;
        rangesToDelete.forEach((range)=>{
            let endCursor;
            if (range.endColumn === 1 && deletedLines > 0) {
                let newStartLine = range.startLineNumber - deletedLines;
                endCursor = new (0, $cz0c7.Selection)(newStartLine, range.startColumn, newStartLine, range.startColumn);
            } else endCursor = new (0, $cz0c7.Selection)(range.startLineNumber, range.startColumn, range.startLineNumber, range.startColumn);
            deletedLines += range.endLineNumber - range.startLineNumber;
            if (range.intersectRanges(primaryCursor)) endPrimaryCursor = endCursor;
            else endCursorState.push(endCursor);
        });
        if (endPrimaryCursor) endCursorState.unshift(endPrimaryCursor);
        return endCursorState;
    }
    _getRangesToDelete(editor) {
        let selections = editor.getSelections();
        if (selections === null) return [];
        let rangesToDelete = selections;
        let model = editor.getModel();
        if (model === null) return [];
        rangesToDelete.sort((0, $3HpR4.Range).compareRangesUsingStarts);
        rangesToDelete = rangesToDelete.map((selection)=>{
            if (selection.isEmpty()) {
                if (selection.startColumn === 1) {
                    let deleteFromLine = Math.max(1, selection.startLineNumber - 1);
                    let deleteFromColumn = selection.startLineNumber === 1 ? 1 : model.getLineContent(deleteFromLine).length + 1;
                    return new (0, $3HpR4.Range)(deleteFromLine, deleteFromColumn, selection.startLineNumber, 1);
                } else return new (0, $3HpR4.Range)(selection.startLineNumber, 1, selection.startLineNumber, selection.startColumn);
            } else return new (0, $3HpR4.Range)(selection.startLineNumber, 1, selection.endLineNumber, selection.endColumn);
        });
        return rangesToDelete;
    }
    constructor(){
        super({
            id: "deleteAllLeft",
            label: $58WHl.localize("lines.deleteAllLeft", "Delete All Left"),
            alias: "Delete All Left",
            precondition: (0, $bdLce.EditorContextKeys).writable,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).textInputFocus,
                primary: 0,
                mac: {
                    primary: 2049 /* Backspace */ 
                },
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
class $285d07c988e4f6bb$export$698902706bc70cc6 extends $285d07c988e4f6bb$export$7fdcece70613530e {
    _getEndCursorState(primaryCursor, rangesToDelete) {
        let endPrimaryCursor = null;
        let endCursorState = [];
        for(let i = 0, len = rangesToDelete.length, offset = 0; i < len; i++){
            let range = rangesToDelete[i];
            let endCursor = new (0, $cz0c7.Selection)(range.startLineNumber - offset, range.startColumn, range.startLineNumber - offset, range.startColumn);
            if (range.intersectRanges(primaryCursor)) endPrimaryCursor = endCursor;
            else endCursorState.push(endCursor);
        }
        if (endPrimaryCursor) endCursorState.unshift(endPrimaryCursor);
        return endCursorState;
    }
    _getRangesToDelete(editor) {
        let model = editor.getModel();
        if (model === null) return [];
        let selections = editor.getSelections();
        if (selections === null) return [];
        let rangesToDelete = selections.map((sel)=>{
            if (sel.isEmpty()) {
                const maxColumn = model.getLineMaxColumn(sel.startLineNumber);
                if (sel.startColumn === maxColumn) return new (0, $3HpR4.Range)(sel.startLineNumber, sel.startColumn, sel.startLineNumber + 1, 1);
                else return new (0, $3HpR4.Range)(sel.startLineNumber, sel.startColumn, sel.startLineNumber, maxColumn);
            }
            return sel;
        });
        rangesToDelete.sort((0, $3HpR4.Range).compareRangesUsingStarts);
        return rangesToDelete;
    }
    constructor(){
        super({
            id: "deleteAllRight",
            label: $58WHl.localize("lines.deleteAllRight", "Delete All Right"),
            alias: "Delete All Right",
            precondition: (0, $bdLce.EditorContextKeys).writable,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).textInputFocus,
                primary: 0,
                mac: {
                    primary: 297 /* KeyK */ ,
                    secondary: [
                        2068 /* Delete */ 
                    ]
                },
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
class $285d07c988e4f6bb$export$dd737e2c91d24d1a extends (0, $gGOeQ.EditorAction) {
    run(_accessor, editor) {
        let selections = editor.getSelections();
        if (selections === null) return;
        let primaryCursor = editor.getSelection();
        if (primaryCursor === null) return;
        selections.sort((0, $3HpR4.Range).compareRangesUsingStarts);
        let reducedSelections = [];
        let lastSelection = selections.reduce((previousValue, currentValue)=>{
            if (previousValue.isEmpty()) {
                if (previousValue.endLineNumber === currentValue.startLineNumber) {
                    if (primaryCursor.equalsSelection(previousValue)) primaryCursor = currentValue;
                    return currentValue;
                }
                if (currentValue.startLineNumber > previousValue.endLineNumber + 1) {
                    reducedSelections.push(previousValue);
                    return currentValue;
                } else return new (0, $cz0c7.Selection)(previousValue.startLineNumber, previousValue.startColumn, currentValue.endLineNumber, currentValue.endColumn);
            } else {
                if (currentValue.startLineNumber > previousValue.endLineNumber) {
                    reducedSelections.push(previousValue);
                    return currentValue;
                } else return new (0, $cz0c7.Selection)(previousValue.startLineNumber, previousValue.startColumn, currentValue.endLineNumber, currentValue.endColumn);
            }
        });
        reducedSelections.push(lastSelection);
        let model = editor.getModel();
        if (model === null) return;
        let edits = [];
        let endCursorState = [];
        let endPrimaryCursor = primaryCursor;
        let lineOffset = 0;
        for(let i = 0, len = reducedSelections.length; i < len; i++){
            let selection = reducedSelections[i];
            let startLineNumber = selection.startLineNumber;
            let startColumn = 1;
            let columnDeltaOffset = 0;
            let endLineNumber, endColumn;
            let selectionEndPositionOffset = model.getLineContent(selection.endLineNumber).length - selection.endColumn;
            if (selection.isEmpty() || selection.startLineNumber === selection.endLineNumber) {
                let position = selection.getStartPosition();
                if (position.lineNumber < model.getLineCount()) {
                    endLineNumber = startLineNumber + 1;
                    endColumn = model.getLineMaxColumn(endLineNumber);
                } else {
                    endLineNumber = position.lineNumber;
                    endColumn = model.getLineMaxColumn(position.lineNumber);
                }
            } else {
                endLineNumber = selection.endLineNumber;
                endColumn = model.getLineMaxColumn(endLineNumber);
            }
            let trimmedLinesContent = model.getLineContent(startLineNumber);
            for(let i1 = startLineNumber + 1; i1 <= endLineNumber; i1++){
                let lineText = model.getLineContent(i1);
                let firstNonWhitespaceIdx = model.getLineFirstNonWhitespaceColumn(i1);
                if (firstNonWhitespaceIdx >= 1) {
                    let insertSpace = true;
                    if (trimmedLinesContent === "") insertSpace = false;
                    if (insertSpace && (trimmedLinesContent.charAt(trimmedLinesContent.length - 1) === " " || trimmedLinesContent.charAt(trimmedLinesContent.length - 1) === "	")) {
                        insertSpace = false;
                        trimmedLinesContent = trimmedLinesContent.replace(/[\s\uFEFF\xA0]+$/g, " ");
                    }
                    let lineTextWithoutIndent = lineText.substr(firstNonWhitespaceIdx - 1);
                    trimmedLinesContent += (insertSpace ? " " : "") + lineTextWithoutIndent;
                    if (insertSpace) columnDeltaOffset = lineTextWithoutIndent.length + 1;
                    else columnDeltaOffset = lineTextWithoutIndent.length;
                } else columnDeltaOffset = 0;
            }
            let deleteSelection = new (0, $3HpR4.Range)(startLineNumber, startColumn, endLineNumber, endColumn);
            if (!deleteSelection.isEmpty()) {
                let resultSelection;
                if (selection.isEmpty()) {
                    edits.push((0, $13fPA.EditOperation).replace(deleteSelection, trimmedLinesContent));
                    resultSelection = new (0, $cz0c7.Selection)(deleteSelection.startLineNumber - lineOffset, trimmedLinesContent.length - columnDeltaOffset + 1, startLineNumber - lineOffset, trimmedLinesContent.length - columnDeltaOffset + 1);
                } else if (selection.startLineNumber === selection.endLineNumber) {
                    edits.push((0, $13fPA.EditOperation).replace(deleteSelection, trimmedLinesContent));
                    resultSelection = new (0, $cz0c7.Selection)(selection.startLineNumber - lineOffset, selection.startColumn, selection.endLineNumber - lineOffset, selection.endColumn);
                } else {
                    edits.push((0, $13fPA.EditOperation).replace(deleteSelection, trimmedLinesContent));
                    resultSelection = new (0, $cz0c7.Selection)(selection.startLineNumber - lineOffset, selection.startColumn, selection.startLineNumber - lineOffset, trimmedLinesContent.length - selectionEndPositionOffset);
                }
                if ((0, $3HpR4.Range).intersectRanges(deleteSelection, primaryCursor) !== null) endPrimaryCursor = resultSelection;
                else endCursorState.push(resultSelection);
            }
            lineOffset += deleteSelection.endLineNumber - deleteSelection.startLineNumber;
        }
        endCursorState.unshift(endPrimaryCursor);
        editor.pushUndoStop();
        editor.executeEdits(this.id, edits, endCursorState);
        editor.pushUndoStop();
    }
    constructor(){
        super({
            id: "editor.action.joinLines",
            label: $58WHl.localize("lines.joinLines", "Join Lines"),
            alias: "Join Lines",
            precondition: (0, $bdLce.EditorContextKeys).writable,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: 0,
                mac: {
                    primary: 296 /* KeyJ */ 
                },
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
class $285d07c988e4f6bb$export$30796fb0d031fb22 extends (0, $gGOeQ.EditorAction) {
    run(_accessor, editor) {
        let selections = editor.getSelections();
        if (selections === null) return;
        let model = editor.getModel();
        if (model === null) return;
        let commands = [];
        for(let i = 0, len = selections.length; i < len; i++){
            let selection = selections[i];
            if (!selection.isEmpty()) continue;
            let cursor = selection.getStartPosition();
            let maxColumn = model.getLineMaxColumn(cursor.lineNumber);
            if (cursor.column >= maxColumn) {
                if (cursor.lineNumber === model.getLineCount()) continue;
                // The cursor is at the end of current line and current line is not empty
                // then we transpose the character before the cursor and the line break if there is any following line.
                let deleteSelection = new (0, $3HpR4.Range)(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber + 1, 1);
                let chars = model.getValueInRange(deleteSelection).split("").reverse().join("");
                commands.push(new (0, $8iWNC.ReplaceCommand)(new (0, $cz0c7.Selection)(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber + 1, 1), chars));
            } else {
                let deleteSelection1 = new (0, $3HpR4.Range)(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber, cursor.column + 1);
                let chars1 = model.getValueInRange(deleteSelection1).split("").reverse().join("");
                commands.push(new (0, $8iWNC.ReplaceCommandThatPreservesSelection)(deleteSelection1, chars1, new (0, $cz0c7.Selection)(cursor.lineNumber, cursor.column + 1, cursor.lineNumber, cursor.column + 1)));
            }
        }
        editor.pushUndoStop();
        editor.executeCommands(this.id, commands);
        editor.pushUndoStop();
    }
    constructor(){
        super({
            id: "editor.action.transpose",
            label: $58WHl.localize("editor.transpose", "Transpose characters around the cursor"),
            alias: "Transpose characters around the cursor",
            precondition: (0, $bdLce.EditorContextKeys).writable
        });
    }
}
class $285d07c988e4f6bb$export$4aaeafa0e9d33d8d extends (0, $gGOeQ.EditorAction) {
    run(_accessor, editor) {
        const selections = editor.getSelections();
        if (selections === null) return;
        const model = editor.getModel();
        if (model === null) return;
        const wordSeparators = editor.getOption(116 /* wordSeparators */ );
        const textEdits = [];
        for (const selection of selections)if (selection.isEmpty()) {
            const cursor = selection.getStartPosition();
            const word = editor.getConfiguredWordAtPosition(cursor);
            if (!word) continue;
            const wordRange = new (0, $3HpR4.Range)(cursor.lineNumber, word.startColumn, cursor.lineNumber, word.endColumn);
            const text = model.getValueInRange(wordRange);
            textEdits.push((0, $13fPA.EditOperation).replace(wordRange, this._modifyText(text, wordSeparators)));
        } else {
            const text1 = model.getValueInRange(selection);
            textEdits.push((0, $13fPA.EditOperation).replace(selection, this._modifyText(text1, wordSeparators)));
        }
        editor.pushUndoStop();
        editor.executeEdits(this.id, textEdits);
        editor.pushUndoStop();
    }
}
class $285d07c988e4f6bb$export$952432f59b47d01d extends $285d07c988e4f6bb$export$4aaeafa0e9d33d8d {
    _modifyText(text, wordSeparators) {
        return text.toLocaleUpperCase();
    }
    constructor(){
        super({
            id: "editor.action.transformToUppercase",
            label: $58WHl.localize("editor.transformToUppercase", "Transform to Uppercase"),
            alias: "Transform to Uppercase",
            precondition: (0, $bdLce.EditorContextKeys).writable
        });
    }
}
class $285d07c988e4f6bb$export$f2f207fda3be448e extends $285d07c988e4f6bb$export$4aaeafa0e9d33d8d {
    _modifyText(text, wordSeparators) {
        return text.toLocaleLowerCase();
    }
    constructor(){
        super({
            id: "editor.action.transformToLowercase",
            label: $58WHl.localize("editor.transformToLowercase", "Transform to Lowercase"),
            alias: "Transform to Lowercase",
            precondition: (0, $bdLce.EditorContextKeys).writable
        });
    }
}
class $285d07c988e4f6bb$var$BackwardsCompatibleRegExp {
    get() {
        if (!this._evaluated) {
            this._evaluated = true;
            try {
                this._actual = new RegExp(this._pattern, this._flags);
            } catch (err) {
            // this browser does not support this regular expression
            }
        }
        return this._actual;
    }
    isSupported() {
        return this.get() !== null;
    }
    constructor(_pattern, _flags){
        this._pattern = _pattern;
        this._flags = _flags;
        this._actual = null;
        this._evaluated = false;
    }
}
class $285d07c988e4f6bb$export$9e3e216230e0d173 extends $285d07c988e4f6bb$export$4aaeafa0e9d33d8d {
    _modifyText(text, wordSeparators) {
        const titleBoundary = $285d07c988e4f6bb$export$9e3e216230e0d173.titleBoundary.get();
        if (!titleBoundary) // cannot support this
        return text;
        return text.toLocaleLowerCase().replace(titleBoundary, (b)=>b.toLocaleUpperCase());
    }
    constructor(){
        super({
            id: "editor.action.transformToTitlecase",
            label: $58WHl.localize("editor.transformToTitlecase", "Transform to Title Case"),
            alias: "Transform to Title Case",
            precondition: (0, $bdLce.EditorContextKeys).writable
        });
    }
}
$285d07c988e4f6bb$export$9e3e216230e0d173.titleBoundary = new $285d07c988e4f6bb$var$BackwardsCompatibleRegExp("(^|[^\\p{L}\\p{N}']|((^|\\P{L})'))\\p{L}", "gmu");
class $285d07c988e4f6bb$export$120f47daedc39d47 extends $285d07c988e4f6bb$export$4aaeafa0e9d33d8d {
    _modifyText(text, wordSeparators) {
        const caseBoundary = $285d07c988e4f6bb$export$120f47daedc39d47.caseBoundary.get();
        const singleLetters = $285d07c988e4f6bb$export$120f47daedc39d47.singleLetters.get();
        if (!caseBoundary || !singleLetters) // cannot support this
        return text;
        return text.replace(caseBoundary, "$1_$2").replace(singleLetters, "$1_$2$3").toLocaleLowerCase();
    }
    constructor(){
        super({
            id: "editor.action.transformToSnakecase",
            label: $58WHl.localize("editor.transformToSnakecase", "Transform to Snake Case"),
            alias: "Transform to Snake Case",
            precondition: (0, $bdLce.EditorContextKeys).writable
        });
    }
}
$285d07c988e4f6bb$export$120f47daedc39d47.caseBoundary = new $285d07c988e4f6bb$var$BackwardsCompatibleRegExp("(\\p{Ll})(\\p{Lu})", "gmu");
$285d07c988e4f6bb$export$120f47daedc39d47.singleLetters = new $285d07c988e4f6bb$var$BackwardsCompatibleRegExp("(\\p{Lu}|\\p{N})(\\p{Lu})(\\p{Ll})", "gmu");
(0, $gGOeQ.registerEditorAction)($285d07c988e4f6bb$var$CopyLinesUpAction);
(0, $gGOeQ.registerEditorAction)($285d07c988e4f6bb$var$CopyLinesDownAction);
(0, $gGOeQ.registerEditorAction)($285d07c988e4f6bb$export$3cbca8715f2928a3);
(0, $gGOeQ.registerEditorAction)($285d07c988e4f6bb$var$MoveLinesUpAction);
(0, $gGOeQ.registerEditorAction)($285d07c988e4f6bb$var$MoveLinesDownAction);
(0, $gGOeQ.registerEditorAction)($285d07c988e4f6bb$export$ca6d6f27cd0b1546);
(0, $gGOeQ.registerEditorAction)($285d07c988e4f6bb$export$f51f7f4d11319ba2);
(0, $gGOeQ.registerEditorAction)($285d07c988e4f6bb$export$16d0def50a9fdfd0);
(0, $gGOeQ.registerEditorAction)($285d07c988e4f6bb$export$7c2a5fb1bcba21da);
(0, $gGOeQ.registerEditorAction)($285d07c988e4f6bb$export$a325764c76fc5489);
(0, $gGOeQ.registerEditorAction)($285d07c988e4f6bb$export$b16686fff98be8f7);
(0, $gGOeQ.registerEditorAction)($285d07c988e4f6bb$var$OutdentLinesAction);
(0, $gGOeQ.registerEditorAction)($285d07c988e4f6bb$export$db5751c0accc4bcc);
(0, $gGOeQ.registerEditorAction)($285d07c988e4f6bb$export$2dd5d09a007eecf5);
(0, $gGOeQ.registerEditorAction)($285d07c988e4f6bb$export$9a3834b09b6983ed);
(0, $gGOeQ.registerEditorAction)($285d07c988e4f6bb$export$698902706bc70cc6);
(0, $gGOeQ.registerEditorAction)($285d07c988e4f6bb$export$dd737e2c91d24d1a);
(0, $gGOeQ.registerEditorAction)($285d07c988e4f6bb$export$30796fb0d031fb22);
(0, $gGOeQ.registerEditorAction)($285d07c988e4f6bb$export$952432f59b47d01d);
(0, $gGOeQ.registerEditorAction)($285d07c988e4f6bb$export$f2f207fda3be448e);
if ($285d07c988e4f6bb$export$120f47daedc39d47.caseBoundary.isSupported() && $285d07c988e4f6bb$export$120f47daedc39d47.singleLetters.isSupported()) (0, $gGOeQ.registerEditorAction)($285d07c988e4f6bb$export$120f47daedc39d47);
if ($285d07c988e4f6bb$export$9e3e216230e0d173.titleBoundary.isSupported()) (0, $gGOeQ.registerEditorAction)($285d07c988e4f6bb$export$9e3e216230e0d173);


var $b4c53f088b628dd2$exports = {};

var $4xCD7 = parcelRequire("4xCD7");

var $eFOsn = parcelRequire("eFOsn");

var $gnEXx = parcelRequire("gnEXx");

var $6yffc = parcelRequire("6yffc");

var $g0782 = parcelRequire("g0782");

var $atiRx = parcelRequire("atiRx");

var $9TEeL = parcelRequire("9TEeL");

var $7K96x = parcelRequire("7K96x");

var $gGOeQ = parcelRequire("gGOeQ");

var $aXAVz = parcelRequire("aXAVz");

var $8qXsZ = parcelRequire("8qXsZ");

var $3HpR4 = parcelRequire("3HpR4");

var $bdLce = parcelRequire("bdLce");

var $g88WD = parcelRequire("g88WD");

var $eKhCe = parcelRequire("eKhCe");

var $9wt9e = parcelRequire("9wt9e");

var $58WHl = parcelRequire("58WHl");

var $bRtox = parcelRequire("bRtox");

var $3XYy8 = parcelRequire("3XYy8");

var $fUTzO = parcelRequire("fUTzO");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $b4c53f088b628dd2$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $b4c53f088b628dd2$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var $b4c53f088b628dd2$var$__awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const $b4c53f088b628dd2$export$d3411856fe5ceb08 = new (0, $bRtox.RawContextKey)("LinkedEditingInputVisible", false);
const $b4c53f088b628dd2$var$DECORATION_CLASS_NAME = "linked-editing-decoration";
let $b4c53f088b628dd2$export$6a78bc49d64aa850 = class LinkedEditingContribution extends (0, $atiRx.Disposable) {
    static get(editor) {
        return editor.getContribution(LinkedEditingContribution.ID);
    }
    reinitialize(forceRefresh) {
        const model = this._editor.getModel();
        const isEnabled = model !== null && (this._editor.getOption(61 /* linkedEditing */ ) || this._editor.getOption(81 /* renameOnType */ )) && (0, $eKhCe.LinkedEditingRangeProviderRegistry).has(model);
        if (isEnabled === this._enabled && !forceRefresh) return;
        this._enabled = isEnabled;
        this.clearRanges();
        this._localToDispose.clear();
        if (!isEnabled || model === null) return;
        this._languageWordPattern = (0, $9wt9e.LanguageConfigurationRegistry).getWordDefinition(model.getLanguageId());
        this._localToDispose.add(model.onDidChangeLanguageConfiguration(()=>{
            this._languageWordPattern = (0, $9wt9e.LanguageConfigurationRegistry).getWordDefinition(model.getLanguageId());
        }));
        const rangeUpdateScheduler = new (0, $eFOsn.Delayer)(this._debounceDuration);
        const triggerRangeUpdate = ()=>{
            this._rangeUpdateTriggerPromise = rangeUpdateScheduler.trigger(()=>this.updateRanges(), this._debounceDuration);
        };
        const rangeSyncScheduler = new (0, $eFOsn.Delayer)(0);
        const triggerRangeSync = (decorations)=>{
            this._rangeSyncTriggerPromise = rangeSyncScheduler.trigger(()=>this._syncRanges(decorations));
        };
        this._localToDispose.add(this._editor.onDidChangeCursorPosition(()=>{
            triggerRangeUpdate();
        }));
        this._localToDispose.add(this._editor.onDidChangeModelContent((e)=>{
            if (!this._ignoreChangeEvent) {
                if (this._currentDecorations.length > 0) {
                    const referenceRange = model.getDecorationRange(this._currentDecorations[0]);
                    if (referenceRange && e.changes.every((c)=>referenceRange.intersectRanges(c.range))) {
                        triggerRangeSync(this._currentDecorations);
                        return;
                    }
                }
            }
            triggerRangeUpdate();
        }));
        this._localToDispose.add({
            dispose: ()=>{
                rangeUpdateScheduler.cancel();
                rangeSyncScheduler.cancel();
            }
        });
        this.updateRanges();
    }
    _syncRanges(decorations) {
        // dalayed invocation, make sure we're still on
        if (!this._editor.hasModel() || decorations !== this._currentDecorations || decorations.length === 0) // nothing to do
        return;
        const model = this._editor.getModel();
        const referenceRange = model.getDecorationRange(decorations[0]);
        if (!referenceRange || referenceRange.startLineNumber !== referenceRange.endLineNumber) return this.clearRanges();
        const referenceValue = model.getValueInRange(referenceRange);
        if (this._currentWordPattern) {
            const match = referenceValue.match(this._currentWordPattern);
            const matchLength = match ? match[0].length : 0;
            if (matchLength !== referenceValue.length) return this.clearRanges();
        }
        let edits = [];
        for(let i = 1, len = decorations.length; i < len; i++){
            const mirrorRange = model.getDecorationRange(decorations[i]);
            if (!mirrorRange) continue;
            if (mirrorRange.startLineNumber !== mirrorRange.endLineNumber) edits.push({
                range: mirrorRange,
                text: referenceValue
            });
            else {
                let oldValue = model.getValueInRange(mirrorRange);
                let newValue = referenceValue;
                let rangeStartColumn = mirrorRange.startColumn;
                let rangeEndColumn = mirrorRange.endColumn;
                const commonPrefixLength = $9TEeL.commonPrefixLength(oldValue, newValue);
                rangeStartColumn += commonPrefixLength;
                oldValue = oldValue.substr(commonPrefixLength);
                newValue = newValue.substr(commonPrefixLength);
                const commonSuffixLength = $9TEeL.commonSuffixLength(oldValue, newValue);
                rangeEndColumn -= commonSuffixLength;
                oldValue = oldValue.substr(0, oldValue.length - commonSuffixLength);
                newValue = newValue.substr(0, newValue.length - commonSuffixLength);
                if (rangeStartColumn !== rangeEndColumn || newValue.length !== 0) edits.push({
                    range: new (0, $3HpR4.Range)(mirrorRange.startLineNumber, rangeStartColumn, mirrorRange.endLineNumber, rangeEndColumn),
                    text: newValue
                });
            }
        }
        if (edits.length === 0) return;
        try {
            this._editor.popUndoStop();
            this._ignoreChangeEvent = true;
            const prevEditOperationType = this._editor._getViewModel().getPrevEditOperationType();
            this._editor.executeEdits("linkedEditing", edits);
            this._editor._getViewModel().setPrevEditOperationType(prevEditOperationType);
        } finally{
            this._ignoreChangeEvent = false;
        }
    }
    dispose() {
        this.clearRanges();
        super.dispose();
    }
    clearRanges() {
        this._visibleContextKey.set(false);
        this._currentDecorations = this._editor.deltaDecorations(this._currentDecorations, []);
        if (this._currentRequest) {
            this._currentRequest.cancel();
            this._currentRequest = null;
            this._currentRequestPosition = null;
        }
    }
    updateRanges(force = false) {
        return $b4c53f088b628dd2$var$__awaiter(this, void 0, void 0, function*() {
            if (!this._editor.hasModel()) {
                this.clearRanges();
                return;
            }
            const position = this._editor.getPosition();
            if (!this._enabled && !force || this._editor.getSelections().length > 1) {
                // disabled or multicursor
                this.clearRanges();
                return;
            }
            const model = this._editor.getModel();
            const modelVersionId = model.getVersionId();
            if (this._currentRequestPosition && this._currentRequestModelVersion === modelVersionId) {
                if (position.equals(this._currentRequestPosition)) return; // same position
                if (this._currentDecorations && this._currentDecorations.length > 0) {
                    const range = model.getDecorationRange(this._currentDecorations[0]);
                    if (range && range.containsPosition(position)) return; // just moving inside the existing primary range
                }
            }
            this._currentRequestPosition = position;
            this._currentRequestModelVersion = modelVersionId;
            const request = (0, $eFOsn.createCancelablePromise)((token)=>$b4c53f088b628dd2$var$__awaiter(this, void 0, void 0, function*() {
                    try {
                        const response = yield $b4c53f088b628dd2$var$getLinkedEditingRanges(model, position, token);
                        if (request !== this._currentRequest) return;
                        this._currentRequest = null;
                        if (modelVersionId !== model.getVersionId()) return;
                        let ranges = [];
                        if (response === null || response === void 0 ? void 0 : response.ranges) ranges = response.ranges;
                        this._currentWordPattern = (response === null || response === void 0 ? void 0 : response.wordPattern) || this._languageWordPattern;
                        let foundReferenceRange = false;
                        for(let i = 0, len = ranges.length; i < len; i++)if ((0, $3HpR4.Range).containsPosition(ranges[i], position)) {
                            foundReferenceRange = true;
                            if (i !== 0) {
                                const referenceRange = ranges[i];
                                ranges.splice(i, 1);
                                ranges.unshift(referenceRange);
                            }
                            break;
                        }
                        if (!foundReferenceRange) {
                            // Cannot do linked editing if the ranges are not where the cursor is...
                            this.clearRanges();
                            return;
                        }
                        const decorations = ranges.map((range)=>({
                                range: range,
                                options: LinkedEditingContribution.DECORATION
                            }));
                        this._visibleContextKey.set(true);
                        this._currentDecorations = this._editor.deltaDecorations(this._currentDecorations, decorations);
                    } catch (err) {
                        if (!(0, $g0782.isPromiseCanceledError)(err)) (0, $g0782.onUnexpectedError)(err);
                        if (this._currentRequest === request || !this._currentRequest) // stop if we are still the latest request
                        this.clearRanges();
                    }
                }));
            this._currentRequest = request;
            return request;
        });
    }
    constructor(editor, contextKeyService){
        super();
        this._debounceDuration = 200;
        this._localToDispose = this._register(new (0, $atiRx.DisposableStore)());
        this._editor = editor;
        this._enabled = false;
        this._visibleContextKey = $b4c53f088b628dd2$export$d3411856fe5ceb08.bindTo(contextKeyService);
        this._currentDecorations = [];
        this._languageWordPattern = null;
        this._currentWordPattern = null;
        this._ignoreChangeEvent = false;
        this._localToDispose = this._register(new (0, $atiRx.DisposableStore)());
        this._rangeUpdateTriggerPromise = null;
        this._rangeSyncTriggerPromise = null;
        this._currentRequest = null;
        this._currentRequestPosition = null;
        this._currentRequestModelVersion = null;
        this._register(this._editor.onDidChangeModel(()=>this.reinitialize(true)));
        this._register(this._editor.onDidChangeConfiguration((e)=>{
            if (e.hasChanged(61 /* linkedEditing */ ) || e.hasChanged(81 /* renameOnType */ )) this.reinitialize(false);
        }));
        this._register((0, $eKhCe.LinkedEditingRangeProviderRegistry).onDidChange(()=>this.reinitialize(false)));
        this._register(this._editor.onDidChangeModelLanguage(()=>this.reinitialize(true)));
        this.reinitialize(true);
    }
};
$b4c53f088b628dd2$export$6a78bc49d64aa850.ID = "editor.contrib.linkedEditing";
$b4c53f088b628dd2$export$6a78bc49d64aa850.DECORATION = (0, $g88WD.ModelDecorationOptions).register({
    description: "linked-editing",
    stickiness: 0 /* AlwaysGrowsWhenTypingAtEdges */ ,
    className: $b4c53f088b628dd2$var$DECORATION_CLASS_NAME
});
$b4c53f088b628dd2$export$6a78bc49d64aa850 = $b4c53f088b628dd2$var$__decorate([
    $b4c53f088b628dd2$var$__param(1, (0, $bRtox.IContextKeyService))
], $b4c53f088b628dd2$export$6a78bc49d64aa850);
class $b4c53f088b628dd2$export$3ac885947f0e79d7 extends (0, $gGOeQ.EditorAction) {
    runCommand(accessor, args) {
        const editorService = accessor.get((0, $aXAVz.ICodeEditorService));
        const [uri, pos] = Array.isArray(args) && args || [
            undefined,
            undefined
        ];
        if ((0, $7K96x.URI).isUri(uri) && (0, $8qXsZ.Position).isIPosition(pos)) return editorService.openCodeEditor({
            resource: uri
        }, editorService.getActiveCodeEditor()).then((editor)=>{
            if (!editor) return;
            editor.setPosition(pos);
            editor.invokeWithinContext((accessor)=>{
                this.reportTelemetry(accessor, editor);
                return this.run(accessor, editor);
            });
        }, (0, $g0782.onUnexpectedError));
        return super.runCommand(accessor, args);
    }
    run(_accessor, editor) {
        const controller = $b4c53f088b628dd2$export$6a78bc49d64aa850.get(editor);
        if (controller) return Promise.resolve(controller.updateRanges(true));
        return Promise.resolve();
    }
    constructor(){
        super({
            id: "editor.action.linkedEditing",
            label: $58WHl.localize("linkedEditing.label", "Start Linked Editing"),
            alias: "Start Linked Editing",
            precondition: (0, $bRtox.ContextKeyExpr).and((0, $bdLce.EditorContextKeys).writable, (0, $bdLce.EditorContextKeys).hasRenameProvider),
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: 3132 /* F2 */ ,
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
const $b4c53f088b628dd2$var$LinkedEditingCommand = (0, $gGOeQ.EditorCommand).bindToContribution($b4c53f088b628dd2$export$6a78bc49d64aa850.get);
(0, $gGOeQ.registerEditorCommand)(new $b4c53f088b628dd2$var$LinkedEditingCommand({
    id: "cancelLinkedEditingInput",
    precondition: $b4c53f088b628dd2$export$d3411856fe5ceb08,
    handler: (x)=>x.clearRanges(),
    kbOpts: {
        kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
        weight: 199,
        primary: 9 /* Escape */ ,
        secondary: [
            1033 /* Escape */ 
        ]
    }
}));
function $b4c53f088b628dd2$var$getLinkedEditingRanges(model, position, token) {
    const orderedByScore = (0, $eKhCe.LinkedEditingRangeProviderRegistry).ordered(model);
    // in order of score ask the linked editing range provider
    // until someone response with a good result
    // (good = not null)
    return (0, $eFOsn.first)(orderedByScore.map((provider)=>()=>$b4c53f088b628dd2$var$__awaiter(this, void 0, void 0, function*() {
                try {
                    return yield provider.provideLinkedEditingRanges(model, position, token);
                } catch (e) {
                    (0, $g0782.onUnexpectedExternalError)(e);
                    return undefined;
                }
            })), (result)=>!!result && $4xCD7.isNonEmptyArray(result === null || result === void 0 ? void 0 : result.ranges));
}
const $b4c53f088b628dd2$export$f1351e4f55b397f4 = (0, $3XYy8.registerColor)("editor.linkedEditingBackground", {
    dark: (0, $6yffc.Color).fromHex("#f00").transparent(0.3),
    light: (0, $6yffc.Color).fromHex("#f00").transparent(0.3),
    hc: (0, $6yffc.Color).fromHex("#f00").transparent(0.3)
}, $58WHl.localize("editorLinkedEditingBackground", "Background color when the editor auto renames on type."));
(0, $fUTzO.registerThemingParticipant)((theme, collector)=>{
    const editorLinkedEditingBackgroundColor = theme.getColor($b4c53f088b628dd2$export$f1351e4f55b397f4);
    if (editorLinkedEditingBackgroundColor) collector.addRule(`.monaco-editor .${$b4c53f088b628dd2$var$DECORATION_CLASS_NAME} { background: ${editorLinkedEditingBackgroundColor}; border-left-color: ${editorLinkedEditingBackgroundColor}; }`);
});
(0, $gGOeQ.registerModelAndPositionCommand)("_executeLinkedEditingProvider", (model, position)=>$b4c53f088b628dd2$var$getLinkedEditingRanges(model, position, (0, $gnEXx.CancellationToken).None));
(0, $gGOeQ.registerEditorContribution)($b4c53f088b628dd2$export$6a78bc49d64aa850.ID, $b4c53f088b628dd2$export$6a78bc49d64aa850);
(0, $gGOeQ.registerEditorAction)($b4c53f088b628dd2$export$3ac885947f0e79d7);


var $5b140407146e286e$exports = {};

var $eFOsn = parcelRequire("eFOsn");

var $gnEXx = parcelRequire("gnEXx");

var $g0782 = parcelRequire("g0782");

var $chTln = parcelRequire("chTln");

var $atiRx = parcelRequire("atiRx");

var $fDjBp = parcelRequire("fDjBp");

var $1d81R = parcelRequire("1d81R");

var $aMhG1 = parcelRequire("aMhG1");

var $7K96x = parcelRequire("7K96x");


var $gGOeQ = parcelRequire("gGOeQ");

var $g88WD = parcelRequire("g88WD");

var $eKhCe = parcelRequire("eKhCe");

var $a31648fc5b0eb19f$exports = {};

$parcel$export($a31648fc5b0eb19f$exports, "getLinks", function () { return $a31648fc5b0eb19f$export$8054dcb2b42da45c; }, function (v) { return $a31648fc5b0eb19f$export$8054dcb2b42da45c = v; });

var $4xCD7 = parcelRequire("4xCD7");

var $gnEXx = parcelRequire("gnEXx");

var $g0782 = parcelRequire("g0782");

var $atiRx = parcelRequire("atiRx");

var $3ICxR = parcelRequire("3ICxR");

var $7K96x = parcelRequire("7K96x");

var $3HpR4 = parcelRequire("3HpR4");

var $eKhCe = parcelRequire("eKhCe");

var $dwrPd = parcelRequire("dwrPd");

var $fAXtX = parcelRequire("fAXtX");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $a31648fc5b0eb19f$var$__awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class $a31648fc5b0eb19f$export$a6c7ac8248d6e38a {
    toJSON() {
        return {
            range: this.range,
            url: this.url,
            tooltip: this.tooltip
        };
    }
    get range() {
        return this._link.range;
    }
    get url() {
        return this._link.url;
    }
    get tooltip() {
        return this._link.tooltip;
    }
    resolve(token) {
        return $a31648fc5b0eb19f$var$__awaiter(this, void 0, void 0, function*() {
            if (this._link.url) return this._link.url;
            if (typeof this._provider.resolveLink === "function") return Promise.resolve(this._provider.resolveLink(this._link, token)).then((value)=>{
                this._link = value || this._link;
                if (this._link.url) // recurse
                return this.resolve(token);
                return Promise.reject(new Error("missing"));
            });
            return Promise.reject(new Error("missing"));
        });
    }
    constructor(link, provider){
        this._link = link;
        this._provider = provider;
    }
}
class $a31648fc5b0eb19f$export$adce7cd866adc18b {
    dispose() {
        this._disposables.dispose();
        this.links.length = 0;
    }
    static _union(oldLinks, newLinks) {
        // reunite oldLinks with newLinks and remove duplicates
        let result = [];
        let oldIndex;
        let oldLen;
        let newIndex;
        let newLen;
        for(oldIndex = 0, newIndex = 0, oldLen = oldLinks.length, newLen = newLinks.length; oldIndex < oldLen && newIndex < newLen;){
            const oldLink = oldLinks[oldIndex];
            const newLink = newLinks[newIndex];
            if ((0, $3HpR4.Range).areIntersectingOrTouching(oldLink.range, newLink.range)) {
                // Remove the oldLink
                oldIndex++;
                continue;
            }
            const comparisonResult = (0, $3HpR4.Range).compareRangesUsingStarts(oldLink.range, newLink.range);
            if (comparisonResult < 0) {
                // oldLink is before
                result.push(oldLink);
                oldIndex++;
            } else {
                // newLink is before
                result.push(newLink);
                newIndex++;
            }
        }
        for(; oldIndex < oldLen; oldIndex++)result.push(oldLinks[oldIndex]);
        for(; newIndex < newLen; newIndex++)result.push(newLinks[newIndex]);
        return result;
    }
    constructor(tuples){
        this._disposables = new (0, $atiRx.DisposableStore)();
        let links = [];
        for (const [list, provider] of tuples){
            // merge all links
            const newLinks = list.links.map((link)=>new $a31648fc5b0eb19f$export$a6c7ac8248d6e38a(link, provider));
            links = $a31648fc5b0eb19f$export$adce7cd866adc18b._union(links, newLinks);
            // register disposables
            if ((0, $atiRx.isDisposable)(list)) this._disposables.add(list);
        }
        this.links = links;
    }
}
function $a31648fc5b0eb19f$export$8054dcb2b42da45c(model, token) {
    const lists = [];
    // ask all providers for links in parallel
    const promises = (0, $eKhCe.LinkProviderRegistry).ordered(model).reverse().map((provider, i)=>{
        return Promise.resolve(provider.provideLinks(model, token)).then((result)=>{
            if (result) lists[i] = [
                result,
                provider
            ];
        }, (0, $g0782.onUnexpectedExternalError));
    });
    return Promise.all(promises).then(()=>{
        const result = new $a31648fc5b0eb19f$export$adce7cd866adc18b((0, $4xCD7.coalesce)(lists));
        if (!token.isCancellationRequested) return result;
        result.dispose();
        return new $a31648fc5b0eb19f$export$adce7cd866adc18b([]);
    });
}
(0, $fAXtX.CommandsRegistry).registerCommand("_executeLinkProvider", (accessor, ...args)=>$a31648fc5b0eb19f$var$__awaiter(void 0, void 0, void 0, function*() {
        let [uri, resolveCount] = args;
        (0, $3ICxR.assertType)(uri instanceof (0, $7K96x.URI));
        if (typeof resolveCount !== "number") resolveCount = 0;
        const model = accessor.get((0, $dwrPd.IModelService)).getModel(uri);
        if (!model) return [];
        const list = yield $a31648fc5b0eb19f$export$8054dcb2b42da45c(model, (0, $gnEXx.CancellationToken).None);
        if (!list) return [];
        // resolve links
        for(let i = 0; i < Math.min(resolveCount, list.links.length); i++)yield list.links[i].resolve((0, $gnEXx.CancellationToken).None);
        const result = list.links.slice(0);
        list.dispose();
        return result;
    }));



var $58WHl = parcelRequire("58WHl");

var $dgZ0t = parcelRequire("dgZ0t");

var $9KRmt = parcelRequire("9KRmt");

var $3XYy8 = parcelRequire("3XYy8");

var $fUTzO = parcelRequire("fUTzO");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $5b140407146e286e$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $5b140407146e286e$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var $5b140407146e286e$var$__awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
function $5b140407146e286e$var$getHoverMessage(link, useMetaKey) {
    const executeCmd = link.url && /^command:/i.test(link.url.toString());
    const label = link.tooltip ? link.tooltip : executeCmd ? $58WHl.localize("links.navigate.executeCmd", "Execute command") : $58WHl.localize("links.navigate.follow", "Follow link");
    const kb = useMetaKey ? $1d81R.isMacintosh ? $58WHl.localize("links.navigate.kb.meta.mac", "cmd + click") : $58WHl.localize("links.navigate.kb.meta", "ctrl + click") : $1d81R.isMacintosh ? $58WHl.localize("links.navigate.kb.alt.mac", "option + click") : $58WHl.localize("links.navigate.kb.alt", "alt + click");
    if (link.url) {
        let nativeLabel = "";
        if (/^command:/i.test(link.url.toString())) {
            // Don't show complete command arguments in the native tooltip
            const match = link.url.toString().match(/^command:([^?#]+)/);
            if (match) {
                const commandId = match[1];
                const nativeLabelText = $58WHl.localize("tooltip.explanation", "Execute command {0}", commandId);
                nativeLabel = ` "${nativeLabelText}"`;
            }
        }
        const hoverMessage = new (0, $chTln.MarkdownString)("", true).appendMarkdown(`[${label}](${link.url.toString(true).replace(/ /g, "%20")}${nativeLabel}) (${kb})`);
        return hoverMessage;
    } else return new (0, $chTln.MarkdownString)().appendText(`${label} (${kb})`);
}
const $5b140407146e286e$var$decoration = {
    general: (0, $g88WD.ModelDecorationOptions).register({
        description: "detected-link",
        stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ ,
        collapseOnReplaceEdit: true,
        inlineClassName: "detected-link"
    }),
    active: (0, $g88WD.ModelDecorationOptions).register({
        description: "detected-link-active",
        stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ ,
        collapseOnReplaceEdit: true,
        inlineClassName: "detected-link-active"
    })
};
class $5b140407146e286e$var$LinkOccurrence {
    static decoration(link, useMetaKey) {
        return {
            range: link.range,
            options: $5b140407146e286e$var$LinkOccurrence._getOptions(link, useMetaKey, false)
        };
    }
    static _getOptions(link, useMetaKey, isActive) {
        const options = Object.assign({}, isActive ? $5b140407146e286e$var$decoration.active : $5b140407146e286e$var$decoration.general);
        options.hoverMessage = $5b140407146e286e$var$getHoverMessage(link, useMetaKey);
        return options;
    }
    activate(changeAccessor, useMetaKey) {
        changeAccessor.changeDecorationOptions(this.decorationId, $5b140407146e286e$var$LinkOccurrence._getOptions(this.link, useMetaKey, true));
    }
    deactivate(changeAccessor, useMetaKey) {
        changeAccessor.changeDecorationOptions(this.decorationId, $5b140407146e286e$var$LinkOccurrence._getOptions(this.link, useMetaKey, false));
    }
    constructor(link, decorationId){
        this.link = link;
        this.decorationId = decorationId;
    }
}
let $5b140407146e286e$export$e173163e3618783f = class LinkDetector {
    static get(editor) {
        return editor.getContribution(LinkDetector.ID);
    }
    onModelChanged() {
        this.currentOccurrences = {};
        this.activeLinkDecorationId = null;
        this.stop();
        this.beginCompute();
    }
    onModelModeChanged() {
        this.stop();
        this.beginCompute();
    }
    onChange() {
        this.timeout.setIfNotSet(()=>this.beginCompute(), LinkDetector.RECOMPUTE_TIME);
    }
    beginCompute() {
        return $5b140407146e286e$var$__awaiter(this, void 0, void 0, function*() {
            if (!this.editor.hasModel() || !this.enabled) return;
            const model = this.editor.getModel();
            if (!(0, $eKhCe.LinkProviderRegistry).has(model)) return;
            if (this.activeLinksList) {
                this.activeLinksList.dispose();
                this.activeLinksList = null;
            }
            this.computePromise = $eFOsn.createCancelablePromise((token)=>(0, $a31648fc5b0eb19f$exports.getLinks)(model, token));
            try {
                this.activeLinksList = yield this.computePromise;
                this.updateDecorations(this.activeLinksList.links);
            } catch (err) {
                (0, $g0782.onUnexpectedError)(err);
            } finally{
                this.computePromise = null;
            }
        });
    }
    updateDecorations(links) {
        const useMetaKey = this.editor.getOption(69 /* multiCursorModifier */ ) === "altKey";
        let oldDecorations = [];
        let keys = Object.keys(this.currentOccurrences);
        for(let i = 0, len = keys.length; i < len; i++){
            let decorationId = keys[i];
            let occurance = this.currentOccurrences[decorationId];
            oldDecorations.push(occurance.decorationId);
        }
        let newDecorations = [];
        if (links) // Not sure why this is sometimes null
        for (const link of links)newDecorations.push($5b140407146e286e$var$LinkOccurrence.decoration(link, useMetaKey));
        let decorations = this.editor.deltaDecorations(oldDecorations, newDecorations);
        this.currentOccurrences = {};
        this.activeLinkDecorationId = null;
        for(let i1 = 0, len1 = decorations.length; i1 < len1; i1++){
            let occurance1 = new $5b140407146e286e$var$LinkOccurrence(links[i1], decorations[i1]);
            this.currentOccurrences[occurance1.decorationId] = occurance1;
        }
    }
    _onEditorMouseMove(mouseEvent, withKey) {
        const useMetaKey = this.editor.getOption(69 /* multiCursorModifier */ ) === "altKey";
        if (this.isEnabled(mouseEvent, withKey)) {
            this.cleanUpActiveLinkDecoration(); // always remove previous link decoration as their can only be one
            const occurrence = this.getLinkOccurrence(mouseEvent.target.position);
            if (occurrence) this.editor.changeDecorations((changeAccessor)=>{
                occurrence.activate(changeAccessor, useMetaKey);
                this.activeLinkDecorationId = occurrence.decorationId;
            });
        } else this.cleanUpActiveLinkDecoration();
    }
    cleanUpActiveLinkDecoration() {
        const useMetaKey = this.editor.getOption(69 /* multiCursorModifier */ ) === "altKey";
        if (this.activeLinkDecorationId) {
            const occurrence = this.currentOccurrences[this.activeLinkDecorationId];
            if (occurrence) this.editor.changeDecorations((changeAccessor)=>{
                occurrence.deactivate(changeAccessor, useMetaKey);
            });
            this.activeLinkDecorationId = null;
        }
    }
    onEditorMouseUp(mouseEvent) {
        if (!this.isEnabled(mouseEvent)) return;
        const occurrence = this.getLinkOccurrence(mouseEvent.target.position);
        if (!occurrence) return;
        this.openLinkOccurrence(occurrence, mouseEvent.hasSideBySideModifier, true);
    }
    openLinkOccurrence(occurrence, openToSide, fromUserGesture = false) {
        if (!this.openerService) return;
        const { link: link  } = occurrence;
        link.resolve((0, $gnEXx.CancellationToken).None).then((uri)=>{
            // Support for relative file URIs of the shape file://./relativeFile.txt or file:///./relativeFile.txt
            if (typeof uri === "string" && this.editor.hasModel()) {
                const modelUri = this.editor.getModel().uri;
                if (modelUri.scheme === (0, $fDjBp.Schemas).file && uri.startsWith(`${(0, $fDjBp.Schemas).file}:`)) {
                    const parsedUri = (0, $7K96x.URI).parse(uri);
                    if (parsedUri.scheme === (0, $fDjBp.Schemas).file) {
                        const fsPath = $aMhG1.originalFSPath(parsedUri);
                        let relativePath = null;
                        if (fsPath.startsWith("/./")) relativePath = `.${fsPath.substr(1)}`;
                        else if (fsPath.startsWith("//./")) relativePath = `.${fsPath.substr(2)}`;
                        if (relativePath) uri = $aMhG1.joinPath(modelUri, relativePath);
                    }
                }
            }
            return this.openerService.open(uri, {
                openToSide: openToSide,
                fromUserGesture: fromUserGesture,
                allowContributedOpeners: true,
                allowCommands: true
            });
        }, (err)=>{
            const messageOrError = err instanceof Error ? err.message : err;
            // different error cases
            if (messageOrError === "invalid") this.notificationService.warn($58WHl.localize("invalid.url", "Failed to open this link because it is not well-formed: {0}", link.url.toString()));
            else if (messageOrError === "missing") this.notificationService.warn($58WHl.localize("missing.url", "Failed to open this link because its target is missing."));
            else (0, $g0782.onUnexpectedError)(err);
        });
    }
    getLinkOccurrence(position) {
        if (!this.editor.hasModel() || !position) return null;
        const decorations = this.editor.getModel().getDecorationsInRange({
            startLineNumber: position.lineNumber,
            startColumn: position.column,
            endLineNumber: position.lineNumber,
            endColumn: position.column
        }, 0, true);
        for (const decoration of decorations){
            const currentOccurrence = this.currentOccurrences[decoration.id];
            if (currentOccurrence) return currentOccurrence;
        }
        return null;
    }
    isEnabled(mouseEvent, withKey) {
        return Boolean(mouseEvent.target.type === 6 /* CONTENT_TEXT */  && (mouseEvent.hasTriggerModifier || withKey && withKey.keyCodeIsTriggerKey));
    }
    stop() {
        var _a;
        this.timeout.cancel();
        if (this.activeLinksList) {
            (_a = this.activeLinksList) === null || _a === void 0 || _a.dispose();
            this.activeLinksList = null;
        }
        if (this.computePromise) {
            this.computePromise.cancel();
            this.computePromise = null;
        }
    }
    dispose() {
        this.listenersToRemove.dispose();
        this.stop();
        this.timeout.dispose();
    }
    constructor(editor, openerService, notificationService){
        this.listenersToRemove = new (0, $atiRx.DisposableStore)();
        this.editor = editor;
        this.openerService = openerService;
        this.notificationService = notificationService;
        let clickLinkGesture = new (0, $0689be8677adfa61$export$e5a83b5c609cb4bb)(editor);
        this.listenersToRemove.add(clickLinkGesture);
        this.listenersToRemove.add(clickLinkGesture.onMouseMoveOrRelevantKeyDown(([mouseEvent, keyboardEvent])=>{
            this._onEditorMouseMove(mouseEvent, keyboardEvent);
        }));
        this.listenersToRemove.add(clickLinkGesture.onExecute((e)=>{
            this.onEditorMouseUp(e);
        }));
        this.listenersToRemove.add(clickLinkGesture.onCancel((e)=>{
            this.cleanUpActiveLinkDecoration();
        }));
        this.enabled = editor.getOption(62 /* links */ );
        this.listenersToRemove.add(editor.onDidChangeConfiguration((e)=>{
            const enabled = editor.getOption(62 /* links */ );
            if (this.enabled === enabled) // No change in our configuration option
            return;
            this.enabled = enabled;
            // Remove any links (for the getting disabled case)
            this.updateDecorations([]);
            // Stop any computation (for the getting disabled case)
            this.stop();
            // Start computing (for the getting enabled case)
            this.beginCompute();
        }));
        this.listenersToRemove.add(editor.onDidChangeModelContent((e)=>this.onChange()));
        this.listenersToRemove.add(editor.onDidChangeModel((e)=>this.onModelChanged()));
        this.listenersToRemove.add(editor.onDidChangeModelLanguage((e)=>this.onModelModeChanged()));
        this.listenersToRemove.add((0, $eKhCe.LinkProviderRegistry).onDidChange((e)=>this.onModelModeChanged()));
        this.timeout = new $eFOsn.TimeoutTimer();
        this.computePromise = null;
        this.activeLinksList = null;
        this.currentOccurrences = {};
        this.activeLinkDecorationId = null;
        this.beginCompute();
    }
};
$5b140407146e286e$export$e173163e3618783f.ID = "editor.linkDetector";
$5b140407146e286e$export$e173163e3618783f.RECOMPUTE_TIME = 1000; // ms
$5b140407146e286e$export$e173163e3618783f = $5b140407146e286e$var$__decorate([
    $5b140407146e286e$var$__param(1, (0, $9KRmt.IOpenerService)),
    $5b140407146e286e$var$__param(2, (0, $dgZ0t.INotificationService))
], $5b140407146e286e$export$e173163e3618783f);
class $5b140407146e286e$var$OpenLinkAction extends (0, $gGOeQ.EditorAction) {
    run(accessor, editor) {
        let linkDetector = $5b140407146e286e$export$e173163e3618783f.get(editor);
        if (!linkDetector) return;
        if (!editor.hasModel()) return;
        let selections = editor.getSelections();
        for (let sel of selections){
            let link = linkDetector.getLinkOccurrence(sel.getEndPosition());
            if (link) linkDetector.openLinkOccurrence(link, false);
        }
    }
    constructor(){
        super({
            id: "editor.action.openLink",
            label: $58WHl.localize("label", "Open Link"),
            alias: "Open Link",
            precondition: undefined
        });
    }
}
(0, $gGOeQ.registerEditorContribution)($5b140407146e286e$export$e173163e3618783f.ID, $5b140407146e286e$export$e173163e3618783f);
(0, $gGOeQ.registerEditorAction)($5b140407146e286e$var$OpenLinkAction);
(0, $fUTzO.registerThemingParticipant)((theme, collector)=>{
    const activeLinkForeground = theme.getColor((0, $3XYy8.editorActiveLinkForeground));
    if (activeLinkForeground) collector.addRule(`.monaco-editor .detected-link-active { color: ${activeLinkForeground} !important; }`);
});



var $cVmYb = parcelRequire("cVmYb");

var $eFOsn = parcelRequire("eFOsn");

var $fQtIR = parcelRequire("fQtIR");

var $atiRx = parcelRequire("atiRx");

var $gGOeQ = parcelRequire("gGOeQ");

var $3Honz = parcelRequire("3Honz");

var $3HpR4 = parcelRequire("3HpR4");

var $cz0c7 = parcelRequire("cz0c7");

var $bdLce = parcelRequire("bdLce");

var $bbATZ = parcelRequire("bbATZ");

var $g88WD = parcelRequire("g88WD");

var $eKhCe = parcelRequire("eKhCe");


var $58WHl = parcelRequire("58WHl");

var $2IxgH = parcelRequire("2IxgH");

var $bRtox = parcelRequire("bRtox");

var $3XYy8 = parcelRequire("3XYy8");

var $fUTzO = parcelRequire("fUTzO");
function $bcdecec0398c1641$var$announceCursorChange(previousCursorState, cursorState) {
    const cursorDiff = cursorState.filter((cs)=>!previousCursorState.find((pcs)=>pcs.equals(cs)));
    if (cursorDiff.length >= 1) {
        const cursorPositions = cursorDiff.map((cs)=>`line ${cs.viewState.position.lineNumber} column ${cs.viewState.position.column}`).join(", ");
        const msg = cursorDiff.length === 1 ? $58WHl.localize("cursorAdded", "Cursor added: {0}", cursorPositions) : $58WHl.localize("cursorsAdded", "Cursors added: {0}", cursorPositions);
        (0, $cVmYb.status)(msg);
    }
}
class $bcdecec0398c1641$export$a2a103e44264bbeb extends (0, $gGOeQ.EditorAction) {
    run(accessor, editor, args) {
        if (!editor.hasModel()) return;
        let useLogicalLine = true;
        if (args && args.logicalLine === false) useLogicalLine = false;
        const viewModel = editor._getViewModel();
        if (viewModel.cursorConfig.readOnly) return;
        viewModel.pushStackElement();
        const previousCursorState = viewModel.getCursorStates();
        viewModel.setCursorStates(args.source, 3 /* Explicit */ , (0, $3Honz.CursorMoveCommands).addCursorUp(viewModel, previousCursorState, useLogicalLine));
        viewModel.revealTopMostCursor(args.source);
        $bcdecec0398c1641$var$announceCursorChange(previousCursorState, viewModel.getCursorStates());
    }
    constructor(){
        super({
            id: "editor.action.insertCursorAbove",
            label: $58WHl.localize("mutlicursor.insertAbove", "Add Cursor Above"),
            alias: "Add Cursor Above",
            precondition: undefined,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: 2576 /* UpArrow */ ,
                linux: {
                    primary: 1552 /* UpArrow */ ,
                    secondary: [
                        3088 /* UpArrow */ 
                    ]
                },
                weight: 100 /* EditorContrib */ 
            },
            menuOpts: {
                menuId: (0, $2IxgH.MenuId).MenubarSelectionMenu,
                group: "3_multi",
                title: $58WHl.localize({
                    key: "miInsertCursorAbove",
                    comment: [
                        "&& denotes a mnemonic"
                    ]
                }, "&&Add Cursor Above"),
                order: 2
            }
        });
    }
}
class $bcdecec0398c1641$export$a0aca99842abcc90 extends (0, $gGOeQ.EditorAction) {
    run(accessor, editor, args) {
        if (!editor.hasModel()) return;
        let useLogicalLine = true;
        if (args && args.logicalLine === false) useLogicalLine = false;
        const viewModel = editor._getViewModel();
        if (viewModel.cursorConfig.readOnly) return;
        viewModel.pushStackElement();
        const previousCursorState = viewModel.getCursorStates();
        viewModel.setCursorStates(args.source, 3 /* Explicit */ , (0, $3Honz.CursorMoveCommands).addCursorDown(viewModel, previousCursorState, useLogicalLine));
        viewModel.revealBottomMostCursor(args.source);
        $bcdecec0398c1641$var$announceCursorChange(previousCursorState, viewModel.getCursorStates());
    }
    constructor(){
        super({
            id: "editor.action.insertCursorBelow",
            label: $58WHl.localize("mutlicursor.insertBelow", "Add Cursor Below"),
            alias: "Add Cursor Below",
            precondition: undefined,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: 2578 /* DownArrow */ ,
                linux: {
                    primary: 1554 /* DownArrow */ ,
                    secondary: [
                        3090 /* DownArrow */ 
                    ]
                },
                weight: 100 /* EditorContrib */ 
            },
            menuOpts: {
                menuId: (0, $2IxgH.MenuId).MenubarSelectionMenu,
                group: "3_multi",
                title: $58WHl.localize({
                    key: "miInsertCursorBelow",
                    comment: [
                        "&& denotes a mnemonic"
                    ]
                }, "A&&dd Cursor Below"),
                order: 3
            }
        });
    }
}
class $bcdecec0398c1641$var$InsertCursorAtEndOfEachLineSelected extends (0, $gGOeQ.EditorAction) {
    getCursorsForSelection(selection, model, result) {
        if (selection.isEmpty()) return;
        for(let i = selection.startLineNumber; i < selection.endLineNumber; i++){
            let currentLineMaxColumn = model.getLineMaxColumn(i);
            result.push(new (0, $cz0c7.Selection)(i, currentLineMaxColumn, i, currentLineMaxColumn));
        }
        if (selection.endColumn > 1) result.push(new (0, $cz0c7.Selection)(selection.endLineNumber, selection.endColumn, selection.endLineNumber, selection.endColumn));
    }
    run(accessor, editor) {
        if (!editor.hasModel()) return;
        const model = editor.getModel();
        const selections = editor.getSelections();
        const viewModel = editor._getViewModel();
        const previousCursorState = viewModel.getCursorStates();
        let newSelections = [];
        selections.forEach((sel)=>this.getCursorsForSelection(sel, model, newSelections));
        if (newSelections.length > 0) editor.setSelections(newSelections);
        $bcdecec0398c1641$var$announceCursorChange(previousCursorState, viewModel.getCursorStates());
    }
    constructor(){
        super({
            id: "editor.action.insertCursorAtEndOfEachLineSelected",
            label: $58WHl.localize("mutlicursor.insertAtEndOfEachLineSelected", "Add Cursors to Line Ends"),
            alias: "Add Cursors to Line Ends",
            precondition: undefined,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: 1575 /* KeyI */ ,
                weight: 100 /* EditorContrib */ 
            },
            menuOpts: {
                menuId: (0, $2IxgH.MenuId).MenubarSelectionMenu,
                group: "3_multi",
                title: $58WHl.localize({
                    key: "miInsertCursorAtEndOfEachLineSelected",
                    comment: [
                        "&& denotes a mnemonic"
                    ]
                }, "Add C&&ursors to Line Ends"),
                order: 4
            }
        });
    }
}
class $bcdecec0398c1641$var$InsertCursorAtEndOfLineSelected extends (0, $gGOeQ.EditorAction) {
    run(accessor, editor) {
        if (!editor.hasModel()) return;
        const selections = editor.getSelections();
        const lineCount = editor.getModel().getLineCount();
        let newSelections = [];
        for(let i = selections[0].startLineNumber; i <= lineCount; i++)newSelections.push(new (0, $cz0c7.Selection)(i, selections[0].startColumn, i, selections[0].endColumn));
        const viewModel = editor._getViewModel();
        const previousCursorState = viewModel.getCursorStates();
        if (newSelections.length > 0) editor.setSelections(newSelections);
        $bcdecec0398c1641$var$announceCursorChange(previousCursorState, viewModel.getCursorStates());
    }
    constructor(){
        super({
            id: "editor.action.addCursorsToBottom",
            label: $58WHl.localize("mutlicursor.addCursorsToBottom", "Add Cursors To Bottom"),
            alias: "Add Cursors To Bottom",
            precondition: undefined
        });
    }
}
class $bcdecec0398c1641$var$InsertCursorAtTopOfLineSelected extends (0, $gGOeQ.EditorAction) {
    run(accessor, editor) {
        if (!editor.hasModel()) return;
        const selections = editor.getSelections();
        let newSelections = [];
        for(let i = selections[0].startLineNumber; i >= 1; i--)newSelections.push(new (0, $cz0c7.Selection)(i, selections[0].startColumn, i, selections[0].endColumn));
        const viewModel = editor._getViewModel();
        const previousCursorState = viewModel.getCursorStates();
        if (newSelections.length > 0) editor.setSelections(newSelections);
        $bcdecec0398c1641$var$announceCursorChange(previousCursorState, viewModel.getCursorStates());
    }
    constructor(){
        super({
            id: "editor.action.addCursorsToTop",
            label: $58WHl.localize("mutlicursor.addCursorsToTop", "Add Cursors To Top"),
            alias: "Add Cursors To Top",
            precondition: undefined
        });
    }
}
class $bcdecec0398c1641$export$c53027d5280f35e5 {
    constructor(selections, revealRange, revealScrollType){
        this.selections = selections;
        this.revealRange = revealRange;
        this.revealScrollType = revealScrollType;
    }
}
class $bcdecec0398c1641$export$3eae6fd7223f22ab {
    static create(editor, findController) {
        if (!editor.hasModel()) return null;
        const findState = findController.getState();
        // Find widget owns entirely what we search for if:
        //  - focus is not in the editor (i.e. it is in the find widget)
        //  - and the search widget is visible
        //  - and the search string is non-empty
        if (!editor.hasTextFocus() && findState.isRevealed && findState.searchString.length > 0) // Find widget owns what is searched for
        return new $bcdecec0398c1641$export$3eae6fd7223f22ab(editor, findController, false, findState.searchString, findState.wholeWord, findState.matchCase, null);
        // Otherwise, the selection gives the search text, and the find widget gives the search settings
        // The exception is the find state disassociation case: when beginning with a single, collapsed selection
        let isDisconnectedFromFindController = false;
        let wholeWord;
        let matchCase;
        const selections = editor.getSelections();
        if (selections.length === 1 && selections[0].isEmpty()) {
            isDisconnectedFromFindController = true;
            wholeWord = true;
            matchCase = true;
        } else {
            wholeWord = findState.wholeWord;
            matchCase = findState.matchCase;
        }
        // Selection owns what is searched for
        const s = editor.getSelection();
        let searchText;
        let currentMatch = null;
        if (s.isEmpty()) {
            // selection is empty => expand to current word
            const word = editor.getConfiguredWordAtPosition(s.getStartPosition());
            if (!word) return null;
            searchText = word.word;
            currentMatch = new (0, $cz0c7.Selection)(s.startLineNumber, word.startColumn, s.startLineNumber, word.endColumn);
        } else searchText = editor.getModel().getValueInRange(s).replace(/\r\n/g, "\n");
        return new $bcdecec0398c1641$export$3eae6fd7223f22ab(editor, findController, isDisconnectedFromFindController, searchText, wholeWord, matchCase, currentMatch);
    }
    addSelectionToNextFindMatch() {
        if (!this._editor.hasModel()) return null;
        const nextMatch = this._getNextMatch();
        if (!nextMatch) return null;
        const allSelections = this._editor.getSelections();
        return new $bcdecec0398c1641$export$c53027d5280f35e5(allSelections.concat(nextMatch), nextMatch, 0 /* Smooth */ );
    }
    moveSelectionToNextFindMatch() {
        if (!this._editor.hasModel()) return null;
        const nextMatch = this._getNextMatch();
        if (!nextMatch) return null;
        const allSelections = this._editor.getSelections();
        return new $bcdecec0398c1641$export$c53027d5280f35e5(allSelections.slice(0, allSelections.length - 1).concat(nextMatch), nextMatch, 0 /* Smooth */ );
    }
    _getNextMatch() {
        if (!this._editor.hasModel()) return null;
        if (this.currentMatch) {
            const result = this.currentMatch;
            this.currentMatch = null;
            return result;
        }
        this.findController.highlightFindOptions();
        const allSelections = this._editor.getSelections();
        const lastAddedSelection = allSelections[allSelections.length - 1];
        const nextMatch = this._editor.getModel().findNextMatch(this.searchText, lastAddedSelection.getEndPosition(), false, this.matchCase, this.wholeWord ? this._editor.getOption(116 /* wordSeparators */ ) : null, false);
        if (!nextMatch) return null;
        return new (0, $cz0c7.Selection)(nextMatch.range.startLineNumber, nextMatch.range.startColumn, nextMatch.range.endLineNumber, nextMatch.range.endColumn);
    }
    addSelectionToPreviousFindMatch() {
        if (!this._editor.hasModel()) return null;
        const previousMatch = this._getPreviousMatch();
        if (!previousMatch) return null;
        const allSelections = this._editor.getSelections();
        return new $bcdecec0398c1641$export$c53027d5280f35e5(allSelections.concat(previousMatch), previousMatch, 0 /* Smooth */ );
    }
    moveSelectionToPreviousFindMatch() {
        if (!this._editor.hasModel()) return null;
        const previousMatch = this._getPreviousMatch();
        if (!previousMatch) return null;
        const allSelections = this._editor.getSelections();
        return new $bcdecec0398c1641$export$c53027d5280f35e5(allSelections.slice(0, allSelections.length - 1).concat(previousMatch), previousMatch, 0 /* Smooth */ );
    }
    _getPreviousMatch() {
        if (!this._editor.hasModel()) return null;
        if (this.currentMatch) {
            const result = this.currentMatch;
            this.currentMatch = null;
            return result;
        }
        this.findController.highlightFindOptions();
        const allSelections = this._editor.getSelections();
        const lastAddedSelection = allSelections[allSelections.length - 1];
        const previousMatch = this._editor.getModel().findPreviousMatch(this.searchText, lastAddedSelection.getStartPosition(), false, this.matchCase, this.wholeWord ? this._editor.getOption(116 /* wordSeparators */ ) : null, false);
        if (!previousMatch) return null;
        return new (0, $cz0c7.Selection)(previousMatch.range.startLineNumber, previousMatch.range.startColumn, previousMatch.range.endLineNumber, previousMatch.range.endColumn);
    }
    selectAll() {
        if (!this._editor.hasModel()) return [];
        this.findController.highlightFindOptions();
        return this._editor.getModel().findMatches(this.searchText, true, false, this.matchCase, this.wholeWord ? this._editor.getOption(116 /* wordSeparators */ ) : null, false, 1073741824 /* MAX_SAFE_SMALL_INTEGER */ );
    }
    constructor(_editor, findController, isDisconnectedFromFindController, searchText, wholeWord, matchCase, currentMatch){
        this._editor = _editor;
        this.findController = findController;
        this.isDisconnectedFromFindController = isDisconnectedFromFindController;
        this.searchText = searchText;
        this.wholeWord = wholeWord;
        this.matchCase = matchCase;
        this.currentMatch = currentMatch;
    }
}
class $bcdecec0398c1641$export$72ef690ee4064f04 extends (0, $atiRx.Disposable) {
    static get(editor) {
        return editor.getContribution($bcdecec0398c1641$export$72ef690ee4064f04.ID);
    }
    dispose() {
        this._endSession();
        super.dispose();
    }
    _beginSessionIfNeeded(findController) {
        if (!this._session) {
            // Create a new session
            const session = $bcdecec0398c1641$export$3eae6fd7223f22ab.create(this._editor, findController);
            if (!session) return;
            this._session = session;
            const newState = {
                searchString: this._session.searchText
            };
            if (this._session.isDisconnectedFromFindController) {
                newState.wholeWordOverride = 1 /* True */ ;
                newState.matchCaseOverride = 1 /* True */ ;
                newState.isRegexOverride = 2 /* False */ ;
            }
            findController.getState().change(newState, false);
            this._sessionDispose.add(this._editor.onDidChangeCursorSelection((e)=>{
                if (this._ignoreSelectionChange) return;
                this._endSession();
            }));
            this._sessionDispose.add(this._editor.onDidBlurEditorText(()=>{
                this._endSession();
            }));
            this._sessionDispose.add(findController.getState().onFindReplaceStateChange((e)=>{
                if (e.matchCase || e.wholeWord) this._endSession();
            }));
        }
    }
    _endSession() {
        this._sessionDispose.clear();
        if (this._session && this._session.isDisconnectedFromFindController) {
            const newState = {
                wholeWordOverride: 0 /* NotSet */ ,
                matchCaseOverride: 0 /* NotSet */ ,
                isRegexOverride: 0 /* NotSet */ 
            };
            this._session.findController.getState().change(newState, false);
        }
        this._session = null;
    }
    _setSelections(selections) {
        this._ignoreSelectionChange = true;
        this._editor.setSelections(selections);
        this._ignoreSelectionChange = false;
    }
    _expandEmptyToWord(model, selection) {
        if (!selection.isEmpty()) return selection;
        const word = this._editor.getConfiguredWordAtPosition(selection.getStartPosition());
        if (!word) return selection;
        return new (0, $cz0c7.Selection)(selection.startLineNumber, word.startColumn, selection.startLineNumber, word.endColumn);
    }
    _applySessionResult(result) {
        if (!result) return;
        this._setSelections(result.selections);
        if (result.revealRange) this._editor.revealRangeInCenterIfOutsideViewport(result.revealRange, result.revealScrollType);
    }
    getSession(findController) {
        return this._session;
    }
    addSelectionToNextFindMatch(findController) {
        if (!this._editor.hasModel()) return;
        if (!this._session) {
            // If there are multiple cursors, handle the case where they do not all select the same text.
            const allSelections = this._editor.getSelections();
            if (allSelections.length > 1) {
                const findState = findController.getState();
                const matchCase = findState.matchCase;
                const selectionsContainSameText = $bcdecec0398c1641$var$modelRangesContainSameText(this._editor.getModel(), allSelections, matchCase);
                if (!selectionsContainSameText) {
                    const model = this._editor.getModel();
                    let resultingSelections = [];
                    for(let i = 0, len = allSelections.length; i < len; i++)resultingSelections[i] = this._expandEmptyToWord(model, allSelections[i]);
                    this._editor.setSelections(resultingSelections);
                    return;
                }
            }
        }
        this._beginSessionIfNeeded(findController);
        if (this._session) this._applySessionResult(this._session.addSelectionToNextFindMatch());
    }
    addSelectionToPreviousFindMatch(findController) {
        this._beginSessionIfNeeded(findController);
        if (this._session) this._applySessionResult(this._session.addSelectionToPreviousFindMatch());
    }
    moveSelectionToNextFindMatch(findController) {
        this._beginSessionIfNeeded(findController);
        if (this._session) this._applySessionResult(this._session.moveSelectionToNextFindMatch());
    }
    moveSelectionToPreviousFindMatch(findController) {
        this._beginSessionIfNeeded(findController);
        if (this._session) this._applySessionResult(this._session.moveSelectionToPreviousFindMatch());
    }
    selectAll(findController) {
        if (!this._editor.hasModel()) return;
        let matches = null;
        const findState = findController.getState();
        // Special case: find widget owns entirely what we search for if:
        // - focus is not in the editor (i.e. it is in the find widget)
        // - and the search widget is visible
        // - and the search string is non-empty
        // - and we're searching for a regex
        if (findState.isRevealed && findState.searchString.length > 0 && findState.isRegex) matches = this._editor.getModel().findMatches(findState.searchString, true, findState.isRegex, findState.matchCase, findState.wholeWord ? this._editor.getOption(116 /* wordSeparators */ ) : null, false, 1073741824 /* MAX_SAFE_SMALL_INTEGER */ );
        else {
            this._beginSessionIfNeeded(findController);
            if (!this._session) return;
            matches = this._session.selectAll();
        }
        if (findState.searchScope) {
            const states = findState.searchScope;
            let inSelection = [];
            matches.forEach((match)=>{
                states.forEach((state)=>{
                    if (match.range.endLineNumber <= state.endLineNumber && match.range.startLineNumber >= state.startLineNumber) inSelection.push(match);
                });
            });
            matches = inSelection;
        }
        if (matches.length > 0) {
            const editorSelection = this._editor.getSelection();
            // Have the primary cursor remain the one where the action was invoked
            for(let i = 0, len = matches.length; i < len; i++){
                const match = matches[i];
                const intersection = match.range.intersectRanges(editorSelection);
                if (intersection) {
                    // bingo!
                    matches[i] = matches[0];
                    matches[0] = match;
                    break;
                }
            }
            this._setSelections(matches.map((m)=>new (0, $cz0c7.Selection)(m.range.startLineNumber, m.range.startColumn, m.range.endLineNumber, m.range.endColumn)));
        }
    }
    constructor(editor){
        super();
        this._sessionDispose = this._register(new (0, $atiRx.DisposableStore)());
        this._editor = editor;
        this._ignoreSelectionChange = false;
        this._session = null;
    }
}
$bcdecec0398c1641$export$72ef690ee4064f04.ID = "editor.contrib.multiCursorController";
class $bcdecec0398c1641$export$7117bb1c55f1db87 extends (0, $gGOeQ.EditorAction) {
    run(accessor, editor) {
        const multiCursorController = $bcdecec0398c1641$export$72ef690ee4064f04.get(editor);
        if (!multiCursorController) return;
        const findController = (0, $9d3f26ffc33207eb$exports.CommonFindController).get(editor);
        if (!findController) return;
        const viewModel = editor._getViewModel();
        if (viewModel) {
            const previousCursorState = viewModel.getCursorStates();
            this._run(multiCursorController, findController);
            $bcdecec0398c1641$var$announceCursorChange(previousCursorState, viewModel.getCursorStates());
        }
    }
}
class $bcdecec0398c1641$export$8f076283f2167b25 extends $bcdecec0398c1641$export$7117bb1c55f1db87 {
    _run(multiCursorController, findController) {
        multiCursorController.addSelectionToNextFindMatch(findController);
    }
    constructor(){
        super({
            id: "editor.action.addSelectionToNextFindMatch",
            label: $58WHl.localize("addSelectionToNextFindMatch", "Add Selection To Next Find Match"),
            alias: "Add Selection To Next Find Match",
            precondition: undefined,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).focus,
                primary: 2082 /* KeyD */ ,
                weight: 100 /* EditorContrib */ 
            },
            menuOpts: {
                menuId: (0, $2IxgH.MenuId).MenubarSelectionMenu,
                group: "3_multi",
                title: $58WHl.localize({
                    key: "miAddSelectionToNextFindMatch",
                    comment: [
                        "&& denotes a mnemonic"
                    ]
                }, "Add &&Next Occurrence"),
                order: 5
            }
        });
    }
}
class $bcdecec0398c1641$export$18b95272d65addf8 extends $bcdecec0398c1641$export$7117bb1c55f1db87 {
    _run(multiCursorController, findController) {
        multiCursorController.addSelectionToPreviousFindMatch(findController);
    }
    constructor(){
        super({
            id: "editor.action.addSelectionToPreviousFindMatch",
            label: $58WHl.localize("addSelectionToPreviousFindMatch", "Add Selection To Previous Find Match"),
            alias: "Add Selection To Previous Find Match",
            precondition: undefined,
            menuOpts: {
                menuId: (0, $2IxgH.MenuId).MenubarSelectionMenu,
                group: "3_multi",
                title: $58WHl.localize({
                    key: "miAddSelectionToPreviousFindMatch",
                    comment: [
                        "&& denotes a mnemonic"
                    ]
                }, "Add P&&revious Occurrence"),
                order: 6
            }
        });
    }
}
class $bcdecec0398c1641$export$411b7432b064bcf7 extends $bcdecec0398c1641$export$7117bb1c55f1db87 {
    _run(multiCursorController, findController) {
        multiCursorController.moveSelectionToNextFindMatch(findController);
    }
    constructor(){
        super({
            id: "editor.action.moveSelectionToNextFindMatch",
            label: $58WHl.localize("moveSelectionToNextFindMatch", "Move Last Selection To Next Find Match"),
            alias: "Move Last Selection To Next Find Match",
            precondition: undefined,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).focus,
                primary: (0, $fQtIR.KeyChord)(2089 /* KeyK */ , 2082 /* KeyD */ ),
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
class $bcdecec0398c1641$export$1fb22e5b0da21ac2 extends $bcdecec0398c1641$export$7117bb1c55f1db87 {
    _run(multiCursorController, findController) {
        multiCursorController.moveSelectionToPreviousFindMatch(findController);
    }
    constructor(){
        super({
            id: "editor.action.moveSelectionToPreviousFindMatch",
            label: $58WHl.localize("moveSelectionToPreviousFindMatch", "Move Last Selection To Previous Find Match"),
            alias: "Move Last Selection To Previous Find Match",
            precondition: undefined
        });
    }
}
class $bcdecec0398c1641$export$d06ce53b2982cd37 extends $bcdecec0398c1641$export$7117bb1c55f1db87 {
    _run(multiCursorController, findController) {
        multiCursorController.selectAll(findController);
    }
    constructor(){
        super({
            id: "editor.action.selectHighlights",
            label: $58WHl.localize("selectAllOccurrencesOfFindMatch", "Select All Occurrences of Find Match"),
            alias: "Select All Occurrences of Find Match",
            precondition: undefined,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).focus,
                primary: 3114 /* KeyL */ ,
                weight: 100 /* EditorContrib */ 
            },
            menuOpts: {
                menuId: (0, $2IxgH.MenuId).MenubarSelectionMenu,
                group: "3_multi",
                title: $58WHl.localize({
                    key: "miSelectHighlights",
                    comment: [
                        "&& denotes a mnemonic"
                    ]
                }, "Select All &&Occurrences"),
                order: 7
            }
        });
    }
}
class $bcdecec0398c1641$export$22d364fb7d9f34a3 extends $bcdecec0398c1641$export$7117bb1c55f1db87 {
    _run(multiCursorController, findController) {
        multiCursorController.selectAll(findController);
    }
    constructor(){
        super({
            id: "editor.action.changeAll",
            label: $58WHl.localize("changeAll.label", "Change All Occurrences"),
            alias: "Change All Occurrences",
            precondition: (0, $bRtox.ContextKeyExpr).and((0, $bdLce.EditorContextKeys).writable, (0, $bdLce.EditorContextKeys).editorTextFocus),
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: 2108 /* F2 */ ,
                weight: 100 /* EditorContrib */ 
            },
            contextMenuOpts: {
                group: "1_modification",
                order: 1.2
            }
        });
    }
}
class $bcdecec0398c1641$var$SelectionHighlighterState {
    findMatches() {
        if (this._cachedFindMatches === null) {
            this._cachedFindMatches = this._model.findMatches(this._searchText, true, false, this._matchCase, this._wordSeparators, false).map((m)=>m.range);
            this._cachedFindMatches.sort((0, $3HpR4.Range).compareRangesUsingStarts);
        }
        return this._cachedFindMatches;
    }
    constructor(_model, _searchText, _matchCase, _wordSeparators, prevState){
        this._model = _model;
        this._searchText = _searchText;
        this._matchCase = _matchCase;
        this._wordSeparators = _wordSeparators;
        this._modelVersionId = this._model.getVersionId();
        this._cachedFindMatches = null;
        if (prevState && this._model === prevState._model && this._searchText === prevState._searchText && this._matchCase === prevState._matchCase && this._wordSeparators === prevState._wordSeparators && this._modelVersionId === prevState._modelVersionId) this._cachedFindMatches = prevState._cachedFindMatches;
    }
}
class $bcdecec0398c1641$export$e2d3f180605870d2 extends (0, $atiRx.Disposable) {
    _update() {
        this._setState($bcdecec0398c1641$export$e2d3f180605870d2._createState(this.state, this._isEnabled, this.editor));
    }
    static _createState(oldState, isEnabled, editor) {
        if (!isEnabled) return null;
        if (!editor.hasModel()) return null;
        const s = editor.getSelection();
        if (s.startLineNumber !== s.endLineNumber) // multiline forbidden for perf reasons
        return null;
        const multiCursorController = $bcdecec0398c1641$export$72ef690ee4064f04.get(editor);
        if (!multiCursorController) return null;
        const findController = (0, $9d3f26ffc33207eb$exports.CommonFindController).get(editor);
        if (!findController) return null;
        let r = multiCursorController.getSession(findController);
        if (!r) {
            const allSelections = editor.getSelections();
            if (allSelections.length > 1) {
                const findState = findController.getState();
                const matchCase = findState.matchCase;
                const selectionsContainSameText = $bcdecec0398c1641$var$modelRangesContainSameText(editor.getModel(), allSelections, matchCase);
                if (!selectionsContainSameText) return null;
            }
            r = $bcdecec0398c1641$export$3eae6fd7223f22ab.create(editor, findController);
        }
        if (!r) return null;
        if (r.currentMatch) // This is an empty selection
        // Do not interfere with semantic word highlighting in the no selection case
        return null;
        if (/^[ \t]+$/.test(r.searchText)) // whitespace only selection
        return null;
        if (r.searchText.length > 200) // very long selection
        return null;
        // TODO: better handling of this case
        const findState1 = findController.getState();
        const caseSensitive = findState1.matchCase;
        // Return early if the find widget shows the exact same matches
        if (findState1.isRevealed) {
            let findStateSearchString = findState1.searchString;
            if (!caseSensitive) findStateSearchString = findStateSearchString.toLowerCase();
            let mySearchString = r.searchText;
            if (!caseSensitive) mySearchString = mySearchString.toLowerCase();
            if (findStateSearchString === mySearchString && r.matchCase === findState1.matchCase && r.wholeWord === findState1.wholeWord && !findState1.isRegex) return null;
        }
        return new $bcdecec0398c1641$var$SelectionHighlighterState(editor.getModel(), r.searchText, r.matchCase, r.wholeWord ? editor.getOption(116 /* wordSeparators */ ) : null, oldState);
    }
    _setState(newState) {
        this.state = newState;
        if (!this.state) {
            this.decorations = this.editor.deltaDecorations(this.decorations, []);
            return;
        }
        if (!this.editor.hasModel()) return;
        const model = this.editor.getModel();
        if (model.isTooLargeForTokenization()) // the file is too large, so searching word under cursor in the whole document would be blocking the UI.
        return;
        const allMatches = this.state.findMatches();
        const selections = this.editor.getSelections();
        selections.sort((0, $3HpR4.Range).compareRangesUsingStarts);
        // do not overlap with selection (issue #64 and #512)
        const matches = [];
        for(let i = 0, j = 0, len = allMatches.length, lenJ = selections.length; i < len;){
            const match = allMatches[i];
            if (j >= lenJ) {
                // finished all editor selections
                matches.push(match);
                i++;
            } else {
                const cmp = (0, $3HpR4.Range).compareRangesUsingStarts(match, selections[j]);
                if (cmp < 0) {
                    // match is before sel
                    if (selections[j].isEmpty() || !(0, $3HpR4.Range).areIntersecting(match, selections[j])) matches.push(match);
                    i++;
                } else if (cmp > 0) // sel is before match
                j++;
                else {
                    // sel is equal to match
                    i++;
                    j++;
                }
            }
        }
        const hasFindOccurrences = (0, $eKhCe.DocumentHighlightProviderRegistry).has(model) && this.editor.getOption(71 /* occurrencesHighlight */ );
        const decorations = matches.map((r)=>{
            return {
                range: r,
                // Show in overviewRuler only if model has no semantic highlighting
                options: hasFindOccurrences ? $bcdecec0398c1641$export$e2d3f180605870d2._SELECTION_HIGHLIGHT : $bcdecec0398c1641$export$e2d3f180605870d2._SELECTION_HIGHLIGHT_OVERVIEW
            };
        });
        this.decorations = this.editor.deltaDecorations(this.decorations, decorations);
    }
    dispose() {
        this._setState(null);
        super.dispose();
    }
    constructor(editor){
        super();
        this.editor = editor;
        this._isEnabled = editor.getOption(96 /* selectionHighlight */ );
        this.decorations = [];
        this.updateSoon = this._register(new (0, $eFOsn.RunOnceScheduler)(()=>this._update(), 300));
        this.state = null;
        this._register(editor.onDidChangeConfiguration((e)=>{
            this._isEnabled = editor.getOption(96 /* selectionHighlight */ );
        }));
        this._register(editor.onDidChangeCursorSelection((e)=>{
            if (!this._isEnabled) // Early exit if nothing needs to be done!
            // Leave some form of early exit check here if you wish to continue being a cursor position change listener ;)
            return;
            if (e.selection.isEmpty()) {
                if (e.reason === 3 /* Explicit */ ) {
                    if (this.state) // no longer valid
                    this._setState(null);
                    this.updateSoon.schedule();
                } else this._setState(null);
            } else this._update();
        }));
        this._register(editor.onDidChangeModel((e)=>{
            this._setState(null);
        }));
        this._register(editor.onDidChangeModelContent((e)=>{
            if (this._isEnabled) this.updateSoon.schedule();
        }));
        this._register((0, $9d3f26ffc33207eb$exports.CommonFindController).get(editor).getState().onFindReplaceStateChange((e)=>{
            this._update();
        }));
    }
}
$bcdecec0398c1641$export$e2d3f180605870d2.ID = "editor.contrib.selectionHighlighter";
$bcdecec0398c1641$export$e2d3f180605870d2._SELECTION_HIGHLIGHT_OVERVIEW = (0, $g88WD.ModelDecorationOptions).register({
    description: "selection-highlight-overview",
    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ ,
    className: "selectionHighlight",
    minimap: {
        color: (0, $fUTzO.themeColorFromId)((0, $3XYy8.minimapSelectionOccurrenceHighlight)),
        position: (0, $bbATZ.MinimapPosition).Inline
    },
    overviewRuler: {
        color: (0, $fUTzO.themeColorFromId)((0, $3XYy8.overviewRulerSelectionHighlightForeground)),
        position: (0, $bbATZ.OverviewRulerLane).Center
    }
});
$bcdecec0398c1641$export$e2d3f180605870d2._SELECTION_HIGHLIGHT = (0, $g88WD.ModelDecorationOptions).register({
    description: "selection-highlight",
    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ ,
    className: "selectionHighlight"
});
function $bcdecec0398c1641$var$modelRangesContainSameText(model, ranges, matchCase) {
    const selectedText = $bcdecec0398c1641$var$getValueInRange(model, ranges[0], !matchCase);
    for(let i = 1, len = ranges.length; i < len; i++){
        const range = ranges[i];
        if (range.isEmpty()) return false;
        const thisSelectedText = $bcdecec0398c1641$var$getValueInRange(model, range, !matchCase);
        if (selectedText !== thisSelectedText) return false;
    }
    return true;
}
function $bcdecec0398c1641$var$getValueInRange(model, range, toLowerCase) {
    const text = model.getValueInRange(range);
    return toLowerCase ? text.toLowerCase() : text;
}
(0, $gGOeQ.registerEditorContribution)($bcdecec0398c1641$export$72ef690ee4064f04.ID, $bcdecec0398c1641$export$72ef690ee4064f04);
(0, $gGOeQ.registerEditorContribution)($bcdecec0398c1641$export$e2d3f180605870d2.ID, $bcdecec0398c1641$export$e2d3f180605870d2);
(0, $gGOeQ.registerEditorAction)($bcdecec0398c1641$export$a2a103e44264bbeb);
(0, $gGOeQ.registerEditorAction)($bcdecec0398c1641$export$a0aca99842abcc90);
(0, $gGOeQ.registerEditorAction)($bcdecec0398c1641$var$InsertCursorAtEndOfEachLineSelected);
(0, $gGOeQ.registerEditorAction)($bcdecec0398c1641$export$8f076283f2167b25);
(0, $gGOeQ.registerEditorAction)($bcdecec0398c1641$export$18b95272d65addf8);
(0, $gGOeQ.registerEditorAction)($bcdecec0398c1641$export$411b7432b064bcf7);
(0, $gGOeQ.registerEditorAction)($bcdecec0398c1641$export$1fb22e5b0da21ac2);
(0, $gGOeQ.registerEditorAction)($bcdecec0398c1641$export$d06ce53b2982cd37);
(0, $gGOeQ.registerEditorAction)($bcdecec0398c1641$export$22d364fb7d9f34a3);
(0, $gGOeQ.registerEditorAction)($bcdecec0398c1641$var$InsertCursorAtEndOfLineSelected);
(0, $gGOeQ.registerEditorAction)($bcdecec0398c1641$var$InsertCursorAtTopOfLineSelected);


var $c6136d72cc3bc913$exports = {};

var $atiRx = parcelRequire("atiRx");

var $gGOeQ = parcelRequire("gGOeQ");

var $bdLce = parcelRequire("bdLce");

var $eKhCe = parcelRequire("eKhCe");
var $e331dd8881de7ee7$exports = {};

$parcel$export($e331dd8881de7ee7$exports, "Context", function () { return $e331dd8881de7ee7$export$841858b892ce1f4c; }, function (v) { return $e331dd8881de7ee7$export$841858b892ce1f4c = v; });
$parcel$export($e331dd8881de7ee7$exports, "provideSignatureHelp", function () { return $e331dd8881de7ee7$export$49fb82b90cfa6803; }, function (v) { return $e331dd8881de7ee7$export$49fb82b90cfa6803 = v; });

var $gnEXx = parcelRequire("gnEXx");

var $g0782 = parcelRequire("g0782");

var $3ICxR = parcelRequire("3ICxR");

var $7K96x = parcelRequire("7K96x");

var $8qXsZ = parcelRequire("8qXsZ");

var $eKhCe = parcelRequire("eKhCe");

var $iwSMU = parcelRequire("iwSMU");

var $fAXtX = parcelRequire("fAXtX");

var $bRtox = parcelRequire("bRtox");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $e331dd8881de7ee7$var$__awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const $e331dd8881de7ee7$export$841858b892ce1f4c = {
    Visible: new (0, $bRtox.RawContextKey)("parameterHintsVisible", false),
    MultipleSignatures: new (0, $bRtox.RawContextKey)("parameterHintsMultipleSignatures", false)
};
function $e331dd8881de7ee7$export$49fb82b90cfa6803(model, position, context, token) {
    return $e331dd8881de7ee7$var$__awaiter(this, void 0, void 0, function*() {
        const supports = $eKhCe.SignatureHelpProviderRegistry.ordered(model);
        for (const support of supports)try {
            const result = yield support.provideSignatureHelp(model, position, token, context);
            if (result) return result;
        } catch (err) {
            (0, $g0782.onUnexpectedExternalError)(err);
        }
        return undefined;
    });
}
(0, $fAXtX.CommandsRegistry).registerCommand("_executeSignatureHelpProvider", (accessor, ...args)=>$e331dd8881de7ee7$var$__awaiter(void 0, void 0, void 0, function*() {
        const [uri, position, triggerCharacter] = args;
        (0, $3ICxR.assertType)((0, $7K96x.URI).isUri(uri));
        (0, $3ICxR.assertType)((0, $8qXsZ.Position).isIPosition(position));
        (0, $3ICxR.assertType)(typeof triggerCharacter === "string" || !triggerCharacter);
        const ref = yield accessor.get((0, $iwSMU.ITextModelService)).createModelReference(uri);
        try {
            const result = yield $e331dd8881de7ee7$export$49fb82b90cfa6803(ref.object.textEditorModel, (0, $8qXsZ.Position).lift(position), {
                triggerKind: $eKhCe.SignatureHelpTriggerKind.Invoke,
                isRetrigger: false,
                triggerCharacter: triggerCharacter
            }, (0, $gnEXx.CancellationToken).None);
            if (!result) return undefined;
            setTimeout(()=>result.dispose(), 0);
            return result.value;
        } finally{
            ref.dispose();
        }
    }));



var $58WHl = parcelRequire("58WHl");

var $bRtox = parcelRequire("bRtox");

var $iZW67 = parcelRequire("iZW67");
var $54d52e851e400a03$exports = {};

$parcel$export($54d52e851e400a03$exports, "ParameterHintsWidget", function () { return $54d52e851e400a03$export$fd583862071b2279; }, function (v) { return $54d52e851e400a03$export$fd583862071b2279 = v; });

var $jOYcd = parcelRequire("jOYcd");

var $cVmYb = parcelRequire("cVmYb");

var $cffC6 = parcelRequire("cffC6");

var $8HDYc = parcelRequire("8HDYc");

var $fSvkC = parcelRequire("fSvkC");

var $atiRx = parcelRequire("atiRx");

var $9TEeL = parcelRequire("9TEeL");

var $3ICxR = parcelRequire("3ICxR");



var $6o4cZ = parcelRequire("6o4cZ");
var $f417f94c4eb7bb80$exports = {};

$parcel$export($f417f94c4eb7bb80$exports, "ParameterHintsModel", function () { return $f417f94c4eb7bb80$export$7f27c6b5c579a14e; }, function (v) { return $f417f94c4eb7bb80$export$7f27c6b5c579a14e = v; });

var $eFOsn = parcelRequire("eFOsn");

var $g0782 = parcelRequire("g0782");

var $fSvkC = parcelRequire("fSvkC");

var $atiRx = parcelRequire("atiRx");

var $kv7iV = parcelRequire("kv7iV");

var $eKhCe = parcelRequire("eKhCe");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $f417f94c4eb7bb80$var$__awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var $f417f94c4eb7bb80$var$ParameterHintState;
(function(ParameterHintState) {
    ParameterHintState.Default = {
        type: 0 /* Default */ 
    };
    class Pending {
        constructor(request, previouslyActiveHints){
            this.request = request;
            this.previouslyActiveHints = previouslyActiveHints;
            this.type = 2 /* Pending */ ;
        }
    }
    ParameterHintState.Pending = Pending;
    class Active {
        constructor(hints){
            this.hints = hints;
            this.type = 1 /* Active */ ;
        }
    }
    ParameterHintState.Active = Active;
})($f417f94c4eb7bb80$var$ParameterHintState || ($f417f94c4eb7bb80$var$ParameterHintState = {}));
class $f417f94c4eb7bb80$export$7f27c6b5c579a14e extends (0, $atiRx.Disposable) {
    get state() {
        return this._state;
    }
    set state(value) {
        if (this._state.type === 2 /* Pending */ ) this._state.request.cancel();
        this._state = value;
    }
    cancel(silent = false) {
        this.state = $f417f94c4eb7bb80$var$ParameterHintState.Default;
        this.throttledDelayer.cancel();
        if (!silent) this._onChangedHints.fire(undefined);
    }
    trigger(context, delay) {
        const model = this.editor.getModel();
        if (!model || !$eKhCe.SignatureHelpProviderRegistry.has(model)) return;
        const triggerId = ++this.triggerId;
        this._pendingTriggers.push(context);
        this.throttledDelayer.trigger(()=>{
            return this.doTrigger(triggerId);
        }, delay).catch((0, $g0782.onUnexpectedError));
    }
    next() {
        if (this.state.type !== 1 /* Active */ ) return;
        const length = this.state.hints.signatures.length;
        const activeSignature = this.state.hints.activeSignature;
        const last = activeSignature % length === length - 1;
        const cycle = this.editor.getOption(75 /* parameterHints */ ).cycle;
        // If there is only one signature, or we're on last signature of list
        if ((length < 2 || last) && !cycle) {
            this.cancel();
            return;
        }
        this.updateActiveSignature(last && cycle ? 0 : activeSignature + 1);
    }
    previous() {
        if (this.state.type !== 1 /* Active */ ) return;
        const length = this.state.hints.signatures.length;
        const activeSignature = this.state.hints.activeSignature;
        const first = activeSignature === 0;
        const cycle = this.editor.getOption(75 /* parameterHints */ ).cycle;
        // If there is only one signature, or we're on first signature of list
        if ((length < 2 || first) && !cycle) {
            this.cancel();
            return;
        }
        this.updateActiveSignature(first && cycle ? length - 1 : activeSignature - 1);
    }
    updateActiveSignature(activeSignature) {
        if (this.state.type !== 1 /* Active */ ) return;
        this.state = new $f417f94c4eb7bb80$var$ParameterHintState.Active(Object.assign(Object.assign({}, this.state.hints), {
            activeSignature: activeSignature
        }));
        this._onChangedHints.fire(this.state.hints);
    }
    doTrigger(triggerId) {
        return $f417f94c4eb7bb80$var$__awaiter(this, void 0, void 0, function*() {
            const isRetrigger = this.state.type === 1 /* Active */  || this.state.type === 2 /* Pending */ ;
            const activeSignatureHelp = this.getLastActiveHints();
            this.cancel(true);
            if (this._pendingTriggers.length === 0) return false;
            const context = this._pendingTriggers.reduce($f417f94c4eb7bb80$var$mergeTriggerContexts);
            this._pendingTriggers = [];
            const triggerContext = {
                triggerKind: context.triggerKind,
                triggerCharacter: context.triggerCharacter,
                isRetrigger: isRetrigger,
                activeSignatureHelp: activeSignatureHelp
            };
            if (!this.editor.hasModel()) return false;
            const model = this.editor.getModel();
            const position = this.editor.getPosition();
            this.state = new $f417f94c4eb7bb80$var$ParameterHintState.Pending((0, $eFOsn.createCancelablePromise)((token)=>(0, $e331dd8881de7ee7$exports.provideSignatureHelp)(model, position, triggerContext, token)), activeSignatureHelp);
            try {
                const result = yield this.state.request;
                // Check that we are still resolving the correct signature help
                if (triggerId !== this.triggerId) {
                    result === null || result === void 0 || result.dispose();
                    return false;
                }
                if (!result || !result.value.signatures || result.value.signatures.length === 0) {
                    result === null || result === void 0 || result.dispose();
                    this._lastSignatureHelpResult.clear();
                    this.cancel();
                    return false;
                } else {
                    this.state = new $f417f94c4eb7bb80$var$ParameterHintState.Active(result.value);
                    this._lastSignatureHelpResult.value = result;
                    this._onChangedHints.fire(this.state.hints);
                    return true;
                }
            } catch (error) {
                if (triggerId === this.triggerId) this.state = $f417f94c4eb7bb80$var$ParameterHintState.Default;
                (0, $g0782.onUnexpectedError)(error);
                return false;
            }
        });
    }
    getLastActiveHints() {
        switch(this.state.type){
            case 1 /* Active */ :
                return this.state.hints;
            case 2 /* Pending */ :
                return this.state.previouslyActiveHints;
            default:
                return undefined;
        }
    }
    get isTriggered() {
        return this.state.type === 1 /* Active */  || this.state.type === 2 /* Pending */  || this.throttledDelayer.isTriggered();
    }
    onModelChanged() {
        this.cancel();
        // Update trigger characters
        this.triggerChars = new (0, $kv7iV.CharacterSet)();
        this.retriggerChars = new (0, $kv7iV.CharacterSet)();
        const model = this.editor.getModel();
        if (!model) return;
        for (const support of $eKhCe.SignatureHelpProviderRegistry.ordered(model)){
            for (const ch of support.signatureHelpTriggerCharacters || []){
                this.triggerChars.add(ch.charCodeAt(0));
                // All trigger characters are also considered retrigger characters
                this.retriggerChars.add(ch.charCodeAt(0));
            }
            for (const ch1 of support.signatureHelpRetriggerCharacters || [])this.retriggerChars.add(ch1.charCodeAt(0));
        }
    }
    onDidType(text) {
        if (!this.triggerOnType) return;
        const lastCharIndex = text.length - 1;
        const triggerCharCode = text.charCodeAt(lastCharIndex);
        if (this.triggerChars.has(triggerCharCode) || this.isTriggered && this.retriggerChars.has(triggerCharCode)) this.trigger({
            triggerKind: $eKhCe.SignatureHelpTriggerKind.TriggerCharacter,
            triggerCharacter: text.charAt(lastCharIndex)
        });
    }
    onCursorChange(e) {
        if (e.source === "mouse") this.cancel();
        else if (this.isTriggered) this.trigger({
            triggerKind: $eKhCe.SignatureHelpTriggerKind.ContentChange
        });
    }
    onModelContentChange() {
        if (this.isTriggered) this.trigger({
            triggerKind: $eKhCe.SignatureHelpTriggerKind.ContentChange
        });
    }
    onEditorConfigurationChange() {
        this.triggerOnType = this.editor.getOption(75 /* parameterHints */ ).enabled;
        if (!this.triggerOnType) this.cancel();
    }
    dispose() {
        this.cancel(true);
        super.dispose();
    }
    constructor(editor, delay = $f417f94c4eb7bb80$export$7f27c6b5c579a14e.DEFAULT_DELAY){
        super();
        this._onChangedHints = this._register(new (0, $fSvkC.Emitter)());
        this.onChangedHints = this._onChangedHints.event;
        this.triggerOnType = false;
        this._state = $f417f94c4eb7bb80$var$ParameterHintState.Default;
        this._pendingTriggers = [];
        this._lastSignatureHelpResult = this._register(new (0, $atiRx.MutableDisposable)());
        this.triggerChars = new (0, $kv7iV.CharacterSet)();
        this.retriggerChars = new (0, $kv7iV.CharacterSet)();
        this.triggerId = 0;
        this.editor = editor;
        this.throttledDelayer = new (0, $eFOsn.Delayer)(delay);
        this._register(this.editor.onDidBlurEditorWidget(()=>this.cancel()));
        this._register(this.editor.onDidChangeConfiguration(()=>this.onEditorConfigurationChange()));
        this._register(this.editor.onDidChangeModel((e)=>this.onModelChanged()));
        this._register(this.editor.onDidChangeModelLanguage((_)=>this.onModelChanged()));
        this._register(this.editor.onDidChangeCursorSelection((e)=>this.onCursorChange(e)));
        this._register(this.editor.onDidChangeModelContent((e)=>this.onModelContentChange()));
        this._register($eKhCe.SignatureHelpProviderRegistry.onDidChange(this.onModelChanged, this));
        this._register(this.editor.onDidType((text)=>this.onDidType(text)));
        this.onEditorConfigurationChange();
        this.onModelChanged();
    }
}
$f417f94c4eb7bb80$export$7f27c6b5c579a14e.DEFAULT_DELAY = 120; // ms
function $f417f94c4eb7bb80$var$mergeTriggerContexts(previous, current) {
    switch(current.triggerKind){
        case $eKhCe.SignatureHelpTriggerKind.Invoke:
            // Invoke overrides previous triggers.
            return current;
        case $eKhCe.SignatureHelpTriggerKind.ContentChange:
            // Ignore content changes triggers
            return previous;
        case $eKhCe.SignatureHelpTriggerKind.TriggerCharacter:
        default:
            return current;
    }
}




var $58WHl = parcelRequire("58WHl");

var $bRtox = parcelRequire("bRtox");

var $9KRmt = parcelRequire("9KRmt");

var $3XYy8 = parcelRequire("3XYy8");

var $iValS = parcelRequire("iValS");

var $ia1vI = parcelRequire("ia1vI");

var $fUTzO = parcelRequire("fUTzO");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $54d52e851e400a03$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $54d52e851e400a03$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
const $54d52e851e400a03$var$$ = $jOYcd.$;
const $54d52e851e400a03$var$parameterHintsNextIcon = (0, $iValS.registerIcon)("parameter-hints-next", (0, $8HDYc.Codicon).chevronDown, $58WHl.localize("parameterHintsNextIcon", "Icon for show next parameter hint."));
const $54d52e851e400a03$var$parameterHintsPreviousIcon = (0, $iValS.registerIcon)("parameter-hints-previous", (0, $8HDYc.Codicon).chevronUp, $58WHl.localize("parameterHintsPreviousIcon", "Icon for show previous parameter hint."));
let $54d52e851e400a03$export$fd583862071b2279 = class ParameterHintsWidget extends (0, $atiRx.Disposable) {
    createParameterHintDOMNodes() {
        const element = $54d52e851e400a03$var$$(".editor-widget.parameter-hints-widget");
        const wrapper = $jOYcd.append(element, $54d52e851e400a03$var$$(".phwrapper"));
        wrapper.tabIndex = -1;
        const controls = $jOYcd.append(wrapper, $54d52e851e400a03$var$$(".controls"));
        const previous = $jOYcd.append(controls, $54d52e851e400a03$var$$(".button" + (0, $fUTzO.ThemeIcon).asCSSSelector($54d52e851e400a03$var$parameterHintsPreviousIcon)));
        const overloads = $jOYcd.append(controls, $54d52e851e400a03$var$$(".overloads"));
        const next = $jOYcd.append(controls, $54d52e851e400a03$var$$(".button" + (0, $fUTzO.ThemeIcon).asCSSSelector($54d52e851e400a03$var$parameterHintsNextIcon)));
        this._register($jOYcd.addDisposableListener(previous, "click", (e)=>{
            $jOYcd.EventHelper.stop(e);
            this.previous();
        }));
        this._register($jOYcd.addDisposableListener(next, "click", (e)=>{
            $jOYcd.EventHelper.stop(e);
            this.next();
        }));
        const body = $54d52e851e400a03$var$$(".body");
        const scrollbar = new (0, $cffC6.DomScrollableElement)(body, {});
        this._register(scrollbar);
        wrapper.appendChild(scrollbar.getDomNode());
        const signature = $jOYcd.append(body, $54d52e851e400a03$var$$(".signature"));
        const docs = $jOYcd.append(body, $54d52e851e400a03$var$$(".docs"));
        element.style.userSelect = "text";
        this.domNodes = {
            element: element,
            signature: signature,
            overloads: overloads,
            docs: docs,
            scrollbar: scrollbar
        };
        this.editor.addContentWidget(this);
        this.hide();
        this._register(this.editor.onDidChangeCursorSelection((e)=>{
            if (this.visible) this.editor.layoutContentWidget(this);
        }));
        const updateFont = ()=>{
            if (!this.domNodes) return;
            const fontInfo = this.editor.getOption(43 /* fontInfo */ );
            this.domNodes.element.style.fontSize = `${fontInfo.fontSize}px`;
            this.domNodes.element.style.lineHeight = `${fontInfo.lineHeight / fontInfo.fontSize}`;
        };
        updateFont();
        this._register((0, $fSvkC.Event).chain(this.editor.onDidChangeConfiguration.bind(this.editor)).filter((e)=>e.hasChanged(43 /* fontInfo */ )).on(updateFont, null));
        this._register(this.editor.onDidLayoutChange((e)=>this.updateMaxHeight()));
        this.updateMaxHeight();
    }
    show() {
        if (this.visible) return;
        if (!this.domNodes) this.createParameterHintDOMNodes();
        this.keyVisible.set(true);
        this.visible = true;
        setTimeout(()=>{
            if (this.domNodes) this.domNodes.element.classList.add("visible");
        }, 100);
        this.editor.layoutContentWidget(this);
    }
    hide() {
        this.renderDisposeables.clear();
        if (!this.visible) return;
        this.keyVisible.reset();
        this.visible = false;
        this.announcedLabel = null;
        if (this.domNodes) this.domNodes.element.classList.remove("visible");
        this.editor.layoutContentWidget(this);
    }
    getPosition() {
        if (this.visible) return {
            position: this.editor.getPosition(),
            preference: [
                1 /* ABOVE */ ,
                2 /* BELOW */ 
            ]
        };
        return null;
    }
    render(hints) {
        var _a;
        this.renderDisposeables.clear();
        if (!this.domNodes) return;
        const multiple = hints.signatures.length > 1;
        this.domNodes.element.classList.toggle("multiple", multiple);
        this.keyMultipleSignatures.set(multiple);
        this.domNodes.signature.innerText = "";
        this.domNodes.docs.innerText = "";
        const signature = hints.signatures[hints.activeSignature];
        if (!signature) return;
        const code = $jOYcd.append(this.domNodes.signature, $54d52e851e400a03$var$$(".code"));
        const fontInfo = this.editor.getOption(43 /* fontInfo */ );
        code.style.fontSize = `${fontInfo.fontSize}px`;
        code.style.fontFamily = fontInfo.fontFamily;
        const hasParameters = signature.parameters.length > 0;
        const activeParameterIndex = (_a = signature.activeParameter) !== null && _a !== void 0 ? _a : hints.activeParameter;
        if (!hasParameters) {
            const label = $jOYcd.append(code, $54d52e851e400a03$var$$("span"));
            label.textContent = signature.label;
        } else this.renderParameters(code, signature, activeParameterIndex);
        const activeParameter = signature.parameters[activeParameterIndex];
        if (activeParameter === null || activeParameter === void 0 ? void 0 : activeParameter.documentation) {
            const documentation = $54d52e851e400a03$var$$("span.documentation");
            if (typeof activeParameter.documentation === "string") documentation.textContent = activeParameter.documentation;
            else {
                const renderedContents = this.renderMarkdownDocs(activeParameter.documentation);
                documentation.appendChild(renderedContents.element);
            }
            $jOYcd.append(this.domNodes.docs, $54d52e851e400a03$var$$("p", {}, documentation));
        }
        if (signature.documentation === undefined) ;
        else if (typeof signature.documentation === "string") $jOYcd.append(this.domNodes.docs, $54d52e851e400a03$var$$("p", {}, signature.documentation));
        else {
            const renderedContents1 = this.renderMarkdownDocs(signature.documentation);
            $jOYcd.append(this.domNodes.docs, renderedContents1.element);
        }
        const hasDocs = this.hasDocs(signature, activeParameter);
        this.domNodes.signature.classList.toggle("has-docs", hasDocs);
        this.domNodes.docs.classList.toggle("empty", !hasDocs);
        this.domNodes.overloads.textContent = String(hints.activeSignature + 1).padStart(hints.signatures.length.toString().length, "0") + "/" + hints.signatures.length;
        if (activeParameter) {
            let labelToAnnounce = "";
            const param = signature.parameters[activeParameterIndex];
            if (Array.isArray(param.label)) labelToAnnounce = signature.label.substring(param.label[0], param.label[1]);
            else labelToAnnounce = param.label;
            if (param.documentation) labelToAnnounce += typeof param.documentation === "string" ? `, ${param.documentation}` : `, ${param.documentation.value}`;
            if (signature.documentation) labelToAnnounce += typeof signature.documentation === "string" ? `, ${signature.documentation}` : `, ${signature.documentation.value}`;
            // Select method gets called on every user type while parameter hints are visible.
            // We do not want to spam the user with same announcements, so we only announce if the current parameter changed.
            if (this.announcedLabel !== labelToAnnounce) {
                $cVmYb.alert($58WHl.localize("hint", "{0}, hint", labelToAnnounce));
                this.announcedLabel = labelToAnnounce;
            }
        }
        this.editor.layoutContentWidget(this);
        this.domNodes.scrollbar.scanDomNode();
    }
    renderMarkdownDocs(markdown) {
        const renderedContents = this.renderDisposeables.add(this.markdownRenderer.render(markdown, {
            asyncRenderCallback: ()=>{
                var _a;
                (_a = this.domNodes) === null || _a === void 0 || _a.scrollbar.scanDomNode();
            }
        }));
        renderedContents.element.classList.add("markdown-docs");
        return renderedContents;
    }
    hasDocs(signature, activeParameter) {
        if (activeParameter && typeof activeParameter.documentation === "string" && (0, $3ICxR.assertIsDefined)(activeParameter.documentation).length > 0) return true;
        if (activeParameter && typeof activeParameter.documentation === "object" && (0, $3ICxR.assertIsDefined)(activeParameter.documentation).value.length > 0) return true;
        if (signature.documentation && typeof signature.documentation === "string" && (0, $3ICxR.assertIsDefined)(signature.documentation).length > 0) return true;
        if (signature.documentation && typeof signature.documentation === "object" && (0, $3ICxR.assertIsDefined)(signature.documentation.value).length > 0) return true;
        return false;
    }
    renderParameters(parent, signature, activeParameterIndex) {
        const [start, end] = this.getParameterLabelOffsets(signature, activeParameterIndex);
        const beforeSpan = document.createElement("span");
        beforeSpan.textContent = signature.label.substring(0, start);
        const paramSpan = document.createElement("span");
        paramSpan.textContent = signature.label.substring(start, end);
        paramSpan.className = "parameter active";
        const afterSpan = document.createElement("span");
        afterSpan.textContent = signature.label.substring(end);
        $jOYcd.append(parent, beforeSpan, paramSpan, afterSpan);
    }
    getParameterLabelOffsets(signature, paramIdx) {
        const param = signature.parameters[paramIdx];
        if (!param) return [
            0,
            0
        ];
        else if (Array.isArray(param.label)) return param.label;
        else if (!param.label.length) return [
            0,
            0
        ];
        else {
            const regex = new RegExp(`(\\W|^)${(0, $9TEeL.escapeRegExpCharacters)(param.label)}(?=\\W|$)`, "g");
            regex.test(signature.label);
            const idx = regex.lastIndex - param.label.length;
            return idx >= 0 ? [
                idx,
                regex.lastIndex
            ] : [
                0,
                0
            ];
        }
    }
    next() {
        this.editor.focus();
        this.model.next();
    }
    previous() {
        this.editor.focus();
        this.model.previous();
    }
    cancel() {
        this.model.cancel();
    }
    getDomNode() {
        if (!this.domNodes) this.createParameterHintDOMNodes();
        return this.domNodes.element;
    }
    getId() {
        return ParameterHintsWidget.ID;
    }
    trigger(context) {
        this.model.trigger(context, 0);
    }
    updateMaxHeight() {
        if (!this.domNodes) return;
        const height = Math.max(this.editor.getLayoutInfo().height / 4, 250);
        const maxHeight = `${height}px`;
        this.domNodes.element.style.maxHeight = maxHeight;
        const wrapper = this.domNodes.element.getElementsByClassName("phwrapper");
        if (wrapper.length) wrapper[0].style.maxHeight = maxHeight;
    }
    constructor(editor, contextKeyService, openerService, modeService){
        super();
        this.editor = editor;
        this.renderDisposeables = this._register(new (0, $atiRx.DisposableStore)());
        this.visible = false;
        this.announcedLabel = null;
        // Editor.IContentWidget.allowEditorOverflow
        this.allowEditorOverflow = true;
        this.markdownRenderer = this._register(new (0, $ead540c899f453a8$exports.MarkdownRenderer)({
            editor: editor
        }, modeService, openerService));
        this.model = this._register(new (0, $f417f94c4eb7bb80$exports.ParameterHintsModel)(editor));
        this.keyVisible = (0, $e331dd8881de7ee7$exports.Context).Visible.bindTo(contextKeyService);
        this.keyMultipleSignatures = (0, $e331dd8881de7ee7$exports.Context).MultipleSignatures.bindTo(contextKeyService);
        this._register(this.model.onChangedHints((newParameterHints)=>{
            if (newParameterHints) {
                this.show();
                this.render(newParameterHints);
            } else this.hide();
        }));
    }
};
$54d52e851e400a03$export$fd583862071b2279.ID = "editor.widget.parameterHintsWidget";
$54d52e851e400a03$export$fd583862071b2279 = $54d52e851e400a03$var$__decorate([
    $54d52e851e400a03$var$__param(1, (0, $bRtox.IContextKeyService)),
    $54d52e851e400a03$var$__param(2, (0, $9KRmt.IOpenerService)),
    $54d52e851e400a03$var$__param(3, (0, $6o4cZ.IModeService))
], $54d52e851e400a03$export$fd583862071b2279);
const $54d52e851e400a03$export$8d35a56443b6b66f = (0, $3XYy8.registerColor)("editorHoverWidget.highlightForeground", {
    dark: (0, $3XYy8.listHighlightForeground),
    light: (0, $3XYy8.listHighlightForeground),
    hc: (0, $3XYy8.listHighlightForeground)
}, $58WHl.localize("editorHoverWidgetHighlightForeground", "Foreground color of the active item in the parameter hint."));
(0, $fUTzO.registerThemingParticipant)((theme, collector)=>{
    const border = theme.getColor((0, $3XYy8.editorHoverBorder));
    if (border) {
        const borderWidth = theme.type === (0, $ia1vI.ColorScheme).HIGH_CONTRAST ? 2 : 1;
        collector.addRule(`.monaco-editor .parameter-hints-widget { border: ${borderWidth}px solid ${border}; }`);
        collector.addRule(`.monaco-editor .parameter-hints-widget.multiple .body { border-left: 1px solid ${border.transparent(0.5)}; }`);
        collector.addRule(`.monaco-editor .parameter-hints-widget .signature.has-docs { border-bottom: 1px solid ${border.transparent(0.5)}; }`);
    }
    const background = theme.getColor((0, $3XYy8.editorHoverBackground));
    if (background) collector.addRule(`.monaco-editor .parameter-hints-widget { background-color: ${background}; }`);
    const link = theme.getColor((0, $3XYy8.textLinkForeground));
    if (link) collector.addRule(`.monaco-editor .parameter-hints-widget a { color: ${link}; }`);
    const linkHover = theme.getColor((0, $3XYy8.textLinkActiveForeground));
    if (linkHover) collector.addRule(`.monaco-editor .parameter-hints-widget a:hover { color: ${linkHover}; }`);
    const foreground = theme.getColor((0, $3XYy8.editorHoverForeground));
    if (foreground) collector.addRule(`.monaco-editor .parameter-hints-widget { color: ${foreground}; }`);
    const codeBackground = theme.getColor((0, $3XYy8.textCodeBlockBackground));
    if (codeBackground) collector.addRule(`.monaco-editor .parameter-hints-widget code { background-color: ${codeBackground}; }`);
    const parameterHighlightColor = theme.getColor($54d52e851e400a03$export$8d35a56443b6b66f);
    if (parameterHighlightColor) collector.addRule(`.monaco-editor .parameter-hints-widget .parameter.active { color: ${parameterHighlightColor}}`);
});


/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $c6136d72cc3bc913$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $c6136d72cc3bc913$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
let $c6136d72cc3bc913$var$ParameterHintsController = class ParameterHintsController extends (0, $atiRx.Disposable) {
    static get(editor) {
        return editor.getContribution(ParameterHintsController.ID);
    }
    cancel() {
        this.widget.cancel();
    }
    previous() {
        this.widget.previous();
    }
    next() {
        this.widget.next();
    }
    trigger(context) {
        this.widget.trigger(context);
    }
    constructor(editor, instantiationService){
        super();
        this.editor = editor;
        this.widget = this._register(instantiationService.createInstance((0, $54d52e851e400a03$exports.ParameterHintsWidget), this.editor));
    }
};
$c6136d72cc3bc913$var$ParameterHintsController.ID = "editor.controller.parameterHints";
$c6136d72cc3bc913$var$ParameterHintsController = $c6136d72cc3bc913$var$__decorate([
    $c6136d72cc3bc913$var$__param(1, (0, $iZW67.IInstantiationService))
], $c6136d72cc3bc913$var$ParameterHintsController);
class $c6136d72cc3bc913$export$289200f1e6286db4 extends (0, $gGOeQ.EditorAction) {
    run(accessor, editor) {
        const controller = $c6136d72cc3bc913$var$ParameterHintsController.get(editor);
        if (controller) controller.trigger({
            triggerKind: $eKhCe.SignatureHelpTriggerKind.Invoke
        });
    }
    constructor(){
        super({
            id: "editor.action.triggerParameterHints",
            label: $58WHl.localize("parameterHints.trigger.label", "Trigger Parameter Hints"),
            alias: "Trigger Parameter Hints",
            precondition: (0, $bdLce.EditorContextKeys).hasSignatureHelpProvider,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: 3082 /* Space */ ,
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
(0, $gGOeQ.registerEditorContribution)($c6136d72cc3bc913$var$ParameterHintsController.ID, $c6136d72cc3bc913$var$ParameterHintsController);
(0, $gGOeQ.registerEditorAction)($c6136d72cc3bc913$export$289200f1e6286db4);
const $c6136d72cc3bc913$var$weight = 175;
const $c6136d72cc3bc913$var$ParameterHintsCommand = (0, $gGOeQ.EditorCommand).bindToContribution($c6136d72cc3bc913$var$ParameterHintsController.get);
(0, $gGOeQ.registerEditorCommand)(new $c6136d72cc3bc913$var$ParameterHintsCommand({
    id: "closeParameterHints",
    precondition: (0, $e331dd8881de7ee7$exports.Context).Visible,
    handler: (x)=>x.cancel(),
    kbOpts: {
        weight: $c6136d72cc3bc913$var$weight,
        kbExpr: (0, $bdLce.EditorContextKeys).focus,
        primary: 9 /* Escape */ ,
        secondary: [
            1033 /* Escape */ 
        ]
    }
}));
(0, $gGOeQ.registerEditorCommand)(new $c6136d72cc3bc913$var$ParameterHintsCommand({
    id: "showPrevParameterHint",
    precondition: (0, $bRtox.ContextKeyExpr).and((0, $e331dd8881de7ee7$exports.Context).Visible, (0, $e331dd8881de7ee7$exports.Context).MultipleSignatures),
    handler: (x)=>x.previous(),
    kbOpts: {
        weight: $c6136d72cc3bc913$var$weight,
        kbExpr: (0, $bdLce.EditorContextKeys).focus,
        primary: 16 /* UpArrow */ ,
        secondary: [
            528 /* UpArrow */ 
        ],
        mac: {
            primary: 16 /* UpArrow */ ,
            secondary: [
                528 /* UpArrow */ ,
                302 /* KeyP */ 
            ]
        }
    }
}));
(0, $gGOeQ.registerEditorCommand)(new $c6136d72cc3bc913$var$ParameterHintsCommand({
    id: "showNextParameterHint",
    precondition: (0, $bRtox.ContextKeyExpr).and((0, $e331dd8881de7ee7$exports.Context).Visible, (0, $e331dd8881de7ee7$exports.Context).MultipleSignatures),
    handler: (x)=>x.next(),
    kbOpts: {
        weight: $c6136d72cc3bc913$var$weight,
        kbExpr: (0, $bdLce.EditorContextKeys).focus,
        primary: 18 /* DownArrow */ ,
        secondary: [
            530 /* DownArrow */ 
        ],
        mac: {
            primary: 18 /* DownArrow */ ,
            secondary: [
                530 /* DownArrow */ ,
                300 /* KeyN */ 
            ]
        }
    }
}));


var $d2bd8134f01b7c67$exports = {};

var $cVmYb = parcelRequire("cVmYb");

var $eFOsn = parcelRequire("eFOsn");

var $gnEXx = parcelRequire("gnEXx");

var $g0782 = parcelRequire("g0782");

var $atiRx = parcelRequire("atiRx");

var $3ICxR = parcelRequire("3ICxR");

var $7K96x = parcelRequire("7K96x");

var $iVwSq = parcelRequire("iVwSq");

var $gGOeQ = parcelRequire("gGOeQ");

var $5N8h4 = parcelRequire("5N8h4");

var $aXAVz = parcelRequire("aXAVz");

var $8qXsZ = parcelRequire("8qXsZ");

var $3HpR4 = parcelRequire("3HpR4");

var $bdLce = parcelRequire("bdLce");

var $eKhCe = parcelRequire("eKhCe");

var $jYBRO = parcelRequire("jYBRO");


var $58WHl = parcelRequire("58WHl");

var $lrF8b = parcelRequire("lrF8b");

var $bRtox = parcelRequire("bRtox");

var $iZW67 = parcelRequire("iZW67");

var $h720z = parcelRequire("h720z");

var $dgZ0t = parcelRequire("dgZ0t");

var $9xODy = parcelRequire("9xODy");

var $ddqyp = parcelRequire("ddqyp");
var $a17c2f8017c1a9bf$exports = {};

$parcel$export($a17c2f8017c1a9bf$exports, "CONTEXT_RENAME_INPUT_VISIBLE", function () { return $a17c2f8017c1a9bf$export$af782c46022b2288; }, function (v) { return $a17c2f8017c1a9bf$export$af782c46022b2288 = v; });
$parcel$export($a17c2f8017c1a9bf$exports, "RenameInputField", function () { return $a17c2f8017c1a9bf$export$815a698d2e600605; }, function (v) { return $a17c2f8017c1a9bf$export$815a698d2e600605 = v; });

var $atiRx = parcelRequire("atiRx");


var $8qXsZ = parcelRequire("8qXsZ");

var $58WHl = parcelRequire("58WHl");

var $bRtox = parcelRequire("bRtox");

var $gY9wc = parcelRequire("gY9wc");

var $3XYy8 = parcelRequire("3XYy8");

var $fUTzO = parcelRequire("fUTzO");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $a17c2f8017c1a9bf$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $a17c2f8017c1a9bf$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
const $a17c2f8017c1a9bf$export$af782c46022b2288 = new (0, $bRtox.RawContextKey)("renameInputVisible", false, (0, $58WHl.localize)("renameInputVisible", "Whether the rename input widget is visible"));
let $a17c2f8017c1a9bf$export$815a698d2e600605 = class RenameInputField {
    dispose() {
        this._disposables.dispose();
        this._editor.removeContentWidget(this);
    }
    getId() {
        return "__renameInputWidget";
    }
    getDomNode() {
        if (!this._domNode) {
            this._domNode = document.createElement("div");
            this._domNode.className = "monaco-editor rename-box";
            this._input = document.createElement("input");
            this._input.className = "rename-input";
            this._input.type = "text";
            this._input.setAttribute("aria-label", (0, $58WHl.localize)("renameAriaLabel", "Rename input. Type new name and press Enter to commit."));
            this._domNode.appendChild(this._input);
            this._label = document.createElement("div");
            this._label.className = "rename-label";
            this._domNode.appendChild(this._label);
            const updateLabel = ()=>{
                var _a, _b;
                const [accept, preview] = this._acceptKeybindings;
                this._keybindingService.lookupKeybinding(accept);
                this._label.innerText = (0, $58WHl.localize)({
                    key: "label",
                    comment: [
                        'placeholders are keybindings, e.g "F2 to Rename, Shift+F2 to Preview"'
                    ]
                }, "{0} to Rename, {1} to Preview", (_a = this._keybindingService.lookupKeybinding(accept)) === null || _a === void 0 ? void 0 : _a.getLabel(), (_b = this._keybindingService.lookupKeybinding(preview)) === null || _b === void 0 ? void 0 : _b.getLabel());
            };
            updateLabel();
            this._disposables.add(this._keybindingService.onDidUpdateKeybindings(updateLabel));
            this._updateFont();
            this._updateStyles(this._themeService.getColorTheme());
        }
        return this._domNode;
    }
    _updateStyles(theme) {
        var _a, _b, _c, _d;
        if (!this._input || !this._domNode) return;
        const widgetShadowColor = theme.getColor((0, $3XYy8.widgetShadow));
        this._domNode.style.backgroundColor = String((_a = theme.getColor((0, $3XYy8.editorWidgetBackground))) !== null && _a !== void 0 ? _a : "");
        this._domNode.style.boxShadow = widgetShadowColor ? ` 0 0 8px 2px ${widgetShadowColor}` : "";
        this._domNode.style.color = String((_b = theme.getColor((0, $3XYy8.inputForeground))) !== null && _b !== void 0 ? _b : "");
        this._input.style.backgroundColor = String((_c = theme.getColor((0, $3XYy8.inputBackground))) !== null && _c !== void 0 ? _c : "");
        // this._input.style.color = String(theme.getColor(inputForeground) ?? '');
        const border = theme.getColor((0, $3XYy8.inputBorder));
        this._input.style.borderWidth = border ? "1px" : "0px";
        this._input.style.borderStyle = border ? "solid" : "none";
        this._input.style.borderColor = (_d = border === null || border === void 0 ? void 0 : border.toString()) !== null && _d !== void 0 ? _d : "none";
    }
    _updateFont() {
        if (!this._input || !this._label) return;
        const fontInfo = this._editor.getOption(43 /* fontInfo */ );
        this._input.style.fontFamily = fontInfo.fontFamily;
        this._input.style.fontWeight = fontInfo.fontWeight;
        this._input.style.fontSize = `${fontInfo.fontSize}px`;
        this._label.style.fontSize = `${fontInfo.fontSize * 0.8}px`;
    }
    getPosition() {
        if (!this._visible) return null;
        return {
            position: this._position,
            preference: [
                2 /* BELOW */ ,
                1 /* ABOVE */ 
            ]
        };
    }
    afterRender(position) {
        if (!position) // cancel rename when input widget isn't rendered anymore
        this.cancelInput(true);
    }
    acceptInput(wantsPreview) {
        if (this._currentAcceptInput) this._currentAcceptInput(wantsPreview);
    }
    cancelInput(focusEditor) {
        if (this._currentCancelInput) this._currentCancelInput(focusEditor);
    }
    getInput(where, value, selectionStart, selectionEnd, supportPreview, token) {
        this._domNode.classList.toggle("preview", supportPreview);
        this._position = new (0, $8qXsZ.Position)(where.startLineNumber, where.startColumn);
        this._input.value = value;
        this._input.setAttribute("selectionStart", selectionStart.toString());
        this._input.setAttribute("selectionEnd", selectionEnd.toString());
        this._input.size = Math.max((where.endColumn - where.startColumn) * 1.1, 20);
        const disposeOnDone = new (0, $atiRx.DisposableStore)();
        return new Promise((resolve)=>{
            this._currentCancelInput = (focusEditor)=>{
                this._currentAcceptInput = undefined;
                this._currentCancelInput = undefined;
                resolve(focusEditor);
                return true;
            };
            this._currentAcceptInput = (wantsPreview)=>{
                if (this._input.value.trim().length === 0 || this._input.value === value) {
                    // empty or whitespace only or not changed
                    this.cancelInput(true);
                    return;
                }
                this._currentAcceptInput = undefined;
                this._currentCancelInput = undefined;
                resolve({
                    newName: this._input.value,
                    wantsPreview: supportPreview && wantsPreview
                });
            };
            token.onCancellationRequested(()=>this.cancelInput(true));
            disposeOnDone.add(this._editor.onDidBlurEditorWidget(()=>this.cancelInput(false)));
            this._show();
        }).finally(()=>{
            disposeOnDone.dispose();
            this._hide();
        });
    }
    _show() {
        this._editor.revealLineInCenterIfOutsideViewport(this._position.lineNumber, 0 /* Smooth */ );
        this._visible = true;
        this._visibleContextKey.set(true);
        this._editor.layoutContentWidget(this);
        setTimeout(()=>{
            this._input.focus();
            this._input.setSelectionRange(parseInt(this._input.getAttribute("selectionStart")), parseInt(this._input.getAttribute("selectionEnd")));
        }, 100);
    }
    _hide() {
        this._visible = false;
        this._visibleContextKey.reset();
        this._editor.layoutContentWidget(this);
    }
    constructor(_editor, _acceptKeybindings, _themeService, _keybindingService, contextKeyService){
        this._editor = _editor;
        this._acceptKeybindings = _acceptKeybindings;
        this._themeService = _themeService;
        this._keybindingService = _keybindingService;
        this._disposables = new (0, $atiRx.DisposableStore)();
        this.allowEditorOverflow = true;
        this._visibleContextKey = $a17c2f8017c1a9bf$export$af782c46022b2288.bindTo(contextKeyService);
        this._editor.addContentWidget(this);
        this._disposables.add(this._editor.onDidChangeConfiguration((e)=>{
            if (e.hasChanged(43 /* fontInfo */ )) this._updateFont();
        }));
        this._disposables.add(_themeService.onDidColorThemeChange(this._updateStyles, this));
    }
};
$a17c2f8017c1a9bf$export$815a698d2e600605 = $a17c2f8017c1a9bf$var$__decorate([
    $a17c2f8017c1a9bf$var$__param(2, (0, $fUTzO.IThemeService)),
    $a17c2f8017c1a9bf$var$__param(3, (0, $gY9wc.IKeybindingService)),
    $a17c2f8017c1a9bf$var$__param(4, (0, $bRtox.IContextKeyService))
], $a17c2f8017c1a9bf$export$815a698d2e600605);


/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $d2bd8134f01b7c67$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $d2bd8134f01b7c67$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var $d2bd8134f01b7c67$var$__awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class $d2bd8134f01b7c67$var$RenameSkeleton {
    hasProvider() {
        return this._providers.length > 0;
    }
    resolveRenameLocation(token) {
        return $d2bd8134f01b7c67$var$__awaiter(this, void 0, void 0, function*() {
            const rejects = [];
            for(this._providerRenameIdx = 0; this._providerRenameIdx < this._providers.length; this._providerRenameIdx++){
                const provider = this._providers[this._providerRenameIdx];
                if (!provider.resolveRenameLocation) break;
                let res = yield provider.resolveRenameLocation(this.model, this.position, token);
                if (!res) continue;
                if (res.rejectReason) {
                    rejects.push(res.rejectReason);
                    continue;
                }
                return res;
            }
            const word = this.model.getWordAtPosition(this.position);
            if (!word) return {
                range: (0, $3HpR4.Range).fromPositions(this.position),
                text: "",
                rejectReason: rejects.length > 0 ? rejects.join("\n") : undefined
            };
            return {
                range: new (0, $3HpR4.Range)(this.position.lineNumber, word.startColumn, this.position.lineNumber, word.endColumn),
                text: word.word,
                rejectReason: rejects.length > 0 ? rejects.join("\n") : undefined
            };
        });
    }
    provideRenameEdits(newName, token) {
        return $d2bd8134f01b7c67$var$__awaiter(this, void 0, void 0, function*() {
            return this._provideRenameEdits(newName, this._providerRenameIdx, [], token);
        });
    }
    _provideRenameEdits(newName, i, rejects, token) {
        return $d2bd8134f01b7c67$var$__awaiter(this, void 0, void 0, function*() {
            const provider = this._providers[i];
            if (!provider) return {
                edits: [],
                rejectReason: rejects.join("\n")
            };
            const result = yield provider.provideRenameEdits(this.model, this.position, newName, token);
            if (!result) return this._provideRenameEdits(newName, i + 1, rejects.concat($58WHl.localize("no result", "No result.")), token);
            else if (result.rejectReason) return this._provideRenameEdits(newName, i + 1, rejects.concat(result.rejectReason), token);
            return result;
        });
    }
    constructor(model, position){
        this.model = model;
        this.position = position;
        this._providerRenameIdx = 0;
        this._providers = (0, $eKhCe.RenameProviderRegistry).ordered(model);
    }
}
function $d2bd8134f01b7c67$export$7ac989ec0c9c279(model, position, newName) {
    return $d2bd8134f01b7c67$var$__awaiter(this, void 0, void 0, function*() {
        const skeleton = new $d2bd8134f01b7c67$var$RenameSkeleton(model, position);
        const loc = yield skeleton.resolveRenameLocation((0, $gnEXx.CancellationToken).None);
        if (loc === null || loc === void 0 ? void 0 : loc.rejectReason) return {
            edits: [],
            rejectReason: loc.rejectReason
        };
        return skeleton.provideRenameEdits(newName, (0, $gnEXx.CancellationToken).None);
    });
}
// ---  register actions and commands
let $d2bd8134f01b7c67$var$RenameController = class RenameController {
    static get(editor) {
        return editor.getContribution(RenameController.ID);
    }
    dispose() {
        this._dispoableStore.dispose();
        this._cts.dispose(true);
    }
    run() {
        return $d2bd8134f01b7c67$var$__awaiter(this, void 0, void 0, function*() {
            this._cts.dispose(true);
            if (!this.editor.hasModel()) return undefined;
            const position = this.editor.getPosition();
            const skeleton = new $d2bd8134f01b7c67$var$RenameSkeleton(this.editor.getModel(), position);
            if (!skeleton.hasProvider()) return undefined;
            this._cts = new (0, $iVwSq.EditorStateCancellationTokenSource)(this.editor, 5 /* Value */ );
            // resolve rename location
            let loc;
            try {
                const resolveLocationOperation = skeleton.resolveRenameLocation(this._cts.token);
                this._progressService.showWhile(resolveLocationOperation, 250);
                loc = yield resolveLocationOperation;
            } catch (e) {
                (0, $fd39257ccc55be8e$exports.MessageController).get(this.editor).showMessage(e || $58WHl.localize("resolveRenameLocationFailed", "An unknown error occurred while resolving rename location"), position);
                return undefined;
            }
            if (!loc) return undefined;
            if (loc.rejectReason) {
                (0, $fd39257ccc55be8e$exports.MessageController).get(this.editor).showMessage(loc.rejectReason, position);
                return undefined;
            }
            if (this._cts.token.isCancellationRequested) return undefined;
            this._cts.dispose();
            this._cts = new (0, $iVwSq.EditorStateCancellationTokenSource)(this.editor, 5 /* Value */ , loc.range);
            // do rename at location
            let selection = this.editor.getSelection();
            let selectionStart = 0;
            let selectionEnd = loc.text.length;
            if (!(0, $3HpR4.Range).isEmpty(selection) && !(0, $3HpR4.Range).spansMultipleLines(selection) && (0, $3HpR4.Range).containsRange(loc.range, selection)) {
                selectionStart = Math.max(0, selection.startColumn - loc.range.startColumn);
                selectionEnd = Math.min(loc.range.endColumn, selection.endColumn) - loc.range.startColumn;
            }
            const supportPreview = this._bulkEditService.hasPreviewHandler() && this._configService.getValue(this.editor.getModel().uri, "editor.rename.enablePreview");
            const inputFieldResult = yield this._renameInputField.value.getInput(loc.range, loc.text, selectionStart, selectionEnd, supportPreview, this._cts.token);
            // no result, only hint to focus the editor or not
            if (typeof inputFieldResult === "boolean") {
                if (inputFieldResult) this.editor.focus();
                return undefined;
            }
            this.editor.focus();
            const renameOperation = (0, $eFOsn.raceCancellation)(skeleton.provideRenameEdits(inputFieldResult.newName, this._cts.token), this._cts.token).then((renameResult)=>$d2bd8134f01b7c67$var$__awaiter(this, void 0, void 0, function*() {
                    if (!renameResult || !this.editor.hasModel()) return;
                    if (renameResult.rejectReason) {
                        this._notificationService.info(renameResult.rejectReason);
                        return;
                    }
                    // collapse selection to active end
                    this.editor.setSelection((0, $3HpR4.Range).fromPositions(this.editor.getSelection().getPosition()));
                    this._bulkEditService.apply((0, $5N8h4.ResourceEdit).convert(renameResult), {
                        editor: this.editor,
                        showPreview: inputFieldResult.wantsPreview,
                        label: $58WHl.localize("label", "Renaming '{0}'", loc === null || loc === void 0 ? void 0 : loc.text),
                        quotableLabel: $58WHl.localize("quotableLabel", "Renaming {0}", loc === null || loc === void 0 ? void 0 : loc.text)
                    }).then((result)=>{
                        if (result.ariaSummary) (0, $cVmYb.alert)($58WHl.localize("aria", "Successfully renamed '{0}' to '{1}'. Summary: {2}", loc.text, inputFieldResult.newName, result.ariaSummary));
                    }).catch((err)=>{
                        this._notificationService.error($58WHl.localize("rename.failedApply", "Rename failed to apply edits"));
                        this._logService.error(err);
                    });
                }), (err)=>{
                this._notificationService.error($58WHl.localize("rename.failed", "Rename failed to compute edits"));
                this._logService.error(err);
            });
            this._progressService.showWhile(renameOperation, 250);
            return renameOperation;
        });
    }
    acceptRenameInput(wantsPreview) {
        this._renameInputField.value.acceptInput(wantsPreview);
    }
    cancelRenameInput() {
        this._renameInputField.value.cancelInput(true);
    }
    constructor(editor, _instaService, _notificationService, _bulkEditService, _progressService, _logService, _configService){
        this.editor = editor;
        this._instaService = _instaService;
        this._notificationService = _notificationService;
        this._bulkEditService = _bulkEditService;
        this._progressService = _progressService;
        this._logService = _logService;
        this._configService = _configService;
        this._dispoableStore = new (0, $atiRx.DisposableStore)();
        this._cts = new (0, $gnEXx.CancellationTokenSource)();
        this._renameInputField = this._dispoableStore.add(new (0, $eFOsn.IdleValue)(()=>this._dispoableStore.add(this._instaService.createInstance((0, $a17c2f8017c1a9bf$exports.RenameInputField), this.editor, [
                "acceptRenameInput",
                "acceptRenameInputWithPreview"
            ]))));
    }
};
$d2bd8134f01b7c67$var$RenameController.ID = "editor.contrib.renameController";
$d2bd8134f01b7c67$var$RenameController = $d2bd8134f01b7c67$var$__decorate([
    $d2bd8134f01b7c67$var$__param(1, (0, $iZW67.IInstantiationService)),
    $d2bd8134f01b7c67$var$__param(2, (0, $dgZ0t.INotificationService)),
    $d2bd8134f01b7c67$var$__param(3, (0, $5N8h4.IBulkEditService)),
    $d2bd8134f01b7c67$var$__param(4, (0, $9xODy.IEditorProgressService)),
    $d2bd8134f01b7c67$var$__param(5, (0, $h720z.ILogService)),
    $d2bd8134f01b7c67$var$__param(6, (0, $jYBRO.ITextResourceConfigurationService))
], $d2bd8134f01b7c67$var$RenameController);
class $d2bd8134f01b7c67$export$9c8fe0f1407330da extends (0, $gGOeQ.EditorAction) {
    runCommand(accessor, args) {
        const editorService = accessor.get((0, $aXAVz.ICodeEditorService));
        const [uri, pos] = Array.isArray(args) && args || [
            undefined,
            undefined
        ];
        if ((0, $7K96x.URI).isUri(uri) && (0, $8qXsZ.Position).isIPosition(pos)) return editorService.openCodeEditor({
            resource: uri
        }, editorService.getActiveCodeEditor()).then((editor)=>{
            if (!editor) return;
            editor.setPosition(pos);
            editor.invokeWithinContext((accessor)=>{
                this.reportTelemetry(accessor, editor);
                return this.run(accessor, editor);
            });
        }, (0, $g0782.onUnexpectedError));
        return super.runCommand(accessor, args);
    }
    run(accessor, editor) {
        const controller = $d2bd8134f01b7c67$var$RenameController.get(editor);
        if (controller) return controller.run();
        return Promise.resolve();
    }
    constructor(){
        super({
            id: "editor.action.rename",
            label: $58WHl.localize("rename.label", "Rename Symbol"),
            alias: "Rename Symbol",
            precondition: (0, $bRtox.ContextKeyExpr).and((0, $bdLce.EditorContextKeys).writable, (0, $bdLce.EditorContextKeys).hasRenameProvider),
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: 60 /* F2 */ ,
                weight: 100 /* EditorContrib */ 
            },
            contextMenuOpts: {
                group: "1_modification",
                order: 1.1
            }
        });
    }
}
(0, $gGOeQ.registerEditorContribution)($d2bd8134f01b7c67$var$RenameController.ID, $d2bd8134f01b7c67$var$RenameController);
(0, $gGOeQ.registerEditorAction)($d2bd8134f01b7c67$export$9c8fe0f1407330da);
const $d2bd8134f01b7c67$var$RenameCommand = (0, $gGOeQ.EditorCommand).bindToContribution($d2bd8134f01b7c67$var$RenameController.get);
(0, $gGOeQ.registerEditorCommand)(new $d2bd8134f01b7c67$var$RenameCommand({
    id: "acceptRenameInput",
    precondition: (0, $a17c2f8017c1a9bf$exports.CONTEXT_RENAME_INPUT_VISIBLE),
    handler: (x)=>x.acceptRenameInput(false),
    kbOpts: {
        weight: 199,
        kbExpr: (0, $bdLce.EditorContextKeys).focus,
        primary: 3 /* Enter */ 
    }
}));
(0, $gGOeQ.registerEditorCommand)(new $d2bd8134f01b7c67$var$RenameCommand({
    id: "acceptRenameInputWithPreview",
    precondition: (0, $bRtox.ContextKeyExpr).and((0, $a17c2f8017c1a9bf$exports.CONTEXT_RENAME_INPUT_VISIBLE), (0, $bRtox.ContextKeyExpr).has("config.editor.rename.enablePreview")),
    handler: (x)=>x.acceptRenameInput(true),
    kbOpts: {
        weight: 199,
        kbExpr: (0, $bdLce.EditorContextKeys).focus,
        primary: 1027 /* Enter */ 
    }
}));
(0, $gGOeQ.registerEditorCommand)(new $d2bd8134f01b7c67$var$RenameCommand({
    id: "cancelRenameInput",
    precondition: (0, $a17c2f8017c1a9bf$exports.CONTEXT_RENAME_INPUT_VISIBLE),
    handler: (x)=>x.cancelRenameInput(),
    kbOpts: {
        weight: 199,
        kbExpr: (0, $bdLce.EditorContextKeys).focus,
        primary: 9 /* Escape */ ,
        secondary: [
            1033 /* Escape */ 
        ]
    }
}));
// ---- api bridge command
(0, $gGOeQ.registerModelAndPositionCommand)("_executeDocumentRenameProvider", function(model, position, ...args) {
    const [newName] = args;
    (0, $3ICxR.assertType)(typeof newName === "string");
    return $d2bd8134f01b7c67$export$7ac989ec0c9c279(model, position, newName);
});
(0, $gGOeQ.registerModelAndPositionCommand)("_executePrepareRename", function(model, position) {
    return $d2bd8134f01b7c67$var$__awaiter(this, void 0, void 0, function*() {
        const skeleton = new $d2bd8134f01b7c67$var$RenameSkeleton(model, position);
        const loc = yield skeleton.resolveRenameLocation((0, $gnEXx.CancellationToken).None);
        if (loc === null || loc === void 0 ? void 0 : loc.rejectReason) throw new Error(loc.rejectReason);
        return loc;
    });
});
//todo@jrieken use editor options world
(0, $ddqyp.Registry).as((0, $lrF8b.Extensions).Configuration).registerConfiguration({
    id: "editor",
    properties: {
        "editor.rename.enablePreview": {
            scope: 5 /* LANGUAGE_OVERRIDABLE */ ,
            description: $58WHl.localize("enablePreview", "Enable/disable the ability to preview changes before renaming"),
            default: true,
            type: "boolean"
        }
    }
});


var $27844bc4b4d4b1c5$exports = {};

var $4xCD7 = parcelRequire("4xCD7");

var $gnEXx = parcelRequire("gnEXx");

var $g0782 = parcelRequire("g0782");

var $gGOeQ = parcelRequire("gGOeQ");

var $8qXsZ = parcelRequire("8qXsZ");

var $3HpR4 = parcelRequire("3HpR4");

var $cz0c7 = parcelRequire("cz0c7");

var $bdLce = parcelRequire("bdLce");

var $eKhCe = parcelRequire("eKhCe");


var $9TEeL = parcelRequire("9TEeL");

var $3HpR4 = parcelRequire("3HpR4");
class $d414ea467cd42ec6$export$ef5b42c27450f48c {
    provideSelectionRanges(model, positions) {
        const result = [];
        for (const position of positions){
            const bucket = [];
            result.push(bucket);
            this._addInWordRanges(bucket, model, position);
            this._addWordRanges(bucket, model, position);
            this._addWhitespaceLine(bucket, model, position);
            bucket.push({
                range: model.getFullModelRange()
            });
        }
        return result;
    }
    _addInWordRanges(bucket, model, pos) {
        const obj = model.getWordAtPosition(pos);
        if (!obj) return;
        let { word: word , startColumn: startColumn  } = obj;
        let offset = pos.column - startColumn;
        let start = offset;
        let end = offset;
        let lastCh = 0;
        // LEFT anchor (start)
        for(; start >= 0; start--){
            let ch = word.charCodeAt(start);
            if (start !== offset && (ch === 95 /* Underline */  || ch === 45 /* Dash */ )) break;
            else if ((0, $9TEeL.isLowerAsciiLetter)(ch) && (0, $9TEeL.isUpperAsciiLetter)(lastCh)) break;
            lastCh = ch;
        }
        start += 1;
        // RIGHT anchor (end)
        for(; end < word.length; end++){
            let ch1 = word.charCodeAt(end);
            if ((0, $9TEeL.isUpperAsciiLetter)(ch1) && (0, $9TEeL.isLowerAsciiLetter)(lastCh)) break;
            else if (ch1 === 95 /* Underline */  || ch1 === 45 /* Dash */ ) break;
            lastCh = ch1;
        }
        if (start < end) bucket.push({
            range: new (0, $3HpR4.Range)(pos.lineNumber, startColumn + start, pos.lineNumber, startColumn + end)
        });
    }
    _addWordRanges(bucket, model, pos) {
        const word = model.getWordAtPosition(pos);
        if (word) bucket.push({
            range: new (0, $3HpR4.Range)(pos.lineNumber, word.startColumn, pos.lineNumber, word.endColumn)
        });
    }
    _addWhitespaceLine(bucket, model, pos) {
        if (model.getLineLength(pos.lineNumber) > 0 && model.getLineFirstNonWhitespaceColumn(pos.lineNumber) === 0 && model.getLineLastNonWhitespaceColumn(pos.lineNumber) === 0) bucket.push({
            range: new (0, $3HpR4.Range)(pos.lineNumber, 1, pos.lineNumber, model.getLineMaxColumn(pos.lineNumber))
        });
    }
}



var $58WHl = parcelRequire("58WHl");

var $2IxgH = parcelRequire("2IxgH");

var $fAXtX = parcelRequire("fAXtX");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $27844bc4b4d4b1c5$var$__awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class $27844bc4b4d4b1c5$var$SelectionRanges {
    mov(fwd) {
        let index = this.index + (fwd ? 1 : -1);
        if (index < 0 || index >= this.ranges.length) return this;
        const res = new $27844bc4b4d4b1c5$var$SelectionRanges(index, this.ranges);
        if (res.ranges[index].equalsRange(this.ranges[this.index])) // next range equals this range, retry with next-next
        return res.mov(fwd);
        return res;
    }
    constructor(index, ranges){
        this.index = index;
        this.ranges = ranges;
    }
}
class $27844bc4b4d4b1c5$var$SmartSelectController {
    static get(editor) {
        return editor.getContribution($27844bc4b4d4b1c5$var$SmartSelectController.ID);
    }
    dispose() {
        var _a;
        (_a = this._selectionListener) === null || _a === void 0 || _a.dispose();
    }
    run(forward) {
        return $27844bc4b4d4b1c5$var$__awaiter(this, void 0, void 0, function*() {
            if (!this._editor.hasModel()) return;
            const selections = this._editor.getSelections();
            const model = this._editor.getModel();
            if (!$eKhCe.SelectionRangeRegistry.has(model)) return;
            if (!this._state) yield $27844bc4b4d4b1c5$export$ade1e921564bf339(model, selections.map((s)=>s.getPosition()), this._editor.getOption(101 /* smartSelect */ ), (0, $gnEXx.CancellationToken).None).then((ranges)=>{
                var _a;
                if (!$4xCD7.isNonEmptyArray(ranges) || ranges.length !== selections.length) // invalid result
                return;
                if (!this._editor.hasModel() || !$4xCD7.equals(this._editor.getSelections(), selections, (a, b)=>a.equalsSelection(b))) // invalid editor state
                return;
                for(let i = 0; i < ranges.length; i++){
                    ranges[i] = ranges[i].filter((range)=>{
                        // filter ranges inside the selection
                        return range.containsPosition(selections[i].getStartPosition()) && range.containsPosition(selections[i].getEndPosition());
                    });
                    // prepend current selection
                    ranges[i].unshift(selections[i]);
                }
                this._state = ranges.map((ranges)=>new $27844bc4b4d4b1c5$var$SelectionRanges(0, ranges));
                // listen to caret move and forget about state
                (_a = this._selectionListener) === null || _a === void 0 || _a.dispose();
                this._selectionListener = this._editor.onDidChangeCursorPosition(()=>{
                    var _a;
                    if (!this._ignoreSelection) {
                        (_a = this._selectionListener) === null || _a === void 0 || _a.dispose();
                        this._state = undefined;
                    }
                });
            });
            if (!this._state) // no state
            return;
            this._state = this._state.map((state)=>state.mov(forward));
            const newSelections = this._state.map((state)=>(0, $cz0c7.Selection).fromPositions(state.ranges[state.index].getStartPosition(), state.ranges[state.index].getEndPosition()));
            this._ignoreSelection = true;
            try {
                this._editor.setSelections(newSelections);
            } finally{
                this._ignoreSelection = false;
            }
        });
    }
    constructor(_editor){
        this._editor = _editor;
        this._ignoreSelection = false;
    }
}
$27844bc4b4d4b1c5$var$SmartSelectController.ID = "editor.contrib.smartSelectController";
class $27844bc4b4d4b1c5$var$AbstractSmartSelect extends (0, $gGOeQ.EditorAction) {
    run(_accessor, editor) {
        return $27844bc4b4d4b1c5$var$__awaiter(this, void 0, void 0, function*() {
            let controller = $27844bc4b4d4b1c5$var$SmartSelectController.get(editor);
            if (controller) yield controller.run(this._forward);
        });
    }
    constructor(forward, opts){
        super(opts);
        this._forward = forward;
    }
}
class $27844bc4b4d4b1c5$var$GrowSelectionAction extends $27844bc4b4d4b1c5$var$AbstractSmartSelect {
    constructor(){
        super(true, {
            id: "editor.action.smartSelect.expand",
            label: $58WHl.localize("smartSelect.expand", "Expand Selection"),
            alias: "Expand Selection",
            precondition: undefined,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: 1553 /* RightArrow */ ,
                mac: {
                    primary: 3345 /* RightArrow */ ,
                    secondary: [
                        1297 /* RightArrow */ 
                    ]
                },
                weight: 100 /* EditorContrib */ 
            },
            menuOpts: {
                menuId: (0, $2IxgH.MenuId).MenubarSelectionMenu,
                group: "1_basic",
                title: $58WHl.localize({
                    key: "miSmartSelectGrow",
                    comment: [
                        "&& denotes a mnemonic"
                    ]
                }, "&&Expand Selection"),
                order: 2
            }
        });
    }
}
// renamed command id
(0, $fAXtX.CommandsRegistry).registerCommandAlias("editor.action.smartSelect.grow", "editor.action.smartSelect.expand");
class $27844bc4b4d4b1c5$var$ShrinkSelectionAction extends $27844bc4b4d4b1c5$var$AbstractSmartSelect {
    constructor(){
        super(false, {
            id: "editor.action.smartSelect.shrink",
            label: $58WHl.localize("smartSelect.shrink", "Shrink Selection"),
            alias: "Shrink Selection",
            precondition: undefined,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: 1551 /* LeftArrow */ ,
                mac: {
                    primary: 3343 /* LeftArrow */ ,
                    secondary: [
                        1295 /* LeftArrow */ 
                    ]
                },
                weight: 100 /* EditorContrib */ 
            },
            menuOpts: {
                menuId: (0, $2IxgH.MenuId).MenubarSelectionMenu,
                group: "1_basic",
                title: $58WHl.localize({
                    key: "miSmartSelectShrink",
                    comment: [
                        "&& denotes a mnemonic"
                    ]
                }, "&&Shrink Selection"),
                order: 3
            }
        });
    }
}
(0, $gGOeQ.registerEditorContribution)($27844bc4b4d4b1c5$var$SmartSelectController.ID, $27844bc4b4d4b1c5$var$SmartSelectController);
(0, $gGOeQ.registerEditorAction)($27844bc4b4d4b1c5$var$GrowSelectionAction);
(0, $gGOeQ.registerEditorAction)($27844bc4b4d4b1c5$var$ShrinkSelectionAction);
// word selection
$eKhCe.SelectionRangeRegistry.register("*", new (0, $d414ea467cd42ec6$export$ef5b42c27450f48c)());
function $27844bc4b4d4b1c5$export$ade1e921564bf339(model, positions, options, token) {
    return $27844bc4b4d4b1c5$var$__awaiter(this, void 0, void 0, function*() {
        const providers = $eKhCe.SelectionRangeRegistry.all(model);
        if (providers.length === 1) // add word selection and bracket selection when no provider exists
        providers.unshift(new (0, $b57582352cb755a7$exports.BracketSelectionRangeProvider)());
        let work = [];
        let allRawRanges = [];
        for (const provider of providers)work.push(Promise.resolve(provider.provideSelectionRanges(model, positions, token)).then((allProviderRanges)=>{
            if ($4xCD7.isNonEmptyArray(allProviderRanges) && allProviderRanges.length === positions.length) for(let i = 0; i < positions.length; i++){
                if (!allRawRanges[i]) allRawRanges[i] = [];
                for (const oneProviderRanges of allProviderRanges[i])if ((0, $3HpR4.Range).isIRange(oneProviderRanges.range) && (0, $3HpR4.Range).containsPosition(oneProviderRanges.range, positions[i])) allRawRanges[i].push((0, $3HpR4.Range).lift(oneProviderRanges.range));
            }
        }, (0, $g0782.onUnexpectedExternalError)));
        yield Promise.all(work);
        return allRawRanges.map((oneRawRanges)=>{
            if (oneRawRanges.length === 0) return [];
            // sort all by start/end position
            oneRawRanges.sort((a, b)=>{
                if ((0, $8qXsZ.Position).isBefore(a.getStartPosition(), b.getStartPosition())) return 1;
                else if ((0, $8qXsZ.Position).isBefore(b.getStartPosition(), a.getStartPosition())) return -1;
                else if ((0, $8qXsZ.Position).isBefore(a.getEndPosition(), b.getEndPosition())) return -1;
                else if ((0, $8qXsZ.Position).isBefore(b.getEndPosition(), a.getEndPosition())) return 1;
                else return 0;
            });
            // remove ranges that don't contain the former range or that are equal to the
            // former range
            let oneRanges = [];
            let last;
            for (const range of oneRawRanges)if (!last || (0, $3HpR4.Range).containsRange(range, last) && !(0, $3HpR4.Range).equalsRange(range, last)) {
                oneRanges.push(range);
                last = range;
            }
            if (!options.selectLeadingAndTrailingWhitespace) return oneRanges;
            // add ranges that expand trivia at line starts and ends whenever a range
            // wraps onto the a new line
            let oneRangesWithTrivia = [
                oneRanges[0]
            ];
            for(let i = 1; i < oneRanges.length; i++){
                const prev = oneRanges[i - 1];
                const cur = oneRanges[i];
                if (cur.startLineNumber !== prev.startLineNumber || cur.endLineNumber !== prev.endLineNumber) {
                    // add line/block range without leading/failing whitespace
                    const rangeNoWhitespace = new (0, $3HpR4.Range)(prev.startLineNumber, model.getLineFirstNonWhitespaceColumn(prev.startLineNumber), prev.endLineNumber, model.getLineLastNonWhitespaceColumn(prev.endLineNumber));
                    if (rangeNoWhitespace.containsRange(prev) && !rangeNoWhitespace.equalsRange(prev) && cur.containsRange(rangeNoWhitespace) && !cur.equalsRange(rangeNoWhitespace)) oneRangesWithTrivia.push(rangeNoWhitespace);
                    // add line/block range
                    const rangeFull = new (0, $3HpR4.Range)(prev.startLineNumber, 1, prev.endLineNumber, model.getLineMaxColumn(prev.endLineNumber));
                    if (rangeFull.containsRange(prev) && !rangeFull.equalsRange(rangeNoWhitespace) && cur.containsRange(rangeFull) && !cur.equalsRange(rangeFull)) oneRangesWithTrivia.push(rangeFull);
                }
                oneRangesWithTrivia.push(cur);
            }
            return oneRangesWithTrivia;
        });
    });
}
(0, $gGOeQ.registerModelCommand)("_executeSelectionRangeProvider", function(model, ...args) {
    const [positions] = args;
    return $27844bc4b4d4b1c5$export$ade1e921564bf339(model, positions, {
        selectLeadingAndTrailingWhitespace: true
    }, (0, $gnEXx.CancellationToken).None);
});





var $k8jZF = parcelRequire("k8jZF");

var $gGOeQ = parcelRequire("gGOeQ");

var $58WHl = parcelRequire("58WHl");
class $b4870631d9e522b9$var$ForceRetokenizeAction extends (0, $gGOeQ.EditorAction) {
    run(accessor, editor) {
        if (!editor.hasModel()) return;
        const model = editor.getModel();
        model.resetTokenization();
        const sw = new (0, $k8jZF.StopWatch)(true);
        model.forceTokenization(model.getLineCount());
        sw.stop();
        console.log(`tokenization took ${sw.elapsed()}`);
    }
    constructor(){
        super({
            id: "editor.action.forceRetokenize",
            label: $58WHl.localize("forceRetokenize", "Developer: Force Retokenize"),
            alias: "Developer: Force Retokenize",
            precondition: undefined
        });
    }
}
(0, $gGOeQ.registerEditorAction)($b4870631d9e522b9$var$ForceRetokenizeAction);



var $cVmYb = parcelRequire("cVmYb");

var $gGOeQ = parcelRequire("gGOeQ");

var $ccbNV = parcelRequire("ccbNV");

var $58WHl = parcelRequire("58WHl");
class $410789531c99b0f4$export$676ded3884da9932 extends (0, $gGOeQ.EditorAction) {
    run(accessor, editor) {
        const oldValue = (0, $ccbNV.TabFocus).getTabFocusMode();
        const newValue = !oldValue;
        (0, $ccbNV.TabFocus).setTabFocusMode(newValue);
        if (newValue) (0, $cVmYb.alert)($58WHl.localize("toggle.tabMovesFocus.on", "Pressing Tab will now move focus to the next focusable element"));
        else (0, $cVmYb.alert)($58WHl.localize("toggle.tabMovesFocus.off", "Pressing Tab will now insert the tab character"));
    }
    constructor(){
        super({
            id: $410789531c99b0f4$export$676ded3884da9932.ID,
            label: $58WHl.localize({
                key: "toggle.tabMovesFocus",
                comment: [
                    "Turn on/off use of tab key for moving focus around VS Code"
                ]
            }, "Toggle Tab Key Moves Focus"),
            alias: "Toggle Tab Key Moves Focus",
            precondition: undefined,
            kbOpts: {
                kbExpr: null,
                primary: 2091 /* KeyM */ ,
                mac: {
                    primary: 1323 /* KeyM */ 
                },
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
$410789531c99b0f4$export$676ded3884da9932.ID = "editor.action.toggleTabFocusMode";
(0, $gGOeQ.registerEditorAction)($410789531c99b0f4$export$676ded3884da9932);



var $440a962a5655b875$exports = {};

var $atiRx = parcelRequire("atiRx");

var $aMhG1 = parcelRequire("aMhG1");

var $gGOeQ = parcelRequire("gGOeQ");

var $aXAVz = parcelRequire("aXAVz");

var $58WHl = parcelRequire("58WHl");

var $9rFZy = parcelRequire("9rFZy");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $440a962a5655b875$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $440a962a5655b875$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var $440a962a5655b875$var$__awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const $440a962a5655b875$var$ignoreUnusualLineTerminators = "ignoreUnusualLineTerminators";
function $440a962a5655b875$var$writeIgnoreState(codeEditorService, model, state) {
    codeEditorService.setModelProperty(model.uri, $440a962a5655b875$var$ignoreUnusualLineTerminators, state);
}
function $440a962a5655b875$var$readIgnoreState(codeEditorService, model) {
    return codeEditorService.getModelProperty(model.uri, $440a962a5655b875$var$ignoreUnusualLineTerminators);
}
let $440a962a5655b875$export$ac2e48bc5d9c728f = class UnusualLineTerminatorsDetector extends (0, $atiRx.Disposable) {
    _checkForUnusualLineTerminators() {
        return $440a962a5655b875$var$__awaiter(this, void 0, void 0, function*() {
            if (this._config === "off") return;
            if (!this._editor.hasModel()) return;
            const model = this._editor.getModel();
            if (!model.mightContainUnusualLineTerminators()) return;
            const ignoreState = $440a962a5655b875$var$readIgnoreState(this._codeEditorService, model);
            if (ignoreState === true) // this model should be ignored
            return;
            if (this._editor.getOption(80 /* readOnly */ )) // read only editor => sorry!
            return;
            if (this._config === "auto") {
                // just do it!
                model.removeUnusualLineTerminators(this._editor.getSelections());
                return;
            }
            const result = yield this._dialogService.confirm({
                title: $58WHl.localize("unusualLineTerminators.title", "Unusual Line Terminators"),
                message: $58WHl.localize("unusualLineTerminators.message", "Detected unusual line terminators"),
                detail: $58WHl.localize("unusualLineTerminators.detail", "The file '{0}' contains one or more unusual line terminator characters, like Line Separator (LS) or Paragraph Separator (PS).\n\nIt is recommended to remove them from the file. This can be configured via `editor.unusualLineTerminators`.", (0, $aMhG1.basename)(model.uri)),
                primaryButton: $58WHl.localize("unusualLineTerminators.fix", "Remove Unusual Line Terminators"),
                secondaryButton: $58WHl.localize("unusualLineTerminators.ignore", "Ignore")
            });
            if (!result.confirmed) {
                // this model should be ignored
                $440a962a5655b875$var$writeIgnoreState(this._codeEditorService, model, true);
                return;
            }
            model.removeUnusualLineTerminators(this._editor.getSelections());
        });
    }
    constructor(_editor, _dialogService, _codeEditorService){
        super();
        this._editor = _editor;
        this._dialogService = _dialogService;
        this._codeEditorService = _codeEditorService;
        this._config = this._editor.getOption(113 /* unusualLineTerminators */ );
        this._register(this._editor.onDidChangeConfiguration((e)=>{
            if (e.hasChanged(113 /* unusualLineTerminators */ )) {
                this._config = this._editor.getOption(113 /* unusualLineTerminators */ );
                this._checkForUnusualLineTerminators();
            }
        }));
        this._register(this._editor.onDidChangeModel(()=>{
            this._checkForUnusualLineTerminators();
        }));
        this._register(this._editor.onDidChangeModelContent((e)=>{
            if (e.isUndoing) // skip checking in case of undoing
            return;
            this._checkForUnusualLineTerminators();
        }));
    }
};
$440a962a5655b875$export$ac2e48bc5d9c728f.ID = "editor.contrib.unusualLineTerminatorsDetector";
$440a962a5655b875$export$ac2e48bc5d9c728f = $440a962a5655b875$var$__decorate([
    $440a962a5655b875$var$__param(1, (0, $9rFZy.IDialogService)),
    $440a962a5655b875$var$__param(2, (0, $aXAVz.ICodeEditorService))
], $440a962a5655b875$export$ac2e48bc5d9c728f);
(0, $gGOeQ.registerEditorContribution)($440a962a5655b875$export$ac2e48bc5d9c728f.ID, $440a962a5655b875$export$ac2e48bc5d9c728f);


var $4aa9fc431c6d2c99$exports = {};

var $eFOsn = parcelRequire("eFOsn");

var $atiRx = parcelRequire("atiRx");

var $gGOeQ = parcelRequire("gGOeQ");

var $eKhCe = parcelRequire("eKhCe");

var $lgui5 = parcelRequire("lgui5");

var $dwrPd = parcelRequire("dwrPd");

var $7xQwd = parcelRequire("7xQwd");

var $jmttj = parcelRequire("jmttj");

var $9BIBz = parcelRequire("9BIBz");

var $fUTzO = parcelRequire("fUTzO");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $4aa9fc431c6d2c99$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $4aa9fc431c6d2c99$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
let $4aa9fc431c6d2c99$var$ViewportSemanticTokensContribution = class ViewportSemanticTokensContribution extends (0, $atiRx.Disposable) {
    _cancelAll() {
        for (const request of this._outstandingRequests)request.cancel();
        this._outstandingRequests = [];
    }
    _removeOutstandingRequest(req) {
        for(let i = 0, len = this._outstandingRequests.length; i < len; i++)if (this._outstandingRequests[i] === req) {
            this._outstandingRequests.splice(i, 1);
            return;
        }
    }
    _tokenizeViewportNow() {
        if (!this._editor.hasModel()) return;
        const model = this._editor.getModel();
        if (model.hasCompleteSemanticTokens()) return;
        if (!(0, $7xQwd.isSemanticColoringEnabled)(model, this._themeService, this._configurationService)) {
            if (model.hasSomeSemanticTokens()) model.setSemanticTokens(null, false);
            return;
        }
        if (!(0, $lgui5.hasDocumentRangeSemanticTokensProvider)(model)) {
            if (model.hasSomeSemanticTokens()) model.setSemanticTokens(null, false);
            return;
        }
        const visibleRanges = this._editor.getVisibleRangesPlusViewportAboveBelow();
        this._outstandingRequests = this._outstandingRequests.concat(visibleRanges.map((range)=>this._requestRange(model, range)));
    }
    _requestRange(model, range) {
        const requestVersionId = model.getVersionId();
        const request = (0, $eFOsn.createCancelablePromise)((token)=>Promise.resolve((0, $lgui5.getDocumentRangeSemanticTokens)(model, range, token)));
        request.then((r)=>{
            if (!r || !r.tokens || model.isDisposed() || model.getVersionId() !== requestVersionId) return;
            const { provider: provider , tokens: result  } = r;
            const styling = this._modelService.getSemanticTokensProviderStyling(provider);
            model.setPartialSemanticTokens(range, (0, $jmttj.toMultilineTokens2)(result, styling, model.getLanguageId()));
        }).then(()=>this._removeOutstandingRequest(request), ()=>this._removeOutstandingRequest(request));
        return request;
    }
    constructor(editor, _modelService, _themeService, _configurationService){
        super();
        this._modelService = _modelService;
        this._themeService = _themeService;
        this._configurationService = _configurationService;
        this._editor = editor;
        this._tokenizeViewport = new (0, $eFOsn.RunOnceScheduler)(()=>this._tokenizeViewportNow(), 100);
        this._outstandingRequests = [];
        this._register(this._editor.onDidScrollChange(()=>{
            this._tokenizeViewport.schedule();
        }));
        this._register(this._editor.onDidChangeModel(()=>{
            this._cancelAll();
            this._tokenizeViewport.schedule();
        }));
        this._register(this._editor.onDidChangeModelContent((e)=>{
            this._cancelAll();
            this._tokenizeViewport.schedule();
        }));
        this._register((0, $eKhCe.DocumentRangeSemanticTokensProviderRegistry).onDidChange(()=>{
            this._cancelAll();
            this._tokenizeViewport.schedule();
        }));
        this._register(this._configurationService.onDidChangeConfiguration((e)=>{
            if (e.affectsConfiguration((0, $7xQwd.SEMANTIC_HIGHLIGHTING_SETTING_ID))) {
                this._cancelAll();
                this._tokenizeViewport.schedule();
            }
        }));
        this._register(this._themeService.onDidColorThemeChange(()=>{
            this._cancelAll();
            this._tokenizeViewport.schedule();
        }));
    }
};
$4aa9fc431c6d2c99$var$ViewportSemanticTokensContribution.ID = "editor.contrib.viewportSemanticTokens";
$4aa9fc431c6d2c99$var$ViewportSemanticTokensContribution = $4aa9fc431c6d2c99$var$__decorate([
    $4aa9fc431c6d2c99$var$__param(1, (0, $dwrPd.IModelService)),
    $4aa9fc431c6d2c99$var$__param(2, (0, $fUTzO.IThemeService)),
    $4aa9fc431c6d2c99$var$__param(3, (0, $9BIBz.IConfigurationService))
], $4aa9fc431c6d2c99$var$ViewportSemanticTokensContribution);
(0, $gGOeQ.registerEditorContribution)($4aa9fc431c6d2c99$var$ViewportSemanticTokensContribution.ID, $4aa9fc431c6d2c99$var$ViewportSemanticTokensContribution);


var $c7e22f4640983df7$exports = {};

var $cVmYb = parcelRequire("cVmYb");

var $4xCD7 = parcelRequire("4xCD7");

var $eFOsn = parcelRequire("eFOsn");

var $gnEXx = parcelRequire("gnEXx");

var $g0782 = parcelRequire("g0782");

var $atiRx = parcelRequire("atiRx");

var $gGOeQ = parcelRequire("gGOeQ");

var $3HpR4 = parcelRequire("3HpR4");

var $bdLce = parcelRequire("bdLce");

var $bbATZ = parcelRequire("bbATZ");

var $g88WD = parcelRequire("g88WD");

var $eKhCe = parcelRequire("eKhCe");

var $58WHl = parcelRequire("58WHl");

var $bRtox = parcelRequire("bRtox");

var $3XYy8 = parcelRequire("3XYy8");

var $fUTzO = parcelRequire("fUTzO");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $c7e22f4640983df7$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $c7e22f4640983df7$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
const $c7e22f4640983df7$var$editorWordHighlight = (0, $3XYy8.registerColor)("editor.wordHighlightBackground", {
    dark: "#575757B8",
    light: "#57575740",
    hc: null
}, $58WHl.localize("wordHighlight", "Background color of a symbol during read-access, like reading a variable. The color must not be opaque so as not to hide underlying decorations."), true);
const $c7e22f4640983df7$var$editorWordHighlightStrong = (0, $3XYy8.registerColor)("editor.wordHighlightStrongBackground", {
    dark: "#004972B8",
    light: "#0e639c40",
    hc: null
}, $58WHl.localize("wordHighlightStrong", "Background color of a symbol during write-access, like writing to a variable. The color must not be opaque so as not to hide underlying decorations."), true);
const $c7e22f4640983df7$var$editorWordHighlightBorder = (0, $3XYy8.registerColor)("editor.wordHighlightBorder", {
    light: null,
    dark: null,
    hc: (0, $3XYy8.activeContrastBorder)
}, $58WHl.localize("wordHighlightBorder", "Border color of a symbol during read-access, like reading a variable."));
const $c7e22f4640983df7$var$editorWordHighlightStrongBorder = (0, $3XYy8.registerColor)("editor.wordHighlightStrongBorder", {
    light: null,
    dark: null,
    hc: (0, $3XYy8.activeContrastBorder)
}, $58WHl.localize("wordHighlightStrongBorder", "Border color of a symbol during write-access, like writing to a variable."));
const $c7e22f4640983df7$var$overviewRulerWordHighlightForeground = (0, $3XYy8.registerColor)("editorOverviewRuler.wordHighlightForeground", {
    dark: "#A0A0A0CC",
    light: "#A0A0A0CC",
    hc: "#A0A0A0CC"
}, $58WHl.localize("overviewRulerWordHighlightForeground", "Overview ruler marker color for symbol highlights. The color must not be opaque so as not to hide underlying decorations."), true);
const $c7e22f4640983df7$var$overviewRulerWordHighlightStrongForeground = (0, $3XYy8.registerColor)("editorOverviewRuler.wordHighlightStrongForeground", {
    dark: "#C0A0C0CC",
    light: "#C0A0C0CC",
    hc: "#C0A0C0CC"
}, $58WHl.localize("overviewRulerWordHighlightStrongForeground", "Overview ruler marker color for write-access symbol highlights. The color must not be opaque so as not to hide underlying decorations."), true);
const $c7e22f4640983df7$var$ctxHasWordHighlights = new (0, $bRtox.RawContextKey)("hasWordHighlights", false);
function $c7e22f4640983df7$export$25c73b4d2077057f(model, position, token) {
    const orderedByScore = (0, $eKhCe.DocumentHighlightProviderRegistry).ordered(model);
    // in order of score ask the occurrences provider
    // until someone response with a good result
    // (good = none empty array)
    return (0, $eFOsn.first)(orderedByScore.map((provider)=>()=>{
            return Promise.resolve(provider.provideDocumentHighlights(model, position, token)).then(undefined, (0, $g0782.onUnexpectedExternalError));
        }), $4xCD7.isNonEmptyArray);
}
class $c7e22f4640983df7$var$OccurenceAtPositionRequest {
    _getCurrentWordRange(model, selection) {
        const word = model.getWordAtPosition(selection.getPosition());
        if (word) return new (0, $3HpR4.Range)(selection.startLineNumber, word.startColumn, selection.startLineNumber, word.endColumn);
        return null;
    }
    isValid(model, selection, decorationIds) {
        const lineNumber = selection.startLineNumber;
        const startColumn = selection.startColumn;
        const endColumn = selection.endColumn;
        const currentWordRange = this._getCurrentWordRange(model, selection);
        let requestIsValid = Boolean(this._wordRange && this._wordRange.equalsRange(currentWordRange));
        // Even if we are on a different word, if that word is in the decorations ranges, the request is still valid
        // (Same symbol)
        for(let i = 0, len = decorationIds.length; !requestIsValid && i < len; i++){
            let range = model.getDecorationRange(decorationIds[i]);
            if (range && range.startLineNumber === lineNumber) {
                if (range.startColumn <= startColumn && range.endColumn >= endColumn) requestIsValid = true;
            }
        }
        return requestIsValid;
    }
    cancel() {
        this.result.cancel();
    }
    constructor(model, selection, wordSeparators){
        this._wordRange = this._getCurrentWordRange(model, selection);
        this.result = (0, $eFOsn.createCancelablePromise)((token)=>this._compute(model, selection, wordSeparators, token));
    }
}
class $c7e22f4640983df7$var$SemanticOccurenceAtPositionRequest extends $c7e22f4640983df7$var$OccurenceAtPositionRequest {
    _compute(model, selection, wordSeparators, token) {
        return $c7e22f4640983df7$export$25c73b4d2077057f(model, selection.getPosition(), token).then((value)=>value || []);
    }
}
class $c7e22f4640983df7$var$TextualOccurenceAtPositionRequest extends $c7e22f4640983df7$var$OccurenceAtPositionRequest {
    _compute(model, selection, wordSeparators, token) {
        return (0, $eFOsn.timeout)(250, token).then(()=>{
            if (!selection.isEmpty()) return [];
            const word = model.getWordAtPosition(selection.getPosition());
            if (!word || word.word.length > 1000) return [];
            const matches = model.findMatches(word.word, true, false, true, wordSeparators, false);
            return matches.map((m)=>{
                return {
                    range: m.range,
                    kind: (0, $eKhCe.DocumentHighlightKind).Text
                };
            });
        });
    }
    isValid(model, selection, decorationIds) {
        const currentSelectionIsEmpty = selection.isEmpty();
        if (this._selectionIsEmpty !== currentSelectionIsEmpty) return false;
        return super.isValid(model, selection, decorationIds);
    }
    constructor(model, selection, wordSeparators){
        super(model, selection, wordSeparators);
        this._selectionIsEmpty = selection.isEmpty();
    }
}
function $c7e22f4640983df7$var$computeOccurencesAtPosition(model, selection, wordSeparators) {
    if ((0, $eKhCe.DocumentHighlightProviderRegistry).has(model)) return new $c7e22f4640983df7$var$SemanticOccurenceAtPositionRequest(model, selection, wordSeparators);
    return new $c7e22f4640983df7$var$TextualOccurenceAtPositionRequest(model, selection, wordSeparators);
}
(0, $gGOeQ.registerModelAndPositionCommand)("_executeDocumentHighlights", (model, position)=>$c7e22f4640983df7$export$25c73b4d2077057f(model, position, (0, $gnEXx.CancellationToken).None));
class $c7e22f4640983df7$var$WordHighlighter {
    hasDecorations() {
        return this._decorationIds.length > 0;
    }
    restore() {
        if (!this.occurrencesHighlight) return;
        this._run();
    }
    _getSortedHighlights() {
        return $4xCD7.coalesce(this._decorationIds.map((id)=>this.model.getDecorationRange(id)).sort((0, $3HpR4.Range).compareRangesUsingStarts));
    }
    moveNext() {
        let highlights = this._getSortedHighlights();
        let index = highlights.findIndex((range)=>range.containsPosition(this.editor.getPosition()));
        let newIndex = (index + 1) % highlights.length;
        let dest = highlights[newIndex];
        try {
            this._ignorePositionChangeEvent = true;
            this.editor.setPosition(dest.getStartPosition());
            this.editor.revealRangeInCenterIfOutsideViewport(dest);
            const word = this._getWord();
            if (word) {
                const lineContent = this.editor.getModel().getLineContent(dest.startLineNumber);
                (0, $cVmYb.alert)(`${lineContent}, ${newIndex + 1} of ${highlights.length} for '${word.word}'`);
            }
        } finally{
            this._ignorePositionChangeEvent = false;
        }
    }
    moveBack() {
        let highlights = this._getSortedHighlights();
        let index = highlights.findIndex((range)=>range.containsPosition(this.editor.getPosition()));
        let newIndex = (index - 1 + highlights.length) % highlights.length;
        let dest = highlights[newIndex];
        try {
            this._ignorePositionChangeEvent = true;
            this.editor.setPosition(dest.getStartPosition());
            this.editor.revealRangeInCenterIfOutsideViewport(dest);
            const word = this._getWord();
            if (word) {
                const lineContent = this.editor.getModel().getLineContent(dest.startLineNumber);
                (0, $cVmYb.alert)(`${lineContent}, ${newIndex + 1} of ${highlights.length} for '${word.word}'`);
            }
        } finally{
            this._ignorePositionChangeEvent = false;
        }
    }
    _removeDecorations() {
        if (this._decorationIds.length > 0) {
            // remove decorations
            this._decorationIds = this.editor.deltaDecorations(this._decorationIds, []);
            this._hasWordHighlights.set(false);
        }
    }
    _stopAll() {
        // Remove any existing decorations
        this._removeDecorations();
        // Cancel any renderDecorationsTimer
        if (this.renderDecorationsTimer !== -1) {
            clearTimeout(this.renderDecorationsTimer);
            this.renderDecorationsTimer = -1;
        }
        // Cancel any worker request
        if (this.workerRequest !== null) {
            this.workerRequest.cancel();
            this.workerRequest = null;
        }
        // Invalidate any worker request callback
        if (!this.workerRequestCompleted) {
            this.workerRequestTokenId++;
            this.workerRequestCompleted = true;
        }
    }
    _onPositionChanged(e) {
        // disabled
        if (!this.occurrencesHighlight) {
            this._stopAll();
            return;
        }
        // ignore typing & other
        if (e.reason !== 3 /* Explicit */ ) {
            this._stopAll();
            return;
        }
        this._run();
    }
    _getWord() {
        let editorSelection = this.editor.getSelection();
        let lineNumber = editorSelection.startLineNumber;
        let startColumn = editorSelection.startColumn;
        return this.model.getWordAtPosition({
            lineNumber: lineNumber,
            column: startColumn
        });
    }
    _run() {
        let editorSelection = this.editor.getSelection();
        // ignore multiline selection
        if (editorSelection.startLineNumber !== editorSelection.endLineNumber) {
            this._stopAll();
            return;
        }
        let startColumn = editorSelection.startColumn;
        let endColumn = editorSelection.endColumn;
        const word = this._getWord();
        // The selection must be inside a word or surround one word at most
        if (!word || word.startColumn > startColumn || word.endColumn < endColumn) {
            this._stopAll();
            return;
        }
        // All the effort below is trying to achieve this:
        // - when cursor is moved to a word, trigger immediately a findOccurrences request
        // - 250ms later after the last cursor move event, render the occurrences
        // - no flickering!
        const workerRequestIsValid = this.workerRequest && this.workerRequest.isValid(this.model, editorSelection, this._decorationIds);
        // There are 4 cases:
        // a) old workerRequest is valid & completed, renderDecorationsTimer fired
        // b) old workerRequest is valid & completed, renderDecorationsTimer not fired
        // c) old workerRequest is valid, but not completed
        // d) old workerRequest is not valid
        // For a) no action is needed
        // For c), member 'lastCursorPositionChangeTime' will be used when installing the timer so no action is needed
        this.lastCursorPositionChangeTime = new Date().getTime();
        if (workerRequestIsValid) {
            if (this.workerRequestCompleted && this.renderDecorationsTimer !== -1) {
                // case b)
                // Delay the firing of renderDecorationsTimer by an extra 250 ms
                clearTimeout(this.renderDecorationsTimer);
                this.renderDecorationsTimer = -1;
                this._beginRenderDecorations();
            }
        } else {
            // case d)
            // Stop all previous actions and start fresh
            this._stopAll();
            let myRequestId = ++this.workerRequestTokenId;
            this.workerRequestCompleted = false;
            this.workerRequest = $c7e22f4640983df7$var$computeOccurencesAtPosition(this.model, this.editor.getSelection(), this.editor.getOption(116 /* wordSeparators */ ));
            this.workerRequest.result.then((data)=>{
                if (myRequestId === this.workerRequestTokenId) {
                    this.workerRequestCompleted = true;
                    this.workerRequestValue = data || [];
                    this._beginRenderDecorations();
                }
            }, (0, $g0782.onUnexpectedError));
        }
    }
    _beginRenderDecorations() {
        let currentTime = new Date().getTime();
        let minimumRenderTime = this.lastCursorPositionChangeTime + 250;
        if (currentTime >= minimumRenderTime) {
            // Synchronous
            this.renderDecorationsTimer = -1;
            this.renderDecorations();
        } else // Asynchronous
        this.renderDecorationsTimer = setTimeout(()=>{
            this.renderDecorations();
        }, minimumRenderTime - currentTime);
    }
    renderDecorations() {
        this.renderDecorationsTimer = -1;
        let decorations = [];
        for (const info of this.workerRequestValue)if (info.range) decorations.push({
            range: info.range,
            options: $c7e22f4640983df7$var$WordHighlighter._getDecorationOptions(info.kind)
        });
        this._decorationIds = this.editor.deltaDecorations(this._decorationIds, decorations);
        this._hasWordHighlights.set(this.hasDecorations());
    }
    static _getDecorationOptions(kind) {
        if (kind === (0, $eKhCe.DocumentHighlightKind).Write) return this._WRITE_OPTIONS;
        else if (kind === (0, $eKhCe.DocumentHighlightKind).Text) return this._TEXT_OPTIONS;
        else return this._REGULAR_OPTIONS;
    }
    dispose() {
        this._stopAll();
        this.toUnhook.dispose();
    }
    constructor(editor, contextKeyService){
        this.toUnhook = new (0, $atiRx.DisposableStore)();
        this.workerRequestTokenId = 0;
        this.workerRequestCompleted = false;
        this.workerRequestValue = [];
        this.lastCursorPositionChangeTime = 0;
        this.renderDecorationsTimer = -1;
        this.editor = editor;
        this._hasWordHighlights = $c7e22f4640983df7$var$ctxHasWordHighlights.bindTo(contextKeyService);
        this._ignorePositionChangeEvent = false;
        this.occurrencesHighlight = this.editor.getOption(71 /* occurrencesHighlight */ );
        this.model = this.editor.getModel();
        this.toUnhook.add(editor.onDidChangeCursorPosition((e)=>{
            if (this._ignorePositionChangeEvent) // We are changing the position => ignore this event
            return;
            if (!this.occurrencesHighlight) // Early exit if nothing needs to be done!
            // Leave some form of early exit check here if you wish to continue being a cursor position change listener ;)
            return;
            this._onPositionChanged(e);
        }));
        this.toUnhook.add(editor.onDidChangeModelContent((e)=>{
            this._stopAll();
        }));
        this.toUnhook.add(editor.onDidChangeConfiguration((e)=>{
            let newValue = this.editor.getOption(71 /* occurrencesHighlight */ );
            if (this.occurrencesHighlight !== newValue) {
                this.occurrencesHighlight = newValue;
                this._stopAll();
            }
        }));
        this._decorationIds = [];
        this.workerRequestTokenId = 0;
        this.workerRequest = null;
        this.workerRequestCompleted = false;
        this.lastCursorPositionChangeTime = 0;
        this.renderDecorationsTimer = -1;
    }
}
$c7e22f4640983df7$var$WordHighlighter._WRITE_OPTIONS = (0, $g88WD.ModelDecorationOptions).register({
    description: "word-highlight-strong",
    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ ,
    className: "wordHighlightStrong",
    overviewRuler: {
        color: (0, $fUTzO.themeColorFromId)($c7e22f4640983df7$var$overviewRulerWordHighlightStrongForeground),
        position: (0, $bbATZ.OverviewRulerLane).Center
    },
    minimap: {
        color: (0, $fUTzO.themeColorFromId)((0, $3XYy8.minimapSelectionOccurrenceHighlight)),
        position: (0, $bbATZ.MinimapPosition).Inline
    }
});
$c7e22f4640983df7$var$WordHighlighter._TEXT_OPTIONS = (0, $g88WD.ModelDecorationOptions).register({
    description: "selection-highlight",
    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ ,
    className: "selectionHighlight",
    overviewRuler: {
        color: (0, $fUTzO.themeColorFromId)((0, $3XYy8.overviewRulerSelectionHighlightForeground)),
        position: (0, $bbATZ.OverviewRulerLane).Center
    },
    minimap: {
        color: (0, $fUTzO.themeColorFromId)((0, $3XYy8.minimapSelectionOccurrenceHighlight)),
        position: (0, $bbATZ.MinimapPosition).Inline
    }
});
$c7e22f4640983df7$var$WordHighlighter._REGULAR_OPTIONS = (0, $g88WD.ModelDecorationOptions).register({
    description: "word-highlight",
    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ ,
    className: "wordHighlight",
    overviewRuler: {
        color: (0, $fUTzO.themeColorFromId)($c7e22f4640983df7$var$overviewRulerWordHighlightForeground),
        position: (0, $bbATZ.OverviewRulerLane).Center
    },
    minimap: {
        color: (0, $fUTzO.themeColorFromId)((0, $3XYy8.minimapSelectionOccurrenceHighlight)),
        position: (0, $bbATZ.MinimapPosition).Inline
    }
});
let $c7e22f4640983df7$var$WordHighlighterContribution = class WordHighlighterContribution extends (0, $atiRx.Disposable) {
    static get(editor) {
        return editor.getContribution(WordHighlighterContribution.ID);
    }
    saveViewState() {
        if (this.wordHighlighter && this.wordHighlighter.hasDecorations()) return true;
        return false;
    }
    moveNext() {
        if (this.wordHighlighter) this.wordHighlighter.moveNext();
    }
    moveBack() {
        if (this.wordHighlighter) this.wordHighlighter.moveBack();
    }
    restoreViewState(state) {
        if (this.wordHighlighter && state) this.wordHighlighter.restore();
    }
    dispose() {
        if (this.wordHighlighter) {
            this.wordHighlighter.dispose();
            this.wordHighlighter = null;
        }
        super.dispose();
    }
    constructor(editor, contextKeyService){
        super();
        this.wordHighlighter = null;
        const createWordHighlighterIfPossible = ()=>{
            if (editor.hasModel()) this.wordHighlighter = new $c7e22f4640983df7$var$WordHighlighter(editor, contextKeyService);
        };
        this._register(editor.onDidChangeModel((e)=>{
            if (this.wordHighlighter) {
                this.wordHighlighter.dispose();
                this.wordHighlighter = null;
            }
            createWordHighlighterIfPossible();
        }));
        createWordHighlighterIfPossible();
    }
};
$c7e22f4640983df7$var$WordHighlighterContribution.ID = "editor.contrib.wordHighlighter";
$c7e22f4640983df7$var$WordHighlighterContribution = $c7e22f4640983df7$var$__decorate([
    $c7e22f4640983df7$var$__param(1, (0, $bRtox.IContextKeyService))
], $c7e22f4640983df7$var$WordHighlighterContribution);
class $c7e22f4640983df7$var$WordHighlightNavigationAction extends (0, $gGOeQ.EditorAction) {
    run(accessor, editor) {
        const controller = $c7e22f4640983df7$var$WordHighlighterContribution.get(editor);
        if (!controller) return;
        if (this._isNext) controller.moveNext();
        else controller.moveBack();
    }
    constructor(next, opts){
        super(opts);
        this._isNext = next;
    }
}
class $c7e22f4640983df7$var$NextWordHighlightAction extends $c7e22f4640983df7$var$WordHighlightNavigationAction {
    constructor(){
        super(true, {
            id: "editor.action.wordHighlight.next",
            label: $58WHl.localize("wordHighlight.next.label", "Go to Next Symbol Highlight"),
            alias: "Go to Next Symbol Highlight",
            precondition: $c7e22f4640983df7$var$ctxHasWordHighlights,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: 65 /* F7 */ ,
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
class $c7e22f4640983df7$var$PrevWordHighlightAction extends $c7e22f4640983df7$var$WordHighlightNavigationAction {
    constructor(){
        super(false, {
            id: "editor.action.wordHighlight.prev",
            label: $58WHl.localize("wordHighlight.previous.label", "Go to Previous Symbol Highlight"),
            alias: "Go to Previous Symbol Highlight",
            precondition: $c7e22f4640983df7$var$ctxHasWordHighlights,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: 1089 /* F7 */ ,
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
class $c7e22f4640983df7$var$TriggerWordHighlightAction extends (0, $gGOeQ.EditorAction) {
    run(accessor, editor, args) {
        const controller = $c7e22f4640983df7$var$WordHighlighterContribution.get(editor);
        if (!controller) return;
        controller.restoreViewState(true);
    }
    constructor(){
        super({
            id: "editor.action.wordHighlight.trigger",
            label: $58WHl.localize("wordHighlight.trigger.label", "Trigger Symbol Highlight"),
            alias: "Trigger Symbol Highlight",
            precondition: $c7e22f4640983df7$var$ctxHasWordHighlights.toNegated(),
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).editorTextFocus,
                primary: 0,
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
(0, $gGOeQ.registerEditorContribution)($c7e22f4640983df7$var$WordHighlighterContribution.ID, $c7e22f4640983df7$var$WordHighlighterContribution);
(0, $gGOeQ.registerEditorAction)($c7e22f4640983df7$var$NextWordHighlightAction);
(0, $gGOeQ.registerEditorAction)($c7e22f4640983df7$var$PrevWordHighlightAction);
(0, $gGOeQ.registerEditorAction)($c7e22f4640983df7$var$TriggerWordHighlightAction);
(0, $fUTzO.registerThemingParticipant)((theme, collector)=>{
    const selectionHighlight = theme.getColor((0, $3XYy8.editorSelectionHighlight));
    if (selectionHighlight) {
        collector.addRule(`.monaco-editor .focused .selectionHighlight { background-color: ${selectionHighlight}; }`);
        collector.addRule(`.monaco-editor .selectionHighlight { background-color: ${selectionHighlight.transparent(0.5)}; }`);
    }
    const wordHighlight = theme.getColor($c7e22f4640983df7$var$editorWordHighlight);
    if (wordHighlight) collector.addRule(`.monaco-editor .wordHighlight { background-color: ${wordHighlight}; }`);
    const wordHighlightStrong = theme.getColor($c7e22f4640983df7$var$editorWordHighlightStrong);
    if (wordHighlightStrong) collector.addRule(`.monaco-editor .wordHighlightStrong { background-color: ${wordHighlightStrong}; }`);
    const selectionHighlightBorder = theme.getColor((0, $3XYy8.editorSelectionHighlightBorder));
    if (selectionHighlightBorder) collector.addRule(`.monaco-editor .selectionHighlight { border: 1px ${theme.type === "hc" ? "dotted" : "solid"} ${selectionHighlightBorder}; box-sizing: border-box; }`);
    const wordHighlightBorder = theme.getColor($c7e22f4640983df7$var$editorWordHighlightBorder);
    if (wordHighlightBorder) collector.addRule(`.monaco-editor .wordHighlight { border: 1px ${theme.type === "hc" ? "dashed" : "solid"} ${wordHighlightBorder}; box-sizing: border-box; }`);
    const wordHighlightStrongBorder = theme.getColor($c7e22f4640983df7$var$editorWordHighlightStrongBorder);
    if (wordHighlightStrongBorder) collector.addRule(`.monaco-editor .wordHighlightStrong { border: 1px ${theme.type === "hc" ? "dashed" : "solid"} ${wordHighlightStrongBorder}; box-sizing: border-box; }`);
});



var $gGOeQ = parcelRequire("gGOeQ");

var $8iWNC = parcelRequire("8iWNC");

var $3xLkU = parcelRequire("3xLkU");

var $jy4Pr = parcelRequire("jy4Pr");

var $eOZuf = parcelRequire("eOZuf");

var $47f1W = parcelRequire("47f1W");

var $8qXsZ = parcelRequire("8qXsZ");

var $3HpR4 = parcelRequire("3HpR4");

var $cz0c7 = parcelRequire("cz0c7");

var $bdLce = parcelRequire("bdLce");

var $9wt9e = parcelRequire("9wt9e");

var $58WHl = parcelRequire("58WHl");

var $6qNtj = parcelRequire("6qNtj");

var $bRtox = parcelRequire("bRtox");

var $iuiVb = parcelRequire("iuiVb");
class $fadddcacca885f0a$export$eaab41d675fb3c77 extends (0, $gGOeQ.EditorCommand) {
    runEditorCommand(accessor, editor, args) {
        if (!editor.hasModel()) return;
        const wordSeparators = (0, $47f1W.getMapForWordSeparators)(editor.getOption(116 /* wordSeparators */ ));
        const model = editor.getModel();
        const selections = editor.getSelections();
        const result = selections.map((sel)=>{
            const inPosition = new (0, $8qXsZ.Position)(sel.positionLineNumber, sel.positionColumn);
            const outPosition = this._move(wordSeparators, model, inPosition, this._wordNavigationType);
            return this._moveTo(sel, outPosition, this._inSelectionMode);
        });
        model.pushStackElement();
        editor._getViewModel().setCursorStates("moveWordCommand", 3 /* Explicit */ , result.map((r)=>(0, $jy4Pr.CursorState).fromModelSelection(r)));
        if (result.length === 1) {
            const pos = new (0, $8qXsZ.Position)(result[0].positionLineNumber, result[0].positionColumn);
            editor.revealPosition(pos, 0 /* Smooth */ );
        }
    }
    _moveTo(from, to, inSelectionMode) {
        if (inSelectionMode) // move just position
        return new (0, $cz0c7.Selection)(from.selectionStartLineNumber, from.selectionStartColumn, to.lineNumber, to.column);
        else // move everything
        return new (0, $cz0c7.Selection)(to.lineNumber, to.column, to.lineNumber, to.column);
    }
    constructor(opts){
        super(opts);
        this._inSelectionMode = opts.inSelectionMode;
        this._wordNavigationType = opts.wordNavigationType;
    }
}
class $fadddcacca885f0a$export$13a65d419a1678a2 extends $fadddcacca885f0a$export$eaab41d675fb3c77 {
    _move(wordSeparators, model, position, wordNavigationType) {
        return (0, $eOZuf.WordOperations).moveWordLeft(wordSeparators, model, position, wordNavigationType);
    }
}
class $fadddcacca885f0a$export$3bd1a89f17c94fe7 extends $fadddcacca885f0a$export$eaab41d675fb3c77 {
    _move(wordSeparators, model, position, wordNavigationType) {
        return (0, $eOZuf.WordOperations).moveWordRight(wordSeparators, model, position, wordNavigationType);
    }
}
class $fadddcacca885f0a$export$4770de8d045e69d9 extends $fadddcacca885f0a$export$13a65d419a1678a2 {
    constructor(){
        super({
            inSelectionMode: false,
            wordNavigationType: 0 /* WordStart */ ,
            id: "cursorWordStartLeft",
            precondition: undefined
        });
    }
}
class $fadddcacca885f0a$export$157c37c85911da0 extends $fadddcacca885f0a$export$13a65d419a1678a2 {
    constructor(){
        super({
            inSelectionMode: false,
            wordNavigationType: 2 /* WordEnd */ ,
            id: "cursorWordEndLeft",
            precondition: undefined
        });
    }
}
class $fadddcacca885f0a$export$f491d0cd70e6ac9f extends $fadddcacca885f0a$export$13a65d419a1678a2 {
    constructor(){
        var _a;
        super({
            inSelectionMode: false,
            wordNavigationType: 1 /* WordStartFast */ ,
            id: "cursorWordLeft",
            precondition: undefined,
            kbOpts: {
                kbExpr: (0, $bRtox.ContextKeyExpr).and((0, $bdLce.EditorContextKeys).textInputFocus, (_a = (0, $bRtox.ContextKeyExpr).and((0, $6qNtj.CONTEXT_ACCESSIBILITY_MODE_ENABLED), (0, $iuiVb.IsWindowsContext))) === null || _a === void 0 ? void 0 : _a.negate()),
                primary: 2063 /* LeftArrow */ ,
                mac: {
                    primary: 527 /* LeftArrow */ 
                },
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
class $fadddcacca885f0a$export$befceb5f65aabb65 extends $fadddcacca885f0a$export$13a65d419a1678a2 {
    constructor(){
        super({
            inSelectionMode: true,
            wordNavigationType: 0 /* WordStart */ ,
            id: "cursorWordStartLeftSelect",
            precondition: undefined
        });
    }
}
class $fadddcacca885f0a$export$9d9a22ccd52050d6 extends $fadddcacca885f0a$export$13a65d419a1678a2 {
    constructor(){
        super({
            inSelectionMode: true,
            wordNavigationType: 2 /* WordEnd */ ,
            id: "cursorWordEndLeftSelect",
            precondition: undefined
        });
    }
}
class $fadddcacca885f0a$export$72b077928c493d15 extends $fadddcacca885f0a$export$13a65d419a1678a2 {
    constructor(){
        var _a;
        super({
            inSelectionMode: true,
            wordNavigationType: 1 /* WordStartFast */ ,
            id: "cursorWordLeftSelect",
            precondition: undefined,
            kbOpts: {
                kbExpr: (0, $bRtox.ContextKeyExpr).and((0, $bdLce.EditorContextKeys).textInputFocus, (_a = (0, $bRtox.ContextKeyExpr).and((0, $6qNtj.CONTEXT_ACCESSIBILITY_MODE_ENABLED), (0, $iuiVb.IsWindowsContext))) === null || _a === void 0 ? void 0 : _a.negate()),
                primary: 3087 /* LeftArrow */ ,
                mac: {
                    primary: 1551 /* LeftArrow */ 
                },
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
class $fadddcacca885f0a$export$95e12cee8c99ec86 extends $fadddcacca885f0a$export$13a65d419a1678a2 {
    _move(_, model, position, wordNavigationType) {
        return super._move((0, $47f1W.getMapForWordSeparators)((0, $3xLkU.EditorOptions).wordSeparators.defaultValue), model, position, wordNavigationType);
    }
    constructor(){
        super({
            inSelectionMode: false,
            wordNavigationType: 3 /* WordAccessibility */ ,
            id: "cursorWordAccessibilityLeft",
            precondition: undefined
        });
    }
}
class $fadddcacca885f0a$export$97245746696e71d0 extends $fadddcacca885f0a$export$13a65d419a1678a2 {
    _move(_, model, position, wordNavigationType) {
        return super._move((0, $47f1W.getMapForWordSeparators)((0, $3xLkU.EditorOptions).wordSeparators.defaultValue), model, position, wordNavigationType);
    }
    constructor(){
        super({
            inSelectionMode: true,
            wordNavigationType: 3 /* WordAccessibility */ ,
            id: "cursorWordAccessibilityLeftSelect",
            precondition: undefined
        });
    }
}
class $fadddcacca885f0a$export$ceee282c44fc7605 extends $fadddcacca885f0a$export$3bd1a89f17c94fe7 {
    constructor(){
        super({
            inSelectionMode: false,
            wordNavigationType: 0 /* WordStart */ ,
            id: "cursorWordStartRight",
            precondition: undefined
        });
    }
}
class $fadddcacca885f0a$export$850eef07da39cf7a extends $fadddcacca885f0a$export$3bd1a89f17c94fe7 {
    constructor(){
        var _a;
        super({
            inSelectionMode: false,
            wordNavigationType: 2 /* WordEnd */ ,
            id: "cursorWordEndRight",
            precondition: undefined,
            kbOpts: {
                kbExpr: (0, $bRtox.ContextKeyExpr).and((0, $bdLce.EditorContextKeys).textInputFocus, (_a = (0, $bRtox.ContextKeyExpr).and((0, $6qNtj.CONTEXT_ACCESSIBILITY_MODE_ENABLED), (0, $iuiVb.IsWindowsContext))) === null || _a === void 0 ? void 0 : _a.negate()),
                primary: 2065 /* RightArrow */ ,
                mac: {
                    primary: 529 /* RightArrow */ 
                },
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
class $fadddcacca885f0a$export$c902fd9f7a9b8d4f extends $fadddcacca885f0a$export$3bd1a89f17c94fe7 {
    constructor(){
        super({
            inSelectionMode: false,
            wordNavigationType: 2 /* WordEnd */ ,
            id: "cursorWordRight",
            precondition: undefined
        });
    }
}
class $fadddcacca885f0a$export$39a9bf509c325dc extends $fadddcacca885f0a$export$3bd1a89f17c94fe7 {
    constructor(){
        super({
            inSelectionMode: true,
            wordNavigationType: 0 /* WordStart */ ,
            id: "cursorWordStartRightSelect",
            precondition: undefined
        });
    }
}
class $fadddcacca885f0a$export$ea19ea92bc7e7da2 extends $fadddcacca885f0a$export$3bd1a89f17c94fe7 {
    constructor(){
        var _a;
        super({
            inSelectionMode: true,
            wordNavigationType: 2 /* WordEnd */ ,
            id: "cursorWordEndRightSelect",
            precondition: undefined,
            kbOpts: {
                kbExpr: (0, $bRtox.ContextKeyExpr).and((0, $bdLce.EditorContextKeys).textInputFocus, (_a = (0, $bRtox.ContextKeyExpr).and((0, $6qNtj.CONTEXT_ACCESSIBILITY_MODE_ENABLED), (0, $iuiVb.IsWindowsContext))) === null || _a === void 0 ? void 0 : _a.negate()),
                primary: 3089 /* RightArrow */ ,
                mac: {
                    primary: 1553 /* RightArrow */ 
                },
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
class $fadddcacca885f0a$export$dfb479c77c3a735f extends $fadddcacca885f0a$export$3bd1a89f17c94fe7 {
    constructor(){
        super({
            inSelectionMode: true,
            wordNavigationType: 2 /* WordEnd */ ,
            id: "cursorWordRightSelect",
            precondition: undefined
        });
    }
}
class $fadddcacca885f0a$export$81a225a710499206 extends $fadddcacca885f0a$export$3bd1a89f17c94fe7 {
    _move(_, model, position, wordNavigationType) {
        return super._move((0, $47f1W.getMapForWordSeparators)((0, $3xLkU.EditorOptions).wordSeparators.defaultValue), model, position, wordNavigationType);
    }
    constructor(){
        super({
            inSelectionMode: false,
            wordNavigationType: 3 /* WordAccessibility */ ,
            id: "cursorWordAccessibilityRight",
            precondition: undefined
        });
    }
}
class $fadddcacca885f0a$export$fe11f7bd19429986 extends $fadddcacca885f0a$export$3bd1a89f17c94fe7 {
    _move(_, model, position, wordNavigationType) {
        return super._move((0, $47f1W.getMapForWordSeparators)((0, $3xLkU.EditorOptions).wordSeparators.defaultValue), model, position, wordNavigationType);
    }
    constructor(){
        super({
            inSelectionMode: true,
            wordNavigationType: 3 /* WordAccessibility */ ,
            id: "cursorWordAccessibilityRightSelect",
            precondition: undefined
        });
    }
}
class $fadddcacca885f0a$export$19690b27ce3c0bb3 extends (0, $gGOeQ.EditorCommand) {
    runEditorCommand(accessor, editor, args) {
        if (!editor.hasModel()) return;
        const wordSeparators = (0, $47f1W.getMapForWordSeparators)(editor.getOption(116 /* wordSeparators */ ));
        const model = editor.getModel();
        const selections = editor.getSelections();
        const autoClosingBrackets = editor.getOption(5 /* autoClosingBrackets */ );
        const autoClosingQuotes = editor.getOption(8 /* autoClosingQuotes */ );
        const autoClosingPairs = (0, $9wt9e.LanguageConfigurationRegistry).getAutoClosingPairs(model.getLanguageId());
        const viewModel = editor._getViewModel();
        const commands = selections.map((sel)=>{
            const deleteRange = this._delete({
                wordSeparators: wordSeparators,
                model: model,
                selection: sel,
                whitespaceHeuristics: this._whitespaceHeuristics,
                autoClosingDelete: editor.getOption(6 /* autoClosingDelete */ ),
                autoClosingBrackets: autoClosingBrackets,
                autoClosingQuotes: autoClosingQuotes,
                autoClosingPairs: autoClosingPairs,
                autoClosedCharacters: viewModel.getCursorAutoClosedCharacters()
            }, this._wordNavigationType);
            return new (0, $8iWNC.ReplaceCommand)(deleteRange, "");
        });
        editor.pushUndoStop();
        editor.executeCommands(this.id, commands);
        editor.pushUndoStop();
    }
    constructor(opts){
        super(opts);
        this._whitespaceHeuristics = opts.whitespaceHeuristics;
        this._wordNavigationType = opts.wordNavigationType;
    }
}
class $fadddcacca885f0a$export$5ce54e0babbd8085 extends $fadddcacca885f0a$export$19690b27ce3c0bb3 {
    _delete(ctx, wordNavigationType) {
        let r = (0, $eOZuf.WordOperations).deleteWordLeft(ctx, wordNavigationType);
        if (r) return r;
        return new (0, $3HpR4.Range)(1, 1, 1, 1);
    }
}
class $fadddcacca885f0a$export$8ec654e5cf025a25 extends $fadddcacca885f0a$export$19690b27ce3c0bb3 {
    _delete(ctx, wordNavigationType) {
        let r = (0, $eOZuf.WordOperations).deleteWordRight(ctx, wordNavigationType);
        if (r) return r;
        const lineCount = ctx.model.getLineCount();
        const maxColumn = ctx.model.getLineMaxColumn(lineCount);
        return new (0, $3HpR4.Range)(lineCount, maxColumn, lineCount, maxColumn);
    }
}
class $fadddcacca885f0a$export$ad82f35e651a1686 extends $fadddcacca885f0a$export$5ce54e0babbd8085 {
    constructor(){
        super({
            whitespaceHeuristics: false,
            wordNavigationType: 0 /* WordStart */ ,
            id: "deleteWordStartLeft",
            precondition: (0, $bdLce.EditorContextKeys).writable
        });
    }
}
class $fadddcacca885f0a$export$3cb06644b5a9b33e extends $fadddcacca885f0a$export$5ce54e0babbd8085 {
    constructor(){
        super({
            whitespaceHeuristics: false,
            wordNavigationType: 2 /* WordEnd */ ,
            id: "deleteWordEndLeft",
            precondition: (0, $bdLce.EditorContextKeys).writable
        });
    }
}
class $fadddcacca885f0a$export$f36e7db579f60a1 extends $fadddcacca885f0a$export$5ce54e0babbd8085 {
    constructor(){
        super({
            whitespaceHeuristics: true,
            wordNavigationType: 0 /* WordStart */ ,
            id: "deleteWordLeft",
            precondition: (0, $bdLce.EditorContextKeys).writable,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).textInputFocus,
                primary: 2049 /* Backspace */ ,
                mac: {
                    primary: 513 /* Backspace */ 
                },
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
class $fadddcacca885f0a$export$3e0062da3d0b9053 extends $fadddcacca885f0a$export$8ec654e5cf025a25 {
    constructor(){
        super({
            whitespaceHeuristics: false,
            wordNavigationType: 0 /* WordStart */ ,
            id: "deleteWordStartRight",
            precondition: (0, $bdLce.EditorContextKeys).writable
        });
    }
}
class $fadddcacca885f0a$export$5bc7327221e6c16c extends $fadddcacca885f0a$export$8ec654e5cf025a25 {
    constructor(){
        super({
            whitespaceHeuristics: false,
            wordNavigationType: 2 /* WordEnd */ ,
            id: "deleteWordEndRight",
            precondition: (0, $bdLce.EditorContextKeys).writable
        });
    }
}
class $fadddcacca885f0a$export$7e197173a43fafee extends $fadddcacca885f0a$export$8ec654e5cf025a25 {
    constructor(){
        super({
            whitespaceHeuristics: true,
            wordNavigationType: 2 /* WordEnd */ ,
            id: "deleteWordRight",
            precondition: (0, $bdLce.EditorContextKeys).writable,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).textInputFocus,
                primary: 2068 /* Delete */ ,
                mac: {
                    primary: 532 /* Delete */ 
                },
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
class $fadddcacca885f0a$export$8f8db2361df25afb extends (0, $gGOeQ.EditorAction) {
    run(accessor, editor, args) {
        if (!editor.hasModel()) return;
        const wordSeparators = (0, $47f1W.getMapForWordSeparators)(editor.getOption(116 /* wordSeparators */ ));
        const model = editor.getModel();
        const selections = editor.getSelections();
        const commands = selections.map((sel)=>{
            const deleteRange = (0, $eOZuf.WordOperations).deleteInsideWord(wordSeparators, model, sel);
            return new (0, $8iWNC.ReplaceCommand)(deleteRange, "");
        });
        editor.pushUndoStop();
        editor.executeCommands(this.id, commands);
        editor.pushUndoStop();
    }
    constructor(){
        super({
            id: "deleteInsideWord",
            precondition: (0, $bdLce.EditorContextKeys).writable,
            label: $58WHl.localize("deleteInsideWord", "Delete Word"),
            alias: "Delete Word"
        });
    }
}
(0, $gGOeQ.registerEditorCommand)(new $fadddcacca885f0a$export$4770de8d045e69d9());
(0, $gGOeQ.registerEditorCommand)(new $fadddcacca885f0a$export$157c37c85911da0());
(0, $gGOeQ.registerEditorCommand)(new $fadddcacca885f0a$export$f491d0cd70e6ac9f());
(0, $gGOeQ.registerEditorCommand)(new $fadddcacca885f0a$export$befceb5f65aabb65());
(0, $gGOeQ.registerEditorCommand)(new $fadddcacca885f0a$export$9d9a22ccd52050d6());
(0, $gGOeQ.registerEditorCommand)(new $fadddcacca885f0a$export$72b077928c493d15());
(0, $gGOeQ.registerEditorCommand)(new $fadddcacca885f0a$export$ceee282c44fc7605());
(0, $gGOeQ.registerEditorCommand)(new $fadddcacca885f0a$export$850eef07da39cf7a());
(0, $gGOeQ.registerEditorCommand)(new $fadddcacca885f0a$export$c902fd9f7a9b8d4f());
(0, $gGOeQ.registerEditorCommand)(new $fadddcacca885f0a$export$39a9bf509c325dc());
(0, $gGOeQ.registerEditorCommand)(new $fadddcacca885f0a$export$ea19ea92bc7e7da2());
(0, $gGOeQ.registerEditorCommand)(new $fadddcacca885f0a$export$dfb479c77c3a735f());
(0, $gGOeQ.registerEditorCommand)(new $fadddcacca885f0a$export$95e12cee8c99ec86());
(0, $gGOeQ.registerEditorCommand)(new $fadddcacca885f0a$export$97245746696e71d0());
(0, $gGOeQ.registerEditorCommand)(new $fadddcacca885f0a$export$81a225a710499206());
(0, $gGOeQ.registerEditorCommand)(new $fadddcacca885f0a$export$fe11f7bd19429986());
(0, $gGOeQ.registerEditorCommand)(new $fadddcacca885f0a$export$ad82f35e651a1686());
(0, $gGOeQ.registerEditorCommand)(new $fadddcacca885f0a$export$3cb06644b5a9b33e());
(0, $gGOeQ.registerEditorCommand)(new $fadddcacca885f0a$export$f36e7db579f60a1());
(0, $gGOeQ.registerEditorCommand)(new $fadddcacca885f0a$export$3e0062da3d0b9053());
(0, $gGOeQ.registerEditorCommand)(new $fadddcacca885f0a$export$5bc7327221e6c16c());
(0, $gGOeQ.registerEditorCommand)(new $fadddcacca885f0a$export$7e197173a43fafee());
(0, $gGOeQ.registerEditorAction)($fadddcacca885f0a$export$8f8db2361df25afb);



var $gGOeQ = parcelRequire("gGOeQ");

var $eOZuf = parcelRequire("eOZuf");

var $3HpR4 = parcelRequire("3HpR4");

var $bdLce = parcelRequire("bdLce");


var $fAXtX = parcelRequire("fAXtX");
class $a0530237eb15b93e$export$c4bbad0c92429e2a extends (0, $fadddcacca885f0a$export$19690b27ce3c0bb3) {
    _delete(ctx, wordNavigationType) {
        let r = (0, $eOZuf.WordPartOperations).deleteWordPartLeft(ctx);
        if (r) return r;
        return new (0, $3HpR4.Range)(1, 1, 1, 1);
    }
    constructor(){
        super({
            whitespaceHeuristics: true,
            wordNavigationType: 0 /* WordStart */ ,
            id: "deleteWordPartLeft",
            precondition: (0, $bdLce.EditorContextKeys).writable,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).textInputFocus,
                primary: 0,
                mac: {
                    primary: 769 /* Backspace */ 
                },
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
class $a0530237eb15b93e$export$badada4aa779607 extends (0, $fadddcacca885f0a$export$19690b27ce3c0bb3) {
    _delete(ctx, wordNavigationType) {
        let r = (0, $eOZuf.WordPartOperations).deleteWordPartRight(ctx);
        if (r) return r;
        const lineCount = ctx.model.getLineCount();
        const maxColumn = ctx.model.getLineMaxColumn(lineCount);
        return new (0, $3HpR4.Range)(lineCount, maxColumn, lineCount, maxColumn);
    }
    constructor(){
        super({
            whitespaceHeuristics: true,
            wordNavigationType: 2 /* WordEnd */ ,
            id: "deleteWordPartRight",
            precondition: (0, $bdLce.EditorContextKeys).writable,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).textInputFocus,
                primary: 0,
                mac: {
                    primary: 788 /* Delete */ 
                },
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
class $a0530237eb15b93e$export$ae81a0942e424d66 extends (0, $fadddcacca885f0a$export$eaab41d675fb3c77) {
    _move(wordSeparators, model, position, wordNavigationType) {
        return (0, $eOZuf.WordPartOperations).moveWordPartLeft(wordSeparators, model, position);
    }
}
class $a0530237eb15b93e$export$d25a50b18eb112d5 extends $a0530237eb15b93e$export$ae81a0942e424d66 {
    constructor(){
        super({
            inSelectionMode: false,
            wordNavigationType: 0 /* WordStart */ ,
            id: "cursorWordPartLeft",
            precondition: undefined,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).textInputFocus,
                primary: 0,
                mac: {
                    primary: 783 /* LeftArrow */ 
                },
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
// Register previous id for compatibility purposes
(0, $fAXtX.CommandsRegistry).registerCommandAlias("cursorWordPartStartLeft", "cursorWordPartLeft");
class $a0530237eb15b93e$export$351378b9c4d5255a extends $a0530237eb15b93e$export$ae81a0942e424d66 {
    constructor(){
        super({
            inSelectionMode: true,
            wordNavigationType: 0 /* WordStart */ ,
            id: "cursorWordPartLeftSelect",
            precondition: undefined,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).textInputFocus,
                primary: 0,
                mac: {
                    primary: 1807 /* LeftArrow */ 
                },
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
// Register previous id for compatibility purposes
(0, $fAXtX.CommandsRegistry).registerCommandAlias("cursorWordPartStartLeftSelect", "cursorWordPartLeftSelect");
class $a0530237eb15b93e$export$8927a2c83363ac2a extends (0, $fadddcacca885f0a$export$eaab41d675fb3c77) {
    _move(wordSeparators, model, position, wordNavigationType) {
        return (0, $eOZuf.WordPartOperations).moveWordPartRight(wordSeparators, model, position);
    }
}
class $a0530237eb15b93e$export$b4cc05290eaa5d1a extends $a0530237eb15b93e$export$8927a2c83363ac2a {
    constructor(){
        super({
            inSelectionMode: false,
            wordNavigationType: 2 /* WordEnd */ ,
            id: "cursorWordPartRight",
            precondition: undefined,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).textInputFocus,
                primary: 0,
                mac: {
                    primary: 785 /* RightArrow */ 
                },
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
class $a0530237eb15b93e$export$a0ec6a8e7a9cded6 extends $a0530237eb15b93e$export$8927a2c83363ac2a {
    constructor(){
        super({
            inSelectionMode: true,
            wordNavigationType: 2 /* WordEnd */ ,
            id: "cursorWordPartRightSelect",
            precondition: undefined,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).textInputFocus,
                primary: 0,
                mac: {
                    primary: 1809 /* RightArrow */ 
                },
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
(0, $gGOeQ.registerEditorCommand)(new $a0530237eb15b93e$export$c4bbad0c92429e2a());
(0, $gGOeQ.registerEditorCommand)(new $a0530237eb15b93e$export$badada4aa779607());
(0, $gGOeQ.registerEditorCommand)(new $a0530237eb15b93e$export$d25a50b18eb112d5());
(0, $gGOeQ.registerEditorCommand)(new $a0530237eb15b93e$export$351378b9c4d5255a());
(0, $gGOeQ.registerEditorCommand)(new $a0530237eb15b93e$export$b4cc05290eaa5d1a());
(0, $gGOeQ.registerEditorCommand)(new $a0530237eb15b93e$export$a0ec6a8e7a9cded6());


parcelRequire("hzCik");
parcelRequire("8hDtr");


var $d550e923593895f9$exports = {};


var $jOYcd = parcelRequire("jOYcd");

var $ezqd9 = parcelRequire("ezqd9");

var $cTUN0 = parcelRequire("cTUN0");

var $cVmYb = parcelRequire("cVmYb");

var $5Bh2C = parcelRequire("5Bh2C");

var $atiRx = parcelRequire("atiRx");

var $1d81R = parcelRequire("1d81R");

var $9TEeL = parcelRequire("9TEeL");

var $7K96x = parcelRequire("7K96x");

var $gGOeQ = parcelRequire("gGOeQ");

var $bdLce = parcelRequire("bdLce");


var $bRtox = parcelRequire("bRtox");

var $iZW67 = parcelRequire("iZW67");

var $gY9wc = parcelRequire("gY9wc");

var $9KRmt = parcelRequire("9KRmt");

var $3XYy8 = parcelRequire("3XYy8");

var $fUTzO = parcelRequire("fUTzO");

var $hzCik = parcelRequire("hzCik");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $d550e923593895f9$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $d550e923593895f9$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
const $d550e923593895f9$var$CONTEXT_ACCESSIBILITY_WIDGET_VISIBLE = new (0, $bRtox.RawContextKey)("accessibilityHelpWidgetVisible", false);
let $d550e923593895f9$var$AccessibilityHelpController = class AccessibilityHelpController extends (0, $atiRx.Disposable) {
    static get(editor) {
        return editor.getContribution(AccessibilityHelpController.ID);
    }
    show() {
        this._widget.show();
    }
    hide() {
        this._widget.hide();
    }
    constructor(editor, instantiationService){
        super();
        this._editor = editor;
        this._widget = this._register(instantiationService.createInstance($d550e923593895f9$var$AccessibilityHelpWidget, this._editor));
    }
};
$d550e923593895f9$var$AccessibilityHelpController.ID = "editor.contrib.accessibilityHelpController";
$d550e923593895f9$var$AccessibilityHelpController = $d550e923593895f9$var$__decorate([
    $d550e923593895f9$var$__param(1, (0, $iZW67.IInstantiationService))
], $d550e923593895f9$var$AccessibilityHelpController);
function $d550e923593895f9$var$getSelectionLabel(selections, charactersSelected) {
    if (!selections || selections.length === 0) return (0, $hzCik.AccessibilityHelpNLS).noSelection;
    if (selections.length === 1) {
        if (charactersSelected) return $9TEeL.format((0, $hzCik.AccessibilityHelpNLS).singleSelectionRange, selections[0].positionLineNumber, selections[0].positionColumn, charactersSelected);
        return $9TEeL.format((0, $hzCik.AccessibilityHelpNLS).singleSelection, selections[0].positionLineNumber, selections[0].positionColumn);
    }
    if (charactersSelected) return $9TEeL.format((0, $hzCik.AccessibilityHelpNLS).multiSelectionRange, selections.length, charactersSelected);
    if (selections.length > 0) return $9TEeL.format((0, $hzCik.AccessibilityHelpNLS).multiSelection, selections.length);
    return "";
}
let $d550e923593895f9$var$AccessibilityHelpWidget = class AccessibilityHelpWidget extends (0, $5Bh2C.Widget) {
    dispose() {
        this._editor.removeOverlayWidget(this);
        super.dispose();
    }
    getId() {
        return AccessibilityHelpWidget.ID;
    }
    getDomNode() {
        return this._domNode.domNode;
    }
    getPosition() {
        return {
            preference: null
        };
    }
    show() {
        if (this._isVisible) return;
        this._isVisible = true;
        this._isVisibleKey.set(true);
        this._layout();
        this._domNode.setDisplay("block");
        this._domNode.setAttribute("aria-hidden", "false");
        this._contentDomNode.domNode.tabIndex = 0;
        this._buildContent();
        this._contentDomNode.domNode.focus();
    }
    _descriptionForCommand(commandId, msg, noKbMsg) {
        let kb = this._keybindingService.lookupKeybinding(commandId);
        if (kb) return $9TEeL.format(msg, kb.getAriaLabel());
        return $9TEeL.format(noKbMsg, commandId);
    }
    _buildContent() {
        const options = this._editor.getOptions();
        const selections = this._editor.getSelections();
        let charactersSelected = 0;
        if (selections) {
            const model = this._editor.getModel();
            if (model) selections.forEach((selection)=>{
                charactersSelected += model.getValueLengthInRange(selection);
            });
        }
        let text = $d550e923593895f9$var$getSelectionLabel(selections, charactersSelected);
        if (options.get(53 /* inDiffEditor */ )) {
            if (options.get(80 /* readOnly */ )) text += (0, $hzCik.AccessibilityHelpNLS).readonlyDiffEditor;
            else text += (0, $hzCik.AccessibilityHelpNLS).editableDiffEditor;
        } else if (options.get(80 /* readOnly */ )) text += (0, $hzCik.AccessibilityHelpNLS).readonlyEditor;
        else text += (0, $hzCik.AccessibilityHelpNLS).editableEditor;
        const turnOnMessage = $1d81R.isMacintosh ? (0, $hzCik.AccessibilityHelpNLS).changeConfigToOnMac : (0, $hzCik.AccessibilityHelpNLS).changeConfigToOnWinLinux;
        switch(options.get(2 /* accessibilitySupport */ )){
            case 0 /* Unknown */ :
                text += "\n\n - " + turnOnMessage;
                break;
            case 2 /* Enabled */ :
                text += "\n\n - " + (0, $hzCik.AccessibilityHelpNLS).auto_on;
                break;
            case 1 /* Disabled */ :
                text += "\n\n - " + (0, $hzCik.AccessibilityHelpNLS).auto_off;
                text += " " + turnOnMessage;
                break;
        }
        if (options.get(129 /* tabFocusMode */ )) text += "\n\n - " + this._descriptionForCommand((0, $410789531c99b0f4$export$676ded3884da9932).ID, (0, $hzCik.AccessibilityHelpNLS).tabFocusModeOnMsg, (0, $hzCik.AccessibilityHelpNLS).tabFocusModeOnMsgNoKb);
        else text += "\n\n - " + this._descriptionForCommand((0, $410789531c99b0f4$export$676ded3884da9932).ID, (0, $hzCik.AccessibilityHelpNLS).tabFocusModeOffMsg, (0, $hzCik.AccessibilityHelpNLS).tabFocusModeOffMsgNoKb);
        const openDocMessage = $1d81R.isMacintosh ? (0, $hzCik.AccessibilityHelpNLS).openDocMac : (0, $hzCik.AccessibilityHelpNLS).openDocWinLinux;
        text += "\n\n - " + openDocMessage;
        text += "\n\n" + (0, $hzCik.AccessibilityHelpNLS).outroMsg;
        this._contentDomNode.domNode.appendChild((0, $cTUN0.renderFormattedText)(text));
        // Per https://www.w3.org/TR/wai-aria/roles#document, Authors SHOULD provide a title or label for documents
        this._contentDomNode.domNode.setAttribute("aria-label", text);
    }
    hide() {
        if (!this._isVisible) return;
        this._isVisible = false;
        this._isVisibleKey.reset();
        this._domNode.setDisplay("none");
        this._domNode.setAttribute("aria-hidden", "true");
        this._contentDomNode.domNode.tabIndex = -1;
        $jOYcd.clearNode(this._contentDomNode.domNode);
        this._editor.focus();
    }
    _layout() {
        let editorLayout = this._editor.getLayoutInfo();
        let w = Math.max(5, Math.min(AccessibilityHelpWidget.WIDTH, editorLayout.width - 40));
        let h = Math.max(5, Math.min(AccessibilityHelpWidget.HEIGHT, editorLayout.height - 40));
        this._domNode.setWidth(w);
        this._domNode.setHeight(h);
        let top = Math.round((editorLayout.height - h) / 2);
        this._domNode.setTop(top);
        let left = Math.round((editorLayout.width - w) / 2);
        this._domNode.setLeft(left);
    }
    constructor(editor, _contextKeyService, _keybindingService, _openerService){
        super();
        this._contextKeyService = _contextKeyService;
        this._keybindingService = _keybindingService;
        this._openerService = _openerService;
        this._editor = editor;
        this._isVisibleKey = $d550e923593895f9$var$CONTEXT_ACCESSIBILITY_WIDGET_VISIBLE.bindTo(this._contextKeyService);
        this._domNode = (0, $ezqd9.createFastDomNode)(document.createElement("div"));
        this._domNode.setClassName("accessibilityHelpWidget");
        this._domNode.setDisplay("none");
        this._domNode.setAttribute("role", "dialog");
        this._domNode.setAttribute("aria-hidden", "true");
        this._contentDomNode = (0, $ezqd9.createFastDomNode)(document.createElement("div"));
        this._contentDomNode.setAttribute("role", "document");
        this._domNode.appendChild(this._contentDomNode);
        this._isVisible = false;
        this._register(this._editor.onDidLayoutChange(()=>{
            if (this._isVisible) this._layout();
        }));
        // Intentionally not configurable!
        this._register($jOYcd.addStandardDisposableListener(this._contentDomNode.domNode, "keydown", (e)=>{
            if (!this._isVisible) return;
            if (e.equals(2083 /* KeyE */ )) {
                (0, $cVmYb.alert)((0, $hzCik.AccessibilityHelpNLS).emergencyConfOn);
                this._editor.updateOptions({
                    accessibilitySupport: "on"
                });
                $jOYcd.clearNode(this._contentDomNode.domNode);
                this._buildContent();
                this._contentDomNode.domNode.focus();
                e.preventDefault();
                e.stopPropagation();
            }
            if (e.equals(2086 /* KeyH */ )) {
                (0, $cVmYb.alert)((0, $hzCik.AccessibilityHelpNLS).openingDocs);
                let url = this._editor.getRawOptions().accessibilityHelpUrl;
                if (typeof url === "undefined") url = "https://go.microsoft.com/fwlink/?linkid=852450";
                this._openerService.open((0, $7K96x.URI).parse(url));
                e.preventDefault();
                e.stopPropagation();
            }
        }));
        this.onblur(this._contentDomNode.domNode, ()=>{
            this.hide();
        });
        this._editor.addOverlayWidget(this);
    }
};
$d550e923593895f9$var$AccessibilityHelpWidget.ID = "editor.contrib.accessibilityHelpWidget";
$d550e923593895f9$var$AccessibilityHelpWidget.WIDTH = 500;
$d550e923593895f9$var$AccessibilityHelpWidget.HEIGHT = 300;
$d550e923593895f9$var$AccessibilityHelpWidget = $d550e923593895f9$var$__decorate([
    $d550e923593895f9$var$__param(1, (0, $bRtox.IContextKeyService)),
    $d550e923593895f9$var$__param(2, (0, $gY9wc.IKeybindingService)),
    $d550e923593895f9$var$__param(3, (0, $9KRmt.IOpenerService))
], $d550e923593895f9$var$AccessibilityHelpWidget);
class $d550e923593895f9$var$ShowAccessibilityHelpAction extends (0, $gGOeQ.EditorAction) {
    run(accessor, editor) {
        let controller = $d550e923593895f9$var$AccessibilityHelpController.get(editor);
        if (controller) controller.show();
    }
    constructor(){
        super({
            id: "editor.action.showAccessibilityHelp",
            label: (0, $hzCik.AccessibilityHelpNLS).showAccessibilityHelpAction,
            alias: "Show Accessibility Help",
            precondition: undefined,
            kbOpts: {
                primary: 571 /* F1 */ ,
                weight: 100 /* EditorContrib */ ,
                linux: {
                    primary: 1595 /* F1 */ ,
                    secondary: [
                        571 /* F1 */ 
                    ]
                }
            }
        });
    }
}
(0, $gGOeQ.registerEditorContribution)($d550e923593895f9$var$AccessibilityHelpController.ID, $d550e923593895f9$var$AccessibilityHelpController);
(0, $gGOeQ.registerEditorAction)($d550e923593895f9$var$ShowAccessibilityHelpAction);
const $d550e923593895f9$var$AccessibilityHelpCommand = (0, $gGOeQ.EditorCommand).bindToContribution($d550e923593895f9$var$AccessibilityHelpController.get);
(0, $gGOeQ.registerEditorCommand)(new $d550e923593895f9$var$AccessibilityHelpCommand({
    id: "closeAccessibilityHelp",
    precondition: $d550e923593895f9$var$CONTEXT_ACCESSIBILITY_WIDGET_VISIBLE,
    handler: (x)=>x.hide(),
    kbOpts: {
        weight: 200,
        kbExpr: (0, $bdLce.EditorContextKeys).focus,
        primary: 9 /* Escape */ ,
        secondary: [
            1033 /* Escape */ 
        ]
    }
}));
(0, $fUTzO.registerThemingParticipant)((theme, collector)=>{
    const widgetBackground = theme.getColor((0, $3XYy8.editorWidgetBackground));
    if (widgetBackground) collector.addRule(`.monaco-editor .accessibilityHelpWidget { background-color: ${widgetBackground}; }`);
    const widgetForeground = theme.getColor((0, $3XYy8.editorWidgetForeground));
    if (widgetForeground) collector.addRule(`.monaco-editor .accessibilityHelpWidget { color: ${widgetForeground}; }`);
    const widgetShadowColor = theme.getColor((0, $3XYy8.widgetShadow));
    if (widgetShadowColor) collector.addRule(`.monaco-editor .accessibilityHelpWidget { box-shadow: 0 2px 8px ${widgetShadowColor}; }`);
    const hcBorder = theme.getColor((0, $3XYy8.contrastBorder));
    if (hcBorder) collector.addRule(`.monaco-editor .accessibilityHelpWidget { border: 2px solid ${hcBorder}; }`);
});




var $jOYcd = parcelRequire("jOYcd");

var $atiRx = parcelRequire("atiRx");

var $gGOeQ = parcelRequire("gGOeQ");

var $1d81R = parcelRequire("1d81R");
class $5782d14159a0cc8f$export$445a80feda1f9fce extends (0, $atiRx.Disposable) {
    update() {
        const shouldHaveWidget = !this.editor.getOption(80 /* readOnly */ );
        if (!this.widget && shouldHaveWidget) this.widget = new $5782d14159a0cc8f$var$ShowKeyboardWidget(this.editor);
        else if (this.widget && !shouldHaveWidget) {
            this.widget.dispose();
            this.widget = null;
        }
    }
    dispose() {
        super.dispose();
        if (this.widget) {
            this.widget.dispose();
            this.widget = null;
        }
    }
    constructor(editor){
        super();
        this.editor = editor;
        this.widget = null;
        if (0, $1d81R.isIOS) {
            this._register(editor.onDidChangeConfiguration(()=>this.update()));
            this.update();
        }
    }
}
$5782d14159a0cc8f$export$445a80feda1f9fce.ID = "editor.contrib.iPadShowKeyboard";
class $5782d14159a0cc8f$var$ShowKeyboardWidget extends (0, $atiRx.Disposable) {
    dispose() {
        this.editor.removeOverlayWidget(this);
        super.dispose();
    }
    // ----- IOverlayWidget API
    getId() {
        return $5782d14159a0cc8f$var$ShowKeyboardWidget.ID;
    }
    getDomNode() {
        return this._domNode;
    }
    getPosition() {
        return {
            preference: 1 /* BOTTOM_RIGHT_CORNER */ 
        };
    }
    constructor(editor){
        super();
        this.editor = editor;
        this._domNode = document.createElement("textarea");
        this._domNode.className = "iPadShowKeyboard";
        this._register($jOYcd.addDisposableListener(this._domNode, "touchstart", (e)=>{
            this.editor.focus();
        }));
        this._register($jOYcd.addDisposableListener(this._domNode, "focus", (e)=>{
            this.editor.focus();
        }));
        this.editor.addOverlayWidget(this);
    }
}
$5782d14159a0cc8f$var$ShowKeyboardWidget.ID = "editor.contrib.ShowKeyboardWidget";
(0, $gGOeQ.registerEditorContribution)($5782d14159a0cc8f$export$445a80feda1f9fce.ID, $5782d14159a0cc8f$export$445a80feda1f9fce);


var $b034b4414a36322d$exports = {};


var $jOYcd = parcelRequire("jOYcd");

var $6yffc = parcelRequire("6yffc");

var $atiRx = parcelRequire("atiRx");

var $gGOeQ = parcelRequire("gGOeQ");

var $eKhCe = parcelRequire("eKhCe");

var $cIeyV = parcelRequire("cIeyV");

var $6o4cZ = parcelRequire("6o4cZ");

var $bnqXG = parcelRequire("bnqXG");

var $3XYy8 = parcelRequire("3XYy8");

var $fUTzO = parcelRequire("fUTzO");

var $hzCik = parcelRequire("hzCik");

var $ia1vI = parcelRequire("ia1vI");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $b034b4414a36322d$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $b034b4414a36322d$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
let $b034b4414a36322d$var$InspectTokensController = class InspectTokensController extends (0, $atiRx.Disposable) {
    static get(editor) {
        return editor.getContribution(InspectTokensController.ID);
    }
    dispose() {
        this.stop();
        super.dispose();
    }
    launch() {
        if (this._widget) return;
        if (!this._editor.hasModel()) return;
        this._widget = new $b034b4414a36322d$var$InspectTokensWidget(this._editor, this._modeService);
    }
    stop() {
        if (this._widget) {
            this._widget.dispose();
            this._widget = null;
        }
    }
    constructor(editor, standaloneColorService, modeService){
        super();
        this._editor = editor;
        this._modeService = modeService;
        this._widget = null;
        this._register(this._editor.onDidChangeModel((e)=>this.stop()));
        this._register(this._editor.onDidChangeModelLanguage((e)=>this.stop()));
        this._register((0, $eKhCe.TokenizationRegistry).onDidChange((e)=>this.stop()));
        this._register(this._editor.onKeyUp((e)=>e.keyCode === 9 /* Escape */  && this.stop()));
    }
};
$b034b4414a36322d$var$InspectTokensController.ID = "editor.contrib.inspectTokens";
$b034b4414a36322d$var$InspectTokensController = $b034b4414a36322d$var$__decorate([
    $b034b4414a36322d$var$__param(1, (0, $bnqXG.IStandaloneThemeService)),
    $b034b4414a36322d$var$__param(2, (0, $6o4cZ.IModeService))
], $b034b4414a36322d$var$InspectTokensController);
class $b034b4414a36322d$var$InspectTokens extends (0, $gGOeQ.EditorAction) {
    run(accessor, editor) {
        let controller = $b034b4414a36322d$var$InspectTokensController.get(editor);
        if (controller) controller.launch();
    }
    constructor(){
        super({
            id: "editor.action.inspectTokens",
            label: (0, $hzCik.InspectTokensNLS).inspectTokensAction,
            alias: "Developer: Inspect Tokens",
            precondition: undefined
        });
    }
}
function $b034b4414a36322d$var$renderTokenText(tokenText) {
    let result = "";
    for(let charIndex = 0, len = tokenText.length; charIndex < len; charIndex++){
        let charCode = tokenText.charCodeAt(charIndex);
        switch(charCode){
            case 9 /* Tab */ :
                result += "→"; // &rarr;
                break;
            case 32 /* Space */ :
                result += "\xb7"; // &middot;
                break;
            default:
                result += String.fromCharCode(charCode);
        }
    }
    return result;
}
function $b034b4414a36322d$var$getSafeTokenizationSupport(languageIdCodec, languageId) {
    const tokenizationSupport = (0, $eKhCe.TokenizationRegistry).get(languageId);
    if (tokenizationSupport) return tokenizationSupport;
    const encodedLanguageId = languageIdCodec.encodeLanguageId(languageId);
    return {
        getInitialState: ()=>(0, $cIeyV.NULL_STATE),
        tokenize: (line, hasEOL, state, deltaOffset)=>(0, $cIeyV.nullTokenize)(languageId, line, state, deltaOffset),
        tokenize2: (line, hasEOL, state, deltaOffset)=>(0, $cIeyV.nullTokenize2)(encodedLanguageId, line, state, deltaOffset)
    };
}
class $b034b4414a36322d$var$InspectTokensWidget extends (0, $atiRx.Disposable) {
    dispose() {
        this._editor.removeContentWidget(this);
        super.dispose();
    }
    getId() {
        return $b034b4414a36322d$var$InspectTokensWidget._ID;
    }
    _compute(position) {
        let data = this._getTokensAtLine(position.lineNumber);
        let token1Index = 0;
        for(let i = data.tokens1.length - 1; i >= 0; i--){
            let t = data.tokens1[i];
            if (position.column - 1 >= t.offset) {
                token1Index = i;
                break;
            }
        }
        let token2Index = 0;
        for(let i1 = data.tokens2.length >>> 1; i1 >= 0; i1--)if (position.column - 1 >= data.tokens2[i1 << 1]) {
            token2Index = i1;
            break;
        }
        let lineContent = this._model.getLineContent(position.lineNumber);
        let tokenText = "";
        if (token1Index < data.tokens1.length) {
            let tokenStartIndex = data.tokens1[token1Index].offset;
            let tokenEndIndex = token1Index + 1 < data.tokens1.length ? data.tokens1[token1Index + 1].offset : lineContent.length;
            tokenText = lineContent.substring(tokenStartIndex, tokenEndIndex);
        }
        (0, $jOYcd.reset)(this._domNode, (0, $jOYcd.$)("h2.tm-token", undefined, $b034b4414a36322d$var$renderTokenText(tokenText), (0, $jOYcd.$)("span.tm-token-length", undefined, `${tokenText.length} ${tokenText.length === 1 ? "char" : "chars"}`)));
        (0, $jOYcd.append)(this._domNode, (0, $jOYcd.$)("hr.tokens-inspect-separator", {
            "style": "clear:both"
        }));
        const metadata = (token2Index << 1) + 1 < data.tokens2.length ? this._decodeMetadata(data.tokens2[(token2Index << 1) + 1]) : null;
        (0, $jOYcd.append)(this._domNode, (0, $jOYcd.$)("table.tm-metadata-table", undefined, (0, $jOYcd.$)("tbody", undefined, (0, $jOYcd.$)("tr", undefined, (0, $jOYcd.$)("td.tm-metadata-key", undefined, "language"), (0, $jOYcd.$)("td.tm-metadata-value", undefined, `${metadata ? metadata.languageId : "-?-"}`)), (0, $jOYcd.$)("tr", undefined, (0, $jOYcd.$)("td.tm-metadata-key", undefined, "token type"), (0, $jOYcd.$)("td.tm-metadata-value", undefined, `${metadata ? this._tokenTypeToString(metadata.tokenType) : "-?-"}`)), (0, $jOYcd.$)("tr", undefined, (0, $jOYcd.$)("td.tm-metadata-key", undefined, "font style"), (0, $jOYcd.$)("td.tm-metadata-value", undefined, `${metadata ? this._fontStyleToString(metadata.fontStyle) : "-?-"}`)), (0, $jOYcd.$)("tr", undefined, (0, $jOYcd.$)("td.tm-metadata-key", undefined, "foreground"), (0, $jOYcd.$)("td.tm-metadata-value", undefined, `${metadata ? (0, $6yffc.Color).Format.CSS.formatHex(metadata.foreground) : "-?-"}`)), (0, $jOYcd.$)("tr", undefined, (0, $jOYcd.$)("td.tm-metadata-key", undefined, "background"), (0, $jOYcd.$)("td.tm-metadata-value", undefined, `${metadata ? (0, $6yffc.Color).Format.CSS.formatHex(metadata.background) : "-?-"}`)))));
        (0, $jOYcd.append)(this._domNode, (0, $jOYcd.$)("hr.tokens-inspect-separator"));
        if (token1Index < data.tokens1.length) (0, $jOYcd.append)(this._domNode, (0, $jOYcd.$)("span.tm-token-type", undefined, data.tokens1[token1Index].type));
        this._editor.layoutContentWidget(this);
    }
    _decodeMetadata(metadata) {
        let colorMap = (0, $eKhCe.TokenizationRegistry).getColorMap();
        let languageId = (0, $eKhCe.TokenMetadata).getLanguageId(metadata);
        let tokenType = (0, $eKhCe.TokenMetadata).getTokenType(metadata);
        let fontStyle = (0, $eKhCe.TokenMetadata).getFontStyle(metadata);
        let foreground = (0, $eKhCe.TokenMetadata).getForeground(metadata);
        let background = (0, $eKhCe.TokenMetadata).getBackground(metadata);
        return {
            languageId: this._modeService.languageIdCodec.decodeLanguageId(languageId),
            tokenType: tokenType,
            fontStyle: fontStyle,
            foreground: colorMap[foreground],
            background: colorMap[background]
        };
    }
    _tokenTypeToString(tokenType) {
        switch(tokenType){
            case 0 /* Other */ :
                return "Other";
            case 1 /* Comment */ :
                return "Comment";
            case 2 /* String */ :
                return "String";
            case 4 /* RegEx */ :
                return "RegEx";
            default:
                return "??";
        }
    }
    _fontStyleToString(fontStyle) {
        let r = "";
        if (fontStyle & 1 /* Italic */ ) r += "italic ";
        if (fontStyle & 2 /* Bold */ ) r += "bold ";
        if (fontStyle & 4 /* Underline */ ) r += "underline ";
        if (r.length === 0) r = "---";
        return r;
    }
    _getTokensAtLine(lineNumber) {
        let stateBeforeLine = this._getStateBeforeLine(lineNumber);
        let tokenizationResult1 = this._tokenizationSupport.tokenize(this._model.getLineContent(lineNumber), true, stateBeforeLine, 0);
        let tokenizationResult2 = this._tokenizationSupport.tokenize2(this._model.getLineContent(lineNumber), true, stateBeforeLine, 0);
        return {
            startState: stateBeforeLine,
            tokens1: tokenizationResult1.tokens,
            tokens2: tokenizationResult2.tokens,
            endState: tokenizationResult1.endState
        };
    }
    _getStateBeforeLine(lineNumber) {
        let state = this._tokenizationSupport.getInitialState();
        for(let i = 1; i < lineNumber; i++){
            let tokenizationResult = this._tokenizationSupport.tokenize(this._model.getLineContent(i), true, state, 0);
            state = tokenizationResult.endState;
        }
        return state;
    }
    getDomNode() {
        return this._domNode;
    }
    getPosition() {
        return {
            position: this._editor.getPosition(),
            preference: [
                2 /* BELOW */ ,
                1 /* ABOVE */ 
            ]
        };
    }
    constructor(editor, modeService){
        super();
        // Editor.IContentWidget.allowEditorOverflow
        this.allowEditorOverflow = true;
        this._editor = editor;
        this._modeService = modeService;
        this._model = this._editor.getModel();
        this._domNode = document.createElement("div");
        this._domNode.className = "tokens-inspect-widget";
        this._tokenizationSupport = $b034b4414a36322d$var$getSafeTokenizationSupport(this._modeService.languageIdCodec, this._model.getLanguageId());
        this._compute(this._editor.getPosition());
        this._register(this._editor.onDidChangeCursorPosition((e)=>this._compute(this._editor.getPosition())));
        this._editor.addContentWidget(this);
    }
}
$b034b4414a36322d$var$InspectTokensWidget._ID = "editor.contrib.inspectTokensWidget";
(0, $gGOeQ.registerEditorContribution)($b034b4414a36322d$var$InspectTokensController.ID, $b034b4414a36322d$var$InspectTokensController);
(0, $gGOeQ.registerEditorAction)($b034b4414a36322d$var$InspectTokens);
(0, $fUTzO.registerThemingParticipant)((theme, collector)=>{
    const border = theme.getColor((0, $3XYy8.editorHoverBorder));
    if (border) {
        let borderWidth = theme.type === (0, $ia1vI.ColorScheme).HIGH_CONTRAST ? 2 : 1;
        collector.addRule(`.monaco-editor .tokens-inspect-widget { border: ${borderWidth}px solid ${border}; }`);
        collector.addRule(`.monaco-editor .tokens-inspect-widget .tokens-inspect-separator { background-color: ${border}; }`);
    }
    const background = theme.getColor((0, $3XYy8.editorHoverBackground));
    if (background) collector.addRule(`.monaco-editor .tokens-inspect-widget { background-color: ${background}; }`);
    const foreground = theme.getColor((0, $3XYy8.editorHoverForeground));
    if (foreground) collector.addRule(`.monaco-editor .tokens-inspect-widget { color: ${foreground}; }`);
});



var $ddqyp = parcelRequire("ddqyp");

var $1Y6Wn = parcelRequire("1Y6Wn");

var $hzCik = parcelRequire("hzCik");
var $0d6f1429e58d0138$exports = {};

$parcel$export($0d6f1429e58d0138$exports, "HelpQuickAccessProvider", function () { return $0d6f1429e58d0138$export$960f28d3c3a61657; }, function (v) { return $0d6f1429e58d0138$export$960f28d3c3a61657 = v; });

var $atiRx = parcelRequire("atiRx");

var $58WHl = parcelRequire("58WHl");

var $1Y6Wn = parcelRequire("1Y6Wn");

var $aqUJX = parcelRequire("aqUJX");

var $ddqyp = parcelRequire("ddqyp");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $0d6f1429e58d0138$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $0d6f1429e58d0138$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
let $0d6f1429e58d0138$export$960f28d3c3a61657 = class HelpQuickAccessProvider {
    provide(picker) {
        const disposables = new (0, $atiRx.DisposableStore)();
        // Open a picker with the selected value if picked
        disposables.add(picker.onDidAccept(()=>{
            const [item] = picker.selectedItems;
            if (item) this.quickInputService.quickAccess.show(item.prefix, {
                preserveValue: true
            });
        }));
        // Also open a picker when we detect the user typed the exact
        // name of a provider (e.g. `?term` for terminals)
        disposables.add(picker.onDidChangeValue((value)=>{
            const providerDescriptor = this.registry.getQuickAccessProvider(value.substr(HelpQuickAccessProvider.PREFIX.length));
            if (providerDescriptor && providerDescriptor.prefix && providerDescriptor.prefix !== HelpQuickAccessProvider.PREFIX) this.quickInputService.quickAccess.show(providerDescriptor.prefix, {
                preserveValue: true
            });
        }));
        // Fill in all providers separated by editor/global scope
        const { editorProviders: editorProviders , globalProviders: globalProviders  } = this.getQuickAccessProviders();
        picker.items = editorProviders.length === 0 || globalProviders.length === 0 ? // Without groups
        [
            ...editorProviders.length === 0 ? globalProviders : editorProviders
        ] : // With groups
        [
            {
                label: (0, $58WHl.localize)("globalCommands", "global commands"),
                type: "separator"
            },
            ...globalProviders,
            {
                label: (0, $58WHl.localize)("editorCommands", "editor commands"),
                type: "separator"
            },
            ...editorProviders
        ];
        return disposables;
    }
    getQuickAccessProviders() {
        const globalProviders = [];
        const editorProviders = [];
        for (const provider of this.registry.getQuickAccessProviders().sort((providerA, providerB)=>providerA.prefix.localeCompare(providerB.prefix))){
            if (provider.prefix === HelpQuickAccessProvider.PREFIX) continue; // exclude help which is already active
            for (const helpEntry of provider.helpEntries){
                const prefix = helpEntry.prefix || provider.prefix;
                const label = prefix || "…" /* ... */ ;
                (helpEntry.needsEditor ? editorProviders : globalProviders).push({
                    prefix: prefix,
                    label: label,
                    ariaLabel: (0, $58WHl.localize)("helpPickAriaLabel", "{0}, {1}", label, helpEntry.description),
                    description: helpEntry.description
                });
            }
        }
        return {
            editorProviders: editorProviders,
            globalProviders: globalProviders
        };
    }
    constructor(quickInputService){
        this.quickInputService = quickInputService;
        this.registry = (0, $ddqyp.Registry).as((0, $1Y6Wn.Extensions).Quickaccess);
    }
};
$0d6f1429e58d0138$export$960f28d3c3a61657.PREFIX = "?";
$0d6f1429e58d0138$export$960f28d3c3a61657 = $0d6f1429e58d0138$var$__decorate([
    $0d6f1429e58d0138$var$__param(0, (0, $aqUJX.IQuickInputService))
], $0d6f1429e58d0138$export$960f28d3c3a61657);


(0, $ddqyp.Registry).as((0, $1Y6Wn.Extensions).Quickaccess).registerQuickAccessProvider({
    ctor: (0, $0d6f1429e58d0138$exports.HelpQuickAccessProvider),
    prefix: "",
    helpEntries: [
        {
            description: (0, $hzCik.QuickHelpNLS).helpQuickAccessActionLabel,
            needsEditor: true
        }
    ]
});


var $da2b696cad5770aa$exports = {};

var $atiRx = parcelRequire("atiRx");

var $1hSTN = parcelRequire("1hSTN");

var $6q0hA = parcelRequire("6q0hA");

var $atiRx = parcelRequire("atiRx");

var $3ICxR = parcelRequire("3ICxR");

var $1hSTN = parcelRequire("1hSTN");

var $bbATZ = parcelRequire("bbATZ");

var $dW2jK = parcelRequire("dW2jK");

var $fUTzO = parcelRequire("fUTzO");
class $019ea064a310b518$export$6c0961619607218e {
    //#region Provider methods
    provide(picker, token) {
        var _a;
        const disposables = new (0, $atiRx.DisposableStore)();
        // Apply options if any
        picker.canAcceptInBackground = !!((_a = this.options) === null || _a === void 0 ? void 0 : _a.canAcceptInBackground);
        // Disable filtering & sorting, we control the results
        picker.matchOnLabel = picker.matchOnDescription = picker.matchOnDetail = picker.sortByLabel = false;
        // Provide based on current active editor
        const pickerDisposable = disposables.add(new (0, $atiRx.MutableDisposable)());
        pickerDisposable.value = this.doProvide(picker, token);
        // Re-create whenever the active editor changes
        disposables.add(this.onDidActiveTextEditorControlChange(()=>{
            // Clear old
            pickerDisposable.value = undefined;
            // Add new
            pickerDisposable.value = this.doProvide(picker, token);
        }));
        return disposables;
    }
    doProvide(picker, token) {
        const disposables = new (0, $atiRx.DisposableStore)();
        // With text control
        const editor = this.activeTextEditorControl;
        if (editor && this.canProvideWithTextEditor(editor)) {
            const context = {
                editor: editor
            };
            // Restore any view state if this picker was closed
            // without actually going to a line
            const codeEditor = (0, $1hSTN.getCodeEditor)(editor);
            if (codeEditor) {
                // Remember view state and update it when the cursor position
                // changes even later because it could be that the user has
                // configured quick access to remain open when focus is lost and
                // we always want to restore the current location.
                let lastKnownEditorViewState = (0, $3ICxR.withNullAsUndefined)(editor.saveViewState());
                disposables.add(codeEditor.onDidChangeCursorPosition(()=>{
                    lastKnownEditorViewState = (0, $3ICxR.withNullAsUndefined)(editor.saveViewState());
                }));
                context.restoreViewState = ()=>{
                    if (lastKnownEditorViewState && editor === this.activeTextEditorControl) editor.restoreViewState(lastKnownEditorViewState);
                };
                disposables.add((0, $6q0hA.once)(token.onCancellationRequested)(()=>{
                    var _a;
                    return (_a = context.restoreViewState) === null || _a === void 0 ? void 0 : _a.call(context);
                }));
            }
            // Clean up decorations on dispose
            disposables.add((0, $atiRx.toDisposable)(()=>this.clearDecorations(editor)));
            // Ask subclass for entries
            disposables.add(this.provideWithTextEditor(context, picker, token));
        } else disposables.add(this.provideWithoutTextEditor(picker, token));
        return disposables;
    }
    /**
     * Subclasses to implement if they can operate on the text editor.
     */ canProvideWithTextEditor(editor) {
        return true;
    }
    gotoLocation({ editor: editor  }, options) {
        editor.setSelection(options.range);
        editor.revealRangeInCenter(options.range, 0 /* Smooth */ );
        if (!options.preserveFocus) editor.focus();
    }
    getModel(editor) {
        var _a;
        return (0, $1hSTN.isDiffEditor)(editor) ? (_a = editor.getModel()) === null || _a === void 0 ? void 0 : _a.modified : editor.getModel();
    }
    addDecorations(editor, range) {
        editor.changeDecorations((changeAccessor)=>{
            // Reset old decorations if any
            const deleteDecorations = [];
            if (this.rangeHighlightDecorationId) {
                deleteDecorations.push(this.rangeHighlightDecorationId.overviewRulerDecorationId);
                deleteDecorations.push(this.rangeHighlightDecorationId.rangeHighlightId);
                this.rangeHighlightDecorationId = undefined;
            }
            // Add new decorations for the range
            const newDecorations = [
                // highlight the entire line on the range
                {
                    range: range,
                    options: {
                        description: "quick-access-range-highlight",
                        className: "rangeHighlight",
                        isWholeLine: true
                    }
                },
                // also add overview ruler highlight
                {
                    range: range,
                    options: {
                        description: "quick-access-range-highlight-overview",
                        overviewRuler: {
                            color: (0, $fUTzO.themeColorFromId)((0, $dW2jK.overviewRulerRangeHighlight)),
                            position: (0, $bbATZ.OverviewRulerLane).Full
                        }
                    }
                }
            ];
            const [rangeHighlightId, overviewRulerDecorationId] = changeAccessor.deltaDecorations(deleteDecorations, newDecorations);
            this.rangeHighlightDecorationId = {
                rangeHighlightId: rangeHighlightId,
                overviewRulerDecorationId: overviewRulerDecorationId
            };
        });
    }
    clearDecorations(editor) {
        const rangeHighlightDecorationId = this.rangeHighlightDecorationId;
        if (rangeHighlightDecorationId) {
            editor.changeDecorations((changeAccessor)=>{
                changeAccessor.deltaDecorations([
                    rangeHighlightDecorationId.overviewRulerDecorationId,
                    rangeHighlightDecorationId.rangeHighlightId
                ], []);
            });
            this.rangeHighlightDecorationId = undefined;
        }
    }
    constructor(options){
        this.options = options;
        //#endregion
        //#region Decorations Utils
        this.rangeHighlightDecorationId = undefined;
    }
}



var $58WHl = parcelRequire("58WHl");
class $b59635974339b687$export$c7e3af26311986a extends (0, $019ea064a310b518$export$6c0961619607218e) {
    provideWithoutTextEditor(picker) {
        const label = (0, $58WHl.localize)("cannotRunGotoLine", "Open a text editor first to go to a line.");
        picker.items = [
            {
                label: label
            }
        ];
        picker.ariaLabel = label;
        return (0, $atiRx.Disposable).None;
    }
    provideWithTextEditor(context, picker, token) {
        const editor = context.editor;
        const disposables = new (0, $atiRx.DisposableStore)();
        // Goto line once picked
        disposables.add(picker.onDidAccept((event)=>{
            const [item] = picker.selectedItems;
            if (item) {
                if (!this.isValidLineNumber(editor, item.lineNumber)) return;
                this.gotoLocation(context, {
                    range: this.toRange(item.lineNumber, item.column),
                    keyMods: picker.keyMods,
                    preserveFocus: event.inBackground
                });
                if (!event.inBackground) picker.hide();
            }
        }));
        // React to picker changes
        const updatePickerAndEditor = ()=>{
            const position = this.parsePosition(editor, picker.value.trim().substr($b59635974339b687$export$c7e3af26311986a.PREFIX.length));
            const label = this.getPickLabel(editor, position.lineNumber, position.column);
            // Picker
            picker.items = [
                {
                    lineNumber: position.lineNumber,
                    column: position.column,
                    label: label
                }
            ];
            // ARIA Label
            picker.ariaLabel = label;
            // Clear decorations for invalid range
            if (!this.isValidLineNumber(editor, position.lineNumber)) {
                this.clearDecorations(editor);
                return;
            }
            // Reveal
            const range = this.toRange(position.lineNumber, position.column);
            editor.revealRangeInCenter(range, 0 /* Smooth */ );
            // Decorate
            this.addDecorations(editor, range);
        };
        updatePickerAndEditor();
        disposables.add(picker.onDidChangeValue(()=>updatePickerAndEditor()));
        // Adjust line number visibility as needed
        const codeEditor = (0, $1hSTN.getCodeEditor)(editor);
        if (codeEditor) {
            const options = codeEditor.getOptions();
            const lineNumbers = options.get(59 /* lineNumbers */ );
            if (lineNumbers.renderType === 2 /* Relative */ ) {
                codeEditor.updateOptions({
                    lineNumbers: "on"
                });
                disposables.add((0, $atiRx.toDisposable)(()=>codeEditor.updateOptions({
                        lineNumbers: "relative"
                    })));
            }
        }
        return disposables;
    }
    toRange(lineNumber = 1, column = 1) {
        return {
            startLineNumber: lineNumber,
            startColumn: column,
            endLineNumber: lineNumber,
            endColumn: column
        };
    }
    parsePosition(editor, value) {
        // Support line-col formats of `line,col`, `line:col`, `line#col`
        const numbers = value.split(/,|:|#/).map((part)=>parseInt(part, 10)).filter((part)=>!isNaN(part));
        const endLine = this.lineCount(editor) + 1;
        return {
            lineNumber: numbers[0] > 0 ? numbers[0] : endLine + numbers[0],
            column: numbers[1]
        };
    }
    getPickLabel(editor, lineNumber, column) {
        // Location valid: indicate this as picker label
        if (this.isValidLineNumber(editor, lineNumber)) {
            if (this.isValidColumn(editor, lineNumber, column)) return (0, $58WHl.localize)("gotoLineColumnLabel", "Go to line {0} and character {1}.", lineNumber, column);
            return (0, $58WHl.localize)("gotoLineLabel", "Go to line {0}.", lineNumber);
        }
        // Location invalid: show generic label
        const position = editor.getPosition() || {
            lineNumber: 1,
            column: 1
        };
        const lineCount = this.lineCount(editor);
        if (lineCount > 1) return (0, $58WHl.localize)("gotoLineLabelEmptyWithLimit", "Current Line: {0}, Character: {1}. Type a line number between 1 and {2} to navigate to.", position.lineNumber, position.column, lineCount);
        return (0, $58WHl.localize)("gotoLineLabelEmpty", "Current Line: {0}, Character: {1}. Type a line number to navigate to.", position.lineNumber, position.column);
    }
    isValidLineNumber(editor, lineNumber) {
        if (!lineNumber || typeof lineNumber !== "number") return false;
        return lineNumber > 0 && lineNumber <= this.lineCount(editor);
    }
    isValidColumn(editor, lineNumber, column) {
        if (!column || typeof column !== "number") return false;
        const model = this.getModel(editor);
        if (!model) return false;
        const positionCandidate = {
            lineNumber: lineNumber,
            column: column
        };
        return model.validatePosition(positionCandidate).equals(positionCandidate);
    }
    lineCount(editor) {
        var _a, _b;
        return (_b = (_a = this.getModel(editor)) === null || _a === void 0 ? void 0 : _a.getLineCount()) !== null && _b !== void 0 ? _b : 0;
    }
    constructor(){
        super({
            canAcceptInBackground: true
        });
    }
}
$b59635974339b687$export$c7e3af26311986a.PREFIX = ":";



var $ddqyp = parcelRequire("ddqyp");

var $1Y6Wn = parcelRequire("1Y6Wn");

var $aXAVz = parcelRequire("aXAVz");

var $3ICxR = parcelRequire("3ICxR");

var $hzCik = parcelRequire("hzCik");

var $fSvkC = parcelRequire("fSvkC");

var $gGOeQ = parcelRequire("gGOeQ");

var $bdLce = parcelRequire("bdLce");

var $aqUJX = parcelRequire("aqUJX");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $da2b696cad5770aa$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $da2b696cad5770aa$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
let $da2b696cad5770aa$export$62f50e6a0744204 = class StandaloneGotoLineQuickAccessProvider extends (0, $b59635974339b687$export$c7e3af26311986a) {
    get activeTextEditorControl() {
        return (0, $3ICxR.withNullAsUndefined)(this.editorService.getFocusedCodeEditor());
    }
    constructor(editorService){
        super();
        this.editorService = editorService;
        this.onDidActiveTextEditorControlChange = (0, $fSvkC.Event).None;
    }
};
$da2b696cad5770aa$export$62f50e6a0744204 = $da2b696cad5770aa$var$__decorate([
    $da2b696cad5770aa$var$__param(0, (0, $aXAVz.ICodeEditorService))
], $da2b696cad5770aa$export$62f50e6a0744204);
(0, $ddqyp.Registry).as((0, $1Y6Wn.Extensions).Quickaccess).registerQuickAccessProvider({
    ctor: $da2b696cad5770aa$export$62f50e6a0744204,
    prefix: $da2b696cad5770aa$export$62f50e6a0744204.PREFIX,
    helpEntries: [
        {
            description: (0, $hzCik.GoToLineNLS).gotoLineActionLabel,
            needsEditor: true
        }
    ]
});
class $da2b696cad5770aa$export$83454a444c35f5c1 extends (0, $gGOeQ.EditorAction) {
    run(accessor) {
        accessor.get((0, $aqUJX.IQuickInputService)).quickAccess.show($da2b696cad5770aa$export$62f50e6a0744204.PREFIX);
    }
    constructor(){
        super({
            id: "editor.action.gotoLine",
            label: (0, $hzCik.GoToLineNLS).gotoLineActionLabel,
            alias: "Go to Line/Column...",
            precondition: undefined,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).focus,
                primary: 2085 /* KeyG */ ,
                mac: {
                    primary: 293 /* KeyG */ 
                },
                weight: 100 /* EditorContrib */ 
            }
        });
    }
}
(0, $gGOeQ.registerEditorAction)($da2b696cad5770aa$export$83454a444c35f5c1);


var $f0960a28de32d203$exports = {};
parcelRequire("8hDtr");

var $eac66e00bff0f7f3$exports = {};

$parcel$export($eac66e00bff0f7f3$exports, "AbstractGotoSymbolQuickAccessProvider", function () { return $eac66e00bff0f7f3$export$ceb5fc4d82017d3b; }, function (v) { return $eac66e00bff0f7f3$export$ceb5fc4d82017d3b = v; });

var $eFOsn = parcelRequire("eFOsn");

var $gnEXx = parcelRequire("gnEXx");

var $8HDYc = parcelRequire("8HDYc");

var $c8WLW = parcelRequire("c8WLW");

var $fjPby = parcelRequire("fjPby");

var $1d81R = parcelRequire("1d81R");

var $9TEeL = parcelRequire("9TEeL");
const $cf714f33edb7e56c$var$NO_SCORE2 = [
    undefined,
    []
];
function $cf714f33edb7e56c$export$e22f4f530abefc49(target, query, patternStart = 0, wordStart = 0) {
    // Score: multiple inputs
    const preparedQuery = query;
    if (preparedQuery.values && preparedQuery.values.length > 1) return $cf714f33edb7e56c$var$doScoreFuzzy2Multiple(target, preparedQuery.values, patternStart, wordStart);
    // Score: single input
    return $cf714f33edb7e56c$var$doScoreFuzzy2Single(target, query, patternStart, wordStart);
}
function $cf714f33edb7e56c$var$doScoreFuzzy2Multiple(target, query, patternStart, wordStart) {
    let totalScore = 0;
    const totalMatches = [];
    for (const queryPiece of query){
        const [score, matches] = $cf714f33edb7e56c$var$doScoreFuzzy2Single(target, queryPiece, patternStart, wordStart);
        if (typeof score !== "number") // if a single query value does not match, return with
        // no score entirely, we require all queries to match
        return $cf714f33edb7e56c$var$NO_SCORE2;
        totalScore += score;
        totalMatches.push(...matches);
    }
    // if we have a score, ensure that the positions are
    // sorted in ascending order and distinct
    return [
        totalScore,
        $cf714f33edb7e56c$var$normalizeMatches(totalMatches)
    ];
}
function $cf714f33edb7e56c$var$doScoreFuzzy2Single(target, query, patternStart, wordStart) {
    const score = (0, $c8WLW.fuzzyScore)(query.original, query.originalLowercase, patternStart, target, target.toLowerCase(), wordStart, true);
    if (!score) return $cf714f33edb7e56c$var$NO_SCORE2;
    return [
        score[0],
        (0, $c8WLW.createMatches)(score)
    ];
}
function $cf714f33edb7e56c$var$normalizeMatches(matches) {
    // sort matches by start to be able to normalize
    const sortedMatches = matches.sort((matchA, matchB)=>{
        return matchA.start - matchB.start;
    });
    // merge matches that overlap
    const normalizedMatches = [];
    let currentMatch = undefined;
    for (const match of sortedMatches)// if we have no current match or the matches
    // do not overlap, we take it as is and remember
    // it for future merging
    if (!currentMatch || !$cf714f33edb7e56c$var$matchOverlaps(currentMatch, match)) {
        currentMatch = match;
        normalizedMatches.push(match);
    } else {
        currentMatch.start = Math.min(currentMatch.start, match.start);
        currentMatch.end = Math.max(currentMatch.end, match.end);
    }
    return normalizedMatches;
}
function $cf714f33edb7e56c$var$matchOverlaps(matchA, matchB) {
    if (matchA.end < matchB.start) return false; // A ends before B starts
    if (matchB.end < matchA.start) return false; // B ends before A starts
    return true;
}
/*
 * If a query is wrapped in quotes, the user does not want to
 * use fuzzy search for this query.
 */ function $cf714f33edb7e56c$var$queryExpectsExactMatch(query) {
    return query.startsWith('"') && query.endsWith('"');
}
/**
 * Helper function to prepare a search value for scoring by removing unwanted characters
 * and allowing to score on multiple pieces separated by whitespace character.
 */ const $cf714f33edb7e56c$var$MULTIPLE_QUERY_VALUES_SEPARATOR = " ";
function $cf714f33edb7e56c$export$b7b2a481b84622e6(original) {
    if (typeof original !== "string") original = "";
    const originalLowercase = original.toLowerCase();
    const { pathNormalized: pathNormalized , normalized: normalized , normalizedLowercase: normalizedLowercase  } = $cf714f33edb7e56c$var$normalizeQuery(original);
    const containsPathSeparator = pathNormalized.indexOf((0, $fjPby.sep)) >= 0;
    const expectExactMatch = $cf714f33edb7e56c$var$queryExpectsExactMatch(original);
    let values = undefined;
    const originalSplit = original.split($cf714f33edb7e56c$var$MULTIPLE_QUERY_VALUES_SEPARATOR);
    if (originalSplit.length > 1) for (const originalPiece of originalSplit){
        const expectExactMatchPiece = $cf714f33edb7e56c$var$queryExpectsExactMatch(originalPiece);
        const { pathNormalized: pathNormalizedPiece , normalized: normalizedPiece , normalizedLowercase: normalizedLowercasePiece  } = $cf714f33edb7e56c$var$normalizeQuery(originalPiece);
        if (normalizedPiece) {
            if (!values) values = [];
            values.push({
                original: originalPiece,
                originalLowercase: originalPiece.toLowerCase(),
                pathNormalized: pathNormalizedPiece,
                normalized: normalizedPiece,
                normalizedLowercase: normalizedLowercasePiece,
                expectContiguousMatch: expectExactMatchPiece
            });
        }
    }
    return {
        original: original,
        originalLowercase: originalLowercase,
        pathNormalized: pathNormalized,
        normalized: normalized,
        normalizedLowercase: normalizedLowercase,
        values: values,
        containsPathSeparator: containsPathSeparator,
        expectContiguousMatch: expectExactMatch
    };
}
function $cf714f33edb7e56c$var$normalizeQuery(original) {
    let pathNormalized;
    if (0, $1d81R.isWindows) pathNormalized = original.replace(/\//g, (0, $fjPby.sep)); // Help Windows users to search for paths when using slash
    else pathNormalized = original.replace(/\\/g, (0, $fjPby.sep)); // Help macOS/Linux users to search for paths when using backslash
    // we remove quotes here because quotes are used for exact match search
    const normalized = (0, $9TEeL.stripWildcards)(pathNormalized).replace(/\s|"/g, "");
    return {
        pathNormalized: pathNormalized,
        normalized: normalized,
        normalizedLowercase: normalized.toLowerCase()
    };
}
function $cf714f33edb7e56c$export$20e144ebe86a7451(arg1) {
    if (Array.isArray(arg1)) return $cf714f33edb7e56c$export$b7b2a481b84622e6(arg1.map((piece)=>piece.original).join($cf714f33edb7e56c$var$MULTIPLE_QUERY_VALUES_SEPARATOR));
    return $cf714f33edb7e56c$export$b7b2a481b84622e6(arg1.original);
} //#endregion



var $atiRx = parcelRequire("atiRx");

var $9TEeL = parcelRequire("9TEeL");

var $3HpR4 = parcelRequire("3HpR4");

var $eKhCe = parcelRequire("eKhCe");



var $58WHl = parcelRequire("58WHl");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $eac66e00bff0f7f3$var$__awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class $eac66e00bff0f7f3$export$ceb5fc4d82017d3b extends (0, $019ea064a310b518$export$6c0961619607218e) {
    provideWithoutTextEditor(picker) {
        this.provideLabelPick(picker, (0, $58WHl.localize)("cannotRunGotoSymbolWithoutEditor", "To go to a symbol, first open a text editor with symbol information."));
        return (0, $atiRx.Disposable).None;
    }
    provideWithTextEditor(context, picker, token) {
        const editor = context.editor;
        const model = this.getModel(editor);
        if (!model) return (0, $atiRx.Disposable).None;
        // Provide symbols from model if available in registry
        if ((0, $eKhCe.DocumentSymbolProviderRegistry).has(model)) return this.doProvideWithEditorSymbols(context, model, picker, token);
        // Otherwise show an entry for a model without registry
        // But give a chance to resolve the symbols at a later
        // point if possible
        return this.doProvideWithoutEditorSymbols(context, model, picker, token);
    }
    doProvideWithoutEditorSymbols(context, model, picker, token) {
        const disposables = new (0, $atiRx.DisposableStore)();
        // Generic pick for not having any symbol information
        this.provideLabelPick(picker, (0, $58WHl.localize)("cannotRunGotoSymbolWithoutSymbolProvider", "The active text editor does not provide symbol information."));
        // Wait for changes to the registry and see if eventually
        // we do get symbols. This can happen if the picker is opened
        // very early after the model has loaded but before the
        // language registry is ready.
        // https://github.com/microsoft/vscode/issues/70607
        (()=>$eac66e00bff0f7f3$var$__awaiter(this, void 0, void 0, function*() {
                const result = yield this.waitForLanguageSymbolRegistry(model, disposables);
                if (!result || token.isCancellationRequested) return;
                disposables.add(this.doProvideWithEditorSymbols(context, model, picker, token));
            }))();
        return disposables;
    }
    provideLabelPick(picker, label) {
        picker.items = [
            {
                label: label,
                index: 0,
                kind: 14 /* String */ 
            }
        ];
        picker.ariaLabel = label;
    }
    waitForLanguageSymbolRegistry(model, disposables) {
        return $eac66e00bff0f7f3$var$__awaiter(this, void 0, void 0, function*() {
            if ((0, $eKhCe.DocumentSymbolProviderRegistry).has(model)) return true;
            const symbolProviderRegistryPromise = new (0, $eFOsn.DeferredPromise)();
            // Resolve promise when registry knows model
            const symbolProviderListener = disposables.add((0, $eKhCe.DocumentSymbolProviderRegistry).onDidChange(()=>{
                if ((0, $eKhCe.DocumentSymbolProviderRegistry).has(model)) {
                    symbolProviderListener.dispose();
                    symbolProviderRegistryPromise.complete(true);
                }
            }));
            // Resolve promise when we get disposed too
            disposables.add((0, $atiRx.toDisposable)(()=>symbolProviderRegistryPromise.complete(false)));
            return symbolProviderRegistryPromise.p;
        });
    }
    doProvideWithEditorSymbols(context, model, picker, token) {
        const editor = context.editor;
        const disposables = new (0, $atiRx.DisposableStore)();
        // Goto symbol once picked
        disposables.add(picker.onDidAccept((event)=>{
            const [item] = picker.selectedItems;
            if (item && item.range) {
                this.gotoLocation(context, {
                    range: item.range.selection,
                    keyMods: picker.keyMods,
                    preserveFocus: event.inBackground
                });
                if (!event.inBackground) picker.hide();
            }
        }));
        // Goto symbol side by side if enabled
        disposables.add(picker.onDidTriggerItemButton(({ item: item  })=>{
            if (item && item.range) {
                this.gotoLocation(context, {
                    range: item.range.selection,
                    keyMods: picker.keyMods,
                    forceSideBySide: true
                });
                picker.hide();
            }
        }));
        // Resolve symbols from document once and reuse this
        // request for all filtering and typing then on
        const symbolsPromise = this.getDocumentSymbols(model, token);
        // Set initial picks and update on type
        let picksCts = undefined;
        const updatePickerItems = ()=>$eac66e00bff0f7f3$var$__awaiter(this, void 0, void 0, function*() {
                // Cancel any previous ask for picks and busy
                picksCts === null || picksCts === void 0 || picksCts.dispose(true);
                picker.busy = false;
                // Create new cancellation source for this run
                picksCts = new (0, $gnEXx.CancellationTokenSource)(token);
                // Collect symbol picks
                picker.busy = true;
                try {
                    const query = (0, $cf714f33edb7e56c$export$b7b2a481b84622e6)(picker.value.substr($eac66e00bff0f7f3$export$ceb5fc4d82017d3b.PREFIX.length).trim());
                    const items = yield this.doGetSymbolPicks(symbolsPromise, query, undefined, picksCts.token);
                    if (token.isCancellationRequested) return;
                    if (items.length > 0) picker.items = items;
                    else if (query.original.length > 0) this.provideLabelPick(picker, (0, $58WHl.localize)("noMatchingSymbolResults", "No matching editor symbols"));
                    else this.provideLabelPick(picker, (0, $58WHl.localize)("noSymbolResults", "No editor symbols"));
                } finally{
                    if (!token.isCancellationRequested) picker.busy = false;
                }
            });
        disposables.add(picker.onDidChangeValue(()=>updatePickerItems()));
        updatePickerItems();
        // Reveal and decorate when active item changes
        // However, ignore the very first event so that
        // opening the picker is not immediately revealing
        // and decorating the first entry.
        let ignoreFirstActiveEvent = true;
        disposables.add(picker.onDidChangeActive(()=>{
            const [item] = picker.activeItems;
            if (item && item.range) {
                if (ignoreFirstActiveEvent) {
                    ignoreFirstActiveEvent = false;
                    return;
                }
                // Reveal
                editor.revealRangeInCenter(item.range.selection, 0 /* Smooth */ );
                // Decorate
                this.addDecorations(editor, item.range.decoration);
            }
        }));
        return disposables;
    }
    doGetSymbolPicks(symbolsPromise, query, options, token) {
        return $eac66e00bff0f7f3$var$__awaiter(this, void 0, void 0, function*() {
            const symbols = yield symbolsPromise;
            if (token.isCancellationRequested) return [];
            const filterBySymbolKind = query.original.indexOf($eac66e00bff0f7f3$export$ceb5fc4d82017d3b.SCOPE_PREFIX) === 0;
            const filterPos = filterBySymbolKind ? 1 : 0;
            // Split between symbol and container query
            let symbolQuery;
            let containerQuery;
            if (query.values && query.values.length > 1) {
                symbolQuery = (0, $cf714f33edb7e56c$export$20e144ebe86a7451)(query.values[0]); // symbol: only match on first part
                containerQuery = (0, $cf714f33edb7e56c$export$20e144ebe86a7451)(query.values.slice(1)); // container: match on all but first parts
            } else symbolQuery = query;
            // Convert to symbol picks and apply filtering
            const filteredSymbolPicks = [];
            for(let index = 0; index < symbols.length; index++){
                const symbol = symbols[index];
                const symbolLabel = (0, $9TEeL.trim)(symbol.name);
                const symbolLabelWithIcon = `$(symbol-${(0, $eKhCe.SymbolKinds).toString(symbol.kind) || "property"}) ${symbolLabel}`;
                const symbolLabelIconOffset = symbolLabelWithIcon.length - symbolLabel.length;
                let containerLabel = symbol.containerName;
                if (options === null || options === void 0 ? void 0 : options.extraContainerLabel) {
                    if (containerLabel) containerLabel = `${options.extraContainerLabel} • ${containerLabel}`;
                    else containerLabel = options.extraContainerLabel;
                }
                let symbolScore = undefined;
                let symbolMatches = undefined;
                let containerScore = undefined;
                let containerMatches = undefined;
                if (query.original.length > filterPos) {
                    // First: try to score on the entire query, it is possible that
                    // the symbol matches perfectly (e.g. searching for "change log"
                    // can be a match on a markdown symbol "change log"). In that
                    // case we want to skip the container query altogether.
                    let skipContainerQuery = false;
                    if (symbolQuery !== query) {
                        [symbolScore, symbolMatches] = (0, $cf714f33edb7e56c$export$e22f4f530abefc49)(symbolLabelWithIcon, Object.assign(Object.assign({}, query), {
                            values: undefined /* disable multi-query support */ 
                        }), filterPos, symbolLabelIconOffset);
                        if (typeof symbolScore === "number") skipContainerQuery = true; // since we consumed the query, skip any container matching
                    }
                    // Otherwise: score on the symbol query and match on the container later
                    if (typeof symbolScore !== "number") {
                        [symbolScore, symbolMatches] = (0, $cf714f33edb7e56c$export$e22f4f530abefc49)(symbolLabelWithIcon, symbolQuery, filterPos, symbolLabelIconOffset);
                        if (typeof symbolScore !== "number") continue;
                    }
                    // Score by container if specified
                    if (!skipContainerQuery && containerQuery) {
                        if (containerLabel && containerQuery.original.length > 0) [containerScore, containerMatches] = (0, $cf714f33edb7e56c$export$e22f4f530abefc49)(containerLabel, containerQuery);
                        if (typeof containerScore !== "number") continue;
                        if (typeof symbolScore === "number") symbolScore += containerScore; // boost symbolScore by containerScore
                    }
                }
                const deprecated = symbol.tags && symbol.tags.indexOf(1 /* Deprecated */ ) >= 0;
                filteredSymbolPicks.push({
                    index: index,
                    kind: symbol.kind,
                    score: symbolScore,
                    label: symbolLabelWithIcon,
                    ariaLabel: symbolLabel,
                    description: containerLabel,
                    highlights: deprecated ? undefined : {
                        label: symbolMatches,
                        description: containerMatches
                    },
                    range: {
                        selection: (0, $3HpR4.Range).collapseToStart(symbol.selectionRange),
                        decoration: symbol.range
                    },
                    strikethrough: deprecated,
                    buttons: (()=>{
                        var _a, _b;
                        const openSideBySideDirection = ((_a = this.options) === null || _a === void 0 ? void 0 : _a.openSideBySideDirection) ? (_b = this.options) === null || _b === void 0 ? void 0 : _b.openSideBySideDirection() : undefined;
                        if (!openSideBySideDirection) return undefined;
                        return [
                            {
                                iconClass: openSideBySideDirection === "right" ? (0, $8HDYc.Codicon).splitHorizontal.classNames : (0, $8HDYc.Codicon).splitVertical.classNames,
                                tooltip: openSideBySideDirection === "right" ? (0, $58WHl.localize)("openToSide", "Open to the Side") : (0, $58WHl.localize)("openToBottom", "Open to the Bottom")
                            }
                        ];
                    })()
                });
            }
            // Sort by score
            const sortedFilteredSymbolPicks = filteredSymbolPicks.sort((symbolA, symbolB)=>filterBySymbolKind ? this.compareByKindAndScore(symbolA, symbolB) : this.compareByScore(symbolA, symbolB));
            // Add separator for types
            // - @  only total number of symbols
            // - @: grouped by symbol kind
            let symbolPicks = [];
            if (filterBySymbolKind) {
                let lastSymbolKind = undefined;
                let lastSeparator = undefined;
                let lastSymbolKindCounter = 0;
                function updateLastSeparatorLabel() {
                    if (lastSeparator && typeof lastSymbolKind === "number" && lastSymbolKindCounter > 0) lastSeparator.label = (0, $9TEeL.format)($eac66e00bff0f7f3$var$NLS_SYMBOL_KIND_CACHE[lastSymbolKind] || $eac66e00bff0f7f3$var$FALLBACK_NLS_SYMBOL_KIND, lastSymbolKindCounter);
                }
                for (const symbolPick of sortedFilteredSymbolPicks){
                    // Found new kind
                    if (lastSymbolKind !== symbolPick.kind) {
                        // Update last separator with number of symbols we found for kind
                        updateLastSeparatorLabel();
                        lastSymbolKind = symbolPick.kind;
                        lastSymbolKindCounter = 1;
                        // Add new separator for new kind
                        lastSeparator = {
                            type: "separator"
                        };
                        symbolPicks.push(lastSeparator);
                    } else lastSymbolKindCounter++;
                    // Add to final result
                    symbolPicks.push(symbolPick);
                }
                // Update last separator with number of symbols we found for kind
                updateLastSeparatorLabel();
            } else if (sortedFilteredSymbolPicks.length > 0) symbolPicks = [
                {
                    label: (0, $58WHl.localize)("symbols", "symbols ({0})", filteredSymbolPicks.length),
                    type: "separator"
                },
                ...sortedFilteredSymbolPicks
            ];
            return symbolPicks;
        });
    }
    compareByScore(symbolA, symbolB) {
        if (typeof symbolA.score !== "number" && typeof symbolB.score === "number") return 1;
        else if (typeof symbolA.score === "number" && typeof symbolB.score !== "number") return -1;
        if (typeof symbolA.score === "number" && typeof symbolB.score === "number") {
            if (symbolA.score > symbolB.score) return -1;
            else if (symbolA.score < symbolB.score) return 1;
        }
        if (symbolA.index < symbolB.index) return -1;
        else if (symbolA.index > symbolB.index) return 1;
        return 0;
    }
    compareByKindAndScore(symbolA, symbolB) {
        const kindA = $eac66e00bff0f7f3$var$NLS_SYMBOL_KIND_CACHE[symbolA.kind] || $eac66e00bff0f7f3$var$FALLBACK_NLS_SYMBOL_KIND;
        const kindB = $eac66e00bff0f7f3$var$NLS_SYMBOL_KIND_CACHE[symbolB.kind] || $eac66e00bff0f7f3$var$FALLBACK_NLS_SYMBOL_KIND;
        // Sort by type first if scoped search
        const result = kindA.localeCompare(kindB);
        if (result === 0) return this.compareByScore(symbolA, symbolB);
        return result;
    }
    getDocumentSymbols(document, token) {
        return $eac66e00bff0f7f3$var$__awaiter(this, void 0, void 0, function*() {
            const model = yield (0, $b8d98dd64492c42e$export$23911836525ed42c).create(document, token);
            return token.isCancellationRequested ? [] : model.asListOfDocumentSymbols();
        });
    }
    constructor(options = Object.create(null)){
        super(options);
        this.options = options;
        this.options.canAcceptInBackground = true;
    }
}
$eac66e00bff0f7f3$export$ceb5fc4d82017d3b.PREFIX = "@";
$eac66e00bff0f7f3$export$ceb5fc4d82017d3b.SCOPE_PREFIX = ":";
$eac66e00bff0f7f3$export$ceb5fc4d82017d3b.PREFIX_BY_CATEGORY = `${$eac66e00bff0f7f3$export$ceb5fc4d82017d3b.PREFIX}${$eac66e00bff0f7f3$export$ceb5fc4d82017d3b.SCOPE_PREFIX}`;
// #region NLS Helpers
const $eac66e00bff0f7f3$var$FALLBACK_NLS_SYMBOL_KIND = (0, $58WHl.localize)("property", "properties ({0})");
const $eac66e00bff0f7f3$var$NLS_SYMBOL_KIND_CACHE = {
    [5 /* Method */ ]: (0, $58WHl.localize)("method", "methods ({0})"),
    [11 /* Function */ ]: (0, $58WHl.localize)("function", "functions ({0})"),
    [8 /* Constructor */ ]: (0, $58WHl.localize)("_constructor", "constructors ({0})"),
    [12 /* Variable */ ]: (0, $58WHl.localize)("variable", "variables ({0})"),
    [4 /* Class */ ]: (0, $58WHl.localize)("class", "classes ({0})"),
    [22 /* Struct */ ]: (0, $58WHl.localize)("struct", "structs ({0})"),
    [23 /* Event */ ]: (0, $58WHl.localize)("event", "events ({0})"),
    [24 /* Operator */ ]: (0, $58WHl.localize)("operator", "operators ({0})"),
    [10 /* Interface */ ]: (0, $58WHl.localize)("interface", "interfaces ({0})"),
    [2 /* Namespace */ ]: (0, $58WHl.localize)("namespace", "namespaces ({0})"),
    [3 /* Package */ ]: (0, $58WHl.localize)("package", "packages ({0})"),
    [25 /* TypeParameter */ ]: (0, $58WHl.localize)("typeParameter", "type parameters ({0})"),
    [1 /* Module */ ]: (0, $58WHl.localize)("modules", "modules ({0})"),
    [6 /* Property */ ]: (0, $58WHl.localize)("property", "properties ({0})"),
    [9 /* Enum */ ]: (0, $58WHl.localize)("enum", "enumerations ({0})"),
    [21 /* EnumMember */ ]: (0, $58WHl.localize)("enumMember", "enumeration members ({0})"),
    [14 /* String */ ]: (0, $58WHl.localize)("string", "strings ({0})"),
    [0 /* File */ ]: (0, $58WHl.localize)("file", "files ({0})"),
    [17 /* Array */ ]: (0, $58WHl.localize)("array", "arrays ({0})"),
    [15 /* Number */ ]: (0, $58WHl.localize)("number", "numbers ({0})"),
    [16 /* Boolean */ ]: (0, $58WHl.localize)("boolean", "booleans ({0})"),
    [18 /* Object */ ]: (0, $58WHl.localize)("object", "objects ({0})"),
    [19 /* Key */ ]: (0, $58WHl.localize)("key", "keys ({0})"),
    [7 /* Field */ ]: (0, $58WHl.localize)("field", "fields ({0})"),
    [13 /* Constant */ ]: (0, $58WHl.localize)("constant", "constants ({0})")
}; //#endregion



var $ddqyp = parcelRequire("ddqyp");

var $1Y6Wn = parcelRequire("1Y6Wn");

var $aXAVz = parcelRequire("aXAVz");

var $3ICxR = parcelRequire("3ICxR");

var $hzCik = parcelRequire("hzCik");

var $fSvkC = parcelRequire("fSvkC");

var $gGOeQ = parcelRequire("gGOeQ");

var $bdLce = parcelRequire("bdLce");

var $aqUJX = parcelRequire("aqUJX");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $f0960a28de32d203$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $f0960a28de32d203$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
let $f0960a28de32d203$export$1891c65a7e9a2e48 = class StandaloneGotoSymbolQuickAccessProvider extends (0, $eac66e00bff0f7f3$exports.AbstractGotoSymbolQuickAccessProvider) {
    get activeTextEditorControl() {
        return (0, $3ICxR.withNullAsUndefined)(this.editorService.getFocusedCodeEditor());
    }
    constructor(editorService){
        super();
        this.editorService = editorService;
        this.onDidActiveTextEditorControlChange = (0, $fSvkC.Event).None;
    }
};
$f0960a28de32d203$export$1891c65a7e9a2e48 = $f0960a28de32d203$var$__decorate([
    $f0960a28de32d203$var$__param(0, (0, $aXAVz.ICodeEditorService))
], $f0960a28de32d203$export$1891c65a7e9a2e48);
(0, $ddqyp.Registry).as((0, $1Y6Wn.Extensions).Quickaccess).registerQuickAccessProvider({
    ctor: $f0960a28de32d203$export$1891c65a7e9a2e48,
    prefix: (0, $eac66e00bff0f7f3$exports.AbstractGotoSymbolQuickAccessProvider).PREFIX,
    helpEntries: [
        {
            description: (0, $hzCik.QuickOutlineNLS).quickOutlineActionLabel,
            prefix: (0, $eac66e00bff0f7f3$exports.AbstractGotoSymbolQuickAccessProvider).PREFIX,
            needsEditor: true
        },
        {
            description: (0, $hzCik.QuickOutlineNLS).quickOutlineByCategoryActionLabel,
            prefix: (0, $eac66e00bff0f7f3$exports.AbstractGotoSymbolQuickAccessProvider).PREFIX_BY_CATEGORY,
            needsEditor: true
        }
    ]
});
class $f0960a28de32d203$export$83454a444c35f5c1 extends (0, $gGOeQ.EditorAction) {
    run(accessor) {
        accessor.get((0, $aqUJX.IQuickInputService)).quickAccess.show((0, $eac66e00bff0f7f3$exports.AbstractGotoSymbolQuickAccessProvider).PREFIX);
    }
    constructor(){
        super({
            id: "editor.action.quickOutline",
            label: (0, $hzCik.QuickOutlineNLS).quickOutlineActionLabel,
            alias: "Go to Symbol...",
            precondition: (0, $bdLce.EditorContextKeys).hasDocumentSymbolProvider,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).focus,
                primary: 3117 /* KeyO */ ,
                weight: 100 /* EditorContrib */ 
            },
            contextMenuOpts: {
                group: "navigation",
                order: 3
            }
        });
    }
}
(0, $gGOeQ.registerEditorAction)($f0960a28de32d203$export$83454a444c35f5c1);


var $914a2fdce956a3bb$exports = {};

var $ddqyp = parcelRequire("ddqyp");

var $1Y6Wn = parcelRequire("1Y6Wn");

var $hzCik = parcelRequire("hzCik");

var $aXAVz = parcelRequire("aXAVz");

var $16r9O = parcelRequire("16r9O");
var $19147d4a6835ac59$exports = {};

$parcel$export($19147d4a6835ac59$exports, "AbstractCommandsQuickAccessProvider", function () { return $19147d4a6835ac59$export$e2727582285dc787; }, function (v) { return $19147d4a6835ac59$export$e2727582285dc787 = v; });

var $4xCD7 = parcelRequire("4xCD7");

var $3ICxR = parcelRequire("3ICxR");

var $58WHl = parcelRequire("58WHl");
function $888c69c87d16a9fe$var$exceptionToErrorMessage(exception, verbose) {
    if (verbose && (exception.stack || exception.stacktrace)) return $58WHl.localize("stackTrace.format", "{0}: {1}", $888c69c87d16a9fe$var$detectSystemErrorMessage(exception), $888c69c87d16a9fe$var$stackToString(exception.stack) || $888c69c87d16a9fe$var$stackToString(exception.stacktrace));
    return $888c69c87d16a9fe$var$detectSystemErrorMessage(exception);
}
function $888c69c87d16a9fe$var$stackToString(stack) {
    if (Array.isArray(stack)) return stack.join("\n");
    return stack;
}
function $888c69c87d16a9fe$var$detectSystemErrorMessage(exception) {
    // See https://nodejs.org/api/errors.html#errors_class_system_error
    if (typeof exception.code === "string" && typeof exception.errno === "number" && typeof exception.syscall === "string") return $58WHl.localize("nodeExceptionMessage", "A system error occurred ({0})", exception.message);
    return exception.message || $58WHl.localize("error.defaultMessage", "An unknown error occurred. Please consult the log for more details.");
}
function $888c69c87d16a9fe$export$95506c204c060a3(error = null, verbose = false) {
    if (!error) return $58WHl.localize("error.defaultMessage", "An unknown error occurred. Please consult the log for more details.");
    if (Array.isArray(error)) {
        const errors = $4xCD7.coalesce(error);
        const msg = $888c69c87d16a9fe$export$95506c204c060a3(errors[0], verbose);
        if (errors.length > 1) return $58WHl.localize("error.moreErrors", "{0} ({1} errors in total)", msg, errors.length);
        return msg;
    }
    if ($3ICxR.isString(error)) return error;
    if (error.detail) {
        const detail = error.detail;
        if (detail.error) return $888c69c87d16a9fe$var$exceptionToErrorMessage(detail.error, verbose);
        if (detail.exception) return $888c69c87d16a9fe$var$exceptionToErrorMessage(detail.exception, verbose);
    }
    if (error.stack) return $888c69c87d16a9fe$var$exceptionToErrorMessage(error, verbose);
    if (error.message) return error.message;
    return $58WHl.localize("error.defaultMessage", "An unknown error occurred. Please consult the log for more details.");
}



var $g0782 = parcelRequire("g0782");

var $c8WLW = parcelRequire("c8WLW");

var $atiRx = parcelRequire("atiRx");

var $4HO2P = parcelRequire("4HO2P");

var $c6Gjt = parcelRequire("c6Gjt");

var $3ICxR = parcelRequire("3ICxR");

var $58WHl = parcelRequire("58WHl");

var $fAXtX = parcelRequire("fAXtX");

var $9BIBz = parcelRequire("9BIBz");

var $9rFZy = parcelRequire("9rFZy");

var $iZW67 = parcelRequire("iZW67");

var $gY9wc = parcelRequire("gY9wc");
var $edd00185db70cf2f$exports = {};

$parcel$export($edd00185db70cf2f$exports, "PickerQuickAccessProvider", function () { return $edd00185db70cf2f$export$76827b77f41011c2; }, function (v) { return $edd00185db70cf2f$export$76827b77f41011c2 = v; });

var $eFOsn = parcelRequire("eFOsn");

var $gnEXx = parcelRequire("gnEXx");

var $atiRx = parcelRequire("atiRx");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $edd00185db70cf2f$var$__awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var $edd00185db70cf2f$export$43c639767ba93dcc;
(function(TriggerAction) {
    /**
     * Do nothing after the button was clicked.
     */ TriggerAction[TriggerAction["NO_ACTION"] = 0] = "NO_ACTION";
    /**
     * Close the picker.
     */ TriggerAction[TriggerAction["CLOSE_PICKER"] = 1] = "CLOSE_PICKER";
    /**
     * Update the results of the picker.
     */ TriggerAction[TriggerAction["REFRESH_PICKER"] = 2] = "REFRESH_PICKER";
    /**
     * Remove the item from the picker.
     */ TriggerAction[TriggerAction["REMOVE_ITEM"] = 3] = "REMOVE_ITEM";
})($edd00185db70cf2f$export$43c639767ba93dcc || ($edd00185db70cf2f$export$43c639767ba93dcc = {}));
function $edd00185db70cf2f$var$isPicksWithActive(obj) {
    const candidate = obj;
    return Array.isArray(candidate.items);
}
function $edd00185db70cf2f$var$isFastAndSlowPicks(obj) {
    const candidate = obj;
    return !!candidate.picks && candidate.additionalPicks instanceof Promise;
}
class $edd00185db70cf2f$export$76827b77f41011c2 extends (0, $atiRx.Disposable) {
    provide(picker, token) {
        var _a;
        const disposables = new (0, $atiRx.DisposableStore)();
        // Apply options if any
        picker.canAcceptInBackground = !!((_a = this.options) === null || _a === void 0 ? void 0 : _a.canAcceptInBackground);
        // Disable filtering & sorting, we control the results
        picker.matchOnLabel = picker.matchOnDescription = picker.matchOnDetail = picker.sortByLabel = false;
        // Set initial picks and update on type
        let picksCts = undefined;
        const picksDisposable = disposables.add(new (0, $atiRx.MutableDisposable)());
        const updatePickerItems = ()=>$edd00185db70cf2f$var$__awaiter(this, void 0, void 0, function*() {
                const picksDisposables = picksDisposable.value = new (0, $atiRx.DisposableStore)();
                // Cancel any previous ask for picks and busy
                picksCts === null || picksCts === void 0 || picksCts.dispose(true);
                picker.busy = false;
                // Create new cancellation source for this run
                picksCts = new (0, $gnEXx.CancellationTokenSource)(token);
                // Collect picks and support both long running and short or combined
                const picksToken = picksCts.token;
                const picksFilter = picker.value.substr(this.prefix.length).trim();
                const providedPicks = this._getPicks(picksFilter, picksDisposables, picksToken);
                const applyPicks = (picks, skipEmpty)=>{
                    var _a;
                    let items;
                    let activeItem = undefined;
                    if ($edd00185db70cf2f$var$isPicksWithActive(picks)) {
                        items = picks.items;
                        activeItem = picks.active;
                    } else items = picks;
                    if (items.length === 0) {
                        if (skipEmpty) return false;
                        if (picksFilter.length > 0 && ((_a = this.options) === null || _a === void 0 ? void 0 : _a.noResultsPick)) items = [
                            this.options.noResultsPick
                        ];
                    }
                    picker.items = items;
                    if (activeItem) picker.activeItems = [
                        activeItem
                    ];
                    return true;
                };
                // No Picks
                if (providedPicks === null) ;
                else if ($edd00185db70cf2f$var$isFastAndSlowPicks(providedPicks)) {
                    let fastPicksApplied = false;
                    let slowPicksApplied = false;
                    yield Promise.all([
                        // Fast Picks: to reduce amount of flicker, we race against
                        // the slow picks over 500ms and then set the fast picks.
                        // If the slow picks are faster, we reduce the flicker by
                        // only setting the items once.
                        (()=>$edd00185db70cf2f$var$__awaiter(this, void 0, void 0, function*() {
                                yield (0, $eFOsn.timeout)($edd00185db70cf2f$export$76827b77f41011c2.FAST_PICKS_RACE_DELAY);
                                if (picksToken.isCancellationRequested) return;
                                if (!slowPicksApplied) fastPicksApplied = applyPicks(providedPicks.picks, true);
                            }))(),
                        // Slow Picks: we await the slow picks and then set them at
                        // once together with the fast picks, but only if we actually
                        // have additional results.
                        (()=>$edd00185db70cf2f$var$__awaiter(this, void 0, void 0, function*() {
                                picker.busy = true;
                                try {
                                    const awaitedAdditionalPicks = yield providedPicks.additionalPicks;
                                    if (picksToken.isCancellationRequested) return;
                                    let picks;
                                    let activePick = undefined;
                                    if ($edd00185db70cf2f$var$isPicksWithActive(providedPicks.picks)) {
                                        picks = providedPicks.picks.items;
                                        activePick = providedPicks.picks.active;
                                    } else picks = providedPicks.picks;
                                    let additionalPicks;
                                    let additionalActivePick = undefined;
                                    if ($edd00185db70cf2f$var$isPicksWithActive(awaitedAdditionalPicks)) {
                                        additionalPicks = awaitedAdditionalPicks.items;
                                        additionalActivePick = awaitedAdditionalPicks.active;
                                    } else additionalPicks = awaitedAdditionalPicks;
                                    if (additionalPicks.length > 0 || !fastPicksApplied) {
                                        // If we do not have any activePick or additionalActivePick
                                        // we try to preserve the currently active pick from the
                                        // fast results. This fixes an issue where the user might
                                        // have made a pick active before the additional results
                                        // kick in.
                                        // See https://github.com/microsoft/vscode/issues/102480
                                        let fallbackActivePick = undefined;
                                        if (!activePick && !additionalActivePick) {
                                            const fallbackActivePickCandidate = picker.activeItems[0];
                                            if (fallbackActivePickCandidate && picks.indexOf(fallbackActivePickCandidate) !== -1) fallbackActivePick = fallbackActivePickCandidate;
                                        }
                                        applyPicks({
                                            items: [
                                                ...picks,
                                                ...additionalPicks
                                            ],
                                            active: activePick || additionalActivePick || fallbackActivePick
                                        });
                                    }
                                } finally{
                                    if (!picksToken.isCancellationRequested) picker.busy = false;
                                    slowPicksApplied = true;
                                }
                            }))()
                    ]);
                } else if (!(providedPicks instanceof Promise)) applyPicks(providedPicks);
                else {
                    picker.busy = true;
                    try {
                        const awaitedPicks = yield providedPicks;
                        if (picksToken.isCancellationRequested) return;
                        applyPicks(awaitedPicks);
                    } finally{
                        if (!picksToken.isCancellationRequested) picker.busy = false;
                    }
                }
            });
        disposables.add(picker.onDidChangeValue(()=>updatePickerItems()));
        updatePickerItems();
        // Accept the pick on accept and hide picker
        disposables.add(picker.onDidAccept((event)=>{
            const [item] = picker.selectedItems;
            if (typeof (item === null || item === void 0 ? void 0 : item.accept) === "function") {
                if (!event.inBackground) picker.hide(); // hide picker unless we accept in background
                item.accept(picker.keyMods, event);
            }
        }));
        // Trigger the pick with button index if button triggered
        disposables.add(picker.onDidTriggerItemButton(({ button: button , item: item  })=>$edd00185db70cf2f$var$__awaiter(this, void 0, void 0, function*() {
                var _b, _c;
                if (typeof item.trigger === "function") {
                    const buttonIndex = (_c = (_b = item.buttons) === null || _b === void 0 ? void 0 : _b.indexOf(button)) !== null && _c !== void 0 ? _c : -1;
                    if (buttonIndex >= 0) {
                        const result = item.trigger(buttonIndex, picker.keyMods);
                        const action = typeof result === "number" ? result : yield result;
                        if (token.isCancellationRequested) return;
                        switch(action){
                            case $edd00185db70cf2f$export$43c639767ba93dcc.NO_ACTION:
                                break;
                            case $edd00185db70cf2f$export$43c639767ba93dcc.CLOSE_PICKER:
                                picker.hide();
                                break;
                            case $edd00185db70cf2f$export$43c639767ba93dcc.REFRESH_PICKER:
                                updatePickerItems();
                                break;
                            case $edd00185db70cf2f$export$43c639767ba93dcc.REMOVE_ITEM:
                                const index = picker.items.indexOf(item);
                                if (index !== -1) {
                                    const items = picker.items.slice();
                                    const removed = items.splice(index, 1);
                                    const activeItems = picker.activeItems.filter((activeItem)=>activeItem !== removed[0]);
                                    const keepScrollPositionBefore = picker.keepScrollPosition;
                                    picker.keepScrollPosition = true;
                                    picker.items = items;
                                    if (activeItems) picker.activeItems = activeItems;
                                    picker.keepScrollPosition = keepScrollPositionBefore;
                                }
                                break;
                        }
                    }
                }
            })));
        return disposables;
    }
    constructor(prefix, options){
        super();
        this.prefix = prefix;
        this.options = options;
    }
}
$edd00185db70cf2f$export$76827b77f41011c2.FAST_PICKS_RACE_DELAY = 200; // timeout before we accept fast results before slow results are present



var $6XVdL = parcelRequire("6XVdL");

var $2EG7I = parcelRequire("2EG7I");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $19147d4a6835ac59$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $19147d4a6835ac59$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var $19147d4a6835ac59$var$__awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
let $19147d4a6835ac59$export$e2727582285dc787 = class AbstractCommandsQuickAccessProvider extends (0, $edd00185db70cf2f$exports.PickerQuickAccessProvider) {
    _getPicks(filter, disposables, token) {
        return $19147d4a6835ac59$var$__awaiter(this, void 0, void 0, function*() {
            // Ask subclass for all command picks
            const allCommandPicks = yield this.getCommandPicks(disposables, token);
            if (token.isCancellationRequested) return [];
            // Filter
            const filteredCommandPicks = [];
            for (const commandPick of allCommandPicks){
                const labelHighlights = (0, $3ICxR.withNullAsUndefined)(AbstractCommandsQuickAccessProvider.WORD_FILTER(filter, commandPick.label));
                const aliasHighlights = commandPick.commandAlias ? (0, $3ICxR.withNullAsUndefined)(AbstractCommandsQuickAccessProvider.WORD_FILTER(filter, commandPick.commandAlias)) : undefined;
                // Add if matching in label or alias
                if (labelHighlights || aliasHighlights) {
                    commandPick.highlights = {
                        label: labelHighlights,
                        detail: this.options.showAlias ? aliasHighlights : undefined
                    };
                    filteredCommandPicks.push(commandPick);
                } else if (filter === commandPick.commandId) filteredCommandPicks.push(commandPick);
            }
            // Add description to commands that have duplicate labels
            const mapLabelToCommand = new Map();
            for (const commandPick1 of filteredCommandPicks){
                const existingCommandForLabel = mapLabelToCommand.get(commandPick1.label);
                if (existingCommandForLabel) {
                    commandPick1.description = commandPick1.commandId;
                    existingCommandForLabel.description = existingCommandForLabel.commandId;
                } else mapLabelToCommand.set(commandPick1.label, commandPick1);
            }
            // Sort by MRU order and fallback to name otherwise
            filteredCommandPicks.sort((commandPickA, commandPickB)=>{
                const commandACounter = this.commandsHistory.peek(commandPickA.commandId);
                const commandBCounter = this.commandsHistory.peek(commandPickB.commandId);
                if (commandACounter && commandBCounter) return commandACounter > commandBCounter ? -1 : 1; // use more recently used command before older
                if (commandACounter) return -1; // first command was used, so it wins over the non used one
                if (commandBCounter) return 1; // other command was used so it wins over the command
                // both commands were never used, so we sort by name
                return commandPickA.label.localeCompare(commandPickB.label);
            });
            const commandPicks = [];
            let addSeparator = false;
            for(let i = 0; i < filteredCommandPicks.length; i++){
                const commandPick2 = filteredCommandPicks[i];
                const keybinding = this.keybindingService.lookupKeybinding(commandPick2.commandId);
                const ariaLabel = keybinding ? (0, $58WHl.localize)("commandPickAriaLabelWithKeybinding", "{0}, {1}", commandPick2.label, keybinding.getAriaLabel()) : commandPick2.label;
                // Separator: recently used
                if (i === 0 && this.commandsHistory.peek(commandPick2.commandId)) {
                    commandPicks.push({
                        type: "separator",
                        label: (0, $58WHl.localize)("recentlyUsed", "recently used")
                    });
                    addSeparator = true;
                }
                // Separator: other commands
                if (i !== 0 && addSeparator && !this.commandsHistory.peek(commandPick2.commandId)) {
                    commandPicks.push({
                        type: "separator",
                        label: (0, $58WHl.localize)("morecCommands", "other commands")
                    });
                    addSeparator = false; // only once
                }
                // Command
                commandPicks.push(Object.assign(Object.assign({}, commandPick2), {
                    ariaLabel: ariaLabel,
                    detail: this.options.showAlias && commandPick2.commandAlias !== commandPick2.label ? commandPick2.commandAlias : undefined,
                    keybinding: keybinding,
                    accept: ()=>$19147d4a6835ac59$var$__awaiter(this, void 0, void 0, function*() {
                            // Add to history
                            this.commandsHistory.push(commandPick2.commandId);
                            // Telementry
                            this.telemetryService.publicLog2("workbenchActionExecuted", {
                                id: commandPick2.commandId,
                                from: "quick open"
                            });
                            // Run
                            try {
                                yield this.commandService.executeCommand(commandPick2.commandId);
                            } catch (error) {
                                if (!(0, $g0782.isPromiseCanceledError)(error)) this.dialogService.show((0, $c6Gjt.default).Error, (0, $58WHl.localize)("canNotRun", "Command '{0}' resulted in an error ({1})", commandPick2.label, (0, $888c69c87d16a9fe$export$95506c204c060a3)(error)));
                            }
                        })
                }));
            }
            return commandPicks;
        });
    }
    constructor(options, instantiationService, keybindingService, commandService, telemetryService, dialogService){
        super(AbstractCommandsQuickAccessProvider.PREFIX, options);
        this.instantiationService = instantiationService;
        this.keybindingService = keybindingService;
        this.commandService = commandService;
        this.telemetryService = telemetryService;
        this.dialogService = dialogService;
        this.commandsHistory = this._register(this.instantiationService.createInstance($19147d4a6835ac59$export$57d1125e86e67be7));
        this.options = options;
    }
};
$19147d4a6835ac59$export$e2727582285dc787.PREFIX = ">";
$19147d4a6835ac59$export$e2727582285dc787.WORD_FILTER = (0, $c8WLW.or)((0, $c8WLW.matchesPrefix), (0, $c8WLW.matchesWords), (0, $c8WLW.matchesContiguousSubString));
$19147d4a6835ac59$export$e2727582285dc787 = $19147d4a6835ac59$var$__decorate([
    $19147d4a6835ac59$var$__param(1, (0, $iZW67.IInstantiationService)),
    $19147d4a6835ac59$var$__param(2, (0, $gY9wc.IKeybindingService)),
    $19147d4a6835ac59$var$__param(3, (0, $fAXtX.ICommandService)),
    $19147d4a6835ac59$var$__param(4, (0, $2EG7I.ITelemetryService)),
    $19147d4a6835ac59$var$__param(5, (0, $9rFZy.IDialogService))
], $19147d4a6835ac59$export$e2727582285dc787);
let $19147d4a6835ac59$export$57d1125e86e67be7 = class CommandsHistory extends (0, $atiRx.Disposable) {
    registerListeners() {
        this._register(this.configurationService.onDidChangeConfiguration(()=>this.updateConfiguration()));
    }
    updateConfiguration() {
        this.configuredCommandsHistoryLength = CommandsHistory.getConfiguredCommandHistoryLength(this.configurationService);
        if (CommandsHistory.cache && CommandsHistory.cache.limit !== this.configuredCommandsHistoryLength) {
            CommandsHistory.cache.limit = this.configuredCommandsHistoryLength;
            CommandsHistory.saveState(this.storageService);
        }
    }
    load() {
        const raw = this.storageService.get(CommandsHistory.PREF_KEY_CACHE, 0 /* GLOBAL */ );
        let serializedCache;
        if (raw) try {
            serializedCache = JSON.parse(raw);
        } catch (error) {
        // invalid data
        }
        const cache = CommandsHistory.cache = new (0, $4HO2P.LRUCache)(this.configuredCommandsHistoryLength, 1);
        if (serializedCache) {
            let entries;
            if (serializedCache.usesLRU) entries = serializedCache.entries;
            else entries = serializedCache.entries.sort((a, b)=>a.value - b.value);
            entries.forEach((entry)=>cache.set(entry.key, entry.value));
        }
        CommandsHistory.counter = this.storageService.getNumber(CommandsHistory.PREF_KEY_COUNTER, 0 /* GLOBAL */ , CommandsHistory.counter);
    }
    push(commandId) {
        if (!CommandsHistory.cache) return;
        CommandsHistory.cache.set(commandId, CommandsHistory.counter++); // set counter to command
        CommandsHistory.saveState(this.storageService);
    }
    peek(commandId) {
        var _a;
        return (_a = CommandsHistory.cache) === null || _a === void 0 ? void 0 : _a.peek(commandId);
    }
    static saveState(storageService) {
        if (!CommandsHistory.cache) return;
        const serializedCache = {
            usesLRU: true,
            entries: []
        };
        CommandsHistory.cache.forEach((value, key)=>serializedCache.entries.push({
                key: key,
                value: value
            }));
        storageService.store(CommandsHistory.PREF_KEY_CACHE, JSON.stringify(serializedCache), 0 /* GLOBAL */ , 0 /* USER */ );
        storageService.store(CommandsHistory.PREF_KEY_COUNTER, CommandsHistory.counter, 0 /* GLOBAL */ , 0 /* USER */ );
    }
    static getConfiguredCommandHistoryLength(configurationService) {
        var _a, _b;
        const config = configurationService.getValue();
        const configuredCommandHistoryLength = (_b = (_a = config.workbench) === null || _a === void 0 ? void 0 : _a.commandPalette) === null || _b === void 0 ? void 0 : _b.history;
        if (typeof configuredCommandHistoryLength === "number") return configuredCommandHistoryLength;
        return CommandsHistory.DEFAULT_COMMANDS_HISTORY_LENGTH;
    }
    constructor(storageService, configurationService){
        super();
        this.storageService = storageService;
        this.configurationService = configurationService;
        this.configuredCommandsHistoryLength = 0;
        this.updateConfiguration();
        this.load();
        this.registerListeners();
    }
};
$19147d4a6835ac59$export$57d1125e86e67be7.DEFAULT_COMMANDS_HISTORY_LENGTH = 50;
$19147d4a6835ac59$export$57d1125e86e67be7.PREF_KEY_CACHE = "commandPalette.mru.cache";
$19147d4a6835ac59$export$57d1125e86e67be7.PREF_KEY_COUNTER = "commandPalette.mru.counter";
$19147d4a6835ac59$export$57d1125e86e67be7.counter = 1;
$19147d4a6835ac59$export$57d1125e86e67be7 = $19147d4a6835ac59$var$__decorate([
    $19147d4a6835ac59$var$__param(0, (0, $6XVdL.IStorageService)),
    $19147d4a6835ac59$var$__param(1, (0, $9BIBz.IConfigurationService))
], $19147d4a6835ac59$export$57d1125e86e67be7);


class $a98f626b2460e750$export$e085036133fffa80 extends (0, $19147d4a6835ac59$exports.AbstractCommandsQuickAccessProvider) {
    getCodeEditorCommandPicks() {
        const activeTextEditorControl = this.activeTextEditorControl;
        if (!activeTextEditorControl) return [];
        const editorCommandPicks = [];
        for (const editorAction of activeTextEditorControl.getSupportedActions())editorCommandPicks.push({
            commandId: editorAction.id,
            commandAlias: editorAction.alias,
            label: (0, $16r9O.stripIcons)(editorAction.label) || editorAction.id
        });
        return editorCommandPicks;
    }
    constructor(options, instantiationService, keybindingService, commandService, telemetryService, dialogService){
        super(options, instantiationService, keybindingService, commandService, telemetryService, dialogService);
    }
}



var $3ICxR = parcelRequire("3ICxR");

var $iZW67 = parcelRequire("iZW67");

var $gY9wc = parcelRequire("gY9wc");

var $fAXtX = parcelRequire("fAXtX");

var $2EG7I = parcelRequire("2EG7I");

var $9rFZy = parcelRequire("9rFZy");

var $gGOeQ = parcelRequire("gGOeQ");

var $bdLce = parcelRequire("bdLce");

var $aqUJX = parcelRequire("aqUJX");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $914a2fdce956a3bb$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $914a2fdce956a3bb$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var $914a2fdce956a3bb$var$__awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
let $914a2fdce956a3bb$export$b53f517d2ef5810d = class StandaloneCommandsQuickAccessProvider extends (0, $a98f626b2460e750$export$e085036133fffa80) {
    get activeTextEditorControl() {
        return (0, $3ICxR.withNullAsUndefined)(this.codeEditorService.getFocusedCodeEditor());
    }
    getCommandPicks() {
        return $914a2fdce956a3bb$var$__awaiter(this, void 0, void 0, function*() {
            return this.getCodeEditorCommandPicks();
        });
    }
    constructor(instantiationService, codeEditorService, keybindingService, commandService, telemetryService, dialogService){
        super({
            showAlias: false
        }, instantiationService, keybindingService, commandService, telemetryService, dialogService);
        this.codeEditorService = codeEditorService;
    }
};
$914a2fdce956a3bb$export$b53f517d2ef5810d = $914a2fdce956a3bb$var$__decorate([
    $914a2fdce956a3bb$var$__param(0, (0, $iZW67.IInstantiationService)),
    $914a2fdce956a3bb$var$__param(1, (0, $aXAVz.ICodeEditorService)),
    $914a2fdce956a3bb$var$__param(2, (0, $gY9wc.IKeybindingService)),
    $914a2fdce956a3bb$var$__param(3, (0, $fAXtX.ICommandService)),
    $914a2fdce956a3bb$var$__param(4, (0, $2EG7I.ITelemetryService)),
    $914a2fdce956a3bb$var$__param(5, (0, $9rFZy.IDialogService))
], $914a2fdce956a3bb$export$b53f517d2ef5810d);
(0, $ddqyp.Registry).as((0, $1Y6Wn.Extensions).Quickaccess).registerQuickAccessProvider({
    ctor: $914a2fdce956a3bb$export$b53f517d2ef5810d,
    prefix: $914a2fdce956a3bb$export$b53f517d2ef5810d.PREFIX,
    helpEntries: [
        {
            description: (0, $hzCik.QuickCommandNLS).quickCommandHelp,
            needsEditor: true
        }
    ]
});
class $914a2fdce956a3bb$export$83454a444c35f5c1 extends (0, $gGOeQ.EditorAction) {
    run(accessor) {
        accessor.get((0, $aqUJX.IQuickInputService)).quickAccess.show($914a2fdce956a3bb$export$b53f517d2ef5810d.PREFIX);
    }
    constructor(){
        super({
            id: "editor.action.quickCommand",
            label: (0, $hzCik.QuickCommandNLS).quickCommandActionLabel,
            alias: "Command Palette",
            precondition: undefined,
            kbOpts: {
                kbExpr: (0, $bdLce.EditorContextKeys).focus,
                primary: 59 /* F1 */ ,
                weight: 100 /* EditorContrib */ 
            },
            contextMenuOpts: {
                group: "z_commands",
                order: 1
            }
        });
    }
}
(0, $gGOeQ.registerEditorAction)($914a2fdce956a3bb$export$83454a444c35f5c1);


var $e62823ec82bdb659$exports = {};

var $gGOeQ = parcelRequire("gGOeQ");

var $aXAVz = parcelRequire("aXAVz");


var $9BIBz = parcelRequire("9BIBz");

var $bRtox = parcelRequire("bRtox");

var $iZW67 = parcelRequire("iZW67");

var $dgZ0t = parcelRequire("dgZ0t");

var $6XVdL = parcelRequire("6XVdL");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var $e62823ec82bdb659$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $e62823ec82bdb659$var$__param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
let $e62823ec82bdb659$export$79f48fa51423fd3f = class StandaloneReferencesController extends (0, $aaffe83f20c0dfa0$exports.ReferencesController) {
    constructor(editor, contextKeyService, editorService, notificationService, instantiationService, storageService, configurationService){
        super(true, editor, contextKeyService, editorService, notificationService, instantiationService, storageService, configurationService);
    }
};
$e62823ec82bdb659$export$79f48fa51423fd3f = $e62823ec82bdb659$var$__decorate([
    $e62823ec82bdb659$var$__param(1, (0, $bRtox.IContextKeyService)),
    $e62823ec82bdb659$var$__param(2, (0, $aXAVz.ICodeEditorService)),
    $e62823ec82bdb659$var$__param(3, (0, $dgZ0t.INotificationService)),
    $e62823ec82bdb659$var$__param(4, (0, $iZW67.IInstantiationService)),
    $e62823ec82bdb659$var$__param(5, (0, $6XVdL.IStorageService)),
    $e62823ec82bdb659$var$__param(6, (0, $9BIBz.IConfigurationService))
], $e62823ec82bdb659$export$79f48fa51423fd3f);
(0, $gGOeQ.registerEditorContribution)((0, $aaffe83f20c0dfa0$exports.ReferencesController).ID, $e62823ec82bdb659$export$79f48fa51423fd3f);



var $gGOeQ = parcelRequire("gGOeQ");

var $bnqXG = parcelRequire("bnqXG");

var $hzCik = parcelRequire("hzCik");
class $5c0bc7cf102994f1$var$ToggleHighContrast extends (0, $gGOeQ.EditorAction) {
    run(accessor, editor) {
        const standaloneThemeService = accessor.get((0, $bnqXG.IStandaloneThemeService));
        if (this._originalThemeName) {
            // We must toggle back to the integrator's theme
            standaloneThemeService.setTheme(this._originalThemeName);
            this._originalThemeName = null;
        } else {
            this._originalThemeName = standaloneThemeService.getColorTheme().themeName;
            standaloneThemeService.setTheme("hc-black");
        }
    }
    constructor(){
        super({
            id: "editor.action.toggleHighContrast",
            label: (0, $hzCik.ToggleHighContrastNLS).toggleHighContrast,
            alias: "Toggle High Contrast Theme",
            precondition: undefined
        });
        this._originalThemeName = null;
    }
}
(0, $gGOeQ.registerEditorAction)($5c0bc7cf102994f1$var$ToggleHighContrast);


parcelRequire("jBoEN");




var $jBoEN = parcelRequire("jBoEN");
self.MonacoEnvironment = {
    getWorkerUrl: function(moduleId, label) {
        return EditorWorker;
    }
};
// Defer monaco render to avoid blocking main thread
setTimeout(()=>{
    window.editorHook = $jBoEN.editor.create(document.getElementById("monaco-container"), {
        value: [
            "Open a file !"
        ].join("\n"),
        language: "lua",
        theme: "vs-dark",
        automaticLayout: true
    });
}, 100);


var $6197a2dfc0507ca1$exports = {};


$6197a2dfc0507ca1$exports = (parcelRequire("iPADQ")).getBundleURL("3djw2") + (parcelRequire("9u2OH")).resolve("5EdfK");


let $920ed1d026771995$var$currentFile;
function $920ed1d026771995$var$handleClickBtn(event) {
    if (!$920ed1d026771995$var$currentFile) return;
    let dataElement = event.target.closest(".toolbar-btn");
    const action = dataElement.getAttribute("data-action");
    if (action === "delete") Events.Call("NIDE:DELETE_FILE");
    if (action === "save") Events.Call("NIDE:SAVE_FILE", window.editorHook.getValue());
    if (action === "reload-pkg") Events.Call("NIDE:PKG_RELOAD");
// console.log("Clicked action button", dataElement);
}
function $920ed1d026771995$export$a4fdc40799f4f852() {
    const content = `
        <div>
        <img src="${(0, (/*@__PURE__*/$parcel$interopDefault($6197a2dfc0507ca1$exports)))}" height="32"/></div>
        <div class="toolbar-btn" data-action="save">
            Save
        </div>
        <div class="toolbar-btn" data-action="delete">
            Delete
        </div>
        <div class="toolbar-btn " data-action="reload-pkg">
            Reload
        </div>
    `;
    const container = document.getElementById("toolbar-container");
    container.innerHTML = content;
    container.addEventListener("click", $920ed1d026771995$var$handleClickBtn);
}
Events.Subscribe("NIDE:JS_CURRENT_FILE_CHANGED", (_currentFile)=>{
    $920ed1d026771995$var$currentFile = JSON.parse(_currentFile);
    console.log("Current file : ", JSON.stringify($920ed1d026771995$var$currentFile));
    $920ed1d026771995$export$a4fdc40799f4f852();
});



var $jBoEN = parcelRequire("jBoEN");
const $3855d5047a68ef05$var$extToLanguage = {
    lua: "lua",
    js: "javascript",
    ts: "typescript",
    toml: "toml",
    json: "json",
    css: "css",
    html: "html",
    htm: "html"
};
document.addEventListener("DOMContentLoaded", ()=>{
    (0, $920ed1d026771995$export$a4fdc40799f4f852)();
});
Events.Subscribe("NIDE:JS_SEND_SEND_FILE_CONTENTS", (data)=>{
    // console.log("data : ", data);
    const [fileContent, fileExt] = JSON.parse(data);
    console.log("Monaco content : ", window.editorHook);
    window.editorHook.setValue(fileContent);
    const editorModel = window.editorHook.getModel();
    $jBoEN.editor.setModelLanguage(editorModel, $3855d5047a68ef05$var$extToLanguage[fileExt || "lua"]);
});

})();
